#!/usr/bin/bash
file="${XDG_RUNTIME_DIR:-/tmp}/dmFyIF-ags.js"

cat <<EOF | base64 --decode > $file
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __knownSymbol = (name, symbol) => (symbol = Symbol[name]) ? symbol : Symbol.for("Symbol." + name);
var __typeError = (msg) => {
  throw TypeError(msg);
};
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __decoratorStart = (base) => [, , , __create(base?.[__knownSymbol("metadata")] ?? null)];
var __decoratorStrings = ["class", "method", "getter", "setter", "accessor", "field", "value", "get", "set"];
var __expectFn = (fn) => fn !== void 0 && typeof fn !== "function" ? __typeError("Function expected") : fn;
var __decoratorContext = (kind, name, done, metadata, fns) => ({ kind: __decoratorStrings[kind], name, metadata, addInitializer: (fn) => done._ ? __typeError("Already initialized") : fns.push(__expectFn(fn || null)) });
var __decoratorMetadata = (array, target) => __defNormalProp(target, __knownSymbol("metadata"), array[3]);
var __runInitializers = (array, flags, self, value) => {
  for (var i = 0, fns = array[flags >> 1], n = fns && fns.length; i < n; i++) flags & 1 ? fns[i].call(self) : value = fns[i].call(self, value);
  return value;
};
var __decorateElement = (array, flags, name, decorators, target, extra) => {
  var fn, it, done, ctx, access, k = flags & 7, s = !!(flags & 8), p = !!(flags & 16);
  var j = k > 3 ? array.length + 1 : k ? s ? 1 : 2 : 0, key = __decoratorStrings[k + 5];
  var initializers = k > 3 && (array[j - 1] = []), extraInitializers = array[j] || (array[j] = []);
  var desc = k && (!p && !s && (target = target.prototype), k < 5 && (k > 3 || !p) && __getOwnPropDesc(k < 4 ? target : { get [name]() {
    return __privateGet(this, extra);
  }, set [name](x) {
    return __privateSet(this, extra, x);
  } }, name));
  k ? p && k < 4 && __name(extra, (k > 2 ? "set " : k > 1 ? "get " : "") + name) : __name(target, name);
  for (var i = decorators.length - 1; i >= 0; i--) {
    ctx = __decoratorContext(k, name, done = {}, array[3], extraInitializers);
    if (k) {
      ctx.static = s, ctx.private = p, access = ctx.access = { has: p ? (x) => __privateIn(target, x) : (x) => name in x };
      if (k ^ 3) access.get = p ? (x) => (k ^ 1 ? __privateGet : __privateMethod)(x, target, k ^ 4 ? extra : desc.get) : (x) => x[name];
      if (k > 2) access.set = p ? (x, y) => __privateSet(x, target, y, k ^ 4 ? extra : desc.set) : (x, y) => x[name] = y;
    }
    it = (0, decorators[i])(k ? k < 4 ? p ? extra : desc[key] : k > 4 ? void 0 : { get: desc.get, set: desc.set } : target, ctx), done._ = 1;
    if (k ^ 4 || it === void 0) __expectFn(it) && (k > 4 ? initializers.unshift(it) : k ? p ? extra = it : desc[key] = it : target = it);
    else if (typeof it !== "object" || it === null) __typeError("Object expected");
    else __expectFn(fn = it.get) && (desc.get = fn), __expectFn(fn = it.set) && (desc.set = fn), __expectFn(fn = it.init) && initializers.unshift(fn);
  }
  return k || __decoratorMetadata(array, target), desc && __defProp(target, name, desc), p ? k ^ 4 ? extra : desc : target;
};
var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
var __privateIn = (member, obj) => Object(obj) !== obj ? __typeError('Cannot use the "in" operator on this value') : member.has(obj);
var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
var __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
var __privateMethod = (obj, member, method) => (__accessCheck(obj, member, "access private method"), method);

// ../../../../usr/share/ags/js/src/gtk4/app.ts
import GLib from "gi://GLib?version=2.0";
import Gtk from "gi://Gtk?version=4.0";
import Astal from "gi://Astal?version=4.0";

// ../../../../usr/share/ags/js/src/overrides.ts
function snakeify(str) {
  return str.replace(/([a-z])([A-Z])/g, "$1_$2").replaceAll("-", "_").toLowerCase();
}
async function suppress(mod2, patch2) {
  return mod2.then((m) => patch2(m.default)).catch(() => void 0);
}
function patch(proto, prop) {
  Object.defineProperty(proto, prop, {
    get() {
      return this[`get_${snakeify(prop)}`]();
    }
  });
}
await suppress(import("gi://AstalApps"), ({ Apps: Apps2, Application }) => {
  patch(Apps2.prototype, "list");
  patch(Application.prototype, "keywords");
  patch(Application.prototype, "categories");
});
await suppress(import("gi://AstalBattery"), ({ UPower }) => {
  patch(UPower.prototype, "devices");
});
await suppress(import("gi://AstalBluetooth"), ({ Adapter, Bluetooth, Device }) => {
  patch(Adapter.prototype, "uuids");
  patch(Bluetooth.prototype, "adapters");
  patch(Bluetooth.prototype, "devices");
  patch(Device.prototype, "uuids");
});
await suppress(import("gi://AstalHyprland"), ({ Hyprland: Hyprland4, Monitor, Workspace }) => {
  patch(Hyprland4.prototype, "binds");
  patch(Hyprland4.prototype, "monitors");
  patch(Hyprland4.prototype, "workspaces");
  patch(Hyprland4.prototype, "clients");
  patch(Monitor.prototype, "availableModes");
  patch(Monitor.prototype, "available_modes");
  patch(Workspace.prototype, "clients");
});
await suppress(import("gi://AstalMpris"), ({ Mpris: Mpris4, Player }) => {
  patch(Mpris4.prototype, "players");
  patch(Player.prototype, "supported_uri_schemes");
  patch(Player.prototype, "supportedUriSchemes");
  patch(Player.prototype, "supported_mime_types");
  patch(Player.prototype, "supportedMimeTypes");
  patch(Player.prototype, "comments");
});
await suppress(import("gi://AstalNetwork"), ({ Wifi }) => {
  patch(Wifi.prototype, "access_points");
  patch(Wifi.prototype, "accessPoints");
});
await suppress(import("gi://AstalNotifd"), ({ Notifd, Notification }) => {
  patch(Notifd.prototype, "notifications");
  patch(Notification.prototype, "actions");
});
await suppress(import("gi://AstalPowerProfiles"), ({ PowerProfiles }) => {
  patch(PowerProfiles.prototype, "actions");
});
await suppress(import("gi://AstalWp"), ({ Wp, Audio, Video }) => {
  patch(Wp.prototype, "endpoints");
  patch(Wp.prototype, "devices");
  patch(Audio.prototype, "streams");
  patch(Audio.prototype, "recorders");
  patch(Audio.prototype, "microphones");
  patch(Audio.prototype, "speakers");
  patch(Audio.prototype, "devices");
  patch(Video.prototype, "streams");
  patch(Video.prototype, "recorders");
  patch(Video.prototype, "sinks");
  patch(Video.prototype, "sources");
  patch(Video.prototype, "devices");
});
await suppress(import("gi://AstalTray"), ({ Tray: Tray2 }) => {
  patch(Tray2.prototype, "items");
});

// ../../../../usr/share/ags/js/src/_app.ts
import { setConsoleLogDomain } from "console";
import { exit, programArgs } from "system";

// ../../../../usr/share/ags/js/gnim/src/jsx/scope.ts
var Scope = class _Scope {
  constructor(parent) {
    this.contexts = /* @__PURE__ */ new Map();
    this.cleanups = /* @__PURE__ */ new Set();
    this.mounts = /* @__PURE__ */ new Set();
    this.mounted = false;
    this.parent = parent;
  }
  onCleanup(callback) {
    this.cleanups?.add(callback);
  }
  onMount(callback) {
    if (this.parent && !this.parent.mounted) {
      this.parent.onMount(callback);
    } else {
      this.mounts.add(callback);
    }
  }
  run(fn) {
    const prev = _Scope.current;
    _Scope.current = this;
    try {
      return fn();
    } finally {
      this.mounts.forEach((cb) => cb());
      this.mounts.clear();
      this.mounted = true;
      _Scope.current = prev;
    }
  }
  dispose() {
    this.cleanups.forEach((cb) => cb());
    this.cleanups.clear();
    this.contexts.clear();
    delete this.parent;
  }
};
function createContext(defaultValue) {
  let ctx;
  function provide(value, fn) {
    const scope = getScope();
    scope.contexts.set(ctx, value);
    return scope.run(fn);
  }
  function use() {
    let scope = Scope.current;
    while (scope) {
      const value = scope.contexts.get(ctx);
      if (value !== void 0) return value;
      scope = scope.parent;
    }
    return defaultValue;
  }
  function context({ value, children }) {
    return provide(value, children);
  }
  return ctx = Object.assign(context, {
    provide,
    use
  });
}
function getScope() {
  const scope = Scope.current;
  if (!scope) {
    throw Error("cannot get scope: out of tracking context");
  }
  return scope;
}
function onCleanup(cleanup) {
  if (!Scope.current) {
    console.error(Error("out of tracking context: will not be able to cleanup"));
  }
  Scope.current?.onCleanup(cleanup);
}
function createRoot(fn) {
  const scope = new Scope(null);
  return scope.run(() => fn(() => scope.dispose()));
}

// ../../../../usr/share/ags/js/src/_app.ts
import IO from "gi://AstalIO";
import GObject from "gi://GObject";
function mkApp(App) {
  return new class AstalJS extends App {
    static {
      GObject.registerClass({ GTypeName: "AstalJS" }, this);
    }
    eval(body) {
      return new Promise((res, rej) => {
        try {
          const fn = Function(`return (async function() {
                        ${body.includes(";") ? body : `return ${body};`}
                    })`);
          fn()().then(res).catch(rej);
        } catch (error) {
          rej(error);
        }
      });
    }
    vfunc_shutdown() {
      super.vfunc_shutdown();
      this.disposeRoot?.();
    }
    vfunc_request(msg, conn) {
      if (typeof this.requestHandler === "function") {
        this.requestHandler(msg, (response) => {
          IO.write_sock(conn, String(response), (_, res) => IO.write_sock_finish(res));
        });
      } else {
        super.vfunc_request(msg, conn);
      }
    }
    apply_css(style, reset = false) {
      super.apply_css(style, reset);
    }
    quit(code) {
      super.quit();
      exit(code ?? 0);
    }
    start({ requestHandler, css, hold, main, client, icons, ...cfg } = {}) {
      const app = this;
      client ??= () => {
        print(`Astal instance "${app.instanceName}" already running`);
        exit(1);
      };
      Object.assign(this, cfg);
      setConsoleLogDomain(app.instanceName);
      this.requestHandler = requestHandler;
      app.connect("activate", () => {
        createRoot((dispose) => {
          this.disposeRoot = dispose;
          main?.(...programArgs);
        });
      });
      try {
        app.acquire_socket();
      } catch {
        return client((msg) => IO.send_request(app.instanceName, msg), ...programArgs);
      }
      if (css) this.apply_css(css, false);
      if (icons) app.add_icons(icons);
      hold ??= true;
      if (hold) app.hold();
      app.runAsync([]);
    }
  }();
}

// ../../../../usr/share/ags/js/src/gtk4/app.ts
Gtk.init();
GLib.unsetenv("LD_PRELOAD");
await import("gi://Adw?version=1").then(({ default: Adw }) => Adw.init()).catch(() => void 0);
var app_default = mkApp(Astal.Application);

// sass:/home/jose/.config/my-ags/style.scss
var style_default = "button {\n  transition-duration: 200ms;\n}\nbutton.circular {\n  border-radius: 999px;\n}\nbutton label {\n  color: @theme_fg_color;\n}\n\ncalendar.view .day-name {\n  text-transform: capitalize;\n}\n\nwindow.Bar {\n  background: transparent;\n  color: @theme_fg_color;\n  font-weight: bold;\n}\nwindow.Bar > centerbox {\n  background: @theme_bg_color;\n  margin-top: 20px;\n  box-shadow: rgba(0, 0, 0, 0.1) 0px 1px 3px 0px, rgba(0, 0, 0, 0.06) 0px 1px 2px 0px;\n  border-radius: 8px;\n  margin-left: 18px;\n  margin-right: 18px;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 16px;\n  padding-right: 16px;\n}\nwindow.Bar button {\n  border: none;\n}\n\n.DashboardTab {\n  padding: 8px;\n}\n\n.DashboardTabHourAndMinute {\n  font-size: 40px;\n  font-weight: bold;\n}\n\n.DashboardTabDate {\n  color: @theme_selected_bg_color;\n  font-weight: bolder;\n}\n\n.DashboardBox {\n  background-color: var(--popover-shade-color);\n  padding: 8px;\n  border-radius: 8px;\n  color: @theme_selected_fg_color;\n}\n.DashboardBox.extraPadding {\n  padding-left: 16px;\n  padding-right: 16px;\n}\n.DashboardBox calendar.view {\n  background-color: transparent;\n  border: none;\n}\n\n.DashboardTabSysInfoLabel {\n  font-weight: 500;\n  text-transform: capitalize;\n}\n\n.WallpaperImgButtonContainer {\n  opacity: 0;\n  transition: opacity 200ms ease-in-out;\n  border-radius: 999px;\n}\n\n.WallpaperImgButtonContainer:hover {\n  opacity: 1;\n}\n\n.NotificationWindow {\n  background: transparent;\n  margin-right: 18px;\n  margin-top: 20px;\n}\n\n.NotificationWindowNotificationItem {\n  background: @theme_bg_color;\n  padding: 8px 4px 8px 8px;\n  border-radius: 8px;\n}\n\n.NotificationWindowNotificationItemSummary {\n  font-weight: bold;\n  font-size: 20;\n}\n\n.MediaPlayerBars {\n  color: @theme_selected_bg_color;\n}\n\n.MediaPlayerSongLabel {\n  color: @theme_selected_bg_color;\n  font-weight: bold;\n}\n\n.EndeavourOsIcon {\n  color: #7e3ebe;\n}\n\n.HyprLandIcon {\n  color: #00e2d1;\n}\n\n.UptimeIcon {\n  color: @theme_selected_bg_color;\n}\n\n.TrayRow {\n  background-color: var(--popover-shade-color);\n  border-radius: 8px;\n}\n\n.Workspaces {\n  background-color: @theme_bg_color;\n  border-radius: 8px;\n}\n\n.WorkspaceItem.group {\n  background-color: var(--popover-shade-color);\n  border-radius: 999px;\n}\n\n.WorkspaceClientItem {\n  border-radius: 999px;\n}\n.WorkspaceClientItem.focused {\n  background-color: @theme_selected_bg_color;\n  border-radius: 999px;\n}\n\n.MainSearchWindow {\n  background-color: transparent;\n}\n\n.MainSearch {\n  background-color: @theme_bg_color;\n  padding: 8px;\n  border-radius: 8px;\n  margin-bottom: 20px;\n  box-shadow: rgba(0, 0, 0, 0.1) 0px 1px 3px 0px, rgba(0, 0, 0, 0.06) 0px 1px 2px 0px;\n  border: 2px solid var(--popover-shade-color);\n}\n.MainSearch.hide {\n  margin-bottom: 0;\n}\n.MainSearch scrolledwindow {\n  background-color: @theme_bg_color;\n}\n.MainSearch entry {\n  margin-top: 8px;\n}\n.MainSearch listview {\n  background-color: @theme_bg_color;\n  border-radius: 8px;\n}\n.MainSearch listview row {\n  border-radius: 999px;\n  padding-left: 12px;\n  padding-top: 8px;\n  padding-bottom: 8px;\n}\n\n.ControlPanelBluetoothActive {\n  color: var(--success-bg-color);\n}\n\n.unstyledMenuButton button {\n  all: unset;\n}";

// ../../../../usr/share/ags/js/gnim/src/jsx/jsx.ts
import GObject3 from "gi://GObject";

// ../../../../usr/share/ags/js/gnim/src/jsx/state.ts
import GObject2 from "gi://GObject";
import Gio from "gi://Gio";
import GLib2 from "gi://GLib";

// ../../../../usr/share/ags/js/gnim/src/util.ts
function kebabify(str) {
  return str.replace(/([a-z])([A-Z])/g, "$1-$2").replaceAll("_", "-").toLowerCase();
}
function snakeify2(str) {
  return str.replace(/([a-z])([A-Z])/g, "$1-$2").replaceAll("-", "_").toLowerCase();
}
function definePropertyGetter(object, prop) {
  Object.defineProperty(object, `get_${kebabify(prop).replaceAll("-", "_")}`, {
    configurable: false,
    enumerable: true,
    value: () => object[prop]
  });
}
function set(obj, prop, value) {
  const key = snakeify2(prop);
  const getter = `get_${key}`;
  const setter = `set_${key}`;
  let current;
  if (getter in obj && typeof obj[getter] === "function") {
    current = obj[getter]();
  } else {
    current = obj[prop];
  }
  if (current !== value) {
    if (setter in obj && typeof obj[setter] === "function") {
      ;
      obj[setter](value);
    } else {
      Object.assign(obj, { [prop]: value });
    }
  }
}

// ../../../../usr/share/ags/js/gnim/src/jsx/state.ts
var Accessor = class _Accessor extends Function {
  static {
    this.$gtype = GObject2.TYPE_JSOBJECT;
  }
  #get;
  #subscribe;
  constructor(get, subscribe) {
    super("return arguments.callee._call.apply(arguments.callee, arguments)");
    this.#subscribe = subscribe ?? (() => () => void 0);
    this.#get = get;
  }
  /**
   * Subscribe for value changes.
   * @param callback The function to run when the current value changes.
   * @returns Unsubscribe function.
   */
  subscribe(callback) {
    return this.#subscribe(callback);
  }
  /**
   * @returns The current value.
   */
  get() {
    _Accessor.evaluating?.add(this);
    return this.#get();
  }
  /**
   * Create a new `Accessor` that applies a transformation on its value.
   * @param transform The transformation to apply. Should be a pure function.
   */
  as(transform) {
    return new _Accessor(() => transform(this.#get()), this.#subscribe);
  }
  _call(transform) {
    return this.as(transform);
  }
  toString() {
    return `Accessor<${this.get()}>`;
  }
  [Symbol.toPrimitive]() {
    console.warn("Accessor implicitly converted to a primitive value.");
    return this.toString();
  }
};
function createState(init) {
  let currentValue = init;
  const subscribers = /* @__PURE__ */ new Set();
  const subscribe = (callback) => {
    subscribers.add(callback);
    return () => subscribers.delete(callback);
  };
  const set2 = (newValue) => {
    const value = typeof newValue === "function" ? newValue(currentValue) : newValue;
    if (currentValue !== value) {
      currentValue = value;
      subscribers.forEach((cb) => cb());
    }
  };
  return [new Accessor(() => currentValue, subscribe), set2];
}
function createComputed(deps, transform) {
  let dispose;
  const subscribers = /* @__PURE__ */ new Set();
  const cache = new Array(deps.length);
  const subscribe = (callback) => {
    if (subscribers.size === 0) {
      dispose = deps.map(
        (dep, i) => dep.subscribe(() => {
          const value = dep.get();
          if (cache[i] !== value) {
            cache[i] = dep.get();
            subscribers.forEach((cb) => cb());
          }
        })
      );
    }
    subscribers.add(callback);
    return () => {
      subscribers.delete(callback);
      if (subscribers.size === 0) {
        dispose.map((cb) => cb());
        dispose.length = 0;
        cache.length = 0;
      }
    };
  };
  const get = () => {
    const args = deps.map((dep, i) => {
      if (!cache[i]) {
        cache[i] = dep.get();
      }
      return cache[i];
    });
    return transform ? transform(...args) : args;
  };
  return new Accessor(get, subscribe);
}
function createBinding(object, key) {
  const prop = kebabify(key);
  const subscribe = (callback) => {
    const sig = object instanceof Gio.Settings ? "changed" : "notify";
    const id = object.connect(`${sig}::${prop}`, () => callback());
    return () => object.disconnect(id);
  };
  const get = () => {
    if (object instanceof Gio.Settings) {
      return object.get_value(key).recursiveUnpack();
    } else {
      const getter = `get_${prop.replaceAll("-", "_")}`;
      if (getter in object && typeof object[getter] === "function") {
        return object[getter]();
      }
      if (prop in object) return object[prop];
      if (key in object) return object[key];
      throw Error(`cannot get property ${key}`);
    }
  };
  return new Accessor(get, subscribe);
}

// ../../../../usr/share/ags/js/gnim/src/jsx/env.ts
function configue(conf) {
  return Object.assign(env, conf);
}
function missingImpl() {
  throw Error("missing impl");
}
var env = {
  intrinsicElements: {},
  addChild: missingImpl,
  setCss: missingImpl,
  setClass: missingImpl,
  initProps: () => void 0,
  defaultCleanup: () => void 0
};

// ../../../../usr/share/ags/js/gnim/src/jsx/jsx.ts
var gtkType = Symbol("gtk builder type");
function getType(object) {
  return gtkType in object ? object[gtkType] : null;
}
function isGObjectCtor(ctor) {
  return ctor.prototype instanceof GObject3.Object;
}
function isFunctionCtor(ctor) {
  return typeof ctor === "function" && !isGObjectCtor(ctor);
}
function setType(object, type) {
  if (gtkType in object && object[gtkType] !== "") {
    console.warn(`type overriden from ${object[gtkType]} to ${type} on ${object}`);
  }
  Object.assign(object, { [gtkType]: type });
}
function jsx(ctor, inprops, key) {
  const { $, $type, $constructor, children = [], ...rest } = inprops;
  const props = rest;
  if (key) Object.assign(props, { key });
  env.initProps(props);
  for (const [key2, value] of Object.entries(props)) {
    if (value === void 0) delete props[key2];
  }
  if (typeof ctor === "string") {
    if (ctor in env.intrinsicElements) {
      ctor = env.intrinsicElements[ctor];
    } else {
      throw Error(`unknown intrinsic element "${ctor}"`);
    }
  }
  if (isFunctionCtor(ctor)) {
    const object2 = ctor({ children, ...props });
    if ($type) setType(object2, $type);
    $?.(object2);
    return object2;
  }
  const { css, class: className } = props;
  delete props.css;
  delete props.class;
  const signals = [];
  const bindings = [];
  for (const [key2, value] of Object.entries(props)) {
    if (key2.startsWith("on")) {
      signals.push([key2.slice(2), value]);
      delete props[key2];
    }
    if (value instanceof Accessor) {
      bindings.push([key2, value]);
      props[key2] = value.get();
    }
  }
  const object = $constructor ? $constructor(props) : new ctor(props);
  if ($constructor) Object.assign(object, props);
  if ($type) setType(object, $type);
  if (css) env.setCss(object, css);
  if (className) env.setClass(object, className);
  for (const child of Array.isArray(children) ? children : [children]) {
    if (child === true) {
      console.warn("Trying to add boolean value of `true` as a child.");
      continue;
    }
    if (Array.isArray(child)) {
      for (const ch of child) {
        env.addChild(object, ch, -1);
      }
    } else if (child) {
      env.addChild(object, child, -1);
    }
  }
  const disposeHandlers = signals.map(([sig, handler]) => {
    const name = kebabify(sig);
    const id = name.startsWith("notify-") ? object.connect(`notify::${name.slice(7)}`, handler) : object.connect(kebabify(sig), handler);
    return () => object.disconnect(id);
  });
  const disposeBindings = bindings.map(([prop, binding]) => {
    const dispose = binding.subscribe(() => {
      set(object, prop, binding.get());
    });
    set(object, prop, binding.get());
    return dispose;
  });
  if (disposeBindings.length > 0 || disposeHandlers.length > 0) {
    onCleanup(() => {
      disposeHandlers.forEach((cb) => cb());
      disposeBindings.forEach((cb) => cb());
    });
  }
  $?.(object);
  return object;
}
var jsxs = jsx;

// ../../../../usr/share/ags/js/gnim/src/jsx/Fragment.ts
import GObject4 from "gi://GObject";

// ../../../../usr/share/ags/js/gnim/src/gnome/signalTracker.ts
var mod = import("resource:///org/gnome/shell/misc/signalTracker.js");
var registerDestroyableType = await mod.then((mod2) => mod2.registerDestroyableType).catch(() => () => void 0);

// ../../../../usr/share/ags/js/gnim/src/jsx/Fragment.ts
var _a, _b, _c;
var Fragment = class _Fragment extends (_c = GObject4.Object, _b = GObject4.signals, _a = GObject4.properties, _c) {
  constructor({ children = [] } = {}) {
    super();
    this.connectionIds = /* @__PURE__ */ new Set();
    this._children = Array.isArray(children) ? children : [children];
  }
  static {
    this[_b] = {
      "destroy": {},
      "child-added": {
        param_types: [GObject4.TYPE_OBJECT, GObject4.TYPE_UINT]
      },
      "child-removed": {
        param_types: [GObject4.TYPE_OBJECT, GObject4.TYPE_UINT]
      }
    };
  }
  static {
    this[_a] = {
      children: GObject4.ParamSpec.jsobject("children", "", "", GObject4.ParamFlags.READABLE)
    };
  }
  static {
    GObject4.registerClass(this);
    registerDestroyableType(this);
  }
  static new(children = []) {
    return new _Fragment({ children });
  }
  get children() {
    return [...this._children];
  }
  addChild(child, index = -1) {
    if (child instanceof _Fragment) {
      throw Error(`nesting Fragments are not yet supported`);
    }
    if (index > 0) {
      this._children = [
        ...this._children.slice(0, index),
        child,
        ...this._children.slice(index)
      ];
    } else {
      this._children.push(child);
      index = this._children.length - 1;
    }
    this.emit("child-added", child, index);
    this.notify("children");
  }
  hasChild(child) {
    return this._children.findIndex((ch) => ch === child) > -1;
  }
  removeChild(child) {
    const index = this._children.findIndex((i) => i === child);
    this._children.splice(index, 1);
    this.emit("child-removed", child, index);
    this.notify("children");
  }
  connect(signal, callback) {
    const id = super.connect(signal, callback);
    this.connectionIds.add(id);
    return id;
  }
  disconnect(id) {
    super.disconnect(id);
    this.connectionIds.delete(id);
  }
  destroy() {
    this.emit("destroy");
    for (const id of this.connectionIds.values()) {
      super.disconnect(id);
    }
  }
};

// ../../../../usr/share/ags/js/gnim/src/jsx/For.ts
function For({
  each,
  children: mkChild,
  cleanup,
  id = (item) => item
}) {
  const currentScope = getScope();
  const map = /* @__PURE__ */ new Map();
  const fragment = new Fragment();
  function remove2({ item, child, index: [index], scope }) {
    if (typeof cleanup === "function") {
      cleanup(child, item, index.get());
    } else if (cleanup !== null) {
      env.defaultCleanup(child);
    }
    scope.dispose();
  }
  function callback(itareable) {
    const items = [...itareable];
    const ids = items.map(id);
    const idSet = new Set(ids);
    for (const [key, value] of map.entries()) {
      fragment.removeChild(value.child);
      if (!idSet.has(key)) {
        remove2(value);
        map.delete(key);
      }
    }
    items.map((item, i) => {
      const key = ids[i];
      if (map.has(key)) {
        const {
          index: [, setIndex],
          child
        } = map.get(key);
        setIndex(i);
        if (fragment.hasChild(child)) {
          console.warn(`duplicate keys found: ${key}`);
        } else {
          fragment.addChild(child);
        }
      } else {
        const [index, setIndex] = createState(i);
        const scope = new Scope(currentScope);
        const child = scope.run(() => mkChild(item, index));
        map.set(key, { item, child, index: [index, setIndex], scope });
        fragment.addChild(child);
      }
    });
  }
  const dispose = each.subscribe(() => {
    callback(each.get());
  });
  callback(each.get());
  onCleanup(() => {
    dispose();
    for (const value of map.values()) {
      remove2(value);
    }
    map.clear();
  });
  return fragment;
}

// ../../../../usr/share/ags/js/src/gtk4/index.ts
import Astal2 from "gi://Astal?version=4.0";
import Gtk2 from "gi://Gtk?version=4.0";
import Gdk from "gi://Gdk?version=4.0";

// ../../../../usr/share/ags/js/src/process.ts
import AstalIO from "gi://AstalIO";
var Process = AstalIO.Process;
function exec(cmd) {
  return Array.isArray(cmd) ? AstalIO.Process.execv(cmd) : AstalIO.Process.exec(cmd);
}
function execAsync(cmd) {
  return new Promise((resolve, reject) => {
    if (Array.isArray(cmd)) {
      AstalIO.Process.exec_asyncv(cmd, (_, res) => {
        try {
          resolve(AstalIO.Process.exec_asyncv_finish(res));
        } catch (error) {
          reject(error);
        }
      });
    } else {
      AstalIO.Process.exec_async(cmd, (_, res) => {
        try {
          resolve(AstalIO.Process.exec_finish(res));
        } catch (error) {
          reject(error);
        }
      });
    }
  });
}

// ../../../../usr/share/ags/js/src/time.ts
import AstalIO2 from "gi://AstalIO";
var Time = AstalIO2.Time;
function interval(interval2, callback) {
  return AstalIO2.Time.interval(interval2, () => void callback?.());
}
function timeout(timeout2, callback) {
  return AstalIO2.Time.timeout(timeout2, () => void callback?.());
}
function createPoll(init, ival, execOrFn, transform) {
  let currentValue = init;
  let timer = null;
  const subscribers = /* @__PURE__ */ new Set();
  function subscribe(callback) {
    function set2(value) {
      if (value !== currentValue) {
        currentValue = value;
        subscribers.forEach((cb) => cb());
      }
    }
    if (subscribers.size === 0) {
      timer = interval(ival, () => {
        if (typeof execOrFn === "function") {
          const value = execOrFn(currentValue);
          if (value instanceof Promise) {
            value.then(set2);
          } else {
            set2(value);
          }
        } else {
          execAsync(execOrFn).then((stdout) => {
            set2(transform ? transform(stdout, currentValue) : stdout);
          });
        }
      });
    }
    subscribers.add(callback);
    return () => {
      subscribers.delete(callback);
      if (subscribers.size === 0) {
        timer?.cancel();
        timer = null;
      }
    };
  }
  return new Accessor(() => currentValue, subscribe);
}

// src/widget/Bar.tsx
import GLib9 from "gi://GLib";

// src/widget/MediaPlayer.tsx
import Mpris2 from "gi://AstalMpris";
import Cava from "gi://AstalCava";
import Hyprland from "gi://AstalHyprland";
import Cairo from "cairo";

// src/utils/time.ts
var formatSeconds = (seconds) => {
  const totalSeconds = Math.floor(seconds);
  const hours = Math.floor(totalSeconds / 3600);
  const minutes = Math.floor(totalSeconds % 3600 / 60);
  const secs = totalSeconds % 60;
  if (hours > 0) {
    return `${hours}:${minutes.toString().padStart(2, "0")}:${secs.toString().padStart(2, "0")}`;
  } else {
    return `${minutes}:${secs.toString().padStart(2, "0")}`;
  }
};

// src/widget/MediaPlayer.tsx
import Pango from "gi://Pango";

// src/hooks/usePlayerInfo.ts
import Mpris from "gi://AstalMpris";

// src/utils/mpris/get-last-player.ts
var getIsLastPlayer = (p) => {
  return p.get_bus_name().includes("playerctld");
};
var getLastPlayer = (players) => {
  return players.find((p) => getIsLastPlayer(p));
};

// src/hooks/usePlayerInfo.ts
import Gio3 from "gi://Gio";

// ../../../../usr/share/ags/js/gnim/src/gobject.ts
import GObject5 from "gi://GObject";
import GLib3 from "gi://GLib";
var priv = Symbol("gobject private");
var { defineProperty, fromEntries, entries } = Object;
var { Object: GObj, registerClass } = GObject5;
var SignalFlags = GObject5.SignalFlags;
var AccumulatorType = GObject5.AccumulatorType;
var ParamSpec = GObject5.ParamSpec;
var ParamFlags = GObject5.ParamFlags;
function assertField(ctx) {
  if (ctx.private) throw Error("private fields are not supported");
  if (ctx.static) throw Error("static fields are not supported");
  if (typeof ctx.name !== "string") {
    throw Error("only strings can be gobject property keys");
  }
  return ctx.name;
}
function property(typeDeclaration) {
  return function(_, ctx, options) {
    const fieldName = assertField(ctx);
    const key = kebabify(fieldName);
    const meta = ctx.metadata;
    meta.properties ??= {};
    meta.properties[fieldName] = { flags: ParamFlags.READWRITE, type: typeDeclaration };
    ctx.addInitializer(function() {
      definePropertyGetter(this, fieldName);
      if (options && options.metaOnly) return;
      defineProperty(this, fieldName, {
        enumerable: true,
        configurable: false,
        set(v) {
          if (this[priv][key] !== v) {
            this[priv][key] = v;
            this.notify(key);
          }
        },
        get() {
          return this[priv][key];
        }
      });
    });
    return function(init) {
      const dict = this[priv] ??= {};
      dict[key] = init;
      return init;
    };
  };
}
var MAXINT = 2 ** 31 - 1;
var MININT = -(2 ** 31);
var MAXUINT = 2 ** 32 - 1;
var MAXFLOAT = 34028235e31;
var MINFLOAT = -34028235e31;
var MININT64 = Number.MIN_SAFE_INTEGER;
var MAXINT64 = Number.MAX_SAFE_INTEGER;
function pspecFromGType(type, name, flags) {
  switch (type) {
    case GObject5.TYPE_BOOLEAN:
      return ParamSpec.boolean(name, "", "", flags, false);
    case GObject5.TYPE_STRING:
      return ParamSpec.string(name, "", "", flags, "");
    case GObject5.TYPE_INT:
      return ParamSpec.int(name, "", "", flags, MININT, MAXINT, 0);
    case GObject5.TYPE_UINT:
      return ParamSpec.uint(name, "", "", flags, 0, MAXUINT, 0);
    case GObject5.TYPE_INT64:
      return ParamSpec.int64(name, "", "", flags, MININT64, MAXINT64, 0);
    case GObject5.TYPE_UINT64:
      return ParamSpec.uint64(name, "", "", flags, 0, Number.MAX_SAFE_INTEGER, 0);
    case GObject5.TYPE_FLOAT:
      return ParamSpec.float(name, "", "", flags, MINFLOAT, MAXFLOAT, 0);
    case GObject5.TYPE_DOUBLE:
      return ParamSpec.double(name, "", "", flags, Number.MIN_VALUE, Number.MIN_VALUE, 0);
    case GObject5.TYPE_JSOBJECT:
      return ParamSpec.jsobject(name, "", "", flags);
    case GObject5.TYPE_VARIANT:
      return ParamSpec.object(name, "", "", flags, GLib3.Variant);
    case GObject5.TYPE_ENUM:
    case GObject5.TYPE_INTERFACE:
    case GObject5.TYPE_BOXED:
    case GObject5.TYPE_POINTER:
    case GObject5.TYPE_PARAM:
    case GObject5.type_from_name("GType"):
      throw Error(`cannot guess ParamSpec from GType "${type}"`);
    case GObject5.TYPE_OBJECT:
    default:
      return ParamSpec.object(name, "", "", flags, type);
  }
}
function pspec(name, flags, declaration) {
  if (declaration instanceof ParamSpec) return declaration;
  if (declaration === Object || declaration === Function || declaration === Array) {
    return ParamSpec.jsobject(name, "", "", flags);
  }
  if (declaration === String) {
    return ParamSpec.string(name, "", "", flags, "");
  }
  if (declaration === Number) {
    return ParamSpec.double(name, "", "", flags, -Number.MAX_VALUE, Number.MAX_VALUE, 0);
  }
  if (declaration === Boolean) {
    return ParamSpec.boolean(name, "", "", flags, false);
  }
  if ("$gtype" in declaration) {
    return pspecFromGType(declaration.$gtype, name, flags);
  }
  if (typeof declaration === "function") {
    return declaration(name, flags);
  }
  throw Error("invalid PropertyTypeDeclaration");
}
function register(options = {}) {
  return function(cls, ctx) {
    const t = options.Template;
    if (typeof t === "string" && !t.startsWith("resource://") && !t.startsWith("file://")) {
      options.Template = new TextEncoder().encode(t);
    }
    const meta = ctx.metadata;
    const props = fromEntries(
      entries(meta.properties ?? {}).map(([fieldName, { flags, type }]) => {
        const key = kebabify(fieldName);
        const spec = pspec(key, flags, type);
        return [key, spec];
      })
    );
    const signals = fromEntries(
      entries(meta.signals ?? {}).map(([signalName, { default: def, method, ...signal }]) => {
        if (def) {
          defineProperty(cls.prototype, `on_${signalName.replaceAll("-", "_")}`, {
            enumerable: false,
            configurable: false,
            value: method
          });
        }
        return [signalName, signal];
      })
    );
    delete meta.properties;
    delete meta.signals;
    registerClass({ ...options, Properties: props, Signals: signals }, cls);
  };
}
Function.$gtype = Object.$gtype;
Array.$gtype = Object.$gtype;

// src/objects/PlayerListItemObject.ts
var _busName_dec, _desktopIcon_dec, _text_dec, _a2, _PlayerListItemObject_decorators, _init;
_PlayerListItemObject_decorators = [register({ GTypeName: "PlayerListItem" })];
var PlayerListItemObject = class extends (_a2 = GObject5.Object, _text_dec = [property(String)], _desktopIcon_dec = [property(String)], _busName_dec = [property(String)], _a2) {
  constructor({
    busName,
    desktopIcon,
    text
  }) {
    super();
    this.text = __runInitializers(_init, 8, this, ""), __runInitializers(_init, 11, this);
    this.desktopIcon = __runInitializers(_init, 12, this, ""), __runInitializers(_init, 15, this);
    this.busName = __runInitializers(_init, 16, this, ""), __runInitializers(_init, 19, this);
    this.text = text;
    this.desktopIcon = desktopIcon;
    this.busName = busName;
  }
};
_init = __decoratorStart(_a2);
__decorateElement(_init, 5, "text", _text_dec, PlayerListItemObject);
__decorateElement(_init, 5, "desktopIcon", _desktopIcon_dec, PlayerListItemObject);
__decorateElement(_init, 5, "busName", _busName_dec, PlayerListItemObject);
PlayerListItemObject = __decorateElement(_init, 0, "PlayerListItemObject", _PlayerListItemObject_decorators, PlayerListItemObject);
__runInitializers(_init, 1, PlayerListItemObject);

// src/utils/apps.ts
import Apps from "gi://AstalApps";
import Gio2 from "gi://Gio";
import GLib4 from "gi://GLib";
var createAppsInstance = ({
  variant
}) => {
  return new Apps.Apps(
    variant === "appSearch" ? void 0 : {
      nameMultiplier: 2,
      entryMultiplier: 0,
      executableMultiplier: 2
    }
  );
};
function simplifyAppName(appId) {
  const afterSlash = appId.split("/").pop() ?? appId;
  const afterDot = afterSlash.includes(".") ? afterSlash.split(".").pop() : afterSlash;
  let beforeDash = afterDot.includes("-") ? afterDot.split("-")[0] : afterDot;
  beforeDash = beforeDash.replace("_", " ");
  return beforeDash;
}
var searchAppFromName = (apps2, name) => {
  const nameToUse = simplifyAppName(name);
  const results = apps2.fuzzy_query(nameToUse);
  return results;
};
function getAllCommands() {
  let path = GLib4.getenv("PATH");
  if (!path) return [];
  let commands = /* @__PURE__ */ new Set();
  for (let dirpath of path.split(":")) {
    if (!GLib4.file_test(dirpath, GLib4.FileTest.IS_DIR)) continue;
    let dir = GLib4.Dir.open(dirpath, 0);
    if (!dir) continue;
    let name;
    while ((name = dir.read_name()) !== null) {
      let full = GLib4.build_filenamev([dirpath, name]);
      if (GLib4.file_test(
        full,
        GLib4.FileTest.IS_REGULAR | GLib4.FileTest.IS_EXECUTABLE
      )) {
        commands.add(name);
      }
    }
    dir.close();
  }
  return Array.from(commands).sort();
}
var terminals = [
  "kitty",
  "foot",
  "alacritty",
  "wezterm",
  "gnome-terminal",
  "konsole",
  "xterm",
  "lxterminal",
  "tilix",
  "terminator",
  "urxvt"
];
function findAvailableTerminal() {
  for (let term of terminals) {
    if (GLib4.find_program_in_path(term)) return term;
  }
  return null;
}
function getTerminalCommand(terminal, commandString) {
  switch (terminal) {
    case "kitty":
    case "foot":
    case "alacritty":
    case "wezterm":
    case "xterm":
    case "urxvt":
    case "terminator":
    case "lxterminal":
      return [terminal, "-e", "bash", "-c", `${commandString}; exec bash`];
    case "gnome-terminal":
    case "tilix":
    case "konsole":
      return [terminal, "--", "bash", "-c", `${commandString}; exec bash`];
    default:
      return null;
  }
}
function isLikelyGuiApp(command) {
  const knownGui = /* @__PURE__ */ new Set([
    "waybar",
    "swaybg",
    "rofi",
    "wofi",
    "dunst",
    "thunar",
    "alacritty",
    "kitty",
    "firefox",
    "code",
    "nautilus",
    "gnome-calculator",
    "pavucontrol",
    "vlc",
    "gimp"
  ]);
  if (knownGui.has(command)) return true;
  const appInfo = Gio2.AppInfo.get_all().find(
    (app) => app.get_executable() === command
  );
  if (appInfo) return true;
  return false;
}
function runAppCommand(commandString) {
  let [ok, argv] = GLib4.shell_parse_argv(commandString);
  if (!ok || !argv || argv.length === 0) return;
  let command = argv[0];
  try {
    if (isLikelyGuiApp(command)) {
      Gio2.Subprocess.new(argv, Gio2.SubprocessFlags.SEARCH_PATH_FROM_ENVP);
    } else {
      let terminal = findAvailableTerminal();
      if (!terminal) throw new Error("No terminal emulator found");
      let termCommand = getTerminalCommand(terminal, commandString);
      if (!termCommand?.length) {
        printerr("No termCommand");
        return;
      }
      Gio2.Subprocess.new(
        termCommand,
        Gio2.SubprocessFlags.SEARCH_PATH_FROM_ENVP
      );
    }
  } catch (e) {
    logError(e);
  }
}

// src/hooks/usePlayerInfo.ts
var callbackIfCurrent = (callback, getIsWantedPlayer) => {
  return (changed) => {
    if (getIsWantedPlayer(changed)) callback(changed);
  };
};
var bindProperty = (player, _property, signal, getValue, setState, getIsWantedPlayer) => {
  player.connect(
    signal,
    callbackIfCurrent((changed) => {
      setState(getValue(changed));
    }, getIsWantedPlayer)
  );
};
var getters = {
  getCanPlayOrPause(player) {
    if (!player) return false;
    return player.get_can_control() && player.get_playback_status() !== 2;
  },
  getCanLoop(player) {
    if (!player) return false;
    return player.get_loop_status() !== Mpris.Loop.UNSUPPORTED;
  },
  getCanShuffle(player) {
    if (!player) return false;
    return player.get_shuffle_status() !== Mpris.Shuffle.UNSUPPORTED;
  },
  getTitle(player) {
    return player?.get_title() ?? "";
  },
  getArtist(player) {
    return player?.get_artist() ?? "";
  },
  getAlbum(player) {
    return player?.get_album() ?? "";
  },
  getCoverArt(player) {
    return player?.get_cover_art() ?? "";
  },
  getPosition(player) {
    return player?.get_position() ?? 0;
  },
  getLength(player) {
    return player?.get_length() ?? 0;
  },
  getVolume(player) {
    return player?.get_volume() ?? 100;
  },
  getLoopStatus(player) {
    return player?.get_loop_status() ?? Mpris.Loop.UNSUPPORTED;
  },
  getShuffleStatus(player) {
    return player?.get_shuffle_status() ?? Mpris.Shuffle.UNSUPPORTED;
  },
  getCanRaise(player) {
    return player?.get_can_raise() ?? false;
  },
  getCanNext(player) {
    return player?.get_can_go_next() ?? false;
  },
  getCanBack(player) {
    return player?.get_can_go_previous() ?? false;
  },
  getPlaybackStatus(player) {
    return player?.get_playback_status() ?? Mpris.PlaybackStatus.STOPPED;
  }
};
var addPlayersToListStore = (listStore, allPlayers, apps2) => {
  listStore.remove_all();
  let seen = {};
  allPlayers.get().forEach((p) => {
    const trackId = p.get_trackid();
    const key = trackId;
    if (seen[key]) {
      return;
    }
    seen[key] = true;
    const identity = p.get_identity();
    if (!identity) return;
    const app = searchAppFromName(apps2, identity);
    const icon = app?.[0]?.get_icon_name();
    const item = new PlayerListItemObject({
      text: identity,
      desktopIcon: icon,
      busName: p.get_bus_name()
    });
    listStore.append(item);
  });
};
var findSelectedItemIndex = (allPlayers, selectedPlayer) => {
  const foundIndex = allPlayers.get().findIndex((p) => p.get_bus_name() === selectedPlayer.get().get_bus_name());
  return foundIndex > -1 ? foundIndex : 0;
};
var usePlayerInfo = () => {
  const mpris = Mpris.get_default();
  const players = createBinding(mpris, "players");
  const [selectedPlayer, setSelectedPlayer] = createState(
    getLastPlayer(players.get()) ?? players.get()?.[0]
  );
  const [selectedIndex, setSelectedIndex] = createState(
    findSelectedItemIndex(players, selectedPlayer)
  );
  const apps2 = createAppsInstance({ variant: "other" });
  const liststore = new Gio3.ListStore();
  addPlayersToListStore(liststore, players, apps2);
  const selectionModel = new Gtk2.SingleSelection({ model: liststore });
  const getIsWantedPlayer = (player) => player.get_bus_name() === selectedPlayer.get()?.get_bus_name();
  const p = selectedPlayer.get();
  const [title, setTitle] = createState(getters.getTitle(p));
  const [artist, setArtist] = createState(getters.getArtist(p));
  const [album, setAlbum] = createState(getters.getAlbum(p));
  const [coverArt, setCoverArt] = createState(getters.getCoverArt(p));
  const [playbackStatus, setPlaybackStatus] = createState(
    p?.get_playback_status()
  );
  const [position, setPosition] = createState(getters.getPosition(p));
  const [length, setLength] = createState(getters.getLength(p));
  const [volume, setVolume] = createState(getters.getVolume(p));
  const [loopStatus, setLoopStatus] = createState(getters.getLoopStatus(p));
  const [shuffleStatus, setShuffleStatus] = createState(
    getters.getShuffleStatus(p)
  );
  const [canRaise, setCanRaise] = createState(getters.getCanRaise(p));
  const [canNext, setCanNext] = createState(getters.getCanNext(p));
  const [canBack, setCanBack] = createState(getters.getCanBack(p));
  const [canPlayOrPause, setCanPlayOrPause] = createState(
    getters.getCanPlayOrPause(p)
  );
  const [canLoop, setCanLoop] = createState(getters.getCanLoop(p));
  const [canShuffle, setCanShuffle] = createState(getters.getCanShuffle(p));
  const unsubscribeSelectedPlayer = selectedPlayer.subscribe(() => {
    const p2 = selectedPlayer.get();
    setTitle(getters.getTitle(p2));
    setArtist(getters.getArtist(p2));
    setPlaybackStatus(getters.getPlaybackStatus(p2));
    setCoverArt(getters.getCoverArt(p2));
    setAlbum(getters.getAlbum(p2));
    setPosition(getters.getPosition(p2));
    setLength(getters.getLength(p2));
    setVolume(getters.getVolume(p2));
    setLoopStatus(getters.getLoopStatus(p2));
    setShuffleStatus(getters.getShuffleStatus(p2));
    setCanRaise(getters.getCanRaise(p2));
    setCanNext(getters.getCanNext(p2));
    setCanBack(getters.getCanBack(p2));
    setCanPlayOrPause(getters.getCanPlayOrPause(p2));
    setCanLoop(getters.getCanLoop(p2));
    setCanShuffle(getters.getCanShuffle(p2));
    const index = findSelectedItemIndex(players, selectedPlayer);
    setSelectedIndex(index);
  });
  players.get().forEach((player) => {
    bindProperty(
      player,
      "title",
      "notify::title",
      getters.getTitle,
      setTitle,
      getIsWantedPlayer
    );
    bindProperty(
      player,
      "artist",
      "notify::artist",
      getters.getArtist,
      setArtist,
      getIsWantedPlayer
    );
    bindProperty(
      player,
      "album",
      "notify::album",
      getters.getAlbum,
      setAlbum,
      getIsWantedPlayer
    );
    bindProperty(
      player,
      "cover_art",
      "notify::cover-art",
      getters.getCoverArt,
      setCoverArt,
      getIsWantedPlayer
    );
    bindProperty(
      player,
      "playback_status",
      "notify::playback-status",
      getters.getPlaybackStatus,
      setPlaybackStatus,
      getIsWantedPlayer
    );
    bindProperty(
      player,
      "position",
      "notify::position",
      getters.getPosition,
      setPosition,
      getIsWantedPlayer
    );
    bindProperty(
      player,
      "length",
      "notify::length",
      getters.getLength,
      setLength,
      getIsWantedPlayer
    );
    bindProperty(
      player,
      "volume",
      "notify::volume",
      getters.getVolume,
      setVolume,
      getIsWantedPlayer
    );
    bindProperty(
      player,
      "loop_status",
      "notify::loop-status",
      getters.getLoopStatus,
      setLoopStatus,
      getIsWantedPlayer
    );
    bindProperty(
      player,
      "shuffle_status",
      "notify::shuffle-status",
      getters.getShuffleStatus,
      setShuffleStatus,
      getIsWantedPlayer
    );
    bindProperty(
      player,
      "can_raise",
      "notify::can-raise",
      getters.getCanRaise,
      setCanRaise,
      getIsWantedPlayer
    );
    bindProperty(
      player,
      "can_go_next",
      "notify::can-go-next",
      getters.getCanNext,
      setCanNext,
      getIsWantedPlayer
    );
    bindProperty(
      player,
      "can_go_previous",
      "notify::can-go-previous",
      getters.getCanBack,
      setCanBack,
      getIsWantedPlayer
    );
    player.connect(
      "notify",
      callbackIfCurrent((p2) => {
        setCanPlayOrPause(getters.getCanPlayOrPause(p2));
        setCanLoop(getters.getCanLoop(p2));
        setCanShuffle(getters.getCanShuffle(p2));
      }, getIsWantedPlayer)
    );
    player.connect("notify::trackid", (p2) => {
      const isLastPlayer = getIsLastPlayer(p2);
      if (!isLastPlayer) return;
      setSelectedPlayer(p2);
      addPlayersToListStore(liststore, players, apps2);
    });
  });
  const unsubscribeAllPlayers = players.subscribe(() => {
    addPlayersToListStore(liststore, players, apps2);
  });
  onCleanup(() => {
    unsubscribeSelectedPlayer();
    unsubscribeAllPlayers();
  });
  return {
    playerInfo: {
      title,
      artist,
      album,
      coverArt,
      playbackStatus,
      position,
      length,
      volume,
      loopStatus,
      shuffleStatus,
      canRaise,
      canNext,
      canBack,
      canPlayOrPause,
      canLoop,
      canShuffle
    },
    selectedPlayer,
    setSelectedPlayer,
    selectionModel,
    selectedIndex,
    allPlayers: players
  };
};

// src/widget/CircularImage.tsx
import GdkPixbuf from "gi://GdkPixbuf";

// src/utils/icons.ts
import Gio4 from "gi://Gio";
import GLib5 from "gi://GLib";
var HOME = GLib5.getenv("HOME");
var getIsIcon = ({
  icon,
  iconTheme
}) => {
  return icon ? iconTheme.has_icon(icon) : false;
};
var getIsIconFile = ({ icon }) => {
  return icon?.startsWith("/");
};
function enumerateDir(path) {
  const enumerator = Gio4.File.new_for_path(path).enumerate_children(
    "standard::name,standard::type",
    Gio4.FileQueryInfoFlags.NONE,
    null
  );
  const pixmapFiles2 = [];
  while (true) {
    const info = enumerator.next_file(null);
    if (!info) {
      break;
    }
    pixmapFiles2.push(`${path}/${info.get_name()}`);
  }
  return pixmapFiles2;
}
var MISSING_ICON = "";
var iconCache = {};
var apps = createAppsInstance({ variant: "other" });
var pixmapFiles = enumerateDir("/usr/share/pixmaps");
var hicolorScalable = enumerateDir("/usr/share/icons/hicolor/scalable/apps");
function getAppIcon(name) {
  if (!name) {
    return MISSING_ICON;
  }
  if (iconCache[name] && iconCache[name] != "NO-ICON") {
    return iconCache[name];
  }
  if (iconCache[name] && iconCache[name] == "NO-ICON") {
    return MISSING_ICON;
  }
  if (name.startsWith("steam_app")) {
    try {
      const gameFiles = enumerateDir(
        `${HOME}/.local/share/Steam/appcache/librarycache/${name.substring(10)}`
      );
      const sha256Pattern = /[0-9a-f]{40}\.jpg$/;
      const icon = gameFiles.find((f) => sha256Pattern.test(f));
      if (icon) {
        iconCache[name] = icon;
        return iconCache[name];
      }
    } catch (err) {
      console.error("Found steam app but no cache dir", name);
    }
    const steamIconPath = `${HOME}/.local/share/Steam/appcache/librarycache/${name.substring(10)}/logo.png`;
    if (GLib5.file_test(steamIconPath, GLib5.FileTest.EXISTS)) {
      iconCache[name] = steamIconPath;
      return iconCache[name];
    }
  }
  const iconName = searchAppFromName(apps, name)?.[0]?.get_icon_name();
  if (iconName) {
    iconCache[name] = iconName;
    return iconName;
  }
  const pixmaps = pixmapFiles.filter((it) => it.includes(name));
  if (pixmaps.length) {
    iconCache[name] = pixmaps.at(-1);
    return iconCache[name];
  }
  const scalable = hicolorScalable.filter((it) => it.includes(name));
  if (scalable.length) {
    iconCache[name] = scalable.at(-1);
    return iconCache[name];
  }
  iconCache["NO-ICON"] = MISSING_ICON;
  return MISSING_ICON;
}

// ../../../../usr/share/ags/js/src/gtk4/jsx-runtime.ts
import Gtk4 from "gi://Gtk?version=4.0";
import Astal3 from "gi://Astal?version=4.0";

// ../../../../usr/share/ags/js/gnim/src/gtk4/jsx-runtime.ts
import Gtk3 from "gi://Gtk?version=4.0";
import Gio5 from "gi://Gio?version=2.0";
import GObject6 from "gi://GObject";
var dummyBuilder = new Gtk3.Builder();
function add(parent, child, _) {
  if (!specialAdd(parent, child, _)) {
    parent.vfunc_add_child(dummyBuilder, child, getType(child));
  }
}
function specialRemove(_parent, _child) {
  return false;
}
function specialAdd(parent, child, _) {
  if (child instanceof Gtk3.Adjustment && "set_adjustment" in parent && typeof parent.set_adjustment === "function") {
    parent.set_adjustment(child);
    return true;
  }
  if (child instanceof Gtk3.Widget && parent instanceof Gtk3.Stack && child.name !== "" && child.name !== null && getType(child) === "named") {
    parent.add_named(child, child.name);
    return true;
  }
  if (child instanceof Gtk3.Popover && parent instanceof Gtk3.MenuButton) {
    parent.set_popover(child);
    return true;
  }
  if (child instanceof Gio5.MenuModel && (parent instanceof Gtk3.MenuButton || parent instanceof Gtk3.PopoverMenu)) {
    parent.set_menu_model(child);
    return true;
  }
  if (child instanceof Gio5.MenuItem && parent instanceof Gio5.Menu) {
  }
  if (child instanceof Gtk3.Window && parent instanceof Gtk3.Application) {
    parent.add_window(child);
    return true;
  }
  if (child instanceof Gtk3.TextBuffer && parent instanceof Gtk3.TextView) {
    parent.set_buffer(child);
    return true;
  }
  return false;
}
function remove(parent, child) {
  if (specialRemove(parent, child)) return;
  if ("set_child" in parent && typeof parent.set_child == "function") {
    return parent.set_child(null);
  }
  if ("remove" in parent && typeof parent.remove == "function") {
    return parent.remove(child);
  }
  throw Error(`cannot remove ${child} from ${parent}`);
}
var { addChild, intrinsicElements } = configue({
  setCss(object, css) {
    if (!(object instanceof Gtk3.Widget)) {
      return console.warn(Error(`cannot set css on ${object}`));
    }
    const ctx = object.get_style_context();
    let provider;
    const setter = (css2) => {
      if (!css2.includes("{") || !css2.includes("}")) {
        css2 = `* { ${css2} }`;
      }
      if (provider) ctx.remove_provider(provider);
      provider = new Gtk3.CssProvider();
      provider.load_from_string(css2);
      ctx.add_provider(provider, Gtk3.STYLE_PROVIDER_PRIORITY_USER);
    };
    if (css instanceof Accessor) {
      setter(css.get());
      const dispose = css.subscribe(() => setter(css.get()));
      onCleanup(dispose);
    } else {
      setter(css);
    }
  },
  setClass(object, className) {
    if (!(object instanceof Gtk3.Widget)) {
      return console.warn(Error(`cannot set className on ${object}`));
    }
    if (className instanceof Accessor) {
      object.cssClasses = className.get().split(/\s+/);
      const dispose = className.subscribe(
        () => object.cssClasses = className.get().split(/\s+/)
      );
      onCleanup(dispose);
    } else {
      object.set_css_classes(className.split(/\s+/));
    }
  },
  addChild(parent, child, index = -1) {
    if (!(child instanceof GObject6.Object)) {
      child = Gtk3.Label.new(String(child));
    }
    if (specialAdd(parent, child, index)) return;
    if (parent instanceof Fragment) {
      parent.addChild(child);
      return;
    }
    if (parent instanceof Gtk3.Buildable) {
      if (child instanceof Fragment) {
        for (const ch of child.children) {
          add(parent, ch, index);
        }
        child.connect("child-added", (_, ch, index2) => {
          if (!(ch instanceof GObject6.Object)) {
            console.error(TypeError(`cannot add ${ch} to ${parent}`));
            return;
          }
          addChild(parent, ch, index2);
        });
        child.connect("child-removed", (_, ch) => {
          if (!(ch instanceof GObject6.Object)) {
            console.error(TypeError(`cannot remove ${ch} from ${parent}`));
            return;
          }
          remove(parent, ch);
        });
        onCleanup(() => child.destroy());
        return;
      }
      add(parent, child, index);
      return;
    }
    throw Error(`cannot add ${child} to ${parent}`);
  }
});

// ../../../../usr/share/ags/js/src/gtk4/jsx-runtime.ts
Object.assign(intrinsicElements, {
  box: Gtk4.Box,
  button: Gtk4.Button,
  centerbox: Gtk4.CenterBox,
  // circularprogress: Astal.CircularProgress,
  drawingarea: Gtk4.DrawingArea,
  entry: Gtk4.Entry,
  image: Gtk4.Image,
  label: Gtk4.Label,
  levelbar: Gtk4.LevelBar,
  menubutton: Gtk4.MenuButton,
  overlay: Gtk4.Overlay,
  popover: Gtk4.Popover,
  revealer: Gtk4.Revealer,
  scrolledwindow: Gtk4.ScrolledWindow,
  slider: Astal3.Slider,
  stack: Gtk4.Stack,
  switch: Gtk4.Switch,
  togglebutton: Gtk4.ToggleButton,
  window: Astal3.Window
});

// src/widget/CircularImage.tsx
var getPixbufForIconName = ({
  icon,
  size
}) => {
  const display = Gdk.Display.get_default();
  if (!display) return null;
  const iconTheme = Gtk2.IconTheme.get_for_display(display);
  if (!getIsIcon({ icon, iconTheme })) {
    return null;
  }
  const iconInfo = iconTheme.lookup_icon(
    icon,
    null,
    // fallbacks
    200,
    // size in app pixels
    1,
    // scale (for HiDPI, usually 1 or window scale)
    null,
    // text direction, null for LTR
    null
    // flags);
  );
  const file = iconInfo?.get_file();
  const path = file?.get_path();
  if (!path) return null;
  try {
    return GdkPixbuf.Pixbuf.new_from_file_at_scale(path, size, size, true);
  } catch (error) {
    return null;
  }
};
var CircularImage = ({
  img,
  size: wantedSize,
  $type,
  iconFallback,
  onClicked,
  onRightClicked,
  ...props
}) => {
  let drawinArea;
  const unsubscribe = img.subscribe(() => {
    drawinArea.queue_draw();
  });
  onCleanup(() => {
    unsubscribe();
  });
  return /* @__PURE__ */ jsx(
    Gtk2.DrawingArea,
    {
      $type,
      ...props,
      $: (s) => {
        s.set_draw_func((_, cr, width, height) => {
          let cover = img.get();
          cover = cover?.startsWith("file://") ? cover.replace("file://", "") : cover;
          const size = Math.min(width, height, wantedSize);
          let pixbuf = null;
          if (cover) {
            try {
              const origPixbuf = GdkPixbuf.Pixbuf.new_from_file(cover);
              const imgWidth = origPixbuf.get_width();
              const imgHeight = origPixbuf.get_height();
              const circleDiameter = size;
              const scaleX = circleDiameter / imgWidth;
              const scaleY = circleDiameter / imgHeight;
              const scale = Math.max(scaleX, scaleY);
              const scaledWidth = Math.ceil(imgWidth * scale);
              const scaledHeight = Math.ceil(imgHeight * scale);
              pixbuf = origPixbuf.scale_simple(
                scaledWidth,
                scaledHeight,
                GdkPixbuf.InterpType.HYPER
              );
            } catch {
              pixbuf = getPixbufForIconName({ icon: cover, size });
            }
          }
          if (!pixbuf && iconFallback) {
            pixbuf = getPixbufForIconName({
              icon: iconFallback,
              size
            });
          }
          if (!pixbuf) {
            return;
          }
          const cx = width / 2;
          const cy = height / 2;
          const radius = size / 2;
          cr.arc(cx, cy, radius, 0, Math.PI * 2);
          cr.clip();
          const x = cx - pixbuf.get_width() / 2;
          const y = cy - pixbuf.get_height() / 2;
          Gdk.cairo_set_source_pixbuf(cr, pixbuf, x, y);
          cr.paint();
        });
        if (onClicked) {
          const gesture = Gtk2.GestureClick.new();
          gesture.set_button(1);
          gesture.connect("released", () => {
            onClicked();
          });
          s.add_controller(gesture);
        }
        if (onRightClicked) {
          const gesture = Gtk2.GestureClick.new();
          gesture.set_button(3);
          gesture.connect("released", () => {
            onRightClicked();
          });
          s.add_controller(gesture);
        }
        drawinArea = s;
      }
    }
  );
};
var CircularImage_default = CircularImage;

// src/constants/theme/spacing.ts
var spacing = {
  xSmall: 2,
  small: 4,
  normal: 8,
  large: 12
};

// src/widget/MediaPlayer.tsx
var getIsValidKeyForScale = (keyval) => {
  return [
    Gdk.KEY_Right,
    Gdk.KEY_Left,
    Gdk.KEY_Page_Down,
    Gdk.KEY_Page_Up,
    Gdk.KEY_Home,
    Gdk.KEY_End
  ].includes(keyval);
};
var ListItemWithImage = class extends Gtk2.ListItem {
};
function matchClientToPlayer(player) {
  const hypr = Hyprland.get_default();
  const entry = player.get_entry()?.toLowerCase().replace(/-/g, "_");
  const identity = player.get_identity().toLowerCase();
  const clients = hypr.get_clients();
  return clients.find(
    (c) => c.get_class().toLowerCase().includes(entry || identity)
  ) ?? clients.find((c) => c.get_title().toLowerCase().includes(identity));
}
var createPositionAdjustment = ({
  length,
  position
}) => {
  return Gtk2.Adjustment.new(position ?? 0, 0, length || 1, 1, 1, 0);
};
var Select = ({
  allPlayers,
  setSelectedPlayer,
  selectedIndex,
  selectionModel
}) => {
  const [hasItems, setHasItems] = createState(selectionModel.get_n_items() > 0);
  selectionModel.connect("notify::n-items", () => {
    const itemsCount = selectionModel.get_n_items();
    setHasItems(itemsCount > 0);
  });
  return /* @__PURE__ */ jsx(
    Gtk2.DropDown,
    {
      model: selectionModel,
      selected: selectedIndex,
      sensitive: hasItems,
      onNotifySelectedItem: (s) => {
        const item = s.get_selected_item();
        const player = allPlayers.get().find((p) => p.get_bus_name() === item?.busName);
        if (player) {
          setSelectedPlayer(player);
        }
      },
      factory: /* @__PURE__ */ jsx(
        Gtk2.SignalListItemFactory,
        {
          onSetup: (_factoru, l) => {
            const listItem = l;
            const box = new Gtk2.Box({
              spacing: spacing.normal,
              orientation: Gtk2.Orientation.HORIZONTAL
            });
            const image = new Gtk2.Image({
              iconName: "media-optical-symbolic",
              // you can change to any icon name
              pixelSize: 16
            });
            const label = new Gtk2.Label({ xalign: 0 });
            listItem._image = image;
            listItem._label = label;
            box.append(image);
            box.append(label);
            listItem.set_child(box);
          },
          onBind: (_factory, l) => {
            const listItem = l;
            const label = listItem._label;
            const image = listItem._image;
            const item = listItem.get_item();
            label?.set_text(item.text);
            const display = Gdk.Display.get_default();
            if (display) {
              const iconTheme = Gtk2.IconTheme.get_for_display(display);
              const icon = item.desktopIcon;
              if (getIsIcon({ icon, iconTheme })) {
                image.set_from_icon_name(icon);
              } else {
                image.set_from_icon_name("multimedia-player-symbolic");
              }
            }
          }
        }
      )
    }
  );
};
var MediaPlayer = ({ variant }) => {
  const {
    playerInfo: {
      canLoop,
      coverArt,
      playbackStatus,
      canPlayOrPause,
      canNext,
      canBack,
      position,
      length,
      album,
      loopStatus,
      canShuffle,
      shuffleStatus,
      artist,
      title
    },
    selectedPlayer,
    setSelectedPlayer,
    allPlayers,
    selectedIndex,
    selectionModel
  } = usePlayerInfo();
  const [isSeeking, setIsSeeking] = createState(false);
  const playBtnIcon = playbackStatus((playbackStatus2) => {
    return playbackStatus2 === Mpris2.PlaybackStatus.PLAYING ? "media-playback-pause" : playbackStatus2 === Mpris2.PlaybackStatus.PAUSED ? "media-playback-start" : "media-playback-stop";
  });
  const songLabel = createComputed([title, artist], (...args) => {
    return args.filter(Boolean).join(" - ") || "Nothing Playing";
  });
  const isSensitivePlayOrPause = canPlayOrPause;
  const isSensitiveNext = canNext;
  const isSensitivePrev = canBack;
  const [positionAdjustment, setPositionAdjustment] = createState(
    createPositionAdjustment({
      position: position.get(),
      length: length.get()
    })
  );
  const cava = Cava.get_default();
  cava?.set_bars(48);
  let cavaDrawingArea;
  let imgDrawingArea;
  const [cavaBars, setCavaBars] = createState(
    new Array(cava?.get_bars()).fill(0)
  );
  const updateScale = (s) => {
    const adjustment = s.get_adjustment();
    const v = adjustment.get_value();
    selectedPlayer.get()?.set_position(v);
    setIsSeeking(false);
  };
  const updateScaleSeekValue = () => {
    setIsSeeking(true);
  };
  const lengthUnsubscribe = length.subscribe(() => {
    if (positionAdjustment.get().get_upper() === length.get()) return;
    positionAdjustment.get().set_upper(length.get() ?? 0);
  });
  const positionUnsubscribe = position.subscribe(() => {
    if (isSeeking.get()) return;
    const v = position.get();
    if (v === positionAdjustment.get().get_value()) return;
    positionAdjustment.get().set_value(v ?? 0);
  });
  const convertUnsubscribe = coverArt.subscribe(() => {
    imgDrawingArea?.queue_draw();
  });
  const selectedPlayerUnsubscribe = selectedPlayer.subscribe(() => {
    const length2 = selectedPlayer.get().get_length() ?? 0;
    const position2 = selectedPlayer.get().get_position() ?? 0;
    setPositionAdjustment(
      createPositionAdjustment({
        position: position2,
        length: length2
      })
    );
  });
  cava?.connect("notify::values", () => {
    const lerp = (a, b, t) => a + (b - a) * t;
    const isPlaying = playbackStatus.get() === Mpris2.PlaybackStatus.PLAYING;
    const myBars = [...cavaBars.get()];
    const values = cava.get_values();
    const bars = cava.get_bars();
    for (let i = 0; i < bars; i++) {
      const newVal = values[i] ?? 1;
      if (isPlaying) {
        myBars[i] = lerp(myBars[i], newVal, 0.3);
      } else {
        myBars[i] = lerp(myBars[i], 0, 0.1);
      }
    }
    setCavaBars(myBars);
    cavaDrawingArea?.queue_draw();
  });
  onCleanup(() => {
    lengthUnsubscribe();
    positionUnsubscribe();
    convertUnsubscribe();
    selectedPlayerUnsubscribe();
  });
  return /* @__PURE__ */ jsxs(
    "box",
    {
      orientation: variant === "complete" ? Gtk2.Orientation.HORIZONTAL : Gtk2.Orientation.VERTICAL,
      hexpand: true,
      spacing: spacing.small,
      children: [
        /* @__PURE__ */ jsxs("overlay", { children: [
          /* @__PURE__ */ jsx(
            "box",
            {
              heightRequest: variant === "complete" ? 300 : 100,
              widthRequest: variant === "complete" ? 300 : 150
            }
          ),
          /* @__PURE__ */ jsx(
            CircularImage_default,
            {
              $type: "overlay",
              img: coverArt,
              size: variant === "complete" ? 180 : 90,
              iconFallback: "media-album-track"
            }
          ),
          /* @__PURE__ */ jsx(
            Gtk2.DrawingArea,
            {
              $type: "overlay",
              contentWidth: 280,
              contentHeight: 280,
              visible: variant === "complete",
              class: "MediaPlayerBars",
              hexpand: true,
              vexpand: true,
              $: (s) => {
                s.set_draw_func((widget, cr, width, height) => {
                  const bars = cavaBars.get();
                  const cx = width / 2;
                  const cy = height / 2;
                  const radius = 100;
                  const maxBarLength = 80;
                  const count = bars.length;
                  const color = widget.get_color();
                  for (let i = 0; i < count; i++) {
                    const angle = i / count * Math.PI * 2;
                    const barLength = Math.pow(bars[i], 1.5) * maxBarLength;
                    const x1 = cx + Math.cos(angle) * radius;
                    const y1 = cy + Math.sin(angle) * radius;
                    const x2 = cx + Math.cos(angle) * (radius + barLength);
                    const y2 = cy + Math.sin(angle) * (radius + barLength);
                    cr.setSourceRGBA(
                      color.red,
                      color.green,
                      color.blue,
                      color.alpha
                    );
                    cr.setLineWidth(4);
                    cr.setLineCap(Cairo.LineCap.ROUND);
                    cr.moveTo(x1, y1);
                    cr.lineTo(x2, y2);
                    cr.stroke();
                  }
                });
                cavaDrawingArea = s;
              }
            }
          )
        ] }),
        /* @__PURE__ */ jsxs(
          "box",
          {
            orientation: Gtk2.Orientation.VERTICAL,
            spacing: spacing.xSmall,
            valign: Gtk2.Align.CENTER,
            children: [
              /* @__PURE__ */ jsxs(
                "box",
                {
                  halign: Gtk2.Align.CENTER,
                  valign: Gtk2.Align.CENTER,
                  orientation: Gtk2.Orientation.VERTICAL,
                  children: [
                    /* @__PURE__ */ jsx(
                      "box",
                      {
                        widthRequest: 100,
                        halign: Gtk2.Align.CENTER,
                        valign: Gtk2.Align.CENTER,
                        children: /* @__PURE__ */ jsx(
                          "label",
                          {
                            label: songLabel,
                            class: "MediaPlayerSongLabel",
                            ellipsize: Pango.EllipsizeMode.END,
                            maxWidthChars: variant === "complete" ? 50 : 30
                          }
                        )
                      }
                    ),
                    /* @__PURE__ */ jsx(
                      "box",
                      {
                        halign: Gtk2.Align.CENTER,
                        valign: Gtk2.Align.CENTER,
                        visible: album((v) => !!v),
                        children: /* @__PURE__ */ jsx(
                          "label",
                          {
                            label: album,
                            ellipsize: Pango.EllipsizeMode.END,
                            maxWidthChars: variant === "complete" ? 50 : 30
                          }
                        )
                      }
                    )
                  ]
                }
              ),
              /* @__PURE__ */ jsx(
                Gtk2.Scale,
                {
                  marginStart: 16,
                  marginEnd: 16,
                  sensitive: isSensitivePlayOrPause,
                  adjustment: positionAdjustment,
                  draw_value: false,
                  onValueChanged: (s) => {
                    const adjustment = s.get_adjustment();
                    const max = adjustment.get_upper();
                    const value = adjustment.get_value();
                    s.clear_marks();
                    s.add_mark(0, Gtk2.PositionType.BOTTOM, formatSeconds(value));
                    s.add_mark(max, Gtk2.PositionType.RIGHT, formatSeconds(max));
                  },
                  $: (s) => {
                    const keyController = Gtk2.EventControllerKey.new();
                    let clickCOntroller = void 0;
                    const controllers = s.observe_controllers();
                    for (var i = 0; i < controllers.get_n_items(); i++) {
                      var controller = controllers.get_item(i);
                      if (controller instanceof Gtk2.GestureClick) {
                        clickCOntroller = controller;
                        break;
                      }
                    }
                    if (!clickCOntroller) {
                      clickCOntroller = new Gtk2.GestureClick();
                      s.add_controller(clickCOntroller);
                    }
                    keyController.connect("key-pressed", (_, keyval) => {
                      if (!getIsValidKeyForScale(keyval)) return;
                      updateScaleSeekValue();
                    });
                    keyController.connect("key-released", (_, keyval) => {
                      if (!getIsValidKeyForScale(keyval)) return;
                      updateScale(s);
                    });
                    clickCOntroller.connect("pressed", () => {
                      updateScaleSeekValue();
                    });
                    clickCOntroller.connect("released", () => {
                      updateScale(s);
                    });
                    s.add_controller(keyController);
                  }
                }
              ),
              /* @__PURE__ */ jsxs("centerbox", { hexpand: true, children: [
                variant === "complete" ? /* @__PURE__ */ jsxs("box", { $type: "start", spacing: spacing.small, children: [
                  /* @__PURE__ */ jsx(
                    Gtk2.ToggleButton,
                    {
                      sensitive: canLoop,
                      active: loopStatus(
                        (s) => s === Mpris2.Loop.PLAYLIST || s === Mpris2.Loop.TRACK
                      ),
                      onClicked: () => {
                        selectedPlayer.get().loop();
                      },
                      children: /* @__PURE__ */ jsx(
                        "image",
                        {
                          iconName: loopStatus((status) => {
                            if (status === Mpris2.Loop.TRACK) {
                              return "media-playlist-repeat-song";
                            } else {
                              return "media-playlist-repeat";
                            }
                          })
                        }
                      )
                    }
                  ),
                  /* @__PURE__ */ jsx(
                    Gtk2.ToggleButton,
                    {
                      sensitive: canShuffle,
                      active: shuffleStatus((s) => s === Mpris2.Shuffle.ON),
                      onClicked: () => {
                        selectedPlayer.get().set_shuffle_status(Mpris2.Shuffle.ON);
                      },
                      children: /* @__PURE__ */ jsx(
                        "image",
                        {
                          iconName: shuffleStatus((status) => {
                            if (status === Mpris2.Shuffle.OFF) {
                              return "media-playlist-no-shuffle";
                            } else {
                              return "media-playlist-shuffle";
                            }
                          })
                        }
                      )
                    }
                  ),
                  /* @__PURE__ */ jsx(
                    "button",
                    {
                      iconName: "edit-find",
                      onClicked: () => {
                        const player = selectedPlayer.get();
                        const client = player && matchClientToPlayer(player);
                        client?.focus();
                      }
                    }
                  )
                ] }) : null,
                /* @__PURE__ */ jsxs(
                  "box",
                  {
                    $type: "center",
                    orientation: Gtk2.Orientation.HORIZONTAL,
                    spacing: spacing.small,
                    halign: Gtk2.Align.CENTER,
                    children: [
                      /* @__PURE__ */ jsx(
                        "button",
                        {
                          sensitive: isSensitivePrev,
                          onClicked: () => {
                            setIsSeeking(false);
                            selectedPlayer.get()?.previous();
                          },
                          class: variant === "complete" ? "" : "flat",
                          children: /* @__PURE__ */ jsx("image", { iconName: "media-skip-backward" })
                        }
                      ),
                      /* @__PURE__ */ jsx(
                        "button",
                        {
                          sensitive: isSensitivePlayOrPause,
                          class: "circular",
                          onClicked: () => {
                            setIsSeeking(false);
                            selectedPlayer.get()?.play_pause();
                          },
                          children: /* @__PURE__ */ jsx("image", { iconName: playBtnIcon })
                        }
                      ),
                      /* @__PURE__ */ jsx(
                        "button",
                        {
                          sensitive: isSensitiveNext,
                          onClicked: () => {
                            selectedPlayer.get()?.next();
                          },
                          class: variant === "complete" ? "" : "flat",
                          children: /* @__PURE__ */ jsx("image", { iconName: "media-skip-forward" })
                        }
                      )
                    ]
                  }
                ),
                variant === "complete" ? /* @__PURE__ */ jsx("box", { $type: "end", css: "margin-left:8px;", children: /* @__PURE__ */ jsx(
                  Select,
                  {
                    allPlayers,
                    selectedIndex,
                    setSelectedPlayer,
                    selectionModel
                  }
                ) }) : null
              ] })
            ]
          }
        )
      ]
    }
  );
};
var MediaPlayer_default = MediaPlayer;

// src/hooks/useIsAnyPlayerPlaying.ts
import Mpris3 from "gi://AstalMpris";
var getPlayersPlaying = (players) => {
  return players.get().map((p) => ({
    busName: p.get_bus_name(),
    isPlaying: p.get_playback_status() === Mpris3.PlaybackStatus.PLAYING
  }));
};
var useIsAnyPlayerPlaying = () => {
  const mpris = Mpris3.get_default();
  const allPlayers = createBinding(mpris, "players");
  const [playersPlaying, setPlayersPlaying] = createState(
    getPlayersPlaying(allPlayers)
  );
  const isAnyPlayerPlaying = createComputed([playersPlaying], (players) => {
    return players.some((p) => !!p.isPlaying);
  });
  allPlayers.get().forEach((player) => {
    player.connect("notify::playback-status", () => {
      setPlayersPlaying(getPlayersPlaying(allPlayers));
    });
  });
  const unsubscribePlayers = allPlayers.subscribe(() => {
    setPlayersPlaying(getPlayersPlaying(allPlayers));
  });
  onCleanup(() => {
    unsubscribePlayers();
  });
  return isAnyPlayerPlaying;
};

// src/utils/get-mpvpaper-image.ts
import Gio6 from "gi://Gio";
import GLib6 from "gi://GLib";
function extractFrame(videoPath, outputPath) {
  return new Promise((resolve, reject) => {
    const cmd = [
      "ffmpeg",
      "-y",
      // overwrite output
      "-i",
      videoPath,
      "-frames:v",
      "1",
      "-q:v",
      "2",
      outputPath
    ];
    const proc = Gio6.Subprocess.new(
      cmd,
      Gio6.SubprocessFlags.STDOUT_SILENCE | Gio6.SubprocessFlags.STDERR_SILENCE
    );
    proc.wait_check_async(null, (procObj, res) => {
      try {
        const success = procObj?.wait_check_finish(res);
        if (success) resolve(true);
        else reject(new Error("ffmpeg failed"));
      } catch (err) {
        reject(err);
      }
    });
  });
}
async function listenMpvPathChanges(onFrameExtracted, retry = true) {
  const address = Gio6.UnixSocketAddress.new("/tmp/mpvsocket");
  const client = new Gio6.SocketClient();
  let conn;
  try {
    conn = await new Promise((resolve, reject) => {
      client.connect_async(address, null, (src, res) => {
        try {
          resolve(client.connect_finish(res));
        } catch (e) {
          reject(e);
        }
      });
    });
  } catch (err) {
    printerr("Connection failed:", err.message);
    if (retry) {
      GLib6.timeout_add_seconds(GLib6.PRIORITY_DEFAULT, 3, () => {
        listenMpvPathChanges(onFrameExtracted, true);
        return GLib6.SOURCE_REMOVE;
      });
    }
    return;
  }
  const input = conn.get_input_stream();
  const output = conn.get_output_stream();
  const subscribeCmd = JSON.stringify({
    command: ["observe_property", 1, "path"]
  }) + "\n";
  try {
    output.write_all(subscribeCmd, null);
  } catch (e) {
    printerr("Write failed:", e.message);
    if (retry) {
      GLib6.timeout_add_seconds(GLib6.PRIORITY_DEFAULT, 3, () => {
        listenMpvPathChanges(onFrameExtracted, true);
        return GLib6.SOURCE_REMOVE;
      });
    }
    return;
  }
  let buffer = "";
  function onRead(src, res) {
    if (!src) return;
    try {
      const bytes = src.read_bytes_finish(res);
      const data = bytes?.get_data();
      if (!data || data.length === 0) {
        printerr("Disconnected or EOF. Reconnecting...");
        conn.close(null);
        if (retry) {
          GLib6.timeout_add_seconds(GLib6.PRIORITY_DEFAULT, 3, () => {
            listenMpvPathChanges(onFrameExtracted, true);
            return GLib6.SOURCE_REMOVE;
          });
        }
        return;
      }
      buffer += new TextDecoder().decode(data);
      const lines = buffer.split("\n");
      buffer = lines.pop() || "";
      for (const line of lines) {
        if (!line.trim()) continue;
        try {
          const json = JSON.parse(line);
          if (json.event === "property-change" && json.name === "path" && json.data) {
            const outputPath = GLib6.build_filenamev([
              "/tmp",
              `mpv_current_frame-${Date.now()}.jpg`
            ]);
            extractFrame(json.data, outputPath).then(() => {
              onFrameExtracted(outputPath);
            }).catch((e) => {
              printerr("Frame extraction error:", e.message);
            });
          }
        } catch (e) {
          printerr("JSON parse error:", e.message);
        }
      }
      src.read_bytes_async(4096, GLib6.PRIORITY_DEFAULT, null, onRead);
    } catch (e) {
      printerr("Stream read error:", e.message);
    }
  }
  input.read_bytes_async(4096, GLib6.PRIORITY_DEFAULT, null, onRead);
}
function startMpvImageListener(onFrameExtracted) {
  listenMpvPathChanges(onFrameExtracted);
}

// src/utils/change-mpvpaper-image.ts
import Gio7 from "gi://Gio";
import GLib7 from "gi://GLib";
function sendMpvCommand(command) {
  return new Promise((resolve, reject) => {
    const address = Gio7.UnixSocketAddress.new("/tmp/mpvsocket");
    const client = new Gio7.SocketClient();
    client.connect_async(address, null, (client_, res) => {
      try {
        if (!client_) {
          printerr("No client_ for sendMpvCommand");
          return;
        }
        const conn = client_.connect_finish(res);
        const output = conn.get_output_stream();
        const cmdStr = JSON.stringify({ command }) + "\n";
        const byteArray = new TextEncoder().encode(cmdStr);
        output.write_bytes_async(
          byteArray,
          GLib7.PRIORITY_DEFAULT,
          null,
          (stream, result) => {
            try {
              stream?.write_bytes_finish(result);
              output.close(null);
              conn.close(null);
              resolve();
            } catch (e) {
              const error = e;
              reject(
                new Error("Failed to write to MPV socket: " + error.message)
              );
            }
          }
        );
      } catch (e) {
        const error = e;
        reject(new Error("Failed to connect to MPV socket: " + error.message));
      }
    });
  });
}
var changeMpvPaperImage = (action) => {
  if (action === "next") {
    sendMpvCommand(["playlist-next"]);
  } else {
    sendMpvCommand(["playlist-prev"]);
  }
};

// src/utils/cpu.ts
import GTop from "gi://GTop";
var cpu = new GTop.glibtop_cpu();
function getCpuUsage() {
  GTop.glibtop_get_cpu(cpu);
  const used = cpu.user + cpu.sys + cpu.nice + cpu.irq + cpu.softirq + cpu.iowait;
  const total = used + cpu.idle + cpu.iowait;
  return { used, total };
}
function calculateCpuLoad(prev, curr) {
  if (!prev || !curr) return null;
  const diffUsed = curr.used - prev.used;
  const diffTotal = curr.total - prev.total;
  const res = diffUsed / diffTotal;
  return res;
}

// src/hooks/useCpuUsage.ts
var useCpuUsage = () => {
  const [prev, setPrev] = createState(getCpuUsage());
  const data = createPoll(
    {
      cpuUsage: 0,
      cpuUsageInFraction: 0
    },
    1e3,
    () => {
      const curr = getCpuUsage();
      const load = calculateCpuLoad(prev.get(), curr);
      if (!load) return { cpuUsage: 0, cpuUsageInFraction: 0 };
      setPrev(curr);
      const cpuUsage = Number(load) * 100;
      return {
        cpuUsage,
        cpuUsageInFraction: cpuUsage / 100
      };
    }
  );
  return data;
};

// src/utils/memory-ram.ts
import GTop2 from "gi://GTop";
var mem = new GTop2.glibtop_mem();
function getMemoryUsage() {
  GTop2.glibtop_get_mem(mem);
  const total = mem.total;
  const available = mem.free + mem.buffer + mem.cached;
  const used = total - available;
  const percentUsed = used / total;
  return {
    totalKB: total,
    availableKB: available,
    usedKB: used,
    percentUsed: percentUsed.toFixed(2)
  };
}

// src/hooks/useMemoryRamUsage.ts
var useMemoryRamUsage = () => {
  const data = createPoll(
    {
      memoryUsage: 0,
      memoryUsageInFraction: 0
    },
    1e3,
    () => {
      const load = getMemoryUsage();
      if (!load) return { memoryUsage: 0, memoryUsageInFraction: 0 };
      const used = Number(load.percentUsed) * 100;
      return {
        memoryUsage: used,
        memoryUsageInFraction: used / 100
      };
    }
  );
  return data;
};

// src/hooks/useFormattedTime.ts
import GLib8 from "gi://GLib";
var useFormattedTime = (format) => {
  const timeString = createPoll("", 500, () => {
    let now = GLib8.DateTime.new_now_local();
    const formatToUse = format === "time" ? "%I:%M" : "%I:%M %p";
    return now.format(formatToUse) ?? "";
  });
  return timeString;
};

// src/widget/Workspaces.tsx
import Hyprland2 from "gi://AstalHyprland";

// src/utils/is-current-monitor.ts
var getIsCurrentMonitor = (hMonitor, gMonitor) => {
  return hMonitor?.get_model() === gMonitor?.get_model();
};

// src/objects/EmptyHyprlandWorkspace.ts
var _id_dec, _a3, _EmptyHyprlandWorkspace_decorators, _init2;
_EmptyHyprlandWorkspace_decorators = [register({ GTypeName: "EmptyHyprlandWorkspace" })];
var EmptyHyprlandWorkspace = class extends (_a3 = GObject5.Object, _id_dec = [property(Number)], _a3) {
  constructor({ id }) {
    super();
    this.id = __runInitializers(_init2, 8, this, 0), __runInitializers(_init2, 11, this);
    this.id = id;
  }
  get_id() {
    return this.id;
  }
  get_clients() {
    return [];
  }
  get clients() {
    return this.get_clients();
  }
};
_init2 = __decoratorStart(_a3);
__decorateElement(_init2, 5, "id", _id_dec, EmptyHyprlandWorkspace);
EmptyHyprlandWorkspace = __decorateElement(_init2, 0, "EmptyHyprlandWorkspace", _EmptyHyprlandWorkspace_decorators, EmptyHyprlandWorkspace);
__runInitializers(_init2, 1, EmptyHyprlandWorkspace);

// src/utils/workspaces.ts
var workspacesLimit = 5;
var getWorkspacesOfCurrentMonitor = (hyprland, gdkmonitor, monitorIndex) => {
  const workspaces = hyprland.get_workspaces();
  const existing = workspaces.filter((w) => {
    return getIsCurrentMonitor(w.get_monitor(), gdkmonitor);
  });
  const byId = new Map(existing.map((w) => [w.get_id(), w]));
  const result = [];
  for (let i = 1; i <= workspacesLimit; i++) {
    const id = i + workspacesLimit * monitorIndex;
    const ws = byId.get(id);
    if (ws) {
      result.push(ws);
    } else {
      const fake = new EmptyHyprlandWorkspace({
        id
      });
      result.push(fake);
    }
  }
  return result;
};

// src/widget/Workspaces.tsx
var ClientItem = ({
  client,
  focusedClient,
  hasMoreClients
}) => {
  const found = getAppIcon(client.get_class());
  const isIcon = getIsIconFile({ icon: found }) === false;
  const title = createBinding(client, "title");
  const isFocused = focusedClient(
    (c) => c?.get_address() === client?.get_address()
  );
  const className = createComputed(
    [isFocused, hasMoreClients],
    (isFocused2, hasMoreClients2) => {
      let res = "WorkspaceClientItem circular";
      if (isFocused2 === true) {
        res += " focused";
      } else if (hasMoreClients2 === true) {
        res += " flat";
      }
      return res;
    }
  );
  return /* @__PURE__ */ jsx(
    "button",
    {
      class: className,
      tooltipText: title,
      onClicked: () => {
        const isCurrentlyFocused = isFocused.get();
        if (isCurrentlyFocused === true) return;
        client.focus();
      },
      focusable: false,
      children: /* @__PURE__ */ jsx(
        "image",
        {
          iconName: isIcon ? found : void 0,
          visible: !!found,
          file: isIcon ? void 0 : found
        }
      )
    }
  );
};
var WorkspaceItem = ({
  workspace,
  focusedClient,
  focusedWorkspaceId,
  hyprland,
  index
}) => {
  const clients = createBinding(workspace, "clients");
  const hasNoClients = clients((c) => c.length > 0 === false);
  const className = clients((clients2) => {
    let res = "WorkspaceItem";
    if (clients2.length > 1) {
      res += " group";
    }
    return res;
  });
  const isFocusedEmpty = focusedWorkspaceId((v) => {
    return workspace.get_id() === v;
  });
  return /* @__PURE__ */ jsxs("box", { class: className, children: [
    /* @__PURE__ */ jsx(For, { each: clients, children: (client) => /* @__PURE__ */ jsx(
      ClientItem,
      {
        client,
        focusedClient,
        hasMoreClients: clients((c) => c.length > 1)
      }
    ) }),
    /* @__PURE__ */ jsx(
      "button",
      {
        visible: hasNoClients,
        class: isFocusedEmpty(
          (v) => v === true ? "WorkspaceClientItem focused" : "WorkspaceClientItem"
        ),
        onClicked: () => {
          hyprland.dispatch("split-workspace", (index.get() + 1).toString());
        },
        tooltipText: "Vacio",
        children: /* @__PURE__ */ jsx("label", { label: "\u2022" })
      }
    )
  ] });
};
var Workspaces = ({
  gdkmonitor,
  index
}) => {
  const hyprland = Hyprland2.get_default();
  const focusedWorkspace = createBinding(hyprland, "focusedWorkspace");
  const focusedWorkspaceId = focusedWorkspace((v) => v?.get_id());
  const [workspaces, setWorkspaces] = createState(
    getWorkspacesOfCurrentMonitor(hyprland, gdkmonitor, index)
  );
  const focusedClient = createBinding(hyprland, "focused_client");
  hyprland.connect("notify::workspaces", () => {
    const newWorkspaces = getWorkspacesOfCurrentMonitor(
      hyprland,
      gdkmonitor,
      index
    );
    setWorkspaces(newWorkspaces);
  });
  return /* @__PURE__ */ jsx("box", { class: "Workspaces", children: /* @__PURE__ */ jsx(For, { each: workspaces, children: (item, index2) => /* @__PURE__ */ jsx(
    WorkspaceItem,
    {
      index: index2,
      hyprland,
      focusedWorkspaceId,
      workspace: item,
      focusedClient
    }
  ) }) });
};
var Workspaces_default = Workspaces;

// src/widget/Tray.tsx
import AstalTray from "gi://AstalTray";
var getFinalTooltipMarkup = (item) => {
  return item.get_tooltip_markup() || item.get_title();
};
var TrayItem = ({ item }) => {
  const hasItems = !!item.get_menu_model()?.get_n_items();
  const [finalTooltipMarkup, setFinalTooltipMarkup] = createState(
    getFinalTooltipMarkup(item)
  );
  const gicon = createBinding(item, "gicon");
  const menuModel = createBinding(item, "menuModel");
  item.connect("notify::tooltip", (s) => {
    setFinalTooltipMarkup(getFinalTooltipMarkup(s));
  });
  item.connect("notify::title", (s) => {
    setFinalTooltipMarkup(getFinalTooltipMarkup(s));
  });
  if (hasItems)
    return /* @__PURE__ */ jsx(
      "menubutton",
      {
        class: "flat",
        $: (s) => {
          const actions = item.get_action_group();
          if (actions) s.insert_action_group("dbusmenu", actions);
        },
        tooltip_markup: finalTooltipMarkup,
        menuModel,
        children: /* @__PURE__ */ jsx("image", { gicon })
      }
    );
  return /* @__PURE__ */ jsx(
    "button",
    {
      css: "flat",
      onClicked: () => {
        item.activate(0, 0);
      },
      tooltip_markup: finalTooltipMarkup,
      children: /* @__PURE__ */ jsx("image", { gicon })
    }
  );
};
var Tray = () => {
  const tray = AstalTray.get_default();
  const items = createBinding(tray, "items");
  return /* @__PURE__ */ jsx(
    "box",
    {
      class: "TrayRow",
      spacing: spacing.small,
      visible: items((items2) => items2.length > 0),
      children: /* @__PURE__ */ jsx(For, { each: items, children: (item) => /* @__PURE__ */ jsx(TrayItem, { item }) })
    }
  );
};
var Tray_default = Tray;

// src/constants/windows.ts
var windowNames = {
  MainSearchWindow: "MainSearchWindow",
  Bar: "Bar",
  NotificationWindow: "NotificationWindow"
};

// src/utils/keyboard.ts
var getKeyboard = () => {
  return exec([
    "bash",
    "-c",
    "hyprctl devices -j | jq -r '.keyboards[] | select(.main == true) | .active_keymap'"
  ]);
};
var formatKeyboard = (keyboard2) => {
  if (keyboard2 === "Spanish" || keyboard2 === "Espa\xF1ol") {
    return "ES";
  } else if (keyboard2?.includes("English")) {
    return "US";
  }
  return keyboard2;
};

// src/widget/ControlPanel/ControlPanel.tsx
import AstalBluetooth from "gi://AstalBluetooth";
import AstalNetwork from "gi://AstalNetwork";

// src/utils/network.ts
var getHasVpn = (activeConnections = []) => {
  return activeConnections.some((ac) => {
    if (ac.get_vpn()) {
      return true;
    }
    const type = ac.get_connection_type();
    if (["wireguard", "openvpn", "ipsec", "ikev2"].includes(type)) {
      return true;
    }
    return false;
  });
};

// src/widget/ControlPanel/ControlPanel.tsx
var BluetoothIcon = () => {
  const bluetooth = AstalBluetooth.get_default();
  const isConnectedBluetooth = createBinding(bluetooth, "is_connected");
  const isPoweredBluetooth = createBinding(bluetooth, "is_powered");
  const bluetoothAdapter = createBinding(bluetooth, "adapter");
  const iconName = createComputed(
    [isConnectedBluetooth, isPoweredBluetooth, bluetoothAdapter],
    (_isConnectedBluetooth, isPoweredBluetooth2, bluetoothAdapter2) => {
      if (bluetoothAdapter2 === null || bluetoothAdapter2 === void 0) {
        return "bluetooth-x-symbolic";
      }
      if (isPoweredBluetooth2 === false) {
        return "bluetooth-none-symbolic";
      }
      return "bluetooth-symbolic";
    }
  );
  return /* @__PURE__ */ jsx(
    "image",
    {
      iconName,
      class: isConnectedBluetooth(
        (v) => v ? "ControlPanelBluetoothActive" : ""
      )
    }
  );
};
var NetworkIcon = () => {
  const network = AstalNetwork.get_default();
  const client = createBinding(network, "client");
  const primary = createBinding(network, "primary");
  const connectivity = createBinding(network, "connectivity");
  const state = createBinding(network, "state");
  const wifi = createBinding(network, "wifi");
  const [wifiStrength, setWifiStrength] = createState(
    wifi.get().get_strength() ?? 0
  );
  const [hasVpn, setHasVpn] = createState(
    getHasVpn(client.get().get_active_connections())
  );
  wifi.get().connect("notify::strength", () => {
    setWifiStrength(wifi.get()?.get_strength() ?? 0);
  });
  client.get().connect("notify::active-connections", (s) => {
    setHasVpn(getHasVpn(s.get_active_connections()));
  });
  const iconName = createComputed(
    [primary, connectivity, state, wifiStrength],
    (primary2, connectivity2, state2, wifiStrength2) => {
      if (state2 === AstalNetwork.State.CONNECTING) {
        return "radiowaves-dots-symbolic";
      }
      if (primary2 === AstalNetwork.Primary.WIFI && connectivity2 === AstalNetwork.Connectivity.FULL) {
        if (wifiStrength2 <= 0) {
          return "radiowaves-4-symbolic";
        } else if (wifiStrength2 <= 50) {
          return "radiowaves-3-symbolic";
        } else if (wifiStrength2 <= 75) {
          return "radiowaves-2-symbolic";
        }
        return "radiowaves-1-symbolic";
      }
      if (primary2 === AstalNetwork.Primary.WIRED && connectivity2 === AstalNetwork.Connectivity.FULL) {
        return "lan-symbolic";
      }
      if (connectivity2 === AstalNetwork.Connectivity.LIMITED || primary2 === AstalNetwork.Primary.UNKNOWN) {
        return "radiowaves-5-symbolic";
      }
      return "test";
    }
  );
  return /* @__PURE__ */ jsxs("box", { spacing: spacing.small, children: [
    /* @__PURE__ */ jsx("image", { iconName }),
    /* @__PURE__ */ jsx("image", { iconName: "vpn-caps-symbolic", visible: hasVpn })
  ] });
};
var ControlPanel = () => {
  return /* @__PURE__ */ jsxs("menubutton", { children: [
    /* @__PURE__ */ jsxs("box", { spacing: spacing.normal, children: [
      /* @__PURE__ */ jsx(NetworkIcon, {}),
      /* @__PURE__ */ jsx(Gtk2.Separator, { orientation: Gtk2.Orientation.VERTICAL }),
      /* @__PURE__ */ jsx(BluetoothIcon, {})
    ] }),
    /* @__PURE__ */ jsx("popover", { children: "Hello" })
  ] });
};
var ControlPanel_default = ControlPanel;

// src/widget/Bar.tsx
var dashboardBoxSpacing = spacing.normal;
var getDistro = () => {
  try {
    const [ok, content] = GLib9.file_get_contents("/etc/os-release");
    if (!ok) return "Unknown";
    const text = new TextDecoder().decode(content);
    const match = text.match(/^PRETTY_NAME="(.+)"$/m);
    return match ? match[1] : "Unknown";
  } catch {
    return "Unknown";
  }
};
var WallpaperImg = () => {
  const [wallpaperImg, setWallpaperImg] = createState("");
  startMpvImageListener((frame) => {
    setWallpaperImg(frame);
  });
  return /* @__PURE__ */ jsxs("overlay", { children: [
    /* @__PURE__ */ jsx(
      "box",
      {
        class: "WallpaperImgButtonContainer",
        $type: "overlay",
        widthRequest: 102,
        heightRequest: 100,
        children: /* @__PURE__ */ jsx(
          "button",
          {
            class: "circular flat WallpaperImgButton",
            hexpand: true,
            vexpand: true,
            iconName: "view-refresh",
            onClicked: () => {
              changeMpvPaperImage("next");
            },
            $: (s) => {
              const gesture = Gtk2.GestureClick.new();
              gesture.set_button(3);
              gesture.connect("released", () => {
                changeMpvPaperImage("prev");
              });
              s.add_controller(gesture);
            }
          }
        )
      }
    ),
    /* @__PURE__ */ jsx(
      CircularImage_default,
      {
        img: wallpaperImg,
        size: 300,
        widthRequest: 100,
        heightRequest: 100,
        iconFallback: "user-identity"
      }
    )
  ] });
};
var SystemProgressBarStat = ({
  iconName,
  fraction
}) => {
  return /* @__PURE__ */ jsxs("box", { orientation: Gtk2.Orientation.VERTICAL, spacing: spacing.normal, children: [
    /* @__PURE__ */ jsx(
      Gtk2.ProgressBar,
      {
        orientation: Gtk2.Orientation.VERTICAL,
        vexpand: true,
        fraction,
        inverted: true
      }
    ),
    /* @__PURE__ */ jsx("image", { iconName })
  ] });
};
var DashboardTab = () => {
  const wm = GLib9.getenv("XDG_SESSION_DESKTOP") ?? GLib9.getenv("XDG_CURRENT_DESKTOP") ?? "Unknown";
  const timeString = useFormattedTime("time");
  const separatedTime = timeString((v) => {
    const [hour, minute] = v.split(":");
    return { hour: hour || "", minute: minute || "" };
  });
  const dateString = createPoll("", 1e3, () => {
    const now = GLib9.DateTime.new_now_local();
    const dayString = now.format("%a, %e");
    if (!dayString) return "";
    const capitalized = dayString?.charAt(0).toUpperCase() + dayString?.slice(1);
    return capitalized;
  });
  const distro = getDistro();
  const upTime = createPoll("time", 6e4, "uptime -p");
  const cpuUsage = useCpuUsage();
  const memoryUsage = useMemoryRamUsage();
  return /* @__PURE__ */ jsxs(
    "box",
    {
      orientation: Gtk2.Orientation.HORIZONTAL,
      spacing: dashboardBoxSpacing,
      class: "DashboardTab",
      children: [
        /* @__PURE__ */ jsxs(
          "box",
          {
            orientation: Gtk2.Orientation.VERTICAL,
            spacing: dashboardBoxSpacing,
            hexpand: true,
            children: [
              /* @__PURE__ */ jsxs("box", { spacing: spacing.normal, hexpand: true, class: "DashboardBox extraPadding", children: [
                /* @__PURE__ */ jsx(WallpaperImg, {}),
                /* @__PURE__ */ jsxs(
                  "box",
                  {
                    orientation: Gtk2.Orientation.VERTICAL,
                    valign: Gtk2.Align.CENTER,
                    spacing: spacing.small,
                    children: [
                      /* @__PURE__ */ jsxs("box", { spacing: spacing.normal, children: [
                        /* @__PURE__ */ jsx("image", { iconName: "hyprland-symbolic", class: "HyprLandIcon" }),
                        /* @__PURE__ */ jsx("label", { label: wm, class: "DashboardTabSysInfoLabel" })
                      ] }),
                      /* @__PURE__ */ jsxs("box", { spacing: spacing.normal, children: [
                        /* @__PURE__ */ jsx("image", { iconName: "endeavouros-symbolic", class: "EndeavourOsIcon" }),
                        /* @__PURE__ */ jsx("label", { label: distro, class: "DashboardTabSysInfoLabel" })
                      ] }),
                      /* @__PURE__ */ jsxs("box", { spacing: spacing.normal, children: [
                        /* @__PURE__ */ jsx("image", { iconName: "clock-alt-symbolic", class: "UptimeIcon" }),
                        /* @__PURE__ */ jsx("label", { label: upTime, class: "DashboardTabSysInfoLabel" })
                      ] })
                    ]
                  }
                )
              ] }),
              /* @__PURE__ */ jsxs("box", { spacing: dashboardBoxSpacing, hexpand: true, children: [
                /* @__PURE__ */ jsx("box", { class: "DashboardBox extraPadding", vexpand: true, hexpand: true, children: /* @__PURE__ */ jsxs(
                  "box",
                  {
                    halign: Gtk2.Align.CENTER,
                    valign: Gtk2.Align.CENTER,
                    orientation: Gtk2.Orientation.VERTICAL,
                    hexpand: true,
                    children: [
                      /* @__PURE__ */ jsxs("box", { orientation: Gtk2.Orientation.VERTICAL, children: [
                        /* @__PURE__ */ jsx(
                          "label",
                          {
                            label: separatedTime((s) => s.hour),
                            class: "DashboardTabHourAndMinute"
                          }
                        ),
                        /* @__PURE__ */ jsx(Gtk2.Separator, {}),
                        /* @__PURE__ */ jsx(
                          "label",
                          {
                            label: separatedTime((s) => s.minute),
                            class: "DashboardTabHourAndMinute"
                          }
                        )
                      ] }),
                      /* @__PURE__ */ jsx("label", { label: dateString, class: "DashboardTabDate" })
                    ]
                  }
                ) }),
                /* @__PURE__ */ jsx("box", { class: "DashboardBox", children: /* @__PURE__ */ jsx(Gtk2.Calendar, { show_heading: false }) }),
                /* @__PURE__ */ jsxs("box", { class: "DashboardBox", spacing: spacing.large, children: [
                  /* @__PURE__ */ jsx(
                    SystemProgressBarStat,
                    {
                      iconName: "processor-symbolic",
                      fraction: cpuUsage((c) => c.cpuUsageInFraction)
                    }
                  ),
                  /* @__PURE__ */ jsx(
                    SystemProgressBarStat,
                    {
                      iconName: "memory-symbolic",
                      fraction: memoryUsage((c) => c.memoryUsageInFraction)
                    }
                  )
                ] })
              ] })
            ]
          }
        ),
        /* @__PURE__ */ jsx("box", { class: "DashboardBox", widthRequest: 300, children: /* @__PURE__ */ jsx("box", { valign: Gtk2.Align.CENTER, hexpand: true, vexpand: true, children: /* @__PURE__ */ jsx(MediaPlayer_default, { variant: "minimal" }) }) })
      ]
    }
  );
};
var MediaTab = () => {
  return /* @__PURE__ */ jsx("box", { class: "DashboardTab", children: /* @__PURE__ */ jsx(MediaPlayer_default, { variant: "complete" }) });
};
var DashboardPopover = () => {
  let switcher;
  let stack;
  return /* @__PURE__ */ jsx("popover", { children: /* @__PURE__ */ jsxs("box", { orientation: Gtk2.Orientation.VERTICAL, children: [
    /* @__PURE__ */ jsx(
      Gtk2.StackSwitcher,
      {
        $: (s) => {
          switcher = s;
        },
        stack
      }
    ),
    /* @__PURE__ */ jsxs(
      Gtk2.Stack,
      {
        transitionType: Gtk2.StackTransitionType.SLIDE_LEFT_RIGHT,
        $: (s) => {
          stack = s;
          if (switcher) switcher.set_stack(s);
        },
        children: [
          /* @__PURE__ */ jsx(
            Gtk2.StackPage,
            {
              name: "child1",
              title: "Dashboard",
              child: /* @__PURE__ */ jsx(DashboardTab, {})
            }
          ),
          /* @__PURE__ */ jsx(
            Gtk2.StackPage,
            {
              name: "child2",
              title: "Media",
              child: /* @__PURE__ */ jsx(MediaTab, {})
            }
          )
        ]
      }
    )
  ] }) });
};
var DashboardButton = () => {
  const isAnyPlaying = useIsAnyPlayerPlaying();
  return /* @__PURE__ */ jsxs("menubutton", { children: [
    /* @__PURE__ */ jsxs("box", { spacing: spacing.normal, children: [
      /* @__PURE__ */ jsx("label", { label: "Dashboard" }),
      /* @__PURE__ */ jsx(
        "image",
        {
          iconName: isAnyPlaying(
            (playing) => playing ? "audio-on" : "user-home"
          )
        }
      )
    ] }),
    /* @__PURE__ */ jsx(DashboardPopover, {})
  ] });
};
var TimeRow = () => {
  const timeString = useFormattedTime("time-with-pm");
  return /* @__PURE__ */ jsxs("menubutton", { halign: Gtk2.Align.CENTER, children: [
    /* @__PURE__ */ jsxs("box", { spacing: spacing.normal, children: [
      /* @__PURE__ */ jsx("image", { iconName: "month-symbolic" }),
      /* @__PURE__ */ jsx("label", { label: timeString })
    ] }),
    /* @__PURE__ */ jsx("popover", { children: /* @__PURE__ */ jsx(Gtk2.Calendar, {}) })
  ] });
};
function Bar({
  gdkmonitor,
  index,
  keyboard: keyboard2,
  setKeyboard: setKeyboard2
}) {
  const { TOP, LEFT, RIGHT } = Astal2.WindowAnchor;
  const [visible, setVisible] = createState(false);
  timeout(0, () => {
    setVisible(true);
  });
  return /* @__PURE__ */ jsx(
    "window",
    {
      visible,
      name: windowNames.Bar,
      class: "Bar",
      gdkmonitor,
      exclusivity: Astal2.Exclusivity.EXCLUSIVE,
      layer: Astal2.Layer.BOTTOM,
      anchor: TOP | LEFT | RIGHT,
      application: app_default,
      children: /* @__PURE__ */ jsxs("centerbox", { cssName: "centerbox", children: [
        /* @__PURE__ */ jsx("box", { $type: "start", children: /* @__PURE__ */ jsx(Workspaces_default, { gdkmonitor, index }) }),
        /* @__PURE__ */ jsx("box", { $type: "center", children: /* @__PURE__ */ jsx(DashboardButton, {}) }),
        /* @__PURE__ */ jsxs("box", { $type: "end", spacing: spacing.large, children: [
          /* @__PURE__ */ jsx(Tray_default, {}),
          /* @__PURE__ */ jsxs("box", { spacing: spacing.small, children: [
            /* @__PURE__ */ jsx(
              "button",
              {
                class: "flat",
                onClicked: async () => {
                  try {
                    await execAsync("hyprctl switchxkblayout current next");
                    setKeyboard2(getKeyboard());
                  } catch (error) {
                    printerr(error);
                  }
                },
                tooltipText: "Cambiar Teclado",
                children: /* @__PURE__ */ jsx("label", { label: keyboard2((v) => formatKeyboard(v)) })
              }
            ),
            /* @__PURE__ */ jsx(
              "button",
              {
                iconName: "image-round-symbolic",
                class: "flat",
                onClicked: () => {
                  changeMpvPaperImage("next");
                },
                $: (s) => {
                  const gesture = Gtk2.GestureClick.new();
                  gesture.set_button(3);
                  gesture.connect("released", () => {
                    changeMpvPaperImage("prev");
                  });
                  s.add_controller(gesture);
                },
                tooltipText: "Cambiar fondo de pantalla"
              }
            ),
            /* @__PURE__ */ jsx(
              "button",
              {
                iconName: "color-picker-symbolic",
                class: "flat",
                onClicked: () => {
                  execAsync(
                    "hyprpicker -a"
                    // -a para copiar al portapapeles automáticamente
                  );
                },
                tooltipText: "Haz clic para elegir un color"
              }
            ),
            /* @__PURE__ */ jsx(
              "button",
              {
                iconName: "clipboard-symbolic",
                class: "flat",
                onClicked: () => {
                  const terminal = findAvailableTerminal();
                  if (!terminal) {
                    printerr("NO terminal");
                    return;
                  }
                  exec([terminal, "--class", "clipse", "-e", "clipse"]);
                },
                tooltipText: "Clipboard"
              }
            )
          ] }),
          /* @__PURE__ */ jsx(TimeRow, {}),
          /* @__PURE__ */ jsx(ControlPanel_default, {}),
          /* @__PURE__ */ jsx(
            "menubutton",
            {
              iconName: "system-shutdown",
              class: "destructive-action circular",
              children: /* @__PURE__ */ jsx("popover", { children: /* @__PURE__ */ jsxs(
                "box",
                {
                  orientation: Gtk2.Orientation.VERTICAL,
                  spacing: spacing.small,
                  children: [
                    /* @__PURE__ */ jsx(
                      "button",
                      {
                        onClicked: () => {
                          execAsync("loginctl lock-session");
                        },
                        children: /* @__PURE__ */ jsxs("box", { children: [
                          /* @__PURE__ */ jsx("image", { iconName: "system-lock-screen" }),
                          /* @__PURE__ */ jsx("label", { label: "Lock" })
                        ] })
                      }
                    ),
                    /* @__PURE__ */ jsx("button", { children: /* @__PURE__ */ jsx("label", { label: "\u23FB Power Off" }) }),
                    /* @__PURE__ */ jsx("button", { children: /* @__PURE__ */ jsx("label", { label: "\u{1F504} Restart" }) })
                  ]
                }
              ) })
            }
          )
        ] })
      ] })
    }
  );
}

// src/widget/MainSearch/MainSearchWindow.tsx
import Hyprland3 from "gi://AstalHyprland";
import Gio8 from "gi://Gio?version=2.0";

// src/objects/MainSearchListItemObject.ts
var _desktopIcon_dec2, _desc_dec, _text_dec2, _a4, _MainSearchListItemObject_decorators, _init3;
_MainSearchListItemObject_decorators = [register({ GTypeName: "MainSearchListItem" })];
var MainSearchListItemObject = class extends (_a4 = GObject5.Object, _text_dec2 = [property(String)], _desc_dec = [property(String)], _desktopIcon_dec2 = [property(String)], _a4) {
  constructor({
    desktopIcon,
    text,
    onSelect,
    desc
  }) {
    super();
    this.text = __runInitializers(_init3, 8, this, ""), __runInitializers(_init3, 11, this);
    this.desc = __runInitializers(_init3, 12, this, ""), __runInitializers(_init3, 15, this);
    this.desktopIcon = __runInitializers(_init3, 16, this, ""), __runInitializers(_init3, 19, this);
    this._onSelect = void 0;
    this.text = text;
    this.desktopIcon = desktopIcon;
    this.desc = desc;
    this._onSelect = onSelect;
  }
  onSelect() {
    this._onSelect?.(this);
  }
};
_init3 = __decoratorStart(_a4);
__decorateElement(_init3, 5, "text", _text_dec2, MainSearchListItemObject);
__decorateElement(_init3, 5, "desc", _desc_dec, MainSearchListItemObject);
__decorateElement(_init3, 5, "desktopIcon", _desktopIcon_dec2, MainSearchListItemObject);
MainSearchListItemObject = __decorateElement(_init3, 0, "MainSearchListItemObject", _MainSearchListItemObject_decorators, MainSearchListItemObject);
__runInitializers(_init3, 1, MainSearchListItemObject);

// src/context/MainSearchWindowContext.ts
var MainSearchWindowContext = createContext({ setVisible: void 0, visible: void 0 });

// src/widget/MainSearch/MainSearchWindow.tsx
var transitionDuration = 500;
var MyListItem = class extends Gtk2.ListItem {
};
var filterCommands = (commands, query) => {
  const lowerQuery = query.toLowerCase();
  return commands.filter((cmd) => {
    const name = cmd;
    return name.includes(lowerQuery);
  });
};
var addAppsToListStore = (listStore, results) => {
  listStore.remove_all();
  results.forEach((r) => {
    const item = new MainSearchListItemObject({
      desktopIcon: r.get_icon_name(),
      text: r.get_name(),
      onSelect: () => r.launch(),
      desc: r.get_description()
    });
    listStore.append(item);
  });
};
var addCommandsToListStore = (listStore, results) => {
  listStore.remove_all();
  results.forEach((r) => {
    const item = new MainSearchListItemObject({
      desktopIcon: "",
      text: r,
      onSelect: () => {
        runAppCommand(r);
      },
      desc: ""
    });
    listStore.append(item);
  });
};
var getAllAppsForList = (apps2) => {
  return apps2.get_list().sort((a, b) => a.get_name().localeCompare(b.get_name()));
};
var MainSearch = ({
  listView,
  setListView,
  setSearchEntry,
  handleClose
}) => {
  const apps2 = createAppsInstance({ variant: "appSearch" });
  const listStore = new Gio8.ListStore();
  const model = new Gtk2.SingleSelection({ model: listStore });
  const commands = getAllCommands();
  let scrolledWindow;
  addAppsToListStore(listStore, getAllAppsForList(apps2));
  const handleSelect = async () => {
    const selectedItem = model.get_selected_item();
    await handleClose(true);
    selectedItem.onSelect();
  };
  return /* @__PURE__ */ jsxs(
    "box",
    {
      orientation: Gtk2.Orientation.VERTICAL,
      valign: Gtk2.Align.END,
      vexpand: true,
      hexpand: true,
      children: [
        /* @__PURE__ */ jsx(
          Gtk2.ScrolledWindow,
          {
            maxContentHeight: 600,
            propagateNaturalHeight: true,
            $: (s) => scrolledWindow = s,
            children: /* @__PURE__ */ jsx(
              Gtk2.ListView,
              {
                vexpand: true,
                $: (s) => {
                  setListView(s);
                },
                onActivate: () => {
                  handleSelect();
                },
                focusable: false,
                can_focus: false,
                model,
                factory: /* @__PURE__ */ jsx(
                  Gtk2.SignalListItemFactory,
                  {
                    onSetup: (_, l) => {
                      const listItem = l;
                      const mainBox = new Gtk2.Box({
                        spacing: spacing.normal
                      });
                      const rightBox = new Gtk2.Box({
                        spacing: spacing.small,
                        orientation: Gtk2.Orientation.VERTICAL,
                        valign: Gtk2.Align.CENTER
                      });
                      const textLabel = new Gtk2.Label({
                        xalign: 0
                      });
                      const descLabel = new Gtk2.Label({
                        xalign: 0,
                        wrap: true,
                        maxWidthChars: 40
                      });
                      const image = new Gtk2.Image({
                        pixelSize: 40
                      });
                      listItem._textLabel = textLabel;
                      listItem._descLabel = descLabel;
                      listItem._image = image;
                      rightBox.append(textLabel);
                      rightBox.append(descLabel);
                      mainBox.append(image);
                      mainBox.append(rightBox);
                      listItem.set_child(mainBox);
                    },
                    onBind: (_, l) => {
                      const listItem = l;
                      const textLabel = listItem._textLabel;
                      const descLabel = listItem._descLabel;
                      const image = listItem._image;
                      const item = listItem.get_item();
                      const icon = item.desktopIcon;
                      if (icon) {
                        if (getIsIconFile({ icon })) {
                          image.set_from_file(icon);
                        } else {
                          image.set_from_icon_name(icon);
                        }
                      } else {
                        image.set_visible(false);
                      }
                      textLabel?.set_text(item.text);
                      if (item.desc) {
                        descLabel?.set_text(item.desc);
                      } else {
                        descLabel.set_visible(false);
                      }
                    }
                  }
                )
              }
            )
          }
        ),
        /* @__PURE__ */ jsx(
          Gtk2.SearchEntry,
          {
            valign: Gtk2.Align.END,
            onSearchChanged: (s) => {
              const text = s.get_text();
              if (text.startsWith(">")) {
                const [_, ...rest] = text.split(">");
                const query = rest.join(">");
                if (query.length) {
                  addCommandsToListStore(
                    listStore,
                    filterCommands(commands, query)
                  );
                } else {
                  addCommandsToListStore(listStore, commands);
                }
              } else {
                if (text.length) {
                  const results = apps2.fuzzy_query(s.get_text());
                  addAppsToListStore(listStore, results);
                } else {
                  addAppsToListStore(listStore, getAllAppsForList(apps2));
                }
              }
            },
            onActivate: () => {
              handleSelect();
            },
            onStopSearch: () => {
              handleClose(false);
            },
            $: (s) => {
              const keyController = Gtk2.EventControllerKey.new();
              keyController.connect("key-pressed", (_, keyval) => {
                if (keyval !== Gdk.KEY_Up && keyval !== Gdk.KEY_Down) {
                  return false;
                }
                const index = model.get_selected();
                let newIndex = index;
                if (keyval == Gdk.KEY_Up && index > 0) {
                  newIndex = index - 1;
                } else if (keyval == Gdk.KEY_Down && index < listStore.get_n_items() - 1) {
                  newIndex = index + 1;
                }
                model.select_item(newIndex, true);
                listView.get()?.scroll_to(newIndex, null, null);
                return true;
              });
              s.add_controller(keyController);
              setSearchEntry(s);
            }
          }
        )
      ]
    }
  );
};
var MainSearchWindow = ({ gdkmonitor }) => {
  const { BOTTOM } = Astal2.WindowAnchor;
  const { visible, setVisible } = MainSearchWindowContext.use();
  const hyprland = Hyprland3.get_default();
  const focusedMonitor = createBinding(hyprland, "focusedMonitor");
  const [searchEntry, setSearchEntry] = createState(void 0);
  const [listView, setListView] = createState(
    void 0
  );
  const [windowInstance, setWindowInstance] = createState(void 0);
  const [revealChild, setRevealChild] = createState(false);
  const isVisible = createComputed(
    [visible, focusedMonitor],
    (visible2, focusedMonitor2) => {
      return getIsCurrentMonitor(focusedMonitor2, gdkmonitor) && visible2 === true;
    }
  );
  const handleClose = async (immediate) => {
    setRevealChild(false);
    const close = () => {
      setVisible?.(false);
      searchEntry.get()?.set_text("");
    };
    if (immediate) {
      close();
    } else {
      await new Promise((res) => {
        setTimeout(() => {
          close();
          res(true);
        }, transitionDuration - 100);
      });
    }
  };
  return /* @__PURE__ */ jsx(
    "window",
    {
      visible: isVisible,
      name: windowNames.NotificationWindow,
      class: "MainSearchWindow",
      resizable: false,
      gdkmonitor,
      anchor: BOTTOM,
      exclusivity: Astal2.Exclusivity.NORMAL,
      application: app_default,
      keymode: Astal2.Keymode.EXCLUSIVE,
      onNotifyVisible: (win) => {
        const visible2 = win.is_visible();
        if (visible2) {
          searchEntry.get()?.grab_focus();
        }
        if (visible2) {
          setRevealChild(visible2);
        }
      },
      $: (s) => {
        const clickHandler = Gtk2.GestureClick.new();
        clickHandler.set_button(0);
        clickHandler.connect("released", (_gesture, _n_press, x, y) => {
          let wx = x, wy = y;
          const result = windowInstance.get()?.translate_coordinates(windowInstance.get(), x, y);
          if (Array.isArray(result) && result[0]) {
            wx = result[1];
            wy = result[2];
          }
          const isInside = (widget) => {
            if (!widget) return false;
            const alloc = widget.get_allocation();
            return wx >= alloc.x && wy >= alloc.y && wx <= alloc.x + alloc.width && wy <= alloc.y + alloc.height;
          };
          if (!isInside(searchEntry.get()) && !isInside(listView.get())) {
            handleClose(false);
          }
        });
        s.add_controller(clickHandler);
        setWindowInstance(s);
      },
      children: /* @__PURE__ */ jsx(
        Gtk2.Revealer,
        {
          revealChild,
          transition_type: Gtk2.RevealerTransitionType.SLIDE_UP,
          transitionDuration,
          widthRequest: 800,
          heightRequest: 800,
          children: /* @__PURE__ */ jsx(
            "box",
            {
              class: revealChild((v) => v ? "MainSearch" : "MainSearch hide"),
              valign: Gtk2.Align.END,
              children: /* @__PURE__ */ jsx(
                MainSearch,
                {
                  listView,
                  setListView,
                  setSearchEntry,
                  handleClose
                }
              )
            }
          )
        }
      )
    }
  );
};
var MainSearchWindow_default = MainSearchWindow;

// app.tsx
var [isVisibleMainSearch, setIsVisibleMainSearch] = createState(false);
var [keyboard, setKeyboard] = createState(getKeyboard());
app_default.start({
  css: style_default,
  icons: "/home/jose/.config/my-ags/icons",
  requestHandler: (request, res) => {
    if (request === windowNames.MainSearchWindow) {
      setIsVisibleMainSearch(true);
      res(`opened window`);
      return;
    } else if (request === "keyboard-changed") {
      setKeyboard(getKeyboard());
      res("keyboard changed");
      return;
    }
    res("unknown command");
  },
  main() {
    app_default.get_monitors().map((monitor, i) => {
      return /* @__PURE__ */ jsx(
        MainSearchWindowContext,
        {
          value: {
            visible: isVisibleMainSearch,
            setVisible: setIsVisibleMainSearch
          },
          children: () => {
            return /* @__PURE__ */ jsxs(Fragment, { children: [
              /* @__PURE__ */ jsx(
                Bar,
                {
                  gdkmonitor: monitor,
                  index: i,
                  keyboard,
                  setKeyboard
                }
              ),
              /* @__PURE__ */ jsx(MainSearchWindow_default, { gdkmonitor: monitor })
            ] });
          }
        }
      );
    });
  }
});
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vLi4vdXNyL3NoYXJlL2Fncy9qcy9zcmMvZ3RrNC9hcHAudHMiLCAiLi4vLi4vLi4vLi4vdXNyL3NoYXJlL2Fncy9qcy9zcmMvb3ZlcnJpZGVzLnRzIiwgIi4uLy4uLy4uLy4uL3Vzci9zaGFyZS9hZ3MvanMvc3JjL19hcHAudHMiLCAiLi4vLi4vLi4vLi4vdXNyL3NoYXJlL2Fncy9qcy9nbmltL3NyYy9qc3gvc2NvcGUudHMiLCAic2FzczovaG9tZS9qb3NlLy5jb25maWcvbXktYWdzL3N0eWxlLnNjc3MiLCAiLi4vLi4vLi4vLi4vdXNyL3NoYXJlL2Fncy9qcy9nbmltL3NyYy9qc3gvanN4LnRzIiwgIi4uLy4uLy4uLy4uL3Vzci9zaGFyZS9hZ3MvanMvZ25pbS9zcmMvanN4L3N0YXRlLnRzIiwgIi4uLy4uLy4uLy4uL3Vzci9zaGFyZS9hZ3MvanMvZ25pbS9zcmMvdXRpbC50cyIsICIuLi8uLi8uLi8uLi91c3Ivc2hhcmUvYWdzL2pzL2duaW0vc3JjL2pzeC9lbnYudHMiLCAiLi4vLi4vLi4vLi4vdXNyL3NoYXJlL2Fncy9qcy9nbmltL3NyYy9qc3gvRnJhZ21lbnQudHMiLCAiLi4vLi4vLi4vLi4vdXNyL3NoYXJlL2Fncy9qcy9nbmltL3NyYy9nbm9tZS9zaWduYWxUcmFja2VyLnRzIiwgIi4uLy4uLy4uLy4uL3Vzci9zaGFyZS9hZ3MvanMvZ25pbS9zcmMvanN4L0Zvci50cyIsICIuLi8uLi8uLi8uLi91c3Ivc2hhcmUvYWdzL2pzL3NyYy9ndGs0L2luZGV4LnRzIiwgIi4uLy4uLy4uLy4uL3Vzci9zaGFyZS9hZ3MvanMvc3JjL3Byb2Nlc3MudHMiLCAiLi4vLi4vLi4vLi4vdXNyL3NoYXJlL2Fncy9qcy9zcmMvdGltZS50cyIsICJzcmMvd2lkZ2V0L0Jhci50c3giLCAic3JjL3dpZGdldC9NZWRpYVBsYXllci50c3giLCAic3JjL3V0aWxzL3RpbWUudHMiLCAic3JjL2hvb2tzL3VzZVBsYXllckluZm8udHMiLCAic3JjL3V0aWxzL21wcmlzL2dldC1sYXN0LXBsYXllci50cyIsICIuLi8uLi8uLi8uLi91c3Ivc2hhcmUvYWdzL2pzL2duaW0vc3JjL2dvYmplY3QudHMiLCAic3JjL29iamVjdHMvUGxheWVyTGlzdEl0ZW1PYmplY3QudHMiLCAic3JjL3V0aWxzL2FwcHMudHMiLCAic3JjL3dpZGdldC9DaXJjdWxhckltYWdlLnRzeCIsICJzcmMvdXRpbHMvaWNvbnMudHMiLCAiLi4vLi4vLi4vLi4vdXNyL3NoYXJlL2Fncy9qcy9zcmMvZ3RrNC9qc3gtcnVudGltZS50cyIsICIuLi8uLi8uLi8uLi91c3Ivc2hhcmUvYWdzL2pzL2duaW0vc3JjL2d0azQvanN4LXJ1bnRpbWUudHMiLCAic3JjL2NvbnN0YW50cy90aGVtZS9zcGFjaW5nLnRzIiwgInNyYy9ob29rcy91c2VJc0FueVBsYXllclBsYXlpbmcudHMiLCAic3JjL3V0aWxzL2dldC1tcHZwYXBlci1pbWFnZS50cyIsICJzcmMvdXRpbHMvY2hhbmdlLW1wdnBhcGVyLWltYWdlLnRzIiwgInNyYy91dGlscy9jcHUudHMiLCAic3JjL2hvb2tzL3VzZUNwdVVzYWdlLnRzIiwgInNyYy91dGlscy9tZW1vcnktcmFtLnRzIiwgInNyYy9ob29rcy91c2VNZW1vcnlSYW1Vc2FnZS50cyIsICJzcmMvaG9va3MvdXNlRm9ybWF0dGVkVGltZS50cyIsICJzcmMvd2lkZ2V0L1dvcmtzcGFjZXMudHN4IiwgInNyYy91dGlscy9pcy1jdXJyZW50LW1vbml0b3IudHMiLCAic3JjL29iamVjdHMvRW1wdHlIeXBybGFuZFdvcmtzcGFjZS50cyIsICJzcmMvdXRpbHMvd29ya3NwYWNlcy50cyIsICJzcmMvd2lkZ2V0L1RyYXkudHN4IiwgInNyYy9jb25zdGFudHMvd2luZG93cy50cyIsICJzcmMvdXRpbHMva2V5Ym9hcmQudHMiLCAic3JjL3dpZGdldC9Db250cm9sUGFuZWwvQ29udHJvbFBhbmVsLnRzeCIsICJzcmMvdXRpbHMvbmV0d29yay50cyIsICJzcmMvd2lkZ2V0L01haW5TZWFyY2gvTWFpblNlYXJjaFdpbmRvdy50c3giLCAic3JjL29iamVjdHMvTWFpblNlYXJjaExpc3RJdGVtT2JqZWN0LnRzIiwgInNyYy9jb250ZXh0L01haW5TZWFyY2hXaW5kb3dDb250ZXh0LnRzIiwgImFwcC50c3giXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCBHTGliIGZyb20gXCJnaTovL0dMaWI/dmVyc2lvbj0yLjBcIlxuaW1wb3J0IEd0ayBmcm9tIFwiZ2k6Ly9HdGs/dmVyc2lvbj00LjBcIlxuaW1wb3J0IEFzdGFsIGZyb20gXCJnaTovL0FzdGFsP3ZlcnNpb249NC4wXCJcbmltcG9ydCB7IG1rQXBwIH0gZnJvbSBcIi4uL19hcHAuanNcIlxuXG5HdGsuaW5pdCgpXG5cbi8vIHN0b3AgdGhpcyBmcm9tIGxlYWtpbmcgaW50byBzdWJwcm9jZXNzZXNcbi8vIGFuZCBnaW8gbGF1bmNoIGludm9jYXRpb25zXG5HTGliLnVuc2V0ZW52KFwiTERfUFJFTE9BRFwiKVxuXG4vLyB1c2VycyBtaWdodCB3YW50IHRvIHVzZSBBZHdhaXRhIGluIHdoaWNoIGNhc2UgaXQgaGFzIHRvIGJlIGluaXRpYWxpemVkXG4vLyBpdCBtaWdodCBiZSBjb21tb24gcGl0ZmFsbCB0byBmb3JnZXQgaXQgYmVjYXVzZSBgQXBwYCBpcyBub3QgYEFkdy5BcHBsaWNhdGlvbmBcbmF3YWl0IGltcG9ydChcImdpOi8vQWR3P3ZlcnNpb249MVwiKS50aGVuKCh7IGRlZmF1bHQ6IEFkdyB9KSA9PiBBZHcuaW5pdCgpKS5jYXRjaCgoKSA9PiB2b2lkIDApXG5cbmV4cG9ydCBkZWZhdWx0IG1rQXBwKEFzdGFsLkFwcGxpY2F0aW9uKVxuIiwgIi8qKlxuICogV29ya2Fyb3VuZCBmb3IgXCJDYW4ndCBjb252ZXJ0IG5vbi1udWxsIHBvaW50ZXIgdG8gSlMgdmFsdWUgXCJcbiAqL1xuXG5leHBvcnQge31cblxuZnVuY3Rpb24gc25ha2VpZnkoc3RyOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyXG4gICAgICAgIC5yZXBsYWNlKC8oW2Etel0pKFtBLVpdKS9nLCBcIiQxXyQyXCIpXG4gICAgICAgIC5yZXBsYWNlQWxsKFwiLVwiLCBcIl9cIilcbiAgICAgICAgLnRvTG93ZXJDYXNlKClcbn1cblxuYXN5bmMgZnVuY3Rpb24gc3VwcHJlc3M8VD4obW9kOiBQcm9taXNlPHsgZGVmYXVsdDogVCB9PiwgcGF0Y2g6IChtOiBUKSA9PiB2b2lkKSB7XG4gICAgcmV0dXJuIG1vZC50aGVuKChtKSA9PiBwYXRjaChtLmRlZmF1bHQpKS5jYXRjaCgoKSA9PiB2b2lkIDApXG59XG5cbmZ1bmN0aW9uIHBhdGNoPFAgZXh0ZW5kcyBvYmplY3Q+KHByb3RvOiBQLCBwcm9wOiBFeHRyYWN0PGtleW9mIFAsIHN0cmluZz4pIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvdG8sIHByb3AsIHtcbiAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXNbYGdldF8ke3NuYWtlaWZ5KHByb3ApfWBdKClcbiAgICAgICAgfSxcbiAgICB9KVxufVxuXG5hd2FpdCBzdXBwcmVzcyhpbXBvcnQoXCJnaTovL0FzdGFsQXBwc1wiKSwgKHsgQXBwcywgQXBwbGljYXRpb24gfSkgPT4ge1xuICAgIHBhdGNoKEFwcHMucHJvdG90eXBlLCBcImxpc3RcIilcbiAgICBwYXRjaChBcHBsaWNhdGlvbi5wcm90b3R5cGUsIFwia2V5d29yZHNcIilcbiAgICBwYXRjaChBcHBsaWNhdGlvbi5wcm90b3R5cGUsIFwiY2F0ZWdvcmllc1wiKVxufSlcblxuYXdhaXQgc3VwcHJlc3MoaW1wb3J0KFwiZ2k6Ly9Bc3RhbEJhdHRlcnlcIiksICh7IFVQb3dlciB9KSA9PiB7XG4gICAgcGF0Y2goVVBvd2VyLnByb3RvdHlwZSwgXCJkZXZpY2VzXCIpXG59KVxuXG5hd2FpdCBzdXBwcmVzcyhpbXBvcnQoXCJnaTovL0FzdGFsQmx1ZXRvb3RoXCIpLCAoeyBBZGFwdGVyLCBCbHVldG9vdGgsIERldmljZSB9KSA9PiB7XG4gICAgcGF0Y2goQWRhcHRlci5wcm90b3R5cGUsIFwidXVpZHNcIilcbiAgICBwYXRjaChCbHVldG9vdGgucHJvdG90eXBlLCBcImFkYXB0ZXJzXCIpXG4gICAgcGF0Y2goQmx1ZXRvb3RoLnByb3RvdHlwZSwgXCJkZXZpY2VzXCIpXG4gICAgcGF0Y2goRGV2aWNlLnByb3RvdHlwZSwgXCJ1dWlkc1wiKVxufSlcblxuYXdhaXQgc3VwcHJlc3MoaW1wb3J0KFwiZ2k6Ly9Bc3RhbEh5cHJsYW5kXCIpLCAoeyBIeXBybGFuZCwgTW9uaXRvciwgV29ya3NwYWNlIH0pID0+IHtcbiAgICBwYXRjaChIeXBybGFuZC5wcm90b3R5cGUsIFwiYmluZHNcIilcbiAgICBwYXRjaChIeXBybGFuZC5wcm90b3R5cGUsIFwibW9uaXRvcnNcIilcbiAgICBwYXRjaChIeXBybGFuZC5wcm90b3R5cGUsIFwid29ya3NwYWNlc1wiKVxuICAgIHBhdGNoKEh5cHJsYW5kLnByb3RvdHlwZSwgXCJjbGllbnRzXCIpXG4gICAgcGF0Y2goTW9uaXRvci5wcm90b3R5cGUsIFwiYXZhaWxhYmxlTW9kZXNcIilcbiAgICBwYXRjaChNb25pdG9yLnByb3RvdHlwZSwgXCJhdmFpbGFibGVfbW9kZXNcIilcbiAgICBwYXRjaChXb3Jrc3BhY2UucHJvdG90eXBlLCBcImNsaWVudHNcIilcbn0pXG5cbmF3YWl0IHN1cHByZXNzKGltcG9ydChcImdpOi8vQXN0YWxNcHJpc1wiKSwgKHsgTXByaXMsIFBsYXllciB9KSA9PiB7XG4gICAgcGF0Y2goTXByaXMucHJvdG90eXBlLCBcInBsYXllcnNcIilcbiAgICBwYXRjaChQbGF5ZXIucHJvdG90eXBlLCBcInN1cHBvcnRlZF91cmlfc2NoZW1lc1wiKVxuICAgIHBhdGNoKFBsYXllci5wcm90b3R5cGUsIFwic3VwcG9ydGVkVXJpU2NoZW1lc1wiKVxuICAgIHBhdGNoKFBsYXllci5wcm90b3R5cGUsIFwic3VwcG9ydGVkX21pbWVfdHlwZXNcIilcbiAgICBwYXRjaChQbGF5ZXIucHJvdG90eXBlLCBcInN1cHBvcnRlZE1pbWVUeXBlc1wiKVxuICAgIHBhdGNoKFBsYXllci5wcm90b3R5cGUsIFwiY29tbWVudHNcIilcbn0pXG5cbmF3YWl0IHN1cHByZXNzKGltcG9ydChcImdpOi8vQXN0YWxOZXR3b3JrXCIpLCAoeyBXaWZpIH0pID0+IHtcbiAgICBwYXRjaChXaWZpLnByb3RvdHlwZSwgXCJhY2Nlc3NfcG9pbnRzXCIpXG4gICAgcGF0Y2goV2lmaS5wcm90b3R5cGUsIFwiYWNjZXNzUG9pbnRzXCIpXG59KVxuXG5hd2FpdCBzdXBwcmVzcyhpbXBvcnQoXCJnaTovL0FzdGFsTm90aWZkXCIpLCAoeyBOb3RpZmQsIE5vdGlmaWNhdGlvbiB9KSA9PiB7XG4gICAgcGF0Y2goTm90aWZkLnByb3RvdHlwZSwgXCJub3RpZmljYXRpb25zXCIpXG4gICAgcGF0Y2goTm90aWZpY2F0aW9uLnByb3RvdHlwZSwgXCJhY3Rpb25zXCIpXG59KVxuXG5hd2FpdCBzdXBwcmVzcyhpbXBvcnQoXCJnaTovL0FzdGFsUG93ZXJQcm9maWxlc1wiKSwgKHsgUG93ZXJQcm9maWxlcyB9KSA9PiB7XG4gICAgcGF0Y2goUG93ZXJQcm9maWxlcy5wcm90b3R5cGUsIFwiYWN0aW9uc1wiKVxufSlcblxuYXdhaXQgc3VwcHJlc3MoaW1wb3J0KFwiZ2k6Ly9Bc3RhbFdwXCIpLCAoeyBXcCwgQXVkaW8sIFZpZGVvIH0pID0+IHtcbiAgICBwYXRjaChXcC5wcm90b3R5cGUsIFwiZW5kcG9pbnRzXCIpXG4gICAgcGF0Y2goV3AucHJvdG90eXBlLCBcImRldmljZXNcIilcbiAgICBwYXRjaChBdWRpby5wcm90b3R5cGUsIFwic3RyZWFtc1wiKVxuICAgIHBhdGNoKEF1ZGlvLnByb3RvdHlwZSwgXCJyZWNvcmRlcnNcIilcbiAgICBwYXRjaChBdWRpby5wcm90b3R5cGUsIFwibWljcm9waG9uZXNcIilcbiAgICBwYXRjaChBdWRpby5wcm90b3R5cGUsIFwic3BlYWtlcnNcIilcbiAgICBwYXRjaChBdWRpby5wcm90b3R5cGUsIFwiZGV2aWNlc1wiKVxuICAgIHBhdGNoKFZpZGVvLnByb3RvdHlwZSwgXCJzdHJlYW1zXCIpXG4gICAgcGF0Y2goVmlkZW8ucHJvdG90eXBlLCBcInJlY29yZGVyc1wiKVxuICAgIHBhdGNoKFZpZGVvLnByb3RvdHlwZSwgXCJzaW5rc1wiKVxuICAgIHBhdGNoKFZpZGVvLnByb3RvdHlwZSwgXCJzb3VyY2VzXCIpXG4gICAgcGF0Y2goVmlkZW8ucHJvdG90eXBlLCBcImRldmljZXNcIilcbn0pXG5cbmF3YWl0IHN1cHByZXNzKGltcG9ydChcImdpOi8vQXN0YWxUcmF5XCIpLCAoeyBUcmF5IH0pID0+IHtcbiAgICBwYXRjaChUcmF5LnByb3RvdHlwZSwgXCJpdGVtc1wiKVxufSlcbiIsICJpbXBvcnQgXCIuL292ZXJyaWRlcy5qc1wiXG5pbXBvcnQgeyBzZXRDb25zb2xlTG9nRG9tYWluIH0gZnJvbSBcImNvbnNvbGVcIlxuaW1wb3J0IHsgZXhpdCwgcHJvZ3JhbUFyZ3MgfSBmcm9tIFwic3lzdGVtXCJcbmltcG9ydCB7IGNyZWF0ZVJvb3QgfSBmcm9tIFwiLi4vZ25pbS9zcmMvanN4L3Njb3BlLmpzXCJcbmltcG9ydCBJTyBmcm9tIFwiZ2k6Ly9Bc3RhbElPXCJcbmltcG9ydCBHT2JqZWN0IGZyb20gXCJnaTovL0dPYmplY3RcIlxuaW1wb3J0IEdpbyBmcm9tIFwiZ2k6Ly9HaW8/dmVyc2lvbj0yLjBcIlxuaW1wb3J0IHR5cGUgQXN0YWwzIGZyb20gXCJnaTovL0FzdGFsP3ZlcnNpb249My4wXCJcbmltcG9ydCB0eXBlIEFzdGFsNCBmcm9tIFwiZ2k6Ly9Bc3RhbD92ZXJzaW9uPTQuMFwiXG5cbnR5cGUgQ29uZmlnID0gUGFydGlhbDx7XG4gICAgaW5zdGFuY2VOYW1lOiBzdHJpbmdcbiAgICBjc3M6IHN0cmluZ1xuICAgIGljb25zOiBzdHJpbmdcbiAgICBndGtUaGVtZTogc3RyaW5nXG4gICAgaWNvblRoZW1lOiBzdHJpbmdcbiAgICBjdXJzb3JUaGVtZTogc3RyaW5nXG4gICAgaG9sZDogYm9vbGVhblxuICAgIHJlcXVlc3RIYW5kbGVyKHJlcXVlc3Q6IHN0cmluZywgcmVzOiAocmVzcG9uc2U6IGFueSkgPT4gdm9pZCk6IHZvaWRcbiAgICBtYWluKC4uLmFyZ3M6IHN0cmluZ1tdKTogdm9pZFxuICAgIGNsaWVudChtZXNzYWdlOiAobXNnOiBzdHJpbmcpID0+IHN0cmluZywgLi4uYXJnczogc3RyaW5nW10pOiB2b2lkXG59PlxuXG5pbnRlcmZhY2UgQXN0YWwzSlMgZXh0ZW5kcyBBc3RhbDMuQXBwbGljYXRpb24ge1xuICAgIGV2YWwoYm9keTogc3RyaW5nKTogUHJvbWlzZTxhbnk+XG4gICAgcmVxdWVzdEhhbmRsZXI6IENvbmZpZ1tcInJlcXVlc3RIYW5kbGVyXCJdXG4gICAgYXBwbHlfY3NzKHN0eWxlOiBzdHJpbmcsIHJlc2V0PzogYm9vbGVhbik6IHZvaWRcbiAgICBxdWl0KGNvZGU/OiBudW1iZXIpOiB2b2lkXG4gICAgc3RhcnQoY29uZmlnPzogQ29uZmlnKTogdm9pZFxufVxuXG5pbnRlcmZhY2UgQXN0YWw0SlMgZXh0ZW5kcyBBc3RhbDQuQXBwbGljYXRpb24ge1xuICAgIGV2YWwoYm9keTogc3RyaW5nKTogUHJvbWlzZTxhbnk+XG4gICAgcmVxdWVzdEhhbmRsZXI/OiBDb25maWdbXCJyZXF1ZXN0SGFuZGxlclwiXVxuICAgIGFwcGx5X2NzcyhzdHlsZTogc3RyaW5nLCByZXNldD86IGJvb2xlYW4pOiB2b2lkXG4gICAgcXVpdChjb2RlPzogbnVtYmVyKTogdm9pZFxuICAgIHN0YXJ0KGNvbmZpZz86IENvbmZpZyk6IHZvaWRcbn1cblxudHlwZSBBcHAzID0gdHlwZW9mIEFzdGFsMy5BcHBsaWNhdGlvblxudHlwZSBBcHA0ID0gdHlwZW9mIEFzdGFsNC5BcHBsaWNhdGlvblxuXG5leHBvcnQgZnVuY3Rpb24gbWtBcHA8QXBwIGV4dGVuZHMgQXBwMz4oQXBwOiBBcHApOiBBc3RhbDNKU1xuZXhwb3J0IGZ1bmN0aW9uIG1rQXBwPEFwcCBleHRlbmRzIEFwcDQ+KEFwcDogQXBwKTogQXN0YWw0SlNcblxuZXhwb3J0IGZ1bmN0aW9uIG1rQXBwKEFwcDogQXBwMyB8IEFwcDQpIHtcbiAgICByZXR1cm4gbmV3IChjbGFzcyBBc3RhbEpTIGV4dGVuZHMgQXBwIHtcbiAgICAgICAgcHJpdmF0ZSBkaXNwb3NlUm9vdD86ICgpID0+IHZvaWRcblxuICAgICAgICBzdGF0aWMge1xuICAgICAgICAgICAgR09iamVjdC5yZWdpc3RlckNsYXNzKHsgR1R5cGVOYW1lOiBcIkFzdGFsSlNcIiB9LCB0aGlzIGFzIGFueSlcbiAgICAgICAgfVxuXG4gICAgICAgIGV2YWwoYm9keTogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzLCByZWopID0+IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBmbiA9IEZ1bmN0aW9uKGByZXR1cm4gKGFzeW5jIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHtib2R5LmluY2x1ZGVzKFwiO1wiKSA/IGJvZHkgOiBgcmV0dXJuICR7Ym9keX07YH1cbiAgICAgICAgICAgICAgICAgICAgfSlgKVxuICAgICAgICAgICAgICAgICAgICBmbigpKCkudGhlbihyZXMpLmNhdGNoKHJlailcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICByZWooZXJyb3IpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIHJlcXVlc3RIYW5kbGVyPzogQ29uZmlnW1wicmVxdWVzdEhhbmRsZXJcIl1cblxuICAgICAgICB2ZnVuY19zaHV0ZG93bigpOiB2b2lkIHtcbiAgICAgICAgICAgIHN1cGVyLnZmdW5jX3NodXRkb3duKClcbiAgICAgICAgICAgIHRoaXMuZGlzcG9zZVJvb3Q/LigpXG4gICAgICAgIH1cblxuICAgICAgICB2ZnVuY19yZXF1ZXN0KG1zZzogc3RyaW5nLCBjb25uOiBHaW8uU29ja2V0Q29ubmVjdGlvbik6IHZvaWQge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnJlcXVlc3RIYW5kbGVyID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlcXVlc3RIYW5kbGVyKG1zZywgKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIElPLndyaXRlX3NvY2soY29ubiwgU3RyaW5nKHJlc3BvbnNlKSwgKF8sIHJlcykgPT4gSU8ud3JpdGVfc29ja19maW5pc2gocmVzKSlcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdXBlci52ZnVuY19yZXF1ZXN0KG1zZywgY29ubilcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGFwcGx5X2NzcyhzdHlsZTogc3RyaW5nLCByZXNldCA9IGZhbHNlKSB7XG4gICAgICAgICAgICBzdXBlci5hcHBseV9jc3Moc3R5bGUsIHJlc2V0KVxuICAgICAgICB9XG5cbiAgICAgICAgcXVpdChjb2RlPzogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgICAgICBzdXBlci5xdWl0KClcbiAgICAgICAgICAgIGV4aXQoY29kZSA/PyAwKVxuICAgICAgICB9XG5cbiAgICAgICAgc3RhcnQoeyByZXF1ZXN0SGFuZGxlciwgY3NzLCBob2xkLCBtYWluLCBjbGllbnQsIGljb25zLCAuLi5jZmcgfTogQ29uZmlnID0ge30pIHtcbiAgICAgICAgICAgIGNvbnN0IGFwcCA9IHRoaXMgYXMgdW5rbm93biBhcyBJbnN0YW5jZVR5cGU8QXBwMyB8IEFwcDQ+XG5cbiAgICAgICAgICAgIGNsaWVudCA/Pz0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIHByaW50KGBBc3RhbCBpbnN0YW5jZSBcIiR7YXBwLmluc3RhbmNlTmFtZX1cIiBhbHJlYWR5IHJ1bm5pbmdgKVxuICAgICAgICAgICAgICAgIGV4aXQoMSlcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCBjZmcpXG4gICAgICAgICAgICBzZXRDb25zb2xlTG9nRG9tYWluKGFwcC5pbnN0YW5jZU5hbWUpXG5cbiAgICAgICAgICAgIHRoaXMucmVxdWVzdEhhbmRsZXIgPSByZXF1ZXN0SGFuZGxlclxuICAgICAgICAgICAgYXBwLmNvbm5lY3QoXCJhY3RpdmF0ZVwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY3JlYXRlUm9vdCgoZGlzcG9zZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3Bvc2VSb290ID0gZGlzcG9zZVxuICAgICAgICAgICAgICAgICAgICBtYWluPy4oLi4ucHJvZ3JhbUFyZ3MpXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgYXBwLmFjcXVpcmVfc29ja2V0KClcbiAgICAgICAgICAgIH0gY2F0Y2gge1xuICAgICAgICAgICAgICAgIHJldHVybiBjbGllbnQoKG1zZykgPT4gSU8uc2VuZF9yZXF1ZXN0KGFwcC5pbnN0YW5jZU5hbWUsIG1zZykhLCAuLi5wcm9ncmFtQXJncylcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGNzcykgdGhpcy5hcHBseV9jc3MoY3NzLCBmYWxzZSlcblxuICAgICAgICAgICAgaWYgKGljb25zKSBhcHAuYWRkX2ljb25zKGljb25zKVxuXG4gICAgICAgICAgICBob2xkID8/PSB0cnVlXG4gICAgICAgICAgICBpZiAoaG9sZCkgYXBwLmhvbGQoKVxuXG4gICAgICAgICAgICBhcHAucnVuQXN5bmMoW10pXG4gICAgICAgIH1cbiAgICB9KSgpXG59XG4iLCAiZXhwb3J0IGNsYXNzIFNjb3BlIHtcbiAgICBzdGF0aWMgY3VycmVudD86IFNjb3BlIHwgbnVsbFxuXG4gICAgcGFyZW50PzogU2NvcGUgfCBudWxsXG4gICAgY29udGV4dHMgPSBuZXcgTWFwPENvbnRleHQsIHVua25vd24+KClcblxuICAgIHByaXZhdGUgY2xlYW51cHMgPSBuZXcgU2V0PCgpID0+IHZvaWQ+KClcbiAgICBwcml2YXRlIG1vdW50cyA9IG5ldyBTZXQ8KCkgPT4gdm9pZD4oKVxuICAgIHByaXZhdGUgbW91bnRlZCA9IGZhbHNlXG5cbiAgICBjb25zdHJ1Y3RvcihwYXJlbnQ/OiBTY29wZSB8IG51bGwpIHtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnRcbiAgICB9XG5cbiAgICBvbkNsZWFudXAoY2FsbGJhY2s6ICgpID0+IHZvaWQpIHtcbiAgICAgICAgdGhpcy5jbGVhbnVwcz8uYWRkKGNhbGxiYWNrKVxuICAgIH1cblxuICAgIG9uTW91bnQoY2FsbGJhY2s6ICgpID0+IHZvaWQpIHtcbiAgICAgICAgaWYgKHRoaXMucGFyZW50ICYmICF0aGlzLnBhcmVudC5tb3VudGVkKSB7XG4gICAgICAgICAgICB0aGlzLnBhcmVudC5vbk1vdW50KGNhbGxiYWNrKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5tb3VudHMuYWRkKGNhbGxiYWNrKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcnVuPFQ+KGZuOiAoKSA9PiBUKSB7XG4gICAgICAgIGNvbnN0IHByZXYgPSBTY29wZS5jdXJyZW50XG4gICAgICAgIFNjb3BlLmN1cnJlbnQgPSB0aGlzXG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBmbigpXG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICB0aGlzLm1vdW50cy5mb3JFYWNoKChjYikgPT4gY2IoKSlcbiAgICAgICAgICAgIHRoaXMubW91bnRzLmNsZWFyKClcbiAgICAgICAgICAgIHRoaXMubW91bnRlZCA9IHRydWVcbiAgICAgICAgICAgIFNjb3BlLmN1cnJlbnQgPSBwcmV2XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkaXNwb3NlKCkge1xuICAgICAgICB0aGlzLmNsZWFudXBzLmZvckVhY2goKGNiKSA9PiBjYigpKVxuICAgICAgICB0aGlzLmNsZWFudXBzLmNsZWFyKClcbiAgICAgICAgdGhpcy5jb250ZXh0cy5jbGVhcigpXG4gICAgICAgIGRlbGV0ZSB0aGlzLnBhcmVudFxuICAgIH1cbn1cblxuZXhwb3J0IHR5cGUgQ29udGV4dDxUID0gYW55PiA9IHtcbiAgICB1c2UoKTogVFxuICAgIHByb3ZpZGU8Uj4odmFsdWU6IFQsIGZuOiAoKSA9PiBSKTogUlxuICAgIChwcm9wczogeyB2YWx1ZTogVDsgY2hpbGRyZW46ICgpID0+IEpTWC5FbGVtZW50IH0pOiBKU1guRWxlbWVudFxufVxuXG4vKipcbiAqIEV4YW1wbGUgVXNhZ2U6XG4gKiBgYGB0c3hcbiAqIGNvbnN0IE15Q29udGV4dCA9IGNyZWF0ZUNvbnRleHQoXCJmYWxsYmFjay12YWx1ZVwiKVxuICpcbiAqIGZ1bmN0aW9uIENvbnN1bWVyQ29tcG9uZW50KCkge1xuICogICBjb25zdCB2YWx1ZSA9IE15Q29udGV4dC51c2UoKVxuICpcbiAqICAgcmV0dXJuIDxHdGsuTGFiZWwgbGFiZWw9e3ZhbHVlfSAvPlxuICogfVxuICpcbiAqIGZ1bmN0aW9uIFByb3ZpZGVyQ29tcG9uZW50KCkge1xuICogICByZXR1cm4gKFxuICogICAgIDxHdGsuQm94PlxuICogICAgICAgPE15Q29udGV4dCB2YWx1ZT1cIm15LXZhbHVlXCI+XG4gKiAgICAgICAgIHsoKSA9PiA8Q29uc3VtZXJDb21wb25lbnQgLz59XG4gKiAgICAgICA8L015Q29udGV4dD5cbiAqICAgICA8L0d0ay5Cb3g+XG4gKiAgIClcbiAqIH1cbiAqIGBgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ29udGV4dDxUPihkZWZhdWx0VmFsdWU6IFQpOiBDb250ZXh0PFQ+IHtcbiAgICBsZXQgY3R4OiBDb250ZXh0PFQ+XG5cbiAgICBmdW5jdGlvbiBwcm92aWRlPFI+KHZhbHVlOiBULCBmbjogKCkgPT4gUik6IFIge1xuICAgICAgICBjb25zdCBzY29wZSA9IGdldFNjb3BlKClcbiAgICAgICAgc2NvcGUuY29udGV4dHMuc2V0KGN0eCwgdmFsdWUpXG4gICAgICAgIHJldHVybiBzY29wZS5ydW4oZm4pXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdXNlKCk6IFQge1xuICAgICAgICBsZXQgc2NvcGUgPSBTY29wZS5jdXJyZW50XG4gICAgICAgIHdoaWxlIChzY29wZSkge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBzY29wZS5jb250ZXh0cy5nZXQoY3R4KVxuICAgICAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHJldHVybiB2YWx1ZSBhcyBUXG4gICAgICAgICAgICBzY29wZSA9IHNjb3BlLnBhcmVudFxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWVcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb250ZXh0KHsgdmFsdWUsIGNoaWxkcmVuIH06IHsgdmFsdWU6IFQ7IGNoaWxkcmVuOiAoKSA9PiBKU1guRWxlbWVudCB9KSB7XG4gICAgICAgIHJldHVybiBwcm92aWRlKHZhbHVlLCBjaGlsZHJlbilcbiAgICB9XG5cbiAgICByZXR1cm4gKGN0eCA9IE9iamVjdC5hc3NpZ24oY29udGV4dCwge1xuICAgICAgICBwcm92aWRlLFxuICAgICAgICB1c2UsXG4gICAgfSkpXG59XG5cbi8qKlxuICogR2V0cyB0aGUgc2NvcGUgdGhhdCBvd25zIHRoZSBjdXJyZW50bHkgcnVubmluZyBjb2RlLlxuICpcbiAqIEV4YW1wbGU6XG4gKiBgYGB0c1xuICogY29uc3Qgc2NvcGUgPSBnZXRTY29wZSgpXG4gKiBzZXRUaW1lb3V0KCgpID0+IHtcbiAqICAgLy8gVGhpcyBjYWxsYmFjayBnZXRzIHJ1biB3aXRob3V0IGFuIG93bmVyIHNjb3BlLlxuICogICAvLyBSZXN0b3JlIG93bmVyIHZpYSBzY29wZS5ydW46XG4gKiAgIHNjb3BlLnJ1bigoKSA9PiB7XG4gKiAgICAgY29uc3QgZm9vID0gRm9vQ29udGV4dC51c2UoKVxuICogICAgIG9uQ2xlYW51cCgoKSA9PiB7XG4gKiAgICAgICBwcmludChcInNvbWUgY2xlYW51cFwiKVxuICogICAgIH0pXG4gKiAgIH0pXG4gKiB9LCAxMDAwKVxuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRTY29wZSgpOiBTY29wZSB7XG4gICAgY29uc3Qgc2NvcGUgPSBTY29wZS5jdXJyZW50XG4gICAgaWYgKCFzY29wZSkge1xuICAgICAgICB0aHJvdyBFcnJvcihcImNhbm5vdCBnZXQgc2NvcGU6IG91dCBvZiB0cmFja2luZyBjb250ZXh0XCIpXG4gICAgfVxuXG4gICAgcmV0dXJuIHNjb3BlXG59XG5cbi8qKlxuICogQXR0YWNoIGEgY2xlYW51cCBjYWxsYmFjayB0byB0aGUgY3VycmVudCB7QGxpbmsgU2NvcGV9LlxuICovXG5leHBvcnQgZnVuY3Rpb24gb25DbGVhbnVwKGNsZWFudXA6ICgpID0+IHZvaWQpIHtcbiAgICBpZiAoIVNjb3BlLmN1cnJlbnQpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihFcnJvcihcIm91dCBvZiB0cmFja2luZyBjb250ZXh0OiB3aWxsIG5vdCBiZSBhYmxlIHRvIGNsZWFudXBcIikpXG4gICAgfVxuXG4gICAgU2NvcGUuY3VycmVudD8ub25DbGVhbnVwKGNsZWFudXApXG59XG5cbi8qKlxuICogQXR0YWNoIGEgY2FsbGJhY2sgdG8gcnVuIHdoZW4gdGhlIGN1cnJlbnRseSBydW5uaW5nIHtAbGluayBTY29wZX0gcmV0dXJucy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG9uTW91bnQoY2xlYW51cDogKCkgPT4gdm9pZCkge1xuICAgIGlmICghU2NvcGUuY3VycmVudCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKEVycm9yKFwiY2Fubm90IGF0dGFjaCBvbk1vdW50OiBvdXQgb2YgdHJhY2tpbmcgY29udGV4dFwiKSlcbiAgICB9XG5cbiAgICBTY29wZS5jdXJyZW50Py5vbk1vdW50KGNsZWFudXApXG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHJvb3Qge0BsaW5rIFNjb3BlfSB0aGF0IHdoZW4gZGlzcG9zZWQgd2lsbCByZW1vdmVcbiAqIGFueSBjaGlsZCBzaWduYWwgaGFuZGxlciBvciBzdGF0ZSBzdWJzY3JpYmVyLlxuICpcbiAqIEV4YW1wbGU6XG4gKiBgYGB0c3hcbiAqIGNyZWF0ZVJvb3QoKGRpc3Bvc2UpID0+IHtcbiAqICAgbGV0IHJvb3Q6IEd0ay5XaW5kb3dcbiAqXG4gKiAgIGNvbnN0IFtzdGF0ZV0gPSBjcmVhdGVTdGF0ZShcInZhbHVlXCIpXG4gKlxuICogICBjb25zdCByZW1vdmUgPSAoKSA9PiB7XG4gKiAgICAgcm9vdC5kZXN0cm95KClcbiAqICAgICBkaXNwb3NlKClcbiAqICAgfVxuICpcbiAqICAgcmV0dXJuIChcbiAqICAgICA8R3RrLldpbmRvdyAkPXsoc2VsZikgPT4gKHJvb3QgPSBzZWxmKX0+XG4gKiAgICAgICA8R3RrLkJveD5cbiAqICAgICAgICAgPEd0ay5MYWJlbCBsYWJlbD17c3RhdGV9IC8+XG4gKiAgICAgICAgIDxHdGsuQnV0dG9uICRjbGlja2VkPXtyZW1vdmV9IC8+XG4gKiAgICAgICA8L0d0ay5Cb3g+XG4gKiAgICAgPC9HdGsuV2luZG93PlxuICogICApXG4gKiB9KVxuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVSb290PFQ+KGZuOiAoZGlzcG9zZTogKCkgPT4gdm9pZCkgPT4gVCkge1xuICAgIGNvbnN0IHNjb3BlID0gbmV3IFNjb3BlKG51bGwpXG4gICAgcmV0dXJuIHNjb3BlLnJ1bigoKSA9PiBmbigoKSA9PiBzY29wZS5kaXNwb3NlKCkpKVxufVxuIiwgImJ1dHRvbiB7XG4gIHRyYW5zaXRpb24tZHVyYXRpb246IDIwMG1zO1xufVxuYnV0dG9uLmNpcmN1bGFyIHtcbiAgYm9yZGVyLXJhZGl1czogOTk5cHg7XG59XG5idXR0b24gbGFiZWwge1xuICBjb2xvcjogQHRoZW1lX2ZnX2NvbG9yO1xufVxuXG5jYWxlbmRhci52aWV3IC5kYXktbmFtZSB7XG4gIHRleHQtdHJhbnNmb3JtOiBjYXBpdGFsaXplO1xufVxuXG53aW5kb3cuQmFyIHtcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG4gIGNvbG9yOiBAdGhlbWVfZmdfY29sb3I7XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xufVxud2luZG93LkJhciA+IGNlbnRlcmJveCB7XG4gIGJhY2tncm91bmQ6IEB0aGVtZV9iZ19jb2xvcjtcbiAgbWFyZ2luLXRvcDogMjBweDtcbiAgYm94LXNoYWRvdzogcmdiYSgwLCAwLCAwLCAwLjEpIDBweCAxcHggM3B4IDBweCwgcmdiYSgwLCAwLCAwLCAwLjA2KSAwcHggMXB4IDJweCAwcHg7XG4gIGJvcmRlci1yYWRpdXM6IDhweDtcbiAgbWFyZ2luLWxlZnQ6IDE4cHg7XG4gIG1hcmdpbi1yaWdodDogMThweDtcbiAgcGFkZGluZy10b3A6IDhweDtcbiAgcGFkZGluZy1ib3R0b206IDhweDtcbiAgcGFkZGluZy1sZWZ0OiAxNnB4O1xuICBwYWRkaW5nLXJpZ2h0OiAxNnB4O1xufVxud2luZG93LkJhciBidXR0b24ge1xuICBib3JkZXI6IG5vbmU7XG59XG5cbi5EYXNoYm9hcmRUYWIge1xuICBwYWRkaW5nOiA4cHg7XG59XG5cbi5EYXNoYm9hcmRUYWJIb3VyQW5kTWludXRlIHtcbiAgZm9udC1zaXplOiA0MHB4O1xuICBmb250LXdlaWdodDogYm9sZDtcbn1cblxuLkRhc2hib2FyZFRhYkRhdGUge1xuICBjb2xvcjogQHRoZW1lX3NlbGVjdGVkX2JnX2NvbG9yO1xuICBmb250LXdlaWdodDogYm9sZGVyO1xufVxuXG4uRGFzaGJvYXJkQm94IHtcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tcG9wb3Zlci1zaGFkZS1jb2xvcik7XG4gIHBhZGRpbmc6IDhweDtcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xuICBjb2xvcjogQHRoZW1lX3NlbGVjdGVkX2ZnX2NvbG9yO1xufVxuLkRhc2hib2FyZEJveC5leHRyYVBhZGRpbmcge1xuICBwYWRkaW5nLWxlZnQ6IDE2cHg7XG4gIHBhZGRpbmctcmlnaHQ6IDE2cHg7XG59XG4uRGFzaGJvYXJkQm94IGNhbGVuZGFyLnZpZXcge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgYm9yZGVyOiBub25lO1xufVxuXG4uRGFzaGJvYXJkVGFiU3lzSW5mb0xhYmVsIHtcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgdGV4dC10cmFuc2Zvcm06IGNhcGl0YWxpemU7XG59XG5cbi5XYWxscGFwZXJJbWdCdXR0b25Db250YWluZXIge1xuICBvcGFjaXR5OiAwO1xuICB0cmFuc2l0aW9uOiBvcGFjaXR5IDIwMG1zIGVhc2UtaW4tb3V0O1xuICBib3JkZXItcmFkaXVzOiA5OTlweDtcbn1cblxuLldhbGxwYXBlckltZ0J1dHRvbkNvbnRhaW5lcjpob3ZlciB7XG4gIG9wYWNpdHk6IDE7XG59XG5cbi5Ob3RpZmljYXRpb25XaW5kb3cge1xuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbiAgbWFyZ2luLXJpZ2h0OiAxOHB4O1xuICBtYXJnaW4tdG9wOiAyMHB4O1xufVxuXG4uTm90aWZpY2F0aW9uV2luZG93Tm90aWZpY2F0aW9uSXRlbSB7XG4gIGJhY2tncm91bmQ6IEB0aGVtZV9iZ19jb2xvcjtcbiAgcGFkZGluZzogOHB4IDRweCA4cHggOHB4O1xuICBib3JkZXItcmFkaXVzOiA4cHg7XG59XG5cbi5Ob3RpZmljYXRpb25XaW5kb3dOb3RpZmljYXRpb25JdGVtU3VtbWFyeSB7XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xuICBmb250LXNpemU6IDIwO1xufVxuXG4uTWVkaWFQbGF5ZXJCYXJzIHtcbiAgY29sb3I6IEB0aGVtZV9zZWxlY3RlZF9iZ19jb2xvcjtcbn1cblxuLk1lZGlhUGxheWVyU29uZ0xhYmVsIHtcbiAgY29sb3I6IEB0aGVtZV9zZWxlY3RlZF9iZ19jb2xvcjtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG59XG5cbi5FbmRlYXZvdXJPc0ljb24ge1xuICBjb2xvcjogIzdlM2ViZTtcbn1cblxuLkh5cHJMYW5kSWNvbiB7XG4gIGNvbG9yOiAjMDBlMmQxO1xufVxuXG4uVXB0aW1lSWNvbiB7XG4gIGNvbG9yOiBAdGhlbWVfc2VsZWN0ZWRfYmdfY29sb3I7XG59XG5cbi5UcmF5Um93IHtcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tcG9wb3Zlci1zaGFkZS1jb2xvcik7XG4gIGJvcmRlci1yYWRpdXM6IDhweDtcbn1cblxuLldvcmtzcGFjZXMge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiBAdGhlbWVfYmdfY29sb3I7XG4gIGJvcmRlci1yYWRpdXM6IDhweDtcbn1cblxuLldvcmtzcGFjZUl0ZW0uZ3JvdXAge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1wb3BvdmVyLXNoYWRlLWNvbG9yKTtcbiAgYm9yZGVyLXJhZGl1czogOTk5cHg7XG59XG5cbi5Xb3Jrc3BhY2VDbGllbnRJdGVtIHtcbiAgYm9yZGVyLXJhZGl1czogOTk5cHg7XG59XG4uV29ya3NwYWNlQ2xpZW50SXRlbS5mb2N1c2VkIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogQHRoZW1lX3NlbGVjdGVkX2JnX2NvbG9yO1xuICBib3JkZXItcmFkaXVzOiA5OTlweDtcbn1cblxuLk1haW5TZWFyY2hXaW5kb3cge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbn1cblxuLk1haW5TZWFyY2gge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiBAdGhlbWVfYmdfY29sb3I7XG4gIHBhZGRpbmc6IDhweDtcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xuICBtYXJnaW4tYm90dG9tOiAyMHB4O1xuICBib3gtc2hhZG93OiByZ2JhKDAsIDAsIDAsIDAuMSkgMHB4IDFweCAzcHggMHB4LCByZ2JhKDAsIDAsIDAsIDAuMDYpIDBweCAxcHggMnB4IDBweDtcbiAgYm9yZGVyOiAycHggc29saWQgdmFyKC0tcG9wb3Zlci1zaGFkZS1jb2xvcik7XG59XG4uTWFpblNlYXJjaC5oaWRlIHtcbiAgbWFyZ2luLWJvdHRvbTogMDtcbn1cbi5NYWluU2VhcmNoIHNjcm9sbGVkd2luZG93IHtcbiAgYmFja2dyb3VuZC1jb2xvcjogQHRoZW1lX2JnX2NvbG9yO1xufVxuLk1haW5TZWFyY2ggZW50cnkge1xuICBtYXJnaW4tdG9wOiA4cHg7XG59XG4uTWFpblNlYXJjaCBsaXN0dmlldyB7XG4gIGJhY2tncm91bmQtY29sb3I6IEB0aGVtZV9iZ19jb2xvcjtcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xufVxuLk1haW5TZWFyY2ggbGlzdHZpZXcgcm93IHtcbiAgYm9yZGVyLXJhZGl1czogOTk5cHg7XG4gIHBhZGRpbmctbGVmdDogMTJweDtcbiAgcGFkZGluZy10b3A6IDhweDtcbiAgcGFkZGluZy1ib3R0b206IDhweDtcbn1cblxuLkNvbnRyb2xQYW5lbEJsdWV0b290aEFjdGl2ZSB7XG4gIGNvbG9yOiB2YXIoLS1zdWNjZXNzLWJnLWNvbG9yKTtcbn1cblxuLnVuc3R5bGVkTWVudUJ1dHRvbiBidXR0b24ge1xuICBhbGw6IHVuc2V0O1xufSIsICJpbXBvcnQgR09iamVjdCBmcm9tIFwiZ2k6Ly9HT2JqZWN0XCJcbmltcG9ydCB7IEZyYWdtZW50IH0gZnJvbSBcIi4vRnJhZ21lbnQuanNcIlxuaW1wb3J0IHsgQWNjZXNzb3IgfSBmcm9tIFwiLi9zdGF0ZS5qc1wiXG5pbXBvcnQgeyBDQywgRkMsIGVudiB9IGZyb20gXCIuL2Vudi5qc1wiXG5pbXBvcnQgeyBrZWJhYmlmeSwgUGFzY2FsaWZ5LCBzZXQgfSBmcm9tIFwiLi4vdXRpbC5qc1wiXG5pbXBvcnQgeyBvbkNsZWFudXAgfSBmcm9tIFwiLi9zY29wZS5qc1wiXG5cbi8qKlxuICogUmVwcmVzZW50cyBhbGwgb2YgdGhlIHRoaW5ncyB0aGF0IGNhbiBiZSBwYXNzZWQgYXMgYSBjaGlsZCB0byBjbGFzcyBjb21wb25lbnRzLlxuICovXG5leHBvcnQgdHlwZSBOb2RlID1cbiAgICB8IEFycmF5PEdPYmplY3QuT2JqZWN0PlxuICAgIHwgR09iamVjdC5PYmplY3RcbiAgICB8IG51bWJlclxuICAgIHwgc3RyaW5nXG4gICAgfCBib29sZWFuXG4gICAgfCBudWxsXG4gICAgfCB1bmRlZmluZWRcblxuZXhwb3J0IGNvbnN0IGd0a1R5cGUgPSBTeW1ib2woXCJndGsgYnVpbGRlciB0eXBlXCIpXG5cbi8qKlxuICogR2V0IHRoZSB0eXBlIG9mIHRoZSBvYmplY3Qgc3BlY2lmaWVkIHRocm91Z2ggdGhlIGAkdHlwZWAgcHJvcGVydHlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFR5cGUob2JqZWN0OiBHT2JqZWN0Lk9iamVjdCkge1xuICAgIHJldHVybiBndGtUeXBlIGluIG9iamVjdCA/IChvYmplY3RbZ3RrVHlwZV0gYXMgc3RyaW5nKSA6IG51bGxcbn1cblxuLyoqXG4gKiBGdW5jdGlvbiBDb21wb25lbnQgUHJvcGVydGllc1xuICovXG5leHBvcnQgdHlwZSBGQ1Byb3BzPFNlbGYsIFByb3BzPiA9IFByb3BzICYge1xuICAgIC8qKlxuICAgICAqIEd0ay5CdWlsZGVyIHR5cGVcbiAgICAgKiBpdHMgY29uc3VtZWQgaW50ZXJuYWxseSBhbmQgbm90IGFjdHVhbGx5IHBhc3NlZCBhcyBhIHBhcmFtZXRlcnNcbiAgICAgKi9cbiAgICAkdHlwZT86IHN0cmluZ1xuICAgIC8qKlxuICAgICAqIHNldHVwIGZ1bmN0aW9uXG4gICAgICogaXRzIGNvbnN1bWVkIGludGVybmFsbHkgYW5kIG5vdCBhY3R1YWxseSBwYXNzZWQgYXMgYSBwYXJhbWV0ZXJzXG4gICAgICovXG4gICAgJD8oc2VsZjogU2VsZik6IHZvaWRcbn1cblxuLyoqXG4gKiBDbGFzcyBDb21wb25lbnQgUHJvcGVydGllc1xuICovXG5leHBvcnQgdHlwZSBDQ1Byb3BzPFNlbGYgZXh0ZW5kcyBHT2JqZWN0Lk9iamVjdCwgUHJvcHM+ID0ge1xuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbCBjaGlsZHJlbiBlbGVtZW50c1xuICAgICAqIGl0cyBjb25zdW1lZCBpbnRlcm5hbGx5IGFuZCBub3QgYWN0dWFsbHkgcGFzc2VkIHRvIGNsYXNzIGNvbXBvbmVudCBjb25zdHJ1Y3RvcnNcbiAgICAgKi9cbiAgICBjaGlsZHJlbj86IEFycmF5PE5vZGU+IHwgTm9kZVxuICAgIC8qKlxuICAgICAqIEd0ay5CdWlsZGVyIHR5cGVcbiAgICAgKiBpdHMgY29uc3VtZWQgaW50ZXJuYWxseSBhbmQgbm90IGFjdHVhbGx5IHBhc3NlZCB0byBjbGFzcyBjb21wb25lbnQgY29uc3RydWN0b3JzXG4gICAgICovXG4gICAgJHR5cGU/OiBzdHJpbmdcbiAgICAvKipcbiAgICAgKiBmdW5jdGlvbiB0byB1c2UgYXMgYSBjb25zdHJ1Y3RvcixcbiAgICAgKiBpdHMgY29uc3VtZWQgaW50ZXJuYWxseSBhbmQgbm90IGFjdHVhbGx5IHBhc3NlZCB0byBjbGFzcyBjb21wb25lbnQgY29uc3RydWN0b3JzXG4gICAgICovXG4gICAgJGNvbnN0cnVjdG9yPyhwcm9wczogUGFydGlhbDxQcm9wcz4pOiBTZWxmXG4gICAgLyoqXG4gICAgICogc2V0dXAgZnVuY3Rpb24sXG4gICAgICogaXRzIGNvbnN1bWVkIGludGVybmFsbHkgYW5kIG5vdCBhY3R1YWxseSBwYXNzZWQgdG8gY2xhc3MgY29tcG9uZW50IGNvbnN0cnVjdG9yc1xuICAgICAqL1xuICAgICQ/KHNlbGY6IFNlbGYpOiB2b2lkXG4gICAgLyoqXG4gICAgICogQ1NTIGNsYXNzIG5hbWVzXG4gICAgICovXG4gICAgY2xhc3M/OiBzdHJpbmcgfCBBY2Nlc3NvcjxzdHJpbmc+XG4gICAgLyoqXG4gICAgICogaW5saW5lIENTU1xuICAgICAqL1xuICAgIGNzcz86IHN0cmluZyB8IEFjY2Vzc29yPHN0cmluZz5cbn0gJiB7XG4gICAgW0sgaW4ga2V5b2YgUHJvcHNdOiBBY2Nlc3NvcjxOb25OdWxsYWJsZTxQcm9wc1tLXT4+IHwgUHJvcHNbS11cbn0gJiB7XG4gICAgW1MgaW4ga2V5b2YgU2VsZltcIiRzaWduYWxzXCJdIGFzIFMgZXh0ZW5kcyBgbm90aWZ5Ojoke2luZmVyIFB9YFxuICAgICAgICA/IGBvbk5vdGlmeSR7UGFzY2FsaWZ5PFA+fWBcbiAgICAgICAgOiBTIGV4dGVuZHMgc3RyaW5nXG4gICAgICAgICAgPyBgb24ke1Bhc2NhbGlmeTxTPn1gXG4gICAgICAgICAgOiBuZXZlcl0/OiBHT2JqZWN0LlNpZ25hbENhbGxiYWNrPFNlbGYsIFNlbGZbXCIkc2lnbmFsc1wiXVtTXT5cbn1cblxuLy8gcHJldHRpZXItaWdub3JlXG50eXBlIEpzeFByb3BzPEMsIFByb3BzPiA9XG4gICAgQyBleHRlbmRzIHR5cGVvZiBGcmFnbWVudCA/IChQcm9wcyAmIHt9KVxuICAgIC8vIGludHJpbnNpY0VsZW1lbnRzIGFsd2F5cyByZXNvbHZlIGFzIEZDXG4gICAgLy8gc28gd2UgY2FuJ3QgbmFycm93IGl0IGRvd24sIGFuZCBpbiBzb21lIGNhc2VzXG4gICAgLy8gdGhlIHNldHVwIGZ1bmN0aW9uIGlzIHR5cGVkIGFzIGEgdW5pb24gb2YgT2JqZWN0IGFuZCBhY3R1YWwgdHlwZVxuICAgIC8vIGFzIGEgZml4IHVzZXJzIGNhbiBhbmQgc2hvdWxkIHVzZSBGQ1Byb3BzXG4gICAgOiBDIGV4dGVuZHMgRkMgPyBQcm9wcyAmIE9taXQ8RkNQcm9wczxSZXR1cm5UeXBlPEM+LCBQcm9wcz4sIFwiJFwiPlxuICAgIDogQyBleHRlbmRzIENDID8gQ0NQcm9wczxJbnN0YW5jZVR5cGU8Qz4sIFByb3BzPlxuICAgIDogbmV2ZXJcblxuZnVuY3Rpb24gaXNHT2JqZWN0Q3RvcihjdG9yOiBhbnkpOiBjdG9yIGlzIENDIHtcbiAgICByZXR1cm4gY3Rvci5wcm90b3R5cGUgaW5zdGFuY2VvZiBHT2JqZWN0Lk9iamVjdFxufVxuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uQ3RvcihjdG9yOiBhbnkpOiBjdG9yIGlzIEZDIHtcbiAgICByZXR1cm4gdHlwZW9mIGN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiAhaXNHT2JqZWN0Q3RvcihjdG9yKVxufVxuXG4vKiogQGludGVybmFsICovXG5leHBvcnQgZnVuY3Rpb24gc2V0VHlwZShvYmplY3Q6IG9iamVjdCwgdHlwZTogc3RyaW5nKSB7XG4gICAgaWYgKGd0a1R5cGUgaW4gb2JqZWN0ICYmIG9iamVjdFtndGtUeXBlXSAhPT0gXCJcIikge1xuICAgICAgICBjb25zb2xlLndhcm4oYHR5cGUgb3ZlcnJpZGVuIGZyb20gJHtvYmplY3RbZ3RrVHlwZV19IHRvICR7dHlwZX0gb24gJHtvYmplY3R9YClcbiAgICB9XG5cbiAgICBPYmplY3QuYXNzaWduKG9iamVjdCwgeyBbZ3RrVHlwZV06IHR5cGUgfSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGpzeDxUIGV4dGVuZHMgKHByb3BzOiBhbnkpID0+IEdPYmplY3QuT2JqZWN0PihcbiAgICBjdG9yOiBULFxuICAgIHByb3BzOiBKc3hQcm9wczxULCBQYXJhbWV0ZXJzPFQ+WzBdPixcbik6IFJldHVyblR5cGU8VD5cblxuZXhwb3J0IGZ1bmN0aW9uIGpzeDxUIGV4dGVuZHMgbmV3IChwcm9wczogYW55KSA9PiBHT2JqZWN0Lk9iamVjdD4oXG4gICAgY3RvcjogVCxcbiAgICBwcm9wczogSnN4UHJvcHM8VCwgQ29uc3RydWN0b3JQYXJhbWV0ZXJzPFQ+WzBdPixcbik6IEluc3RhbmNlVHlwZTxUPlxuXG5leHBvcnQgZnVuY3Rpb24ganN4PFQgZXh0ZW5kcyBHT2JqZWN0Lk9iamVjdD4oXG4gICAgY3Rvcjoga2V5b2YgKHR5cGVvZiBlbnYpW1wiaW50cmluc2ljRWxlbWVudHNcIl0gfCAobmV3IChwcm9wczogYW55KSA9PiBUKSB8ICgocHJvcHM6IGFueSkgPT4gVCksXG4gICAgaW5wcm9wczogYW55LFxuICAgIC8vIGtleSBpcyBhIHNwZWNpYWwgcHJvcCBpbiBqc3ggd2hpY2ggaXMgcGFzc2VkIGFzIGEgdGhpcmQgYXJndW1lbnQgYW5kIG5vdCBpbiBwcm9wc1xuICAgIGtleT86IHN0cmluZyxcbik6IFQge1xuICAgIGNvbnN0IHsgJCwgJHR5cGUsICRjb25zdHJ1Y3RvciwgY2hpbGRyZW4gPSBbXSwgLi4ucmVzdCB9ID0gaW5wcm9wcyBhcyBDQ1Byb3BzPFQsIGFueT5cbiAgICBjb25zdCBwcm9wcyA9IHJlc3QgYXMgUmVjb3JkPHN0cmluZywgYW55PlxuXG4gICAgaWYgKGtleSkgT2JqZWN0LmFzc2lnbihwcm9wcywgeyBrZXkgfSlcbiAgICBlbnYuaW5pdFByb3BzKHByb3BzKVxuXG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMocHJvcHMpKSB7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSBkZWxldGUgcHJvcHNba2V5XVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgY3RvciA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBpZiAoY3RvciBpbiBlbnYuaW50cmluc2ljRWxlbWVudHMpIHtcbiAgICAgICAgICAgIGN0b3IgPSBlbnYuaW50cmluc2ljRWxlbWVudHNbY3Rvcl0gYXMgRkM8VD4gfCBDQzxUPlxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoYHVua25vd24gaW50cmluc2ljIGVsZW1lbnQgXCIke2N0b3J9XCJgKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGlzRnVuY3Rpb25DdG9yKGN0b3IpKSB7XG4gICAgICAgIGNvbnN0IG9iamVjdCA9IGN0b3IoeyBjaGlsZHJlbiwgLi4ucHJvcHMgfSlcbiAgICAgICAgaWYgKCR0eXBlKSBzZXRUeXBlKG9iamVjdCwgJHR5cGUpXG4gICAgICAgICQ/LihvYmplY3QpXG4gICAgICAgIHJldHVybiBvYmplY3RcbiAgICB9XG5cbiAgICAvLyBjb2xsZWN0IGNzcyBhbmQgY2xhc3NOYW1lXG4gICAgY29uc3QgeyBjc3MsIGNsYXNzOiBjbGFzc05hbWUgfSA9IHByb3BzXG4gICAgZGVsZXRlIHByb3BzLmNzc1xuICAgIGRlbGV0ZSBwcm9wcy5jbGFzc1xuXG4gICAgY29uc3Qgc2lnbmFsczogQXJyYXk8W3N0cmluZywgKC4uLnByb3BzOiB1bmtub3duW10pID0+IHVua25vd25dPiA9IFtdXG4gICAgY29uc3QgYmluZGluZ3M6IEFycmF5PFtzdHJpbmcsIEFjY2Vzc29yPHVua25vd24+XT4gPSBbXVxuXG4gICAgLy8gY29sbGVjdCBzaWduYWxzIGFuZCBiaW5kaW5nc1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHByb3BzKSkge1xuICAgICAgICBpZiAoa2V5LnN0YXJ0c1dpdGgoXCJvblwiKSkge1xuICAgICAgICAgICAgc2lnbmFscy5wdXNoKFtrZXkuc2xpY2UoMiksIHZhbHVlIGFzICgpID0+IHVua25vd25dKVxuICAgICAgICAgICAgZGVsZXRlIHByb3BzW2tleV1cbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBBY2Nlc3Nvcikge1xuICAgICAgICAgICAgYmluZGluZ3MucHVzaChba2V5LCB2YWx1ZV0pXG4gICAgICAgICAgICBwcm9wc1trZXldID0gdmFsdWUuZ2V0KClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGNvbnN0cnVjdFxuICAgIGNvbnN0IG9iamVjdCA9ICRjb25zdHJ1Y3RvciA/ICRjb25zdHJ1Y3Rvcihwcm9wcykgOiBuZXcgKGN0b3IgYXMgQ0M8VD4pKHByb3BzKVxuICAgIGlmICgkY29uc3RydWN0b3IpIE9iamVjdC5hc3NpZ24ob2JqZWN0LCBwcm9wcylcbiAgICBpZiAoJHR5cGUpIHNldFR5cGUob2JqZWN0LCAkdHlwZSlcblxuICAgIGlmIChjc3MpIGVudi5zZXRDc3Mob2JqZWN0LCBjc3MpXG4gICAgaWYgKGNsYXNzTmFtZSkgZW52LnNldENsYXNzKG9iamVjdCwgY2xhc3NOYW1lKVxuXG4gICAgLy8gYWRkIGNoaWxkcmVuXG4gICAgZm9yIChjb25zdCBjaGlsZCBvZiBBcnJheS5pc0FycmF5KGNoaWxkcmVuKSA/IGNoaWxkcmVuIDogW2NoaWxkcmVuXSkge1xuICAgICAgICBpZiAoY2hpbGQgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIlRyeWluZyB0byBhZGQgYm9vbGVhbiB2YWx1ZSBvZiBgdHJ1ZWAgYXMgYSBjaGlsZC5cIilcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZCkpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgY2ggb2YgY2hpbGQpIHtcbiAgICAgICAgICAgICAgICBlbnYuYWRkQ2hpbGQob2JqZWN0LCBjaCwgLTEpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoY2hpbGQpIHtcbiAgICAgICAgICAgIGVudi5hZGRDaGlsZChvYmplY3QsIGNoaWxkLCAtMSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGhhbmRsZSBzaWduYWxzXG4gICAgY29uc3QgZGlzcG9zZUhhbmRsZXJzID0gc2lnbmFscy5tYXAoKFtzaWcsIGhhbmRsZXJdKSA9PiB7XG4gICAgICAgIGNvbnN0IG5hbWUgPSBrZWJhYmlmeShzaWcpXG4gICAgICAgIGNvbnN0IGlkID0gbmFtZS5zdGFydHNXaXRoKFwibm90aWZ5LVwiKVxuICAgICAgICAgICAgPyBvYmplY3QuY29ubmVjdChgbm90aWZ5Ojoke25hbWUuc2xpY2UoNyl9YCwgaGFuZGxlcilcbiAgICAgICAgICAgIDogb2JqZWN0LmNvbm5lY3Qoa2ViYWJpZnkoc2lnKSwgaGFuZGxlcilcblxuICAgICAgICByZXR1cm4gKCkgPT4gb2JqZWN0LmRpc2Nvbm5lY3QoaWQpXG4gICAgfSlcblxuICAgIC8vIGhhbmRsZSBiaW5kaW5nc1xuICAgIGNvbnN0IGRpc3Bvc2VCaW5kaW5ncyA9IGJpbmRpbmdzLm1hcCgoW3Byb3AsIGJpbmRpbmddKSA9PiB7XG4gICAgICAgIGNvbnN0IGRpc3Bvc2UgPSBiaW5kaW5nLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICBzZXQob2JqZWN0LCBwcm9wLCBiaW5kaW5nLmdldCgpKVxuICAgICAgICB9KVxuICAgICAgICBzZXQob2JqZWN0LCBwcm9wLCBiaW5kaW5nLmdldCgpKVxuICAgICAgICByZXR1cm4gZGlzcG9zZVxuICAgIH0pXG5cbiAgICAvLyBjbGVhbnVwXG4gICAgaWYgKGRpc3Bvc2VCaW5kaW5ncy5sZW5ndGggPiAwIHx8IGRpc3Bvc2VIYW5kbGVycy5sZW5ndGggPiAwKSB7XG4gICAgICAgIG9uQ2xlYW51cCgoKSA9PiB7XG4gICAgICAgICAgICBkaXNwb3NlSGFuZGxlcnMuZm9yRWFjaCgoY2IpID0+IGNiKCkpXG4gICAgICAgICAgICBkaXNwb3NlQmluZGluZ3MuZm9yRWFjaCgoY2IpID0+IGNiKCkpXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgJD8uKG9iamVjdClcbiAgICByZXR1cm4gb2JqZWN0XG59XG5cbmV4cG9ydCBjb25zdCBqc3hzID0ganN4XG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxuICAgIG5hbWVzcGFjZSBKU1gge1xuICAgICAgICB0eXBlIEVsZW1lbnRUeXBlID0ga2V5b2YgSW50cmluc2ljRWxlbWVudHMgfCBGQyB8IENDXG4gICAgICAgIHR5cGUgRWxlbWVudCA9IEdPYmplY3QuT2JqZWN0XG4gICAgICAgIHR5cGUgRWxlbWVudENsYXNzID0gR09iamVjdC5PYmplY3RcblxuICAgICAgICB0eXBlIExpYnJhcnlNYW5hZ2VkQXR0cmlidXRlczxDLCBQcm9wcz4gPSBKc3hQcm9wczxDLCBQcm9wcz4gJiB7XG4gICAgICAgICAgICAvLyBGSVhNRTogd2h5IGRvZXMgYW4gaW50cmluc2ljIGVsZW1lbnQgYWx3YXlzIHJlc29sdmUgYXMgRkM/XG4gICAgICAgICAgICAvLyBfX3R5cGU/OiBDIGV4dGVuZHMgQ0MgPyBcIkNDXCIgOiBDIGV4dGVuZHMgRkMgPyBcIkZDXCIgOiBuZXZlclxuICAgICAgICB9XG5cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1lbXB0eS1vYmplY3QtdHlwZVxuICAgICAgICBpbnRlcmZhY2UgSW50cmluc2ljRWxlbWVudHMge1xuICAgICAgICAgICAgLy8gY2M6IENDUHJvcHM8R3RrLkJveCwgR3RrLkJveC5Db25zdHJ1Y3RvclByb3BzLCBHdGsuQm94LlNpZ25hbFNpZ25hdHVyZXM+XG4gICAgICAgICAgICAvLyBmYzogRkNQcm9wczxHdGsuV2lkZ2V0LCBGblByb3BzPlxuICAgICAgICB9XG5cbiAgICAgICAgaW50ZXJmYWNlIEVsZW1lbnRDaGlsZHJlbkF0dHJpYnV0ZSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWVtcHR5LW9iamVjdC10eXBlXG4gICAgICAgICAgICBjaGlsZHJlbjoge31cbiAgICAgICAgfVxuICAgIH1cbn1cbiIsICJpbXBvcnQgR09iamVjdCBmcm9tIFwiZ2k6Ly9HT2JqZWN0XCJcbmltcG9ydCBHaW8gZnJvbSBcImdpOi8vR2lvXCJcbmltcG9ydCBHTGliIGZyb20gXCJnaTovL0dMaWJcIlxuaW1wb3J0IHsgdHlwZSBQYXNjYWxpZnksIGNhbWVsaWZ5LCBrZWJhYmlmeSB9IGZyb20gXCIuLi91dGlsLmpzXCJcblxudHlwZSBTdWJzY3JpYmVDYWxsYmFjayA9ICgpID0+IHZvaWRcbnR5cGUgRGlzcG9zZUZ1bmN0aW9uID0gKCkgPT4gdm9pZFxudHlwZSBTdWJzY3JpYmVGdW5jdGlvbiA9IChjYWxsYmFjazogU3Vic2NyaWJlQ2FsbGJhY2spID0+IERpc3Bvc2VGdW5jdGlvblxuXG5leHBvcnQgdHlwZSBBY2Nlc3NlZDxUPiA9IFQgZXh0ZW5kcyBBY2Nlc3NvcjxpbmZlciBWPiA/IFYgOiBuZXZlclxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1kZWNsYXJhdGlvbi1tZXJnaW5nXG5leHBvcnQgY2xhc3MgQWNjZXNzb3I8VCA9IHVua25vd24+IGV4dGVuZHMgRnVuY3Rpb24ge1xuICAgIHN0YXRpYyAkZ3R5cGUgPSBHT2JqZWN0LlRZUEVfSlNPQkpFQ1QgYXMgdW5rbm93biBhcyBHT2JqZWN0LkdUeXBlPEFjY2Vzc29yPlxuXG4gICAgLyoqIEBleHBlcmltZW50YWwgKi9cbiAgICBzdGF0aWMgZXZhbHVhdGluZz86IFNldDxBY2Nlc3Nvcjx1bmtub3duPj5cblxuICAgICNnZXQ6ICgpID0+IFRcbiAgICAjc3Vic2NyaWJlOiBTdWJzY3JpYmVGdW5jdGlvblxuXG4gICAgY29uc3RydWN0b3IoZ2V0OiAoKSA9PiBULCBzdWJzY3JpYmU/OiBTdWJzY3JpYmVGdW5jdGlvbikge1xuICAgICAgICBzdXBlcihcInJldHVybiBhcmd1bWVudHMuY2FsbGVlLl9jYWxsLmFwcGx5KGFyZ3VtZW50cy5jYWxsZWUsIGFyZ3VtZW50cylcIilcbiAgICAgICAgdGhpcy4jc3Vic2NyaWJlID0gc3Vic2NyaWJlID8/ICgoKSA9PiAoKSA9PiB2b2lkIDApXG4gICAgICAgIHRoaXMuI2dldCA9IGdldFxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFN1YnNjcmliZSBmb3IgdmFsdWUgY2hhbmdlcy5cbiAgICAgKiBAcGFyYW0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRvIHJ1biB3aGVuIHRoZSBjdXJyZW50IHZhbHVlIGNoYW5nZXMuXG4gICAgICogQHJldHVybnMgVW5zdWJzY3JpYmUgZnVuY3Rpb24uXG4gICAgICovXG4gICAgc3Vic2NyaWJlKGNhbGxiYWNrOiBTdWJzY3JpYmVDYWxsYmFjayk6IERpc3Bvc2VGdW5jdGlvbiB7XG4gICAgICAgIC8vIFRPRE86IGF1dG8gdW5zdWIgd2hlbiBhIHNjb3BlIGlzIGF2YWlsYWJsZT9cbiAgICAgICAgcmV0dXJuIHRoaXMuI3N1YnNjcmliZShjYWxsYmFjaylcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyBUaGUgY3VycmVudCB2YWx1ZS5cbiAgICAgKi9cbiAgICBnZXQoKTogVCB7XG4gICAgICAgIEFjY2Vzc29yLmV2YWx1YXRpbmc/LmFkZCh0aGlzKVxuICAgICAgICByZXR1cm4gdGhpcy4jZ2V0KClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgYEFjY2Vzc29yYCB0aGF0IGFwcGxpZXMgYSB0cmFuc2Zvcm1hdGlvbiBvbiBpdHMgdmFsdWUuXG4gICAgICogQHBhcmFtIHRyYW5zZm9ybSBUaGUgdHJhbnNmb3JtYXRpb24gdG8gYXBwbHkuIFNob3VsZCBiZSBhIHB1cmUgZnVuY3Rpb24uXG4gICAgICovXG4gICAgYXM8UiA9IFQ+KHRyYW5zZm9ybTogKHZhbHVlOiBUKSA9PiBSKTogQWNjZXNzb3I8Uj4ge1xuICAgICAgICByZXR1cm4gbmV3IEFjY2Vzc29yKCgpID0+IHRyYW5zZm9ybSh0aGlzLiNnZXQoKSksIHRoaXMuI3N1YnNjcmliZSlcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2NhbGw8UiA9IFQ+KHRyYW5zZm9ybTogKHZhbHVlOiBUKSA9PiBSKTogQWNjZXNzb3I8Uj4ge1xuICAgICAgICByZXR1cm4gdGhpcy5hcyh0cmFuc2Zvcm0pXG4gICAgfVxuXG4gICAgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGBBY2Nlc3Nvcjwke3RoaXMuZ2V0KCl9PmBcbiAgICB9XG5cbiAgICBbU3ltYm9sLnRvUHJpbWl0aXZlXSgpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFwiQWNjZXNzb3IgaW1wbGljaXRseSBjb252ZXJ0ZWQgdG8gYSBwcmltaXRpdmUgdmFsdWUuXCIpXG4gICAgICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKClcbiAgICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQWNjZXNzb3I8VD4ge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBgQWNjZXNzb3JgIHRoYXQgYXBwbGllcyBhIHRyYW5zZm9ybWF0aW9uIG9uIGl0cyB2YWx1ZS5cbiAgICAgKiBAcGFyYW0gdHJhbnNmb3JtIFRoZSB0cmFuc2Zvcm1hdGlvbiB0byBhcHBseS4gU2hvdWxkIGJlIGEgcHVyZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICA8UiA9IFQ+KHRyYW5zZm9ybTogKHZhbHVlOiBUKSA9PiBSKTogQWNjZXNzb3I8Uj5cbn1cblxuZXhwb3J0IHR5cGUgU2V0dGVyPFQ+ID0ge1xuICAgICh2YWx1ZTogVCk6IHZvaWRcbiAgICAodmFsdWU6IChwcmV2OiBUKSA9PiBUKTogdm9pZFxufVxuXG5leHBvcnQgdHlwZSBTdGF0ZTxUPiA9IFtBY2Nlc3NvcjxUPiwgU2V0dGVyPFQ+XVxuXG4vKipcbiAqIENyZWF0ZSBhIHdyaXRhYmxlIHNpZ25hbC5cbiAqXG4gKiBAcGFyYW0gaW5pdCBUaGUgaW50aWFsIHZhbHVlIG9mIHRoZSBzaWduYWxcbiAqIEByZXR1cm5zIEFuIGBBY2Nlc3NvcmAgYW5kIGEgc2V0dGVyIGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTdGF0ZTxUPihpbml0OiBUKTogU3RhdGU8VD4ge1xuICAgIGxldCBjdXJyZW50VmFsdWUgPSBpbml0XG4gICAgY29uc3Qgc3Vic2NyaWJlcnMgPSBuZXcgU2V0PFN1YnNjcmliZUNhbGxiYWNrPigpXG5cbiAgICBjb25zdCBzdWJzY3JpYmU6IFN1YnNjcmliZUZ1bmN0aW9uID0gKGNhbGxiYWNrKSA9PiB7XG4gICAgICAgIHN1YnNjcmliZXJzLmFkZChjYWxsYmFjaylcbiAgICAgICAgcmV0dXJuICgpID0+IHN1YnNjcmliZXJzLmRlbGV0ZShjYWxsYmFjaylcbiAgICB9XG5cbiAgICBjb25zdCBzZXQgPSAobmV3VmFsdWU6IHVua25vd24pID0+IHtcbiAgICAgICAgY29uc3QgdmFsdWU6IFQgPSB0eXBlb2YgbmV3VmFsdWUgPT09IFwiZnVuY3Rpb25cIiA/IG5ld1ZhbHVlKGN1cnJlbnRWYWx1ZSkgOiBuZXdWYWx1ZVxuICAgICAgICBpZiAoY3VycmVudFZhbHVlICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgY3VycmVudFZhbHVlID0gdmFsdWVcbiAgICAgICAgICAgIHN1YnNjcmliZXJzLmZvckVhY2goKGNiKSA9PiBjYigpKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFtuZXcgQWNjZXNzb3IoKCkgPT4gY3VycmVudFZhbHVlLCBzdWJzY3JpYmUpLCBzZXQgYXMgU2V0dGVyPFQ+XVxufVxuXG4vKipcbiAqIENyZWF0ZSBhbiBgQWNjZXNzb3JgIHdoaWNoIGlzIGNvbXB1dGVkIGZyb20gYSBsaXN0IG9mIGBBY2Nlc3NvcmBzLlxuICpcbiAqIGBgYHRzIEV4YW1wbGVcbiAqIGxldCBhOiBBY2Nlc3NvcjxudW1iZXI+XG4gKiBsZXQgYjogQWNjZXNzb3I8c3RyaW5nPlxuICogY29uc3QgYzogQWNjZXNzb3I8W251bWJlciwgc3RyaW5nXT4gPSBjcmVhdGVDb21wdXRlZChbYSwgYl0pXG4gKiBjb25zdCBkOiBBY2Nlc3NvcjxzdHJpbmc+ID0gY3JlYXRlQ29tcHV0ZWQoW2EsIGJdLCAoYTogbnVtYmVyLCBiOiBzdHJpbmcpID0+IGAke2F9ICR7Yn1gKVxuICogYGBgXG4gKlxuICogQHBhcmFtIGRlcHMgTGlzdCBvZiBgQWNjZXNzb3JzYC5cbiAqIEBwYXJhbSB0cmFuc2Zvcm0gQW4gb3B0aW9uYWwgdHJhbnNmb3JtIGZ1bmN0aW9uLlxuICogQHJldHVybnMgVGhlIGNvbXB1dGVkIGBBY2Nlc3NvcmAuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDb21wdXRlZDxcbiAgICBjb25zdCBEZXBzIGV4dGVuZHMgQXJyYXk8QWNjZXNzb3I8YW55Pj4sXG4gICAgQXJncyBleHRlbmRzIHsgW0sgaW4ga2V5b2YgRGVwc106IEFjY2Vzc2VkPERlcHNbS10+IH0sXG4gICAgViA9IEFyZ3MsXG4+KGRlcHM6IERlcHMsIHRyYW5zZm9ybT86ICguLi5hcmdzOiBBcmdzKSA9PiBWKTogQWNjZXNzb3I8Vj4ge1xuICAgIGxldCBkaXNwb3NlOiBBcnJheTxEaXNwb3NlRnVuY3Rpb24+XG4gICAgY29uc3Qgc3Vic2NyaWJlcnMgPSBuZXcgU2V0PFN1YnNjcmliZUNhbGxiYWNrPigpXG4gICAgY29uc3QgY2FjaGUgPSBuZXcgQXJyYXk8dW5rbm93bj4oZGVwcy5sZW5ndGgpXG5cbiAgICBjb25zdCBzdWJzY3JpYmU6IFN1YnNjcmliZUZ1bmN0aW9uID0gKGNhbGxiYWNrKSA9PiB7XG4gICAgICAgIGlmIChzdWJzY3JpYmVycy5zaXplID09PSAwKSB7XG4gICAgICAgICAgICBkaXNwb3NlID0gZGVwcy5tYXAoKGRlcCwgaSkgPT5cbiAgICAgICAgICAgICAgICBkZXAuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBkZXAuZ2V0KClcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhY2hlW2ldICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGVbaV0gPSBkZXAuZ2V0KClcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXJzLmZvckVhY2goKGNiKSA9PiBjYigpKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICApXG4gICAgICAgIH1cblxuICAgICAgICBzdWJzY3JpYmVycy5hZGQoY2FsbGJhY2spXG5cbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIHN1YnNjcmliZXJzLmRlbGV0ZShjYWxsYmFjaylcbiAgICAgICAgICAgIGlmIChzdWJzY3JpYmVycy5zaXplID09PSAwKSB7XG4gICAgICAgICAgICAgICAgZGlzcG9zZS5tYXAoKGNiKSA9PiBjYigpKVxuICAgICAgICAgICAgICAgIGRpc3Bvc2UubGVuZ3RoID0gMFxuICAgICAgICAgICAgICAgIGNhY2hlLmxlbmd0aCA9IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGdldCA9ICgpOiBWID0+IHtcbiAgICAgICAgY29uc3QgYXJncyA9IGRlcHMubWFwKChkZXAsIGkpID0+IHtcbiAgICAgICAgICAgIGlmICghY2FjaGVbaV0pIHtcbiAgICAgICAgICAgICAgICBjYWNoZVtpXSA9IGRlcC5nZXQoKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVbaV1cbiAgICAgICAgfSlcblxuICAgICAgICByZXR1cm4gdHJhbnNmb3JtID8gdHJhbnNmb3JtKC4uLihhcmdzIGFzIEFyZ3MpKSA6IChhcmdzIGFzIFYpXG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBBY2Nlc3NvcihnZXQsIHN1YnNjcmliZSlcbn1cblxuLyoqXG4gKiBDcmVhdGUgYW4gYEFjY2Vzc29yYCBvbiBhIGBHT2JqZWN0Lk9iamVjdGAncyBgcHJvcGVydHlgLlxuICpcbiAqIEBwYXJhbSBvYmplY3QgVGhlIGBHT2JqZWN0Lk9iamVjdGAgdG8gY3JlYXRlIHRoZSBgQWNjZXNzb3JgIG9uLlxuICogQHBhcmFtIHByb3BlcnR5IE9uZSBvZiBpdHMgcmVnaXN0ZXJlZCBwcm9wZXJ0aWVzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQmluZGluZzxUIGV4dGVuZHMgR09iamVjdC5PYmplY3QsIFAgZXh0ZW5kcyBrZXlvZiBUPihcbiAgICBvYmplY3Q6IFQsXG4gICAgcHJvcGVydHk6IEV4dHJhY3Q8UCwgc3RyaW5nPixcbik6IEFjY2Vzc29yPFRbUF0+XG5cbi8vIFRPRE86IHN1cHBvcnQgbmVzdGVkIGJpbmRpbmdzXG4vLyBleHBvcnQgZnVuY3Rpb24gY3JlYXRlQmluZGluZzxcbi8vICAgICBUIGV4dGVuZHMgR09iamVjdC5PYmplY3QsXG4vLyAgICAgUDEgZXh0ZW5kcyBrZXlvZiBULFxuLy8gICAgIFAyIGV4dGVuZHMga2V5b2YgTm9uTnVsbGFibGU8VFtQMV0+LFxuLy8gPihcbi8vICAgICBvYmplY3Q6IFQsXG4vLyAgICAgcHJvcGVydHkxOiBFeHRyYWN0PFAxLCBzdHJpbmc+LFxuLy8gICAgIHByb3BlcnR5MjogRXh0cmFjdDxQMiwgc3RyaW5nPixcbi8vICk6IEFjY2Vzc29yPE5vbk51bGxhYmxlPFRbUDFdPltQMl0+XG5cbi8qKlxuICogQ3JlYXRlIGFuIGBBY2Nlc3NvcmAgb24gYSBgR2lvLlNldHRpbmdzYCdzIGBrZXlgLlxuICogVmFsdWVzIGFyZSByZWN1cnNpdmVseSB1bnBhY2tlZC5cbiAqXG4gKiBAcGFyYW0gb2JqZWN0IFRoZSBgR2lvLlNldHRpbmdzYCB0byBjcmVhdGUgdGhlIGBBY2Nlc3NvcmAgb24uXG4gKiBAcGFyYW0ga2V5IFRoZSBzZXR0aW5ncyBrZXlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUJpbmRpbmc8VD4oc2V0dGluZ3M6IEdpby5TZXR0aW5ncywga2V5OiBzdHJpbmcpOiBBY2Nlc3NvcjxUPlxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQmluZGluZzxUPihvYmplY3Q6IEdPYmplY3QuT2JqZWN0IHwgR2lvLlNldHRpbmdzLCBrZXk6IHN0cmluZyk6IEFjY2Vzc29yPFQ+IHtcbiAgICBjb25zdCBwcm9wID0ga2ViYWJpZnkoa2V5KSBhcyBrZXlvZiB0eXBlb2Ygb2JqZWN0XG5cbiAgICBjb25zdCBzdWJzY3JpYmU6IFN1YnNjcmliZUZ1bmN0aW9uID0gKGNhbGxiYWNrKSA9PiB7XG4gICAgICAgIGNvbnN0IHNpZyA9IG9iamVjdCBpbnN0YW5jZW9mIEdpby5TZXR0aW5ncyA/IFwiY2hhbmdlZFwiIDogXCJub3RpZnlcIlxuICAgICAgICBjb25zdCBpZCA9IG9iamVjdC5jb25uZWN0KGAke3NpZ306OiR7cHJvcH1gLCAoKSA9PiBjYWxsYmFjaygpKVxuICAgICAgICByZXR1cm4gKCkgPT4gb2JqZWN0LmRpc2Nvbm5lY3QoaWQpXG4gICAgfVxuXG4gICAgY29uc3QgZ2V0ID0gKCk6IFQgPT4ge1xuICAgICAgICBpZiAob2JqZWN0IGluc3RhbmNlb2YgR2lvLlNldHRpbmdzKSB7XG4gICAgICAgICAgICByZXR1cm4gb2JqZWN0LmdldF92YWx1ZShrZXkpLnJlY3Vyc2l2ZVVucGFjaygpIGFzIFRcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGdldHRlciA9IGBnZXRfJHtwcm9wLnJlcGxhY2VBbGwoXCItXCIsIFwiX1wiKX1gIGFzIGtleW9mIHR5cGVvZiBvYmplY3RcblxuICAgICAgICAgICAgaWYgKGdldHRlciBpbiBvYmplY3QgJiYgdHlwZW9mIG9iamVjdFtnZXR0ZXJdID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKG9iamVjdFtnZXR0ZXJdIGFzICgpID0+IHVua25vd24pKCkgYXMgVFxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocHJvcCBpbiBvYmplY3QpIHJldHVybiBvYmplY3RbcHJvcF0gYXMgVFxuICAgICAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHJldHVybiBvYmplY3Rba2V5IGFzIGtleW9mIHR5cGVvZiBvYmplY3RdIGFzIFRcblxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoYGNhbm5vdCBnZXQgcHJvcGVydHkgJHtrZXl9YClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBuZXcgQWNjZXNzb3IoZ2V0LCBzdWJzY3JpYmUpXG59XG5cbnR5cGUgQ29ubmVjdGlvbkhhbmRsZXI8XG4gICAgTyBleHRlbmRzIEdPYmplY3QuT2JqZWN0LFxuICAgIFMgZXh0ZW5kcyBrZXlvZiBPW1wiJHNpZ25hbHNcIl0sXG4gICAgVCxcbj4gPSBPW1wiJHNpZ25hbHNcIl1bU10gZXh0ZW5kcyAoLi4uYXJnczogYW55W10pID0+IGluZmVyIFJcbiAgICA/IHZvaWQgZXh0ZW5kcyBSXG4gICAgICAgID8gKC4uLmFyZ3M6IFsuLi5QYXJhbWV0ZXJzPE9bXCIkc2lnbmFsc1wiXVtTXT4sIGN1cnJlbnRWYWx1ZTogVF0pID0+IFRcbiAgICAgICAgOiBuZXZlclxuICAgIDogbmV2ZXJcblxuLyoqXG4gKiBDcmVhdGUgYW4gYEFjY2Vzc29yYCB3aGljaCBzZXRzIHVwIGEgbGlzdCBvZiBgR09iamVjdC5PYmplY3RgIHNpZ25hbCBjb25uZWN0aW9ucy5cbiAqXG4gKiBgYGB0cyBFeGFtcGxlXG4gKiBjb25zdCB2YWx1ZTogQWNjZXNzb3I8c3RyaW5nPiA9IGNyZWF0ZUNvbm5lY3Rpb24oXG4gKiAgIFwiaW5pdGlhbCB2YWx1ZVwiLFxuICogICBbb2JqMSwgXCJzaWctbmFtZVwiLCAoLi4uYXJncykgPT4gXCJzdHJcIl0sXG4gKiAgIFtvYmoyLCBcInNpZy1uYW1lXCIsICguLi5hcmdzKSA9PiBcInN0clwiXVxuICogKVxuICogYGBgXG4gKlxuICogQHBhcmFtIGluaXQgVGhlIGluaXRpYWwgdmFsdWVcbiAqIEBwYXJhbSBzaWduYWxzIEEgbGlzdCBvZiBgR09iamVjdC5PYmplY3RgLCBzaWduYWwgbmFtZSBhbmQgY2FsbGJhY2sgcGFpcnMgdG8gY29ubmVjdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNvbm5lY3Rpb248XG4gICAgVCxcbiAgICBPMSBleHRlbmRzIEdPYmplY3QuT2JqZWN0LFxuICAgIFMxIGV4dGVuZHMga2V5b2YgTzFbXCIkc2lnbmFsc1wiXSxcbiAgICBPMiBleHRlbmRzIEdPYmplY3QuT2JqZWN0LFxuICAgIFMyIGV4dGVuZHMga2V5b2YgTzJbXCIkc2lnbmFsc1wiXSxcbiAgICBPMyBleHRlbmRzIEdPYmplY3QuT2JqZWN0LFxuICAgIFMzIGV4dGVuZHMga2V5b2YgTzNbXCIkc2lnbmFsc1wiXSxcbiAgICBPNCBleHRlbmRzIEdPYmplY3QuT2JqZWN0LFxuICAgIFM0IGV4dGVuZHMga2V5b2YgTzRbXCIkc2lnbmFsc1wiXSxcbiAgICBPNSBleHRlbmRzIEdPYmplY3QuT2JqZWN0LFxuICAgIFM1IGV4dGVuZHMga2V5b2YgTzVbXCIkc2lnbmFsc1wiXSxcbiAgICBPNiBleHRlbmRzIEdPYmplY3QuT2JqZWN0LFxuICAgIFM2IGV4dGVuZHMga2V5b2YgTzZbXCIkc2lnbmFsc1wiXSxcbiAgICBPNyBleHRlbmRzIEdPYmplY3QuT2JqZWN0LFxuICAgIFM3IGV4dGVuZHMga2V5b2YgTzdbXCIkc2lnbmFsc1wiXSxcbiAgICBPOCBleHRlbmRzIEdPYmplY3QuT2JqZWN0LFxuICAgIFM4IGV4dGVuZHMga2V5b2YgTzhbXCIkc2lnbmFsc1wiXSxcbiAgICBPOSBleHRlbmRzIEdPYmplY3QuT2JqZWN0LFxuICAgIFM5IGV4dGVuZHMga2V5b2YgTzlbXCIkc2lnbmFsc1wiXSxcbj4oXG4gICAgaW5pdDogVCxcbiAgICBoMTogW08xLCBTMSwgQ29ubmVjdGlvbkhhbmRsZXI8TzEsIFMxLCBUPl0sXG4gICAgaDI/OiBbTzIsIFMyLCBDb25uZWN0aW9uSGFuZGxlcjxPMiwgUzIsIFQ+XSxcbiAgICBoMz86IFtPMywgUzMsIENvbm5lY3Rpb25IYW5kbGVyPE8zLCBTMywgVD5dLFxuICAgIGg0PzogW080LCBTNCwgQ29ubmVjdGlvbkhhbmRsZXI8TzQsIFM0LCBUPl0sXG4gICAgaDU/OiBbTzUsIFM1LCBDb25uZWN0aW9uSGFuZGxlcjxPNSwgUzUsIFQ+XSxcbiAgICBoNj86IFtPNiwgUzYsIENvbm5lY3Rpb25IYW5kbGVyPE82LCBTNiwgVD5dLFxuICAgIGg3PzogW083LCBTNywgQ29ubmVjdGlvbkhhbmRsZXI8TzcsIFM3LCBUPl0sXG4gICAgaDg/OiBbTzgsIFM4LCBDb25uZWN0aW9uSGFuZGxlcjxPOCwgUzgsIFQ+XSxcbiAgICBoOT86IFtPOSwgUzksIENvbm5lY3Rpb25IYW5kbGVyPE85LCBTOSwgVD5dLFxuKSB7XG4gICAgbGV0IHZhbHVlID0gaW5pdFxuICAgIGxldCBkaXNwb3NlOiBBcnJheTxEaXNwb3NlRnVuY3Rpb24+XG4gICAgY29uc3Qgc3Vic2NyaWJlcnMgPSBuZXcgU2V0PFN1YnNjcmliZUNhbGxiYWNrPigpXG4gICAgY29uc3Qgc2lnbmFscyA9IFtoMSwgaDIsIGgzLCBoNCwgaDUsIGg2LCBoNywgaDgsIGg5XS5maWx0ZXIoKGgpID0+IGggIT09IHVuZGVmaW5lZClcblxuICAgIGNvbnN0IHN1YnNjcmliZTogU3Vic2NyaWJlRnVuY3Rpb24gPSAoY2FsbGJhY2spID0+IHtcbiAgICAgICAgaWYgKHN1YnNjcmliZXJzLnNpemUgPT09IDApIHtcbiAgICAgICAgICAgIGRpc3Bvc2UgPSBzaWduYWxzLm1hcCgoW29iamVjdCwgc2lnbmFsLCBjYWxsYmFja10pID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBpZCA9IEdPYmplY3QuT2JqZWN0LnByb3RvdHlwZS5jb25uZWN0LmNhbGwoXG4gICAgICAgICAgICAgICAgICAgIG9iamVjdCxcbiAgICAgICAgICAgICAgICAgICAgc2lnbmFsIGFzIHN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgKF8sIC4uLmFyZ3MpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld1ZhbHVlID0gY2FsbGJhY2soLi4uYXJncywgdmFsdWUpXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgIT09IG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBuZXdWYWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXJzLmZvckVhY2goKGNiKSA9PiBjYigpKVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIClcblxuICAgICAgICAgICAgICAgIHJldHVybiAoKSA9PiBHT2JqZWN0Lk9iamVjdC5wcm90b3R5cGUuZGlzY29ubmVjdC5jYWxsKG9iamVjdCwgaWQpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG5cbiAgICAgICAgc3Vic2NyaWJlcnMuYWRkKGNhbGxiYWNrKVxuXG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICBzdWJzY3JpYmVycy5kZWxldGUoY2FsbGJhY2spXG4gICAgICAgICAgICBpZiAoc3Vic2NyaWJlcnMuc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGRpc3Bvc2UubWFwKChjYikgPT4gY2IoKSlcbiAgICAgICAgICAgICAgICBkaXNwb3NlLmxlbmd0aCA9IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBuZXcgQWNjZXNzb3IoKCkgPT4gdmFsdWUsIHN1YnNjcmliZSlcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBzaWduYWwgZnJvbSBhIHByb3ZpZXIgZnVuY3Rpb24uXG4gKiBUaGUgcHJvdmlkZXIgaXMgY2FsbGVkIHdoZW4gdGhlIGZpcnN0IHN1YnNjcmliZXIgYXBwZWFycyBhbmQgdGhlIHJldHVybmVkIGRpc3Bvc2VcbiAqIGZ1bmN0aW9uIGZyb20gdGhlIHByb3ZpZGVyIHdpbGwgYmUgY2FsbGVkIHdoZW4gdGhlIG51bWJlciBvZiBzdWJzY3JpYmVycyBkcm9wIHRvIHplcm8uXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGB0c1xuICogY29uc3QgdmFsdWUgPSBjcmVhdGVFeHRlcm5hbCgwLCAoc2V0KSA9PiB7XG4gKiAgIGNvbnN0IGludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4gc2V0KCh2KSA9PiB2ICsgMSkpXG4gKiAgIHJldHVybiAoKSA9PiBjbGVhckludGVydmFsKGludGVydmFsKVxuICogfSlcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBpbml0IFRoZSBpbml0aWFsIHZhbHVlXG4gKiBAcGFyYW0gcHJvZHVjZXIgVGhlIHByb2R1Y2VyIGZ1bmN0aW9uIHdoaWNoIHNob3VsZCByZXR1cm4gYSBjbGVhbnVwIGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFeHRlcm5hbDxUPihcbiAgICBpbml0OiBULFxuICAgIHByb2R1Y2VyOiAoc2V0OiBTZXR0ZXI8VD4pID0+IERpc3Bvc2VGdW5jdGlvbixcbik6IEFjY2Vzc29yPFQ+IHtcbiAgICBsZXQgY3VycmVudFZhbHVlID0gaW5pdFxuICAgIGxldCBkaXNwb3NlOiBEaXNwb3NlRnVuY3Rpb25cbiAgICBjb25zdCBzdWJzY3JpYmVycyA9IG5ldyBTZXQ8U3Vic2NyaWJlQ2FsbGJhY2s+KClcblxuICAgIGNvbnN0IHN1YnNjcmliZTogU3Vic2NyaWJlRnVuY3Rpb24gPSAoY2FsbGJhY2spID0+IHtcbiAgICAgICAgaWYgKHN1YnNjcmliZXJzLnNpemUgPT09IDApIHtcbiAgICAgICAgICAgIGRpc3Bvc2UgPSBwcm9kdWNlcigodjogdW5rbm93bikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld1ZhbHVlOiBUID0gdHlwZW9mIHYgPT09IFwiZnVuY3Rpb25cIiA/IHYoY3VycmVudFZhbHVlKSA6IHZcbiAgICAgICAgICAgICAgICBpZiAobmV3VmFsdWUgIT09IGN1cnJlbnRWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50VmFsdWUgPSBuZXdWYWx1ZVxuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVycy5mb3JFYWNoKChjYikgPT4gY2IoKSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG5cbiAgICAgICAgc3Vic2NyaWJlcnMuYWRkKGNhbGxiYWNrKVxuXG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICBzdWJzY3JpYmVycy5kZWxldGUoY2FsbGJhY2spXG4gICAgICAgICAgICBpZiAoc3Vic2NyaWJlcnMuc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGRpc3Bvc2UoKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBBY2Nlc3NvcigoKSA9PiBjdXJyZW50VmFsdWUsIHN1YnNjcmliZSlcbn1cblxudHlwZSBEZWVwSW5mZXI8VCBleHRlbmRzIHN0cmluZz4gPSBSZXR1cm5UeXBlPEdMaWIuVmFyaWFudDxUPltcImRlZXBVbnBhY2tcIl0+XG50eXBlIFJlY3Vyc2l2ZUluZmVyPFQgZXh0ZW5kcyBzdHJpbmc+ID0gUmV0dXJuVHlwZTxHTGliLlZhcmlhbnQ8VD5bXCJyZWN1cnNpdmVVbnBhY2tcIl0+XG5cbi8qKiBAZXhwZXJpbWVudGFsICovXG50eXBlIFNldHRpbmdzPFQgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+PiA9IHtcbiAgICBbSyBpbiBrZXlvZiBUIGFzIFVuY2FwaXRhbGl6ZTxQYXNjYWxpZnk8Sz4+XTogQWNjZXNzb3I8UmVjdXJzaXZlSW5mZXI8VFtLXT4+XG59ICYge1xuICAgIFtLIGluIGtleW9mIFQgYXMgYHNldCR7UGFzY2FsaWZ5PEs+fWBdOiBTZXR0ZXI8RGVlcEluZmVyPFRbS10+PlxufVxuXG4vKipcbiAqIEBleHBlcmltZW50YWxcbiAqXG4gKiBXcmFwIGEge0BsaW5rIEdpby5TZXR0aW5nc30gaW50byBhIGNvbGxlY3Rpb24gb2Ygc2V0dGVycyBhbmQgYWNjZXNzb3JzLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBgdHNcbiAqIGNvbnN0IHMgPSBjcmVhdGVTZXR0aW5ncyhzZXR0aW5ncywge1xuICogICBcImNvbXBsZXgta2V5XCI6IFwiYXtzYXtzc319XCIsXG4gKiAgIFwic2ltcGxlLWtleVwiOiBcInNcIixcbiAqIH0pXG4gKlxuICogcy5jb21wbGV4S2V5LnN1YnNjcmliZSgoKSA9PiB7XG4gKiAgIHByaW50KHMuY29tcGxleEtleS5nZXQoKSlcbiAqIH0pXG4gKlxuICogcy5zZXRDb21wbGV4S2V5KChwcmV2KSA9PiAoe1xuICogICAuLi5wcmV2LFxuICogICBrZXk6IHsgbmVzdGVkOiBcIlwiIH0sXG4gKiB9KSlcbiAqIGBgYFxuICovXG4vLyBUT0RPOiBjb21lIHVwIHdpdGggYW4gQVBJXG4vLyAtIHRvIG1hbnVhbGx5IGFubm90YXRlIFZhcmlhbnQgdHlwZWQgc2V0dGVycy9nZXR0ZXJzXG4vLyAtIHRvIHNldCByZWN1cnNpdmUgdnMgZGVlcCB1bnBhY2sgcGVyIGtleVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNldHRpbmdzPGNvbnN0IFQgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+PihcbiAgICBzZXR0aW5nczogR2lvLlNldHRpbmdzLFxuICAgIGtleXM6IFQsXG4pOiBTZXR0aW5nczxUPiB7XG4gICAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhcbiAgICAgICAgT2JqZWN0LmVudHJpZXMoa2V5cykuZmxhdE1hcCgoW2tleSwgdHlwZV0pID0+IFtcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICBjYW1lbGlmeShrZXkpLFxuICAgICAgICAgICAgICAgIG5ldyBBY2Nlc3NvcihcbiAgICAgICAgICAgICAgICAgICAgKCkgPT4gc2V0dGluZ3MuZ2V0X3ZhbHVlKGtleSkucmVjdXJzaXZlVW5wYWNrKCksXG4gICAgICAgICAgICAgICAgICAgIChjYWxsYmFjaykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaWQgPSBzZXR0aW5ncy5jb25uZWN0KGBjaGFuZ2VkOjoke2tleX1gLCBjYWxsYmFjaylcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoKSA9PiBzZXR0aW5ncy5kaXNjb25uZWN0KGlkKVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgIGBzZXQke2tleVswXS50b1VwcGVyQ2FzZSgpICsgY2FtZWxpZnkoa2V5KS5zbGljZSgxKX1gLFxuICAgICAgICAgICAgICAgICh2OiB1bmtub3duKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHNldHRpbmdzLnNldF92YWx1ZShcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBHTGliLlZhcmlhbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgdiA9PT0gXCJmdW5jdGlvblwiID8gdihzZXR0aW5ncy5nZXRfdmFsdWUoa2V5KS5kZWVwVW5wYWNrKCkpIDogdixcbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgXSksXG4gICAgKVxufVxuIiwgImltcG9ydCB0eXBlIEdPYmplY3QgZnJvbSBcImdpOi8vR09iamVjdFwiXG5cbmV4cG9ydCBmdW5jdGlvbiBrZWJhYmlmeShzdHI6IHN0cmluZykge1xuICAgIHJldHVybiBzdHJcbiAgICAgICAgLnJlcGxhY2UoLyhbYS16XSkoW0EtWl0pL2csIFwiJDEtJDJcIilcbiAgICAgICAgLnJlcGxhY2VBbGwoXCJfXCIsIFwiLVwiKVxuICAgICAgICAudG9Mb3dlckNhc2UoKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc25ha2VpZnkoc3RyOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyXG4gICAgICAgIC5yZXBsYWNlKC8oW2Etel0pKFtBLVpdKS9nLCBcIiQxLSQyXCIpXG4gICAgICAgIC5yZXBsYWNlQWxsKFwiLVwiLCBcIl9cIilcbiAgICAgICAgLnRvTG93ZXJDYXNlKClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhbWVsaWZ5KHN0cjogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKC9bLV9dKC4pL2csIChfLCBjaGFyKSA9PiBjaGFyLnRvVXBwZXJDYXNlKCkpXG59XG5cbmV4cG9ydCB0eXBlIFBhc2NhbGlmeTxTPiA9IFMgZXh0ZW5kcyBgJHtpbmZlciBIZWFkfSR7XCItXCIgfCBcIl9cIn0ke2luZmVyIFRhaWx9YFxuICAgID8gYCR7Q2FwaXRhbGl6ZTxIZWFkPn0ke1Bhc2NhbGlmeTxUYWlsPn1gXG4gICAgOiBTIGV4dGVuZHMgc3RyaW5nXG4gICAgICA/IENhcGl0YWxpemU8Uz5cbiAgICAgIDogbmV2ZXJcblxuZXhwb3J0IHR5cGUgWG1sTm9kZSA9IHtcbiAgICBuYW1lOiBzdHJpbmdcbiAgICBhdHRyaWJ1dGVzPzogUmVjb3JkPHN0cmluZywgc3RyaW5nPlxuICAgIGNoaWxkcmVuPzogQXJyYXk8WG1sTm9kZT5cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHhtbCh7IG5hbWUsIGF0dHJpYnV0ZXMsIGNoaWxkcmVuIH06IFhtbE5vZGUpIHtcbiAgICBsZXQgYnVpbGRlciA9IGA8JHtuYW1lfWBcblxuICAgIGNvbnN0IGF0dHJzID0gT2JqZWN0LmVudHJpZXMoYXR0cmlidXRlcyA/PyBbXSlcblxuICAgIGlmIChhdHRycy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIGF0dHJzKSB7XG4gICAgICAgICAgICBidWlsZGVyICs9IGAgJHtrZXl9PVwiJHt2YWx1ZX1cImBcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjaGlsZHJlbiAmJiBjaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICAgIGJ1aWxkZXIgKz0gXCI+XCJcbiAgICAgICAgZm9yIChjb25zdCBub2RlIG9mIGNoaWxkcmVuKSB7XG4gICAgICAgICAgICBidWlsZGVyICs9IHhtbChub2RlKVxuICAgICAgICB9XG4gICAgICAgIGJ1aWxkZXIgKz0gYDwvJHtuYW1lfT5gXG4gICAgfSBlbHNlIHtcbiAgICAgICAgYnVpbGRlciArPSBcIiAvPlwiXG4gICAgfVxuXG4gICAgcmV0dXJuIGJ1aWxkZXJcbn1cblxuLy8gQmluZGluZ3Mgd29yayBvdmVyIHByb3BlcnRpZXMgaW4ga2ViYWItY2FzZSBiZWNhdXNlIHRoYXRzIHRoZSBjb252ZW50aW9uIG9mIGdvYmplY3Rcbi8vIGhvd2V2ZXIgaW4ganMgaXRzIGVpdGhlciBzbmFrZV9jYXNlIG9yIGNhbWVsQ2FzZVxuLy8gYWxzbyBvbiBEQnVzIGludGVyZmFjZXMgaXRzIFBhc2NhbENhc2UgYnkgY29udmVudGlvblxuLy8gc28gYXMgYSB3b3JrYXJvdW5kIHdlIHVzZSBnZXRfcHJvcGVydHlfbmFtZSBhbmQgb25seSB1c2UgdGhlIHByb3BlcnR5IGZpZWxkIGFzIGEgZmFsbGJhY2tcbmV4cG9ydCBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eUdldHRlcjxUIGV4dGVuZHMgb2JqZWN0PihvYmplY3Q6IFQsIHByb3A6IEV4dHJhY3Q8a2V5b2YgVCwgc3RyaW5nPikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmplY3QsIGBnZXRfJHtrZWJhYmlmeShwcm9wKS5yZXBsYWNlQWxsKFwiLVwiLCBcIl9cIil9YCwge1xuICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogKCkgPT4gb2JqZWN0W3Byb3BdLFxuICAgIH0pXG59XG5cbi8vIGF0dGVtcHQgc2V0dGluZyBhIHByb3BlcnR5IG9mIEdPYmplY3QuT2JqZWN0XG5leHBvcnQgZnVuY3Rpb24gc2V0KG9iajogR09iamVjdC5PYmplY3QsIHByb3A6IHN0cmluZywgdmFsdWU6IGFueSkge1xuICAgIGNvbnN0IGtleSA9IHNuYWtlaWZ5KHByb3ApXG4gICAgY29uc3QgZ2V0dGVyID0gYGdldF8ke2tleX1gIGFzIGtleW9mIHR5cGVvZiBvYmpcbiAgICBjb25zdCBzZXR0ZXIgPSBgc2V0XyR7a2V5fWAgYXMga2V5b2YgdHlwZW9mIG9ialxuXG4gICAgbGV0IGN1cnJlbnQ6IHVua25vd25cblxuICAgIGlmIChnZXR0ZXIgaW4gb2JqICYmIHR5cGVvZiBvYmpbZ2V0dGVyXSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGN1cnJlbnQgPSAob2JqW2dldHRlcl0gYXMgKCkgPT4gdW5rbm93bikoKVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGN1cnJlbnQgPSBvYmpbcHJvcCBhcyBrZXlvZiB0eXBlb2Ygb2JqXVxuICAgIH1cblxuICAgIGlmIChjdXJyZW50ICE9PSB2YWx1ZSkge1xuICAgICAgICBpZiAoc2V0dGVyIGluIG9iaiAmJiB0eXBlb2Ygb2JqW3NldHRlcl0gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgOyhvYmpbc2V0dGVyXSBhcyAodjogYW55KSA9PiB2b2lkKSh2YWx1ZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ob2JqLCB7IFtwcm9wXTogdmFsdWUgfSlcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsICJpbXBvcnQgdHlwZSBHT2JqZWN0IGZyb20gXCJnaTovL0dPYmplY3RcIlxuaW1wb3J0IHsgdHlwZSBBY2Nlc3NvciB9IGZyb20gXCIuL3N0YXRlLmpzXCJcblxudHlwZSBHT2JqID0gR09iamVjdC5PYmplY3RcbmV4cG9ydCB0eXBlIENDPFQgZXh0ZW5kcyBHT2JqID0gR09iaj4gPSB7IG5ldyAocHJvcHM6IGFueSk6IFQgfVxuZXhwb3J0IHR5cGUgRkM8VCBleHRlbmRzIEdPYmogPSBHT2JqPiA9IChwcm9wczogYW55KSA9PiBUXG5cbnR5cGUgQ3NzU2V0dGVyID0gKG9iamVjdDogR09iaiwgY3NzOiBzdHJpbmcgfCBBY2Nlc3NvcjxzdHJpbmc+KSA9PiB2b2lkXG50eXBlIENoaWxkRm4gPSAocGFyZW50OiBHT2JqLCBjaGlsZDogR09iaiB8IG51bWJlciB8IHN0cmluZywgaW5kZXg/OiBudW1iZXIpID0+IHZvaWRcblxuZXhwb3J0IGZ1bmN0aW9uIGNvbmZpZ3VlKGNvbmY6IFBhcnRpYWw8SnN4RW52Pikge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKGVudiwgY29uZilcbn1cblxudHlwZSBKc3hFbnYgPSB7XG4gICAgaW50cmluc2ljRWxlbWVudHM6IFJlY29yZDxzdHJpbmcsIENDIHwgRkM+XG4gICAgYWRkQ2hpbGQ6IENoaWxkRm5cbiAgICBzZXRDc3M6IENzc1NldHRlclxuICAgIHNldENsYXNzOiBDc3NTZXR0ZXJcbiAgICBpbml0UHJvcHM6IChwcm9wczogYW55KSA9PiB2b2lkXG4gICAgZGVmYXVsdENsZWFudXA6IChvYmplY3Q6IEdPYmopID0+IHZvaWRcbn1cblxuZnVuY3Rpb24gbWlzc2luZ0ltcGwoKSB7XG4gICAgdGhyb3cgRXJyb3IoXCJtaXNzaW5nIGltcGxcIilcbn1cblxuZXhwb3J0IGNvbnN0IGVudjogSnN4RW52ID0ge1xuICAgIGludHJpbnNpY0VsZW1lbnRzOiB7fSxcbiAgICBhZGRDaGlsZDogbWlzc2luZ0ltcGwsXG4gICAgc2V0Q3NzOiBtaXNzaW5nSW1wbCxcbiAgICBzZXRDbGFzczogbWlzc2luZ0ltcGwsXG4gICAgaW5pdFByb3BzOiAoKSA9PiB2b2lkIDAsXG4gICAgZGVmYXVsdENsZWFudXA6ICgpID0+IHZvaWQgMCxcbn1cbiIsICJpbXBvcnQgR09iamVjdCBmcm9tIFwiZ2k6Ly9HT2JqZWN0XCJcbmltcG9ydCB7IHJlZ2lzdGVyRGVzdHJveWFibGVUeXBlIH0gZnJvbSBcIi4uL2dub21lL3NpZ25hbFRyYWNrZXIuanNcIlxuXG4vLyBUT0RPOiBGcmFnbWVudCBzaG91bGQgaW1wbGVtZW50IEdpby5MaXN0TW9kZWxcblxuZXhwb3J0IGNsYXNzIEZyYWdtZW50PFQgPSBhbnk+IGV4dGVuZHMgR09iamVjdC5PYmplY3Qge1xuICAgIHN0YXRpYyBbR09iamVjdC5zaWduYWxzXSA9IHtcbiAgICAgICAgXCJkZXN0cm95XCI6IHt9LFxuXG4gICAgICAgIFwiY2hpbGQtYWRkZWRcIjoge1xuICAgICAgICAgICAgcGFyYW1fdHlwZXM6IFtHT2JqZWN0LlRZUEVfT0JKRUNULCBHT2JqZWN0LlRZUEVfVUlOVF0sXG4gICAgICAgIH0sXG4gICAgICAgIFwiY2hpbGQtcmVtb3ZlZFwiOiB7XG4gICAgICAgICAgICBwYXJhbV90eXBlczogW0dPYmplY3QuVFlQRV9PQkpFQ1QsIEdPYmplY3QuVFlQRV9VSU5UXSxcbiAgICAgICAgfSxcbiAgICB9XG5cbiAgICBzdGF0aWMgW0dPYmplY3QucHJvcGVydGllc10gPSB7XG4gICAgICAgIGNoaWxkcmVuOiBHT2JqZWN0LlBhcmFtU3BlYy5qc29iamVjdChcImNoaWxkcmVuXCIsIFwiXCIsIFwiXCIsIEdPYmplY3QuUGFyYW1GbGFncy5SRUFEQUJMRSksXG4gICAgfVxuXG4gICAgc3RhdGljIHtcbiAgICAgICAgR09iamVjdC5yZWdpc3RlckNsYXNzKHRoaXMpXG4gICAgICAgIHJlZ2lzdGVyRGVzdHJveWFibGVUeXBlKHRoaXMpXG4gICAgfVxuXG4gICAgc3RhdGljIG5ldzxUPihjaGlsZHJlbjogQXJyYXk8VD4gPSBbXSkge1xuICAgICAgICByZXR1cm4gbmV3IEZyYWdtZW50KHsgY2hpbGRyZW4gfSlcbiAgICB9XG5cbiAgICBwcml2YXRlIGNvbm5lY3Rpb25JZHMgPSBuZXcgU2V0PG51bWJlcj4oKVxuICAgIHByaXZhdGUgX2NoaWxkcmVuOiBBcnJheTxUPlxuXG4gICAgZ2V0IGNoaWxkcmVuKCkge1xuICAgICAgICByZXR1cm4gWy4uLnRoaXMuX2NoaWxkcmVuXVxuICAgIH1cblxuICAgIGFkZENoaWxkKGNoaWxkOiBULCBpbmRleDogbnVtYmVyID0gLTEpOiB2b2lkIHtcbiAgICAgICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgRnJhZ21lbnQpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKGBuZXN0aW5nIEZyYWdtZW50cyBhcmUgbm90IHlldCBzdXBwb3J0ZWRgKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGluZGV4ID4gMCkge1xuICAgICAgICAgICAgdGhpcy5fY2hpbGRyZW4gPSBbXG4gICAgICAgICAgICAgICAgLi4udGhpcy5fY2hpbGRyZW4uc2xpY2UoMCwgaW5kZXgpLFxuICAgICAgICAgICAgICAgIGNoaWxkLFxuICAgICAgICAgICAgICAgIC4uLnRoaXMuX2NoaWxkcmVuLnNsaWNlKGluZGV4KSxcbiAgICAgICAgICAgIF1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2NoaWxkcmVuLnB1c2goY2hpbGQpXG4gICAgICAgICAgICBpbmRleCA9IHRoaXMuX2NoaWxkcmVuLmxlbmd0aCAtIDFcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZW1pdChcImNoaWxkLWFkZGVkXCIsIGNoaWxkLCBpbmRleClcbiAgICAgICAgdGhpcy5ub3RpZnkoXCJjaGlsZHJlblwiKVxuICAgIH1cblxuICAgIGhhc0NoaWxkKGNoaWxkOiBUKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jaGlsZHJlbi5maW5kSW5kZXgoKGNoKSA9PiBjaCA9PT0gY2hpbGQpID4gLTFcbiAgICB9XG5cbiAgICByZW1vdmVDaGlsZChjaGlsZDogVCk6IHZvaWQge1xuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuX2NoaWxkcmVuLmZpbmRJbmRleCgoaSkgPT4gaSA9PT0gY2hpbGQpXG4gICAgICAgIHRoaXMuX2NoaWxkcmVuLnNwbGljZShpbmRleCwgMSlcblxuICAgICAgICB0aGlzLmVtaXQoXCJjaGlsZC1yZW1vdmVkXCIsIGNoaWxkLCBpbmRleClcbiAgICAgICAgdGhpcy5ub3RpZnkoXCJjaGlsZHJlblwiKVxuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKHsgY2hpbGRyZW4gPSBbXSB9OiBQYXJ0aWFsPHsgY2hpbGRyZW46IEFycmF5PFQ+IHwgVCB9PiA9IHt9KSB7XG4gICAgICAgIHN1cGVyKClcbiAgICAgICAgdGhpcy5fY2hpbGRyZW4gPSBBcnJheS5pc0FycmF5KGNoaWxkcmVuKSA/IGNoaWxkcmVuIDogW2NoaWxkcmVuXVxuICAgIH1cblxuICAgIGNvbm5lY3Qoc2lnbmFsOiBzdHJpbmcsIGNhbGxiYWNrOiAoXzogdGhpcywgLi4uYXJnczogYW55W10pID0+IHZvaWQpOiBudW1iZXIge1xuICAgICAgICBjb25zdCBpZCA9IHN1cGVyLmNvbm5lY3Qoc2lnbmFsLCBjYWxsYmFjaylcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uSWRzLmFkZChpZClcbiAgICAgICAgcmV0dXJuIGlkXG4gICAgfVxuXG4gICAgZGlzY29ubmVjdChpZDogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIHN1cGVyLmRpc2Nvbm5lY3QoaWQpXG4gICAgICAgIHRoaXMuY29ubmVjdGlvbklkcy5kZWxldGUoaWQpXG4gICAgfVxuXG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5lbWl0KFwiZGVzdHJveVwiKVxuICAgICAgICBmb3IgKGNvbnN0IGlkIG9mIHRoaXMuY29ubmVjdGlvbklkcy52YWx1ZXMoKSkge1xuICAgICAgICAgICAgc3VwZXIuZGlzY29ubmVjdChpZClcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsICJpbXBvcnQgdHlwZSBHT2JqZWN0IGZyb20gXCJnaTovL0dPYmplY3RcIlxuXG50eXBlIFR5cGUgPSB7IG5ldyAoLi4uYXJnczogYW55W10pOiBHT2JqZWN0Lk9iamVjdCB9XG5cbi8vIEB0cy1leHBlY3QtZXJyb3IgbWlzc2luZyB0eXBlc1xuY29uc3QgbW9kID0gaW1wb3J0KFwicmVzb3VyY2U6Ly8vb3JnL2dub21lL3NoZWxsL21pc2Mvc2lnbmFsVHJhY2tlci5qc1wiKVxuXG5leHBvcnQgY29uc3QgcmVnaXN0ZXJEZXN0cm95YWJsZVR5cGU6ICh0eXBlOiBUeXBlKSA9PiB2b2lkID0gYXdhaXQgbW9kXG4gICAgLnRoZW4oKG1vZCkgPT4gbW9kLnJlZ2lzdGVyRGVzdHJveWFibGVUeXBlKVxuICAgIC5jYXRjaCgoKSA9PiAoKSA9PiB2b2lkIDApXG4iLCAiaW1wb3J0IHsgRnJhZ21lbnQgfSBmcm9tIFwiLi9GcmFnbWVudC5qc1wiXG5pbXBvcnQgeyBBY2Nlc3NvciwgU3RhdGUsIGNyZWF0ZVN0YXRlIH0gZnJvbSBcIi4vc3RhdGUuanNcIlxuaW1wb3J0IHsgZW52IH0gZnJvbSBcIi4vZW52LmpzXCJcbmltcG9ydCB7IGdldFNjb3BlLCBvbkNsZWFudXAsIFNjb3BlIH0gZnJvbSBcIi4vc2NvcGUuanNcIlxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG5pbXBvcnQgdHlwZSBDbHV0dGVyIGZyb20gXCJnaTovL0NsdXR0ZXJcIlxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuaW1wb3J0IHR5cGUgR3RrIGZyb20gXCJnaTovL0d0az92ZXJzaW9uPTMuMFwiXG5cbmludGVyZmFjZSBGb3JQcm9wczxJdGVtLCBFbCBleHRlbmRzIEpTWC5FbGVtZW50LCBLZXk+IHtcbiAgICBlYWNoOiBBY2Nlc3NvcjxJdGVyYWJsZTxJdGVtPj5cbiAgICBjaGlsZHJlbjogKGl0ZW06IEl0ZW0sIGluZGV4OiBBY2Nlc3NvcjxudW1iZXI+KSA9PiBFbFxuXG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gdG8gcnVuIGZvciBlYWNoIHJlbW92ZWQgZWxlbWVudC5cbiAgICAgKiBUaGUgZGVmYXVsdCB2YWx1ZSBkZXBlbmRzIG9uIHRoZSBlbnZpcm9ubWVudDpcbiAgICAgKlxuICAgICAqIC0gKipHdGs0Kio6IG51bGxcbiAgICAgKiAtICoqR3RrMyoqOiB7QGxpbmsgR3RrLldpZGdldC5wcm90b3R5cGUuZGVzdHJveX1cbiAgICAgKiAtICoqR25vbWUqKjoge0BsaW5rIENsdXR0ZXIuQWN0b3IucHJvdG90eXBlLmRlc3Ryb3l9XG4gICAgICovXG4gICAgY2xlYW51cD86IG51bGwgfCAoKGVsZW1lbnQ6IEVsLCBpdGVtOiBJdGVtLCBpbmRleDogbnVtYmVyKSA9PiB2b2lkKVxuXG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gdGhhdCBnZW5lcmF0ZXMgdGhlIGtleSBmb3IgZWFjaCBpdGVtLlxuICAgICAqXG4gICAgICogQnkgZGVmYXVsdCBpdGVtcyBhcmUgbWFwcGVkIGJ5OlxuICAgICAqIC0gdmFsdWUgaW4gY2FzZSBvZiBwcmltaXRpdmUgdmFsdWVzXG4gICAgICogLSByZWZlcmVuY2Ugb3RoZXJ3aXNlXG4gICAgICovXG4gICAgaWQ/OiAoaXRlbTogSXRlbSkgPT4gS2V5IHwgSXRlbVxufVxuXG4vLyBUT0RPOiBzdXBwb3J0IEdpby5MaXN0TW9kZWxcblxuZXhwb3J0IGZ1bmN0aW9uIEZvcjxJdGVtLCBFbCBleHRlbmRzIEpTWC5FbGVtZW50LCBLZXk+KHtcbiAgICBlYWNoLFxuICAgIGNoaWxkcmVuOiBta0NoaWxkLFxuICAgIGNsZWFudXAsXG4gICAgaWQgPSAoaXRlbTogSXRlbSkgPT4gaXRlbSxcbn06IEZvclByb3BzPEl0ZW0sIEVsLCBLZXk+KTogRnJhZ21lbnQ8RWw+IHtcbiAgICB0eXBlIE1hcEl0ZW0gPSB7IGl0ZW06IEl0ZW07IGNoaWxkOiBFbDsgaW5kZXg6IFN0YXRlPG51bWJlcj47IHNjb3BlOiBTY29wZSB9XG5cbiAgICBjb25zdCBjdXJyZW50U2NvcGUgPSBnZXRTY29wZSgpXG4gICAgY29uc3QgbWFwID0gbmV3IE1hcDxJdGVtIHwgS2V5LCBNYXBJdGVtPigpXG4gICAgY29uc3QgZnJhZ21lbnQgPSBuZXcgRnJhZ21lbnQ8RWw+KClcblxuICAgIGZ1bmN0aW9uIHJlbW92ZSh7IGl0ZW0sIGNoaWxkLCBpbmRleDogW2luZGV4XSwgc2NvcGUgfTogTWFwSXRlbSkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFudXAgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgY2xlYW51cChjaGlsZCwgaXRlbSwgaW5kZXguZ2V0KCkpXG4gICAgICAgIH0gZWxzZSBpZiAoY2xlYW51cCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgZW52LmRlZmF1bHRDbGVhbnVwKGNoaWxkKVxuICAgICAgICB9XG4gICAgICAgIHNjb3BlLmRpc3Bvc2UoKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhbGxiYWNrKGl0YXJlYWJsZTogSXRlcmFibGU8SXRlbT4pIHtcbiAgICAgICAgY29uc3QgaXRlbXMgPSBbLi4uaXRhcmVhYmxlXVxuICAgICAgICBjb25zdCBpZHMgPSBpdGVtcy5tYXAoaWQpXG4gICAgICAgIGNvbnN0IGlkU2V0ID0gbmV3IFNldChpZHMpXG5cbiAgICAgICAgLy8gY2xlYW51cCBjaGlsZHJlbiBtaXNzaW5nIGZyb20gYXJyXG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIG1hcC5lbnRyaWVzKCkpIHtcbiAgICAgICAgICAgIC8vIHRoZXJlIGlzIG5vIGdlbmVyaWMgd2F5IHRvIGluc2VydCBjaGlsZCBhdCBpbmRleFxuICAgICAgICAgICAgLy8gc28gd2Ugc29ydCBieSByZW1vdmluZyBldmVyeSBjaGlsZCBhbmQgcmVhcHBlbmRpbmcgaW4gb3JkZXJcbiAgICAgICAgICAgIGZyYWdtZW50LnJlbW92ZUNoaWxkKHZhbHVlLmNoaWxkKVxuXG4gICAgICAgICAgICBpZiAoIWlkU2V0LmhhcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlKHZhbHVlKVxuICAgICAgICAgICAgICAgIG1hcC5kZWxldGUoa2V5KVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gdXBkYXRlIGluZGV4IGFuZCBhZGQgbmV3IGl0ZW1zXG4gICAgICAgIGl0ZW1zLm1hcCgoaXRlbSwgaSkgPT4ge1xuICAgICAgICAgICAgY29uc3Qga2V5ID0gaWRzW2ldXG4gICAgICAgICAgICBpZiAobWFwLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgICAgICAgICBpbmRleDogWywgc2V0SW5kZXhdLFxuICAgICAgICAgICAgICAgICAgICBjaGlsZCxcbiAgICAgICAgICAgICAgICB9ID0gbWFwLmdldChrZXkpIVxuICAgICAgICAgICAgICAgIHNldEluZGV4KGkpXG4gICAgICAgICAgICAgICAgaWYgKGZyYWdtZW50Lmhhc0NoaWxkKGNoaWxkKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYGR1cGxpY2F0ZSBrZXlzIGZvdW5kOiAke2tleX1gKVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGZyYWdtZW50LmFkZENoaWxkKGNoaWxkKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgW2luZGV4LCBzZXRJbmRleF0gPSBjcmVhdGVTdGF0ZShpKVxuICAgICAgICAgICAgICAgIGNvbnN0IHNjb3BlID0gbmV3IFNjb3BlKGN1cnJlbnRTY29wZSlcbiAgICAgICAgICAgICAgICBjb25zdCBjaGlsZCA9IHNjb3BlLnJ1bigoKSA9PiBta0NoaWxkKGl0ZW0sIGluZGV4KSlcbiAgICAgICAgICAgICAgICBtYXAuc2V0KGtleSwgeyBpdGVtLCBjaGlsZCwgaW5kZXg6IFtpbmRleCwgc2V0SW5kZXhdLCBzY29wZSB9KVxuICAgICAgICAgICAgICAgIGZyYWdtZW50LmFkZENoaWxkKGNoaWxkKVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIGNvbnN0IGRpc3Bvc2UgPSBlYWNoLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgIGNhbGxiYWNrKGVhY2guZ2V0KCkpXG4gICAgfSlcbiAgICBjYWxsYmFjayhlYWNoLmdldCgpKVxuXG4gICAgb25DbGVhbnVwKCgpID0+IHtcbiAgICAgICAgZGlzcG9zZSgpXG5cbiAgICAgICAgZm9yIChjb25zdCB2YWx1ZSBvZiBtYXAudmFsdWVzKCkpIHtcbiAgICAgICAgICAgIHJlbW92ZSh2YWx1ZSlcbiAgICAgICAgfVxuXG4gICAgICAgIG1hcC5jbGVhcigpXG4gICAgfSlcblxuICAgIHJldHVybiBmcmFnbWVudFxufVxuIiwgImltcG9ydCBBc3RhbCBmcm9tIFwiZ2k6Ly9Bc3RhbD92ZXJzaW9uPTQuMFwiXG5pbXBvcnQgR3RrIGZyb20gXCJnaTovL0d0az92ZXJzaW9uPTQuMFwiXG5pbXBvcnQgR2RrIGZyb20gXCJnaTovL0dkaz92ZXJzaW9uPTQuMFwiXG5leHBvcnQgeyBBc3RhbCwgR3RrLCBHZGsgfVxuIiwgImltcG9ydCBBc3RhbElPIGZyb20gXCJnaTovL0FzdGFsSU9cIlxuaW1wb3J0IHsgQWNjZXNzb3IgfSBmcm9tIFwiLi4vZ25pbS9zcmMvanN4L2luZGV4LmpzXCJcblxudHlwZSBBcmdzID0ge1xuICAgIGNtZDogc3RyaW5nIHwgc3RyaW5nW11cbiAgICBvdXQ/OiAoc3Rkb3V0OiBzdHJpbmcpID0+IHZvaWRcbiAgICBlcnI/OiAoc3RkZXJyOiBzdHJpbmcpID0+IHZvaWRcbn1cblxuZXhwb3J0IHR5cGUgUHJvY2VzcyA9IEFzdGFsSU8uUHJvY2Vzc1xuZXhwb3J0IGNvbnN0IFByb2Nlc3MgPSBBc3RhbElPLlByb2Nlc3NcblxuZXhwb3J0IGZ1bmN0aW9uIHN1YnByb2Nlc3MoYXJnczogQXJncyk6IEFzdGFsSU8uUHJvY2Vzc1xuXG5leHBvcnQgZnVuY3Rpb24gc3VicHJvY2VzcyhcbiAgICBjbWQ6IHN0cmluZyB8IHN0cmluZ1tdLFxuICAgIG9uT3V0PzogKHN0ZG91dDogc3RyaW5nKSA9PiB2b2lkLFxuICAgIG9uRXJyPzogKHN0ZGVycjogc3RyaW5nKSA9PiB2b2lkLFxuKTogQXN0YWxJTy5Qcm9jZXNzXG5cbmV4cG9ydCBmdW5jdGlvbiBzdWJwcm9jZXNzKFxuICAgIGFyZ3NPckNtZDogQXJncyB8IHN0cmluZyB8IHN0cmluZ1tdLFxuICAgIG9uT3V0OiAoc3Rkb3V0OiBzdHJpbmcpID0+IHZvaWQgPSBwcmludCxcbiAgICBvbkVycjogKHN0ZGVycjogc3RyaW5nKSA9PiB2b2lkID0gcHJpbnRlcnIsXG4pIHtcbiAgICBjb25zdCBhcmdzID0gQXJyYXkuaXNBcnJheShhcmdzT3JDbWQpIHx8IHR5cGVvZiBhcmdzT3JDbWQgPT09IFwic3RyaW5nXCJcbiAgICBjb25zdCB7IGNtZCwgZXJyLCBvdXQgfSA9IHtcbiAgICAgICAgY21kOiBhcmdzID8gYXJnc09yQ21kIDogYXJnc09yQ21kLmNtZCxcbiAgICAgICAgZXJyOiBhcmdzID8gb25FcnIgOiBhcmdzT3JDbWQuZXJyIHx8IG9uRXJyLFxuICAgICAgICBvdXQ6IGFyZ3MgPyBvbk91dCA6IGFyZ3NPckNtZC5vdXQgfHwgb25PdXQsXG4gICAgfVxuXG4gICAgY29uc3QgcHJvYyA9IEFycmF5LmlzQXJyYXkoY21kKVxuICAgICAgICA/IEFzdGFsSU8uUHJvY2Vzcy5zdWJwcm9jZXNzdihjbWQpXG4gICAgICAgIDogQXN0YWxJTy5Qcm9jZXNzLnN1YnByb2Nlc3MoY21kKVxuXG4gICAgcHJvYy5jb25uZWN0KFwic3Rkb3V0XCIsIChfLCBzdGRvdXQ6IHN0cmluZykgPT4gb3V0KHN0ZG91dCkpXG4gICAgcHJvYy5jb25uZWN0KFwic3RkZXJyXCIsIChfLCBzdGRlcnI6IHN0cmluZykgPT4gZXJyKHN0ZGVycikpXG4gICAgcmV0dXJuIHByb2Ncbn1cblxuLyoqIEB0aHJvd3Mge0dMaWIuRXJyb3J9IFRocm93cyBzdGRlcnIgKi9cbmV4cG9ydCBmdW5jdGlvbiBleGVjKGNtZDogc3RyaW5nIHwgc3RyaW5nW10pIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShjbWQpID8gQXN0YWxJTy5Qcm9jZXNzLmV4ZWN2KGNtZCkgOiBBc3RhbElPLlByb2Nlc3MuZXhlYyhjbWQpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleGVjQXN5bmMoY21kOiBzdHJpbmcgfCBzdHJpbmdbXSk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY21kKSkge1xuICAgICAgICAgICAgQXN0YWxJTy5Qcm9jZXNzLmV4ZWNfYXN5bmN2KGNtZCwgKF8sIHJlcykgPT4ge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoQXN0YWxJTy5Qcm9jZXNzLmV4ZWNfYXN5bmN2X2ZpbmlzaChyZXMpKVxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcilcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgQXN0YWxJTy5Qcm9jZXNzLmV4ZWNfYXN5bmMoY21kLCAoXywgcmVzKSA9PiB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShBc3RhbElPLlByb2Nlc3MuZXhlY19maW5pc2gocmVzKSlcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH0pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTdWJwcm9jZXNzKGluaXQ6IHN0cmluZywgZXhlYzogc3RyaW5nIHwgc3RyaW5nW10pOiBBY2Nlc3NvcjxzdHJpbmc+XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTdWJwcm9jZXNzPFQ+KFxuICAgIGluaXQ6IFQsXG4gICAgZXhlYzogc3RyaW5nIHwgc3RyaW5nW10sXG4gICAgdHJhbnNmb3JtOiAoc3Rkb3V0OiBzdHJpbmcsIHByZXY6IFQpID0+IFQsXG4pOiBBY2Nlc3NvcjxUPlxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3VicHJvY2VzczxUPihcbiAgICBpbml0OiBULFxuICAgIGV4ZWM6IHN0cmluZyB8IHN0cmluZ1tdLFxuICAgIHRyYW5zZm9ybT86IChzdGRvdXQ6IHN0cmluZywgcHJldjogVCkgPT4gVCxcbik6IEFjY2Vzc29yPFQ+IHtcbiAgICBsZXQgY3VycmVudFZhbHVlID0gaW5pdFxuICAgIGxldCBwcm9jOiBBc3RhbElPLlByb2Nlc3MgfCBudWxsID0gbnVsbFxuICAgIGNvbnN0IHN1YnNjcmliZXJzID0gbmV3IFNldDwoKSA9PiB2b2lkPigpXG5cbiAgICBmdW5jdGlvbiBzdWJzY3JpYmUoY2FsbGJhY2s6ICgpID0+IHZvaWQpOiAoKSA9PiB2b2lkIHtcbiAgICAgICAgaWYgKHN1YnNjcmliZXJzLnNpemUgPT09IDApIHtcbiAgICAgICAgICAgIHByb2MgPSBzdWJwcm9jZXNzKGV4ZWMsIChzdGRvdXQpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHRyYW5zZm9ybSA/IHRyYW5zZm9ybShzdGRvdXQsIGN1cnJlbnRWYWx1ZSkgOiAoc3Rkb3V0IGFzIFQpXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRWYWx1ZSAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFZhbHVlID0gdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlcnMuZm9yRWFjaCgoY2IpID0+IGNiKCkpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIHN1YnNjcmliZXJzLmFkZChjYWxsYmFjaylcblxuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgc3Vic2NyaWJlcnMuZGVsZXRlKGNhbGxiYWNrKVxuICAgICAgICAgICAgaWYgKHN1YnNjcmliZXJzLnNpemUgPT09IDApIHtcbiAgICAgICAgICAgICAgICBwcm9jPy5raWxsKClcbiAgICAgICAgICAgICAgICBwcm9jID0gbnVsbFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBBY2Nlc3NvcigoKSA9PiBjdXJyZW50VmFsdWUsIHN1YnNjcmliZSlcbn1cbiIsICJpbXBvcnQgQXN0YWxJTyBmcm9tIFwiZ2k6Ly9Bc3RhbElPXCJcbmltcG9ydCB7IEFjY2Vzc29yIH0gZnJvbSBcIi4uL2duaW0vc3JjL2pzeC9pbmRleC5qc1wiXG5pbXBvcnQgeyBleGVjQXN5bmMgfSBmcm9tIFwiLi9wcm9jZXNzLmpzXCJcblxuZXhwb3J0IHR5cGUgVGltZSA9IEFzdGFsSU8uVGltZVxuZXhwb3J0IGNvbnN0IFRpbWUgPSBBc3RhbElPLlRpbWVcblxuZXhwb3J0IGZ1bmN0aW9uIGludGVydmFsKGludGVydmFsOiBudW1iZXIsIGNhbGxiYWNrPzogKCkgPT4gdm9pZCkge1xuICAgIHJldHVybiBBc3RhbElPLlRpbWUuaW50ZXJ2YWwoaW50ZXJ2YWwsICgpID0+IHZvaWQgY2FsbGJhY2s/LigpKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdGltZW91dCh0aW1lb3V0OiBudW1iZXIsIGNhbGxiYWNrPzogKCkgPT4gdm9pZCkge1xuICAgIHJldHVybiBBc3RhbElPLlRpbWUudGltZW91dCh0aW1lb3V0LCAoKSA9PiB2b2lkIGNhbGxiYWNrPy4oKSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlkbGUoY2FsbGJhY2s/OiAoKSA9PiB2b2lkKSB7XG4gICAgcmV0dXJuIEFzdGFsSU8uVGltZS5pZGxlKCgpID0+IHZvaWQgY2FsbGJhY2s/LigpKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUG9sbChcbiAgICBpbml0OiBzdHJpbmcsXG4gICAgaW50ZXJ2YWw6IG51bWJlcixcbiAgICBleGVjOiBzdHJpbmcgfCBzdHJpbmdbXSxcbik6IEFjY2Vzc29yPHN0cmluZz5cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVBvbGw8VD4oXG4gICAgaW5pdDogVCxcbiAgICBpbnRlcnZhbDogbnVtYmVyLFxuICAgIGV4ZWM6IHN0cmluZyB8IHN0cmluZ1tdLFxuICAgIHRyYW5zZm9ybTogKHN0ZG91dDogc3RyaW5nLCBwcmV2OiBUKSA9PiBULFxuKTogQWNjZXNzb3I8VD5cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVBvbGw8VD4oXG4gICAgaW5pdDogVCxcbiAgICBpbnRlcnZhbDogbnVtYmVyLFxuICAgIGZuOiAocHJldjogVCkgPT4gVCB8IFByb21pc2U8VD4sXG4pOiBBY2Nlc3NvcjxUPlxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUG9sbDxUPihcbiAgICBpbml0OiBULFxuICAgIGl2YWw6IG51bWJlcixcbiAgICBleGVjT3JGbjogc3RyaW5nIHwgc3RyaW5nW10gfCAoKHByZXY6IFQpID0+IFQgfCBQcm9taXNlPFQ+KSxcbiAgICB0cmFuc2Zvcm0/OiAoc3Rkb3V0OiBzdHJpbmcsIHByZXY6IFQpID0+IFQsXG4pOiBBY2Nlc3NvcjxUPiB7XG4gICAgbGV0IGN1cnJlbnRWYWx1ZSA9IGluaXRcbiAgICBsZXQgdGltZXI6IEFzdGFsSU8uVGltZSB8IG51bGwgPSBudWxsXG4gICAgY29uc3Qgc3Vic2NyaWJlcnMgPSBuZXcgU2V0PCgpID0+IHZvaWQ+KClcblxuICAgIGZ1bmN0aW9uIHN1YnNjcmliZShjYWxsYmFjazogKCkgPT4gdm9pZCk6ICgpID0+IHZvaWQge1xuICAgICAgICBmdW5jdGlvbiBzZXQodmFsdWU6IFQpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gY3VycmVudFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFZhbHVlID0gdmFsdWVcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVycy5mb3JFYWNoKChjYikgPT4gY2IoKSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdWJzY3JpYmVycy5zaXplID09PSAwKSB7XG4gICAgICAgICAgICB0aW1lciA9IGludGVydmFsKGl2YWwsICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGV4ZWNPckZuID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBleGVjT3JGbihjdXJyZW50VmFsdWUpXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLnRoZW4oc2V0KVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0KHZhbHVlKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZXhlY0FzeW5jKGV4ZWNPckZuKS50aGVuKChzdGRvdXQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldCh0cmFuc2Zvcm0gPyB0cmFuc2Zvcm0oc3Rkb3V0LCBjdXJyZW50VmFsdWUpIDogKHN0ZG91dCBhcyBUKSlcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG5cbiAgICAgICAgc3Vic2NyaWJlcnMuYWRkKGNhbGxiYWNrKVxuXG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICBzdWJzY3JpYmVycy5kZWxldGUoY2FsbGJhY2spXG4gICAgICAgICAgICBpZiAoc3Vic2NyaWJlcnMuc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHRpbWVyPy5jYW5jZWwoKVxuICAgICAgICAgICAgICAgIHRpbWVyID0gbnVsbFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBBY2Nlc3NvcigoKSA9PiBjdXJyZW50VmFsdWUsIHN1YnNjcmliZSlcbn1cbiIsICJpbXBvcnQgYXBwIGZyb20gXCJhZ3MvZ3RrNC9hcHBcIjtcbmltcG9ydCB7IGNyZWF0ZVN0YXRlLCBBY2Nlc3NvciwgU2V0dGVyIH0gZnJvbSBcImFnc1wiO1xuaW1wb3J0IHsgQXN0YWwsIEd0aywgR2RrIH0gZnJvbSBcImFncy9ndGs0XCI7XG5pbXBvcnQgeyBleGVjLCBleGVjQXN5bmMgfSBmcm9tIFwiYWdzL3Byb2Nlc3NcIjtcbmltcG9ydCB7IGNyZWF0ZVBvbGwsIHRpbWVvdXQgfSBmcm9tIFwiYWdzL3RpbWVcIjtcbmltcG9ydCBHTGliIGZyb20gXCJnaTovL0dMaWJcIjtcbmltcG9ydCBNZWRpYVBsYXllciBmcm9tIFwiLi9NZWRpYVBsYXllclwiO1xuaW1wb3J0IHsgdXNlSXNBbnlQbGF5ZXJQbGF5aW5nIH0gZnJvbSBcIi4uL2hvb2tzL3VzZUlzQW55UGxheWVyUGxheWluZ1wiO1xuaW1wb3J0IHsgc3RhcnRNcHZJbWFnZUxpc3RlbmVyIH0gZnJvbSBcIi4uL3V0aWxzL2dldC1tcHZwYXBlci1pbWFnZVwiO1xuaW1wb3J0IENpcmN1bGFySW1hZ2UgZnJvbSBcIi4vQ2lyY3VsYXJJbWFnZVwiO1xuaW1wb3J0IHsgY2hhbmdlTXB2UGFwZXJJbWFnZSB9IGZyb20gXCIuLi91dGlscy9jaGFuZ2UtbXB2cGFwZXItaW1hZ2VcIjtcbmltcG9ydCB7IHNwYWNpbmcgfSBmcm9tIFwiLi4vY29uc3RhbnRzL3RoZW1lL3NwYWNpbmdcIjtcbmltcG9ydCB7IHVzZUNwdVVzYWdlIH0gZnJvbSBcIi4uL2hvb2tzL3VzZUNwdVVzYWdlXCI7XG5pbXBvcnQgeyB1c2VNZW1vcnlSYW1Vc2FnZSB9IGZyb20gXCIuLi9ob29rcy91c2VNZW1vcnlSYW1Vc2FnZVwiO1xuaW1wb3J0IHsgdXNlRm9ybWF0dGVkVGltZSB9IGZyb20gXCIuLi9ob29rcy91c2VGb3JtYXR0ZWRUaW1lXCI7XG5pbXBvcnQgV29ya3NwYWNlcyBmcm9tIFwiLi9Xb3Jrc3BhY2VzXCI7XG5pbXBvcnQgVHJheSBmcm9tIFwiLi9UcmF5XCI7XG5pbXBvcnQgeyB3aW5kb3dOYW1lcyB9IGZyb20gXCIuLi9jb25zdGFudHMvd2luZG93c1wiO1xuaW1wb3J0IHsgZm9ybWF0S2V5Ym9hcmQsIGdldEtleWJvYXJkIH0gZnJvbSBcIi4uL3V0aWxzL2tleWJvYXJkXCI7XG5pbXBvcnQgeyBmaW5kQXZhaWxhYmxlVGVybWluYWwgfSBmcm9tIFwiLi4vdXRpbHMvYXBwc1wiO1xuaW1wb3J0IENvbnRyb2xQYW5lbCBmcm9tIFwiLi9Db250cm9sUGFuZWwvQ29udHJvbFBhbmVsXCI7XG5cbmNvbnN0IGRhc2hib2FyZEJveFNwYWNpbmcgPSBzcGFjaW5nLm5vcm1hbDtcblxuY29uc3QgZ2V0RGlzdHJvID0gKCkgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IFtvaywgY29udGVudF0gPSBHTGliLmZpbGVfZ2V0X2NvbnRlbnRzKFwiL2V0Yy9vcy1yZWxlYXNlXCIpO1xuICAgIGlmICghb2spIHJldHVybiBcIlVua25vd25cIjtcblxuICAgIGNvbnN0IHRleHQgPSBuZXcgVGV4dERlY29kZXIoKS5kZWNvZGUoY29udGVudCk7XG4gICAgY29uc3QgbWF0Y2ggPSB0ZXh0Lm1hdGNoKC9eUFJFVFRZX05BTUU9XCIoLispXCIkL20pO1xuICAgIHJldHVybiBtYXRjaCA/IG1hdGNoWzFdIDogXCJVbmtub3duXCI7XG4gIH0gY2F0Y2gge1xuICAgIHJldHVybiBcIlVua25vd25cIjtcbiAgfVxufTtcblxuY29uc3QgV2FsbHBhcGVySW1nID0gKCkgPT4ge1xuICBjb25zdCBbd2FsbHBhcGVySW1nLCBzZXRXYWxscGFwZXJJbWddID0gY3JlYXRlU3RhdGUoXCJcIik7XG5cbiAgc3RhcnRNcHZJbWFnZUxpc3RlbmVyKChmcmFtZSkgPT4ge1xuICAgIHNldFdhbGxwYXBlckltZyhmcmFtZSk7XG4gIH0pO1xuXG4gIHJldHVybiAoXG4gICAgPG92ZXJsYXk+XG4gICAgICA8Ym94XG4gICAgICAgIGNsYXNzPVwiV2FsbHBhcGVySW1nQnV0dG9uQ29udGFpbmVyXCJcbiAgICAgICAgJHR5cGU9XCJvdmVybGF5XCJcbiAgICAgICAgd2lkdGhSZXF1ZXN0PXsxMDJ9XG4gICAgICAgIGhlaWdodFJlcXVlc3Q9ezEwMH1cbiAgICAgID5cbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgIGNsYXNzPVwiY2lyY3VsYXIgZmxhdCBXYWxscGFwZXJJbWdCdXR0b25cIlxuICAgICAgICAgIGhleHBhbmRcbiAgICAgICAgICB2ZXhwYW5kXG4gICAgICAgICAgaWNvbk5hbWU9XCJ2aWV3LXJlZnJlc2hcIlxuICAgICAgICAgIG9uQ2xpY2tlZD17KCkgPT4ge1xuICAgICAgICAgICAgY2hhbmdlTXB2UGFwZXJJbWFnZShcIm5leHRcIik7XG4gICAgICAgICAgfX1cbiAgICAgICAgICAkPXsocykgPT4ge1xuICAgICAgICAgICAgY29uc3QgZ2VzdHVyZSA9IEd0ay5HZXN0dXJlQ2xpY2submV3KCk7XG5cbiAgICAgICAgICAgIGdlc3R1cmUuc2V0X2J1dHRvbigzKTtcblxuICAgICAgICAgICAgZ2VzdHVyZS5jb25uZWN0KFwicmVsZWFzZWRcIiwgKCkgPT4ge1xuICAgICAgICAgICAgICBjaGFuZ2VNcHZQYXBlckltYWdlKFwicHJldlwiKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBzLmFkZF9jb250cm9sbGVyKGdlc3R1cmUpO1xuICAgICAgICAgIH19XG4gICAgICAgIC8+XG4gICAgICA8L2JveD5cblxuICAgICAgPENpcmN1bGFySW1hZ2VcbiAgICAgICAgaW1nPXt3YWxscGFwZXJJbWd9XG4gICAgICAgIHNpemU9ezMwMH1cbiAgICAgICAgd2lkdGhSZXF1ZXN0PXsxMDB9XG4gICAgICAgIGhlaWdodFJlcXVlc3Q9ezEwMH1cbiAgICAgICAgaWNvbkZhbGxiYWNrPVwidXNlci1pZGVudGl0eVwiXG4gICAgICAvPlxuICAgIDwvb3ZlcmxheT5cbiAgKTtcbn07XG5cbmNvbnN0IFN5c3RlbVByb2dyZXNzQmFyU3RhdCA9ICh7XG4gIGljb25OYW1lLFxuICBmcmFjdGlvbixcbn06IHtcbiAgaWNvbk5hbWU6IHN0cmluZztcbiAgZnJhY3Rpb246IEFjY2Vzc29yPG51bWJlcj47XG59KSA9PiB7XG4gIHJldHVybiAoXG4gICAgPGJveCBvcmllbnRhdGlvbj17R3RrLk9yaWVudGF0aW9uLlZFUlRJQ0FMfSBzcGFjaW5nPXtzcGFjaW5nLm5vcm1hbH0+XG4gICAgICA8R3RrLlByb2dyZXNzQmFyXG4gICAgICAgIG9yaWVudGF0aW9uPXtHdGsuT3JpZW50YXRpb24uVkVSVElDQUx9XG4gICAgICAgIHZleHBhbmRcbiAgICAgICAgZnJhY3Rpb249e2ZyYWN0aW9ufVxuICAgICAgICBpbnZlcnRlZFxuICAgICAgLz5cbiAgICAgIDxpbWFnZSBpY29uTmFtZT17aWNvbk5hbWV9IC8+XG4gICAgPC9ib3g+XG4gICk7XG59O1xuXG5jb25zdCBEYXNoYm9hcmRUYWIgPSAoKSA9PiB7XG4gIGNvbnN0IHdtID1cbiAgICBHTGliLmdldGVudihcIlhER19TRVNTSU9OX0RFU0tUT1BcIikgPz9cbiAgICBHTGliLmdldGVudihcIlhER19DVVJSRU5UX0RFU0tUT1BcIikgPz9cbiAgICBcIlVua25vd25cIjtcblxuICBjb25zdCB0aW1lU3RyaW5nID0gdXNlRm9ybWF0dGVkVGltZShcInRpbWVcIik7XG5cbiAgY29uc3Qgc2VwYXJhdGVkVGltZSA9IHRpbWVTdHJpbmcoKHYpID0+IHtcbiAgICBjb25zdCBbaG91ciwgbWludXRlXSA9IHYuc3BsaXQoXCI6XCIpO1xuICAgIHJldHVybiB7IGhvdXI6IGhvdXIgfHwgXCJcIiwgbWludXRlOiBtaW51dGUgfHwgXCJcIiB9O1xuICB9KTtcblxuICBjb25zdCBkYXRlU3RyaW5nID0gY3JlYXRlUG9sbChcIlwiLCAxMDAwLCAoKSA9PiB7XG4gICAgY29uc3Qgbm93ID0gR0xpYi5EYXRlVGltZS5uZXdfbm93X2xvY2FsKCk7XG4gICAgY29uc3QgZGF5U3RyaW5nID0gbm93LmZvcm1hdChcIiVhLCAlZVwiKTtcblxuICAgIGlmICghZGF5U3RyaW5nKSByZXR1cm4gXCJcIjtcblxuICAgIC8vIENhcGl0YWxpemUgZmlyc3QgbGV0dGVyXG4gICAgY29uc3QgY2FwaXRhbGl6ZWQgPVxuICAgICAgZGF5U3RyaW5nPy5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGRheVN0cmluZz8uc2xpY2UoMSk7XG4gICAgcmV0dXJuIGNhcGl0YWxpemVkO1xuICB9KTtcblxuICBjb25zdCBkaXN0cm8gPSBnZXREaXN0cm8oKTtcbiAgY29uc3QgdXBUaW1lID0gY3JlYXRlUG9sbChcInRpbWVcIiwgNjAwMDAsIFwidXB0aW1lIC1wXCIpO1xuXG4gIGNvbnN0IGNwdVVzYWdlID0gdXNlQ3B1VXNhZ2UoKTtcbiAgY29uc3QgbWVtb3J5VXNhZ2UgPSB1c2VNZW1vcnlSYW1Vc2FnZSgpO1xuXG4gIHJldHVybiAoXG4gICAgPGJveFxuICAgICAgb3JpZW50YXRpb249e0d0ay5PcmllbnRhdGlvbi5IT1JJWk9OVEFMfVxuICAgICAgc3BhY2luZz17ZGFzaGJvYXJkQm94U3BhY2luZ31cbiAgICAgIGNsYXNzPVwiRGFzaGJvYXJkVGFiXCJcbiAgICA+XG4gICAgICA8Ym94XG4gICAgICAgIG9yaWVudGF0aW9uPXtHdGsuT3JpZW50YXRpb24uVkVSVElDQUx9XG4gICAgICAgIHNwYWNpbmc9e2Rhc2hib2FyZEJveFNwYWNpbmd9XG4gICAgICAgIGhleHBhbmRcbiAgICAgID5cbiAgICAgICAgPGJveCBzcGFjaW5nPXtzcGFjaW5nLm5vcm1hbH0gaGV4cGFuZCBjbGFzcz1cIkRhc2hib2FyZEJveCBleHRyYVBhZGRpbmdcIj5cbiAgICAgICAgICA8V2FsbHBhcGVySW1nIC8+XG5cbiAgICAgICAgICA8Ym94XG4gICAgICAgICAgICBvcmllbnRhdGlvbj17R3RrLk9yaWVudGF0aW9uLlZFUlRJQ0FMfVxuICAgICAgICAgICAgdmFsaWduPXtHdGsuQWxpZ24uQ0VOVEVSfVxuICAgICAgICAgICAgc3BhY2luZz17c3BhY2luZy5zbWFsbH1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8Ym94IHNwYWNpbmc9e3NwYWNpbmcubm9ybWFsfT5cbiAgICAgICAgICAgICAgPGltYWdlIGljb25OYW1lPVwiaHlwcmxhbmQtc3ltYm9saWNcIiBjbGFzcz1cIkh5cHJMYW5kSWNvblwiIC8+XG4gICAgICAgICAgICAgIDxsYWJlbCBsYWJlbD17d219IGNsYXNzPVwiRGFzaGJvYXJkVGFiU3lzSW5mb0xhYmVsXCIgLz5cbiAgICAgICAgICAgIDwvYm94PlxuICAgICAgICAgICAgPGJveCBzcGFjaW5nPXtzcGFjaW5nLm5vcm1hbH0+XG4gICAgICAgICAgICAgIDxpbWFnZSBpY29uTmFtZT1cImVuZGVhdm91cm9zLXN5bWJvbGljXCIgY2xhc3M9XCJFbmRlYXZvdXJPc0ljb25cIiAvPlxuICAgICAgICAgICAgICA8bGFiZWwgbGFiZWw9e2Rpc3Ryb30gY2xhc3M9XCJEYXNoYm9hcmRUYWJTeXNJbmZvTGFiZWxcIiAvPlxuICAgICAgICAgICAgPC9ib3g+XG5cbiAgICAgICAgICAgIDxib3ggc3BhY2luZz17c3BhY2luZy5ub3JtYWx9PlxuICAgICAgICAgICAgICA8aW1hZ2UgaWNvbk5hbWU9XCJjbG9jay1hbHQtc3ltYm9saWNcIiBjbGFzcz1cIlVwdGltZUljb25cIiAvPlxuICAgICAgICAgICAgICA8bGFiZWwgbGFiZWw9e3VwVGltZX0gY2xhc3M9XCJEYXNoYm9hcmRUYWJTeXNJbmZvTGFiZWxcIiAvPlxuICAgICAgICAgICAgPC9ib3g+XG4gICAgICAgICAgPC9ib3g+XG4gICAgICAgIDwvYm94PlxuXG4gICAgICAgIDxib3ggc3BhY2luZz17ZGFzaGJvYXJkQm94U3BhY2luZ30gaGV4cGFuZD5cbiAgICAgICAgICA8Ym94IGNsYXNzPVwiRGFzaGJvYXJkQm94IGV4dHJhUGFkZGluZ1wiIHZleHBhbmQgaGV4cGFuZD5cbiAgICAgICAgICAgIDxib3hcbiAgICAgICAgICAgICAgaGFsaWduPXtHdGsuQWxpZ24uQ0VOVEVSfVxuICAgICAgICAgICAgICB2YWxpZ249e0d0ay5BbGlnbi5DRU5URVJ9XG4gICAgICAgICAgICAgIG9yaWVudGF0aW9uPXtHdGsuT3JpZW50YXRpb24uVkVSVElDQUx9XG4gICAgICAgICAgICAgIGhleHBhbmRcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPGJveCBvcmllbnRhdGlvbj17R3RrLk9yaWVudGF0aW9uLlZFUlRJQ0FMfT5cbiAgICAgICAgICAgICAgICA8bGFiZWxcbiAgICAgICAgICAgICAgICAgIGxhYmVsPXtzZXBhcmF0ZWRUaW1lKChzKSA9PiBzLmhvdXIpfVxuICAgICAgICAgICAgICAgICAgY2xhc3M9XCJEYXNoYm9hcmRUYWJIb3VyQW5kTWludXRlXCJcbiAgICAgICAgICAgICAgICAvPlxuXG4gICAgICAgICAgICAgICAgPEd0ay5TZXBhcmF0b3IgLz5cblxuICAgICAgICAgICAgICAgIDxsYWJlbFxuICAgICAgICAgICAgICAgICAgbGFiZWw9e3NlcGFyYXRlZFRpbWUoKHMpID0+IHMubWludXRlKX1cbiAgICAgICAgICAgICAgICAgIGNsYXNzPVwiRGFzaGJvYXJkVGFiSG91ckFuZE1pbnV0ZVwiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9ib3g+XG5cbiAgICAgICAgICAgICAgPGxhYmVsIGxhYmVsPXtkYXRlU3RyaW5nfSBjbGFzcz1cIkRhc2hib2FyZFRhYkRhdGVcIiAvPlxuICAgICAgICAgICAgPC9ib3g+XG4gICAgICAgICAgPC9ib3g+XG4gICAgICAgICAgPGJveCBjbGFzcz1cIkRhc2hib2FyZEJveFwiPlxuICAgICAgICAgICAgPEd0ay5DYWxlbmRhciBzaG93X2hlYWRpbmc9e2ZhbHNlfSAvPlxuICAgICAgICAgIDwvYm94PlxuXG4gICAgICAgICAgPGJveCBjbGFzcz1cIkRhc2hib2FyZEJveFwiIHNwYWNpbmc9e3NwYWNpbmcubGFyZ2V9PlxuICAgICAgICAgICAgPFN5c3RlbVByb2dyZXNzQmFyU3RhdFxuICAgICAgICAgICAgICBpY29uTmFtZT1cInByb2Nlc3Nvci1zeW1ib2xpY1wiXG4gICAgICAgICAgICAgIGZyYWN0aW9uPXtjcHVVc2FnZSgoYykgPT4gYy5jcHVVc2FnZUluRnJhY3Rpb24pfVxuICAgICAgICAgICAgLz5cblxuICAgICAgICAgICAgPFN5c3RlbVByb2dyZXNzQmFyU3RhdFxuICAgICAgICAgICAgICBpY29uTmFtZT1cIm1lbW9yeS1zeW1ib2xpY1wiXG4gICAgICAgICAgICAgIGZyYWN0aW9uPXttZW1vcnlVc2FnZSgoYykgPT4gYy5tZW1vcnlVc2FnZUluRnJhY3Rpb24pfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L2JveD5cbiAgICAgICAgPC9ib3g+XG4gICAgICA8L2JveD5cblxuICAgICAgPGJveCBjbGFzcz1cIkRhc2hib2FyZEJveFwiIHdpZHRoUmVxdWVzdD17MzAwfT5cbiAgICAgICAgPGJveCB2YWxpZ249e0d0ay5BbGlnbi5DRU5URVJ9IGhleHBhbmQgdmV4cGFuZD5cbiAgICAgICAgICA8TWVkaWFQbGF5ZXIgdmFyaWFudD1cIm1pbmltYWxcIiAvPlxuICAgICAgICA8L2JveD5cbiAgICAgIDwvYm94PlxuICAgIDwvYm94PlxuICApO1xufTtcblxuY29uc3QgTWVkaWFUYWIgPSAoKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPGJveCBjbGFzcz1cIkRhc2hib2FyZFRhYlwiPlxuICAgICAgPE1lZGlhUGxheWVyIHZhcmlhbnQ9e1wiY29tcGxldGVcIn0gLz5cbiAgICA8L2JveD5cbiAgKTtcbn07XG5cbmNvbnN0IERhc2hib2FyZFBvcG92ZXIgPSAoKSA9PiB7XG4gIGxldCBzd2l0Y2hlcjogR3RrLlN0YWNrU3dpdGNoZXIgfCB1bmRlZmluZWQ7XG4gIGxldCBzdGFjazogR3RrLlN0YWNrIHwgdW5kZWZpbmVkO1xuXG4gIHJldHVybiAoXG4gICAgPHBvcG92ZXI+XG4gICAgICA8Ym94IG9yaWVudGF0aW9uPXtHdGsuT3JpZW50YXRpb24uVkVSVElDQUx9PlxuICAgICAgICA8R3RrLlN0YWNrU3dpdGNoZXJcbiAgICAgICAgICAkPXsocykgPT4ge1xuICAgICAgICAgICAgc3dpdGNoZXIgPSBzO1xuICAgICAgICAgIH19XG4gICAgICAgICAgc3RhY2s9e3N0YWNrfVxuICAgICAgICAvPlxuICAgICAgICA8R3RrLlN0YWNrXG4gICAgICAgICAgdHJhbnNpdGlvblR5cGU9e0d0ay5TdGFja1RyYW5zaXRpb25UeXBlLlNMSURFX0xFRlRfUklHSFR9XG4gICAgICAgICAgJD17KHMpID0+IHtcbiAgICAgICAgICAgIHN0YWNrID0gcztcbiAgICAgICAgICAgIGlmIChzd2l0Y2hlcikgc3dpdGNoZXIuc2V0X3N0YWNrKHMpO1xuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICA8R3RrLlN0YWNrUGFnZVxuICAgICAgICAgICAgbmFtZT1cImNoaWxkMVwiXG4gICAgICAgICAgICB0aXRsZT1cIkRhc2hib2FyZFwiXG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGl0IHdvcmtzIGFueXdheXNcbiAgICAgICAgICAgIGNoaWxkPXs8RGFzaGJvYXJkVGFiIC8+fVxuICAgICAgICAgIC8+XG4gICAgICAgICAgPEd0ay5TdGFja1BhZ2VcbiAgICAgICAgICAgIG5hbWU9XCJjaGlsZDJcIlxuICAgICAgICAgICAgdGl0bGU9XCJNZWRpYVwiXG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIGl0IHdvcmtzIGFueXdheXNcbiAgICAgICAgICAgIGNoaWxkPXs8TWVkaWFUYWIgLz59XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9HdGsuU3RhY2s+XG4gICAgICA8L2JveD5cbiAgICA8L3BvcG92ZXI+XG4gICk7XG59O1xuXG5jb25zdCBEYXNoYm9hcmRCdXR0b24gPSAoKSA9PiB7XG4gIGNvbnN0IGlzQW55UGxheWluZyA9IHVzZUlzQW55UGxheWVyUGxheWluZygpO1xuICByZXR1cm4gKFxuICAgIDxtZW51YnV0dG9uPlxuICAgICAgPGJveCBzcGFjaW5nPXtzcGFjaW5nLm5vcm1hbH0+XG4gICAgICAgIDxsYWJlbCBsYWJlbD1cIkRhc2hib2FyZFwiIC8+XG4gICAgICAgIDxpbWFnZVxuICAgICAgICAgIGljb25OYW1lPXtpc0FueVBsYXlpbmcoKHBsYXlpbmcpID0+XG4gICAgICAgICAgICBwbGF5aW5nID8gXCJhdWRpby1vblwiIDogXCJ1c2VyLWhvbWVcIixcbiAgICAgICAgICApfVxuICAgICAgICAvPlxuICAgICAgPC9ib3g+XG5cbiAgICAgIDxEYXNoYm9hcmRQb3BvdmVyIC8+XG4gICAgPC9tZW51YnV0dG9uPlxuICApO1xufTtcblxuY29uc3QgVGltZVJvdyA9ICgpID0+IHtcbiAgY29uc3QgdGltZVN0cmluZyA9IHVzZUZvcm1hdHRlZFRpbWUoXCJ0aW1lLXdpdGgtcG1cIik7XG5cbiAgcmV0dXJuIChcbiAgICA8bWVudWJ1dHRvbiBoYWxpZ249e0d0ay5BbGlnbi5DRU5URVJ9PlxuICAgICAgPGJveCBzcGFjaW5nPXtzcGFjaW5nLm5vcm1hbH0+XG4gICAgICAgIDxpbWFnZSBpY29uTmFtZT1cIm1vbnRoLXN5bWJvbGljXCIgLz5cbiAgICAgICAgPGxhYmVsIGxhYmVsPXt0aW1lU3RyaW5nfSAvPlxuICAgICAgPC9ib3g+XG4gICAgICA8cG9wb3Zlcj5cbiAgICAgICAgPEd0ay5DYWxlbmRhciAvPlxuICAgICAgPC9wb3BvdmVyPlxuICAgIDwvbWVudWJ1dHRvbj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEJhcih7XG4gIGdka21vbml0b3IsXG4gIGluZGV4LFxuICBrZXlib2FyZCxcbiAgc2V0S2V5Ym9hcmQsXG59OiB7XG4gIGdka21vbml0b3I6IEdkay5Nb25pdG9yO1xuICBpbmRleDogbnVtYmVyO1xuICBrZXlib2FyZDogQWNjZXNzb3I8c3RyaW5nPjtcbiAgc2V0S2V5Ym9hcmQ6IFNldHRlcjxzdHJpbmc+O1xufSkge1xuICBjb25zdCB7IFRPUCwgTEVGVCwgUklHSFQgfSA9IEFzdGFsLldpbmRvd0FuY2hvcjtcbiAgLy8gd2UgbmVlZCB0aGUgdGltZW91dCB0byBzZXQgdmlzaWJsZSBiZWNhdXNlIGRvaW5nIGl0IHRydWUgYnkgZGVmYXVsdCBjYXVzZXNcbiAgLy8gdGhlIHdpbmRvdyB0byBpZ25vcmUgdGhlIGxheWVyIEJPVFRPTVxuICBjb25zdCBbdmlzaWJsZSwgc2V0VmlzaWJsZV0gPSBjcmVhdGVTdGF0ZShmYWxzZSk7XG5cbiAgdGltZW91dCgwLCAoKSA9PiB7XG4gICAgc2V0VmlzaWJsZSh0cnVlKTtcbiAgfSk7XG5cbiAgcmV0dXJuIChcbiAgICA8d2luZG93XG4gICAgICB2aXNpYmxlPXt2aXNpYmxlfVxuICAgICAgbmFtZT17d2luZG93TmFtZXMuQmFyfVxuICAgICAgY2xhc3M9XCJCYXJcIlxuICAgICAgZ2RrbW9uaXRvcj17Z2RrbW9uaXRvcn1cbiAgICAgIGV4Y2x1c2l2aXR5PXtBc3RhbC5FeGNsdXNpdml0eS5FWENMVVNJVkV9XG4gICAgICBsYXllcj17QXN0YWwuTGF5ZXIuQk9UVE9NfVxuICAgICAgYW5jaG9yPXtUT1AgfCBMRUZUIHwgUklHSFR9XG4gICAgICBhcHBsaWNhdGlvbj17YXBwfVxuICAgID5cbiAgICAgIDxjZW50ZXJib3ggY3NzTmFtZT1cImNlbnRlcmJveFwiPlxuICAgICAgICA8Ym94ICR0eXBlPVwic3RhcnRcIj5cbiAgICAgICAgICA8V29ya3NwYWNlcyBnZGttb25pdG9yPXtnZGttb25pdG9yfSBpbmRleD17aW5kZXh9IC8+XG4gICAgICAgIDwvYm94PlxuXG4gICAgICAgIDxib3ggJHR5cGU9XCJjZW50ZXJcIj5cbiAgICAgICAgICA8RGFzaGJvYXJkQnV0dG9uIC8+XG4gICAgICAgIDwvYm94PlxuXG4gICAgICAgIDxib3ggJHR5cGU9XCJlbmRcIiBzcGFjaW5nPXtzcGFjaW5nLmxhcmdlfT5cbiAgICAgICAgICA8VHJheSAvPlxuXG4gICAgICAgICAgPGJveCBzcGFjaW5nPXtzcGFjaW5nLnNtYWxsfT5cbiAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgY2xhc3M9XCJmbGF0XCJcbiAgICAgICAgICAgICAgb25DbGlja2VkPXthc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgIGF3YWl0IGV4ZWNBc3luYyhcImh5cHJjdGwgc3dpdGNoeGtibGF5b3V0IGN1cnJlbnQgbmV4dFwiKTtcbiAgICAgICAgICAgICAgICAgIHNldEtleWJvYXJkKGdldEtleWJvYXJkKCkpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICBwcmludGVycihlcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICB0b29sdGlwVGV4dD1cIkNhbWJpYXIgVGVjbGFkb1wiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxsYWJlbCBsYWJlbD17a2V5Ym9hcmQoKHYpID0+IGZvcm1hdEtleWJvYXJkKHYpKX0gLz5cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuXG4gICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgIGljb25OYW1lPVwiaW1hZ2Utcm91bmQtc3ltYm9saWNcIlxuICAgICAgICAgICAgICBjbGFzcz1cImZsYXRcIlxuICAgICAgICAgICAgICBvbkNsaWNrZWQ9eygpID0+IHtcbiAgICAgICAgICAgICAgICBjaGFuZ2VNcHZQYXBlckltYWdlKFwibmV4dFwiKTtcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgJD17KHMpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBnZXN0dXJlID0gR3RrLkdlc3R1cmVDbGljay5uZXcoKTtcblxuICAgICAgICAgICAgICAgIGdlc3R1cmUuc2V0X2J1dHRvbigzKTtcblxuICAgICAgICAgICAgICAgIGdlc3R1cmUuY29ubmVjdChcInJlbGVhc2VkXCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgIGNoYW5nZU1wdlBhcGVySW1hZ2UoXCJwcmV2XCIpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcy5hZGRfY29udHJvbGxlcihnZXN0dXJlKTtcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgdG9vbHRpcFRleHQ9XCJDYW1iaWFyIGZvbmRvIGRlIHBhbnRhbGxhXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgIGljb25OYW1lPVwiY29sb3ItcGlja2VyLXN5bWJvbGljXCJcbiAgICAgICAgICAgICAgY2xhc3M9XCJmbGF0XCJcbiAgICAgICAgICAgICAgb25DbGlja2VkPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgZXhlY0FzeW5jKFxuICAgICAgICAgICAgICAgICAgXCJoeXBycGlja2VyIC1hXCIsIC8vIC1hIHBhcmEgY29waWFyIGFsIHBvcnRhcGFwZWxlcyBhdXRvbVx1MDBFMXRpY2FtZW50ZVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgIHRvb2x0aXBUZXh0PVwiSGF6IGNsaWMgcGFyYSBlbGVnaXIgdW4gY29sb3JcIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgaWNvbk5hbWU9XCJjbGlwYm9hcmQtc3ltYm9saWNcIlxuICAgICAgICAgICAgICBjbGFzcz1cImZsYXRcIlxuICAgICAgICAgICAgICBvbkNsaWNrZWQ9eygpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB0ZXJtaW5hbCA9IGZpbmRBdmFpbGFibGVUZXJtaW5hbCgpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCF0ZXJtaW5hbCkge1xuICAgICAgICAgICAgICAgICAgcHJpbnRlcnIoXCJOTyB0ZXJtaW5hbFwiKTtcbiAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBleGVjKFt0ZXJtaW5hbCwgXCItLWNsYXNzXCIsIFwiY2xpcHNlXCIsIFwiLWVcIiwgXCJjbGlwc2VcIl0pO1xuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICB0b29sdGlwVGV4dD1cIkNsaXBib2FyZFwiXG4gICAgICAgICAgICAvPlxuXG4gICAgICAgICAgICB7LyogPE5vdGlmaWNhdGlvbnNQb3BvdmVyIC8+ICovfVxuICAgICAgICAgIDwvYm94PlxuXG4gICAgICAgICAgPFRpbWVSb3cgLz5cblxuICAgICAgICAgIDxDb250cm9sUGFuZWwgLz5cblxuICAgICAgICAgIDxtZW51YnV0dG9uXG4gICAgICAgICAgICBpY29uTmFtZT1cInN5c3RlbS1zaHV0ZG93blwiXG4gICAgICAgICAgICBjbGFzcz1cImRlc3RydWN0aXZlLWFjdGlvbiBjaXJjdWxhclwiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgPHBvcG92ZXI+XG4gICAgICAgICAgICAgIDxib3hcbiAgICAgICAgICAgICAgICBvcmllbnRhdGlvbj17R3RrLk9yaWVudGF0aW9uLlZFUlRJQ0FMfVxuICAgICAgICAgICAgICAgIHNwYWNpbmc9e3NwYWNpbmcuc21hbGx9XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgICBvbkNsaWNrZWQ9eygpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZXhlY0FzeW5jKFwibG9naW5jdGwgbG9jay1zZXNzaW9uXCIpO1xuICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICA8Ym94PlxuICAgICAgICAgICAgICAgICAgICA8aW1hZ2UgaWNvbk5hbWU9XCJzeXN0ZW0tbG9jay1zY3JlZW5cIiAvPlxuICAgICAgICAgICAgICAgICAgICA8bGFiZWwgbGFiZWw9XCJMb2NrXCIgLz5cbiAgICAgICAgICAgICAgICAgIDwvYm94PlxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuXG4gICAgICAgICAgICAgICAgPGJ1dHRvbj5cbiAgICAgICAgICAgICAgICAgIDxsYWJlbCBsYWJlbD1cIlx1MjNGQiBQb3dlciBPZmZcIiAvPlxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuXG4gICAgICAgICAgICAgICAgPGJ1dHRvbj5cbiAgICAgICAgICAgICAgICAgIDxsYWJlbCBsYWJlbD1cIlx1RDgzRFx1REQwNCBSZXN0YXJ0XCIgLz5cbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgPC9ib3g+XG4gICAgICAgICAgICA8L3BvcG92ZXI+XG4gICAgICAgICAgPC9tZW51YnV0dG9uPlxuICAgICAgICA8L2JveD5cbiAgICAgIDwvY2VudGVyYm94PlxuICAgIDwvd2luZG93PlxuICApO1xufVxuIiwgImltcG9ydCB7IGNyZWF0ZVN0YXRlLCBjcmVhdGVDb21wdXRlZCwgb25DbGVhbnVwLCBBY2Nlc3NvciwgU2V0dGVyIH0gZnJvbSBcImFnc1wiO1xuaW1wb3J0IHsgR2RrLCBHdGsgfSBmcm9tIFwiYWdzL2d0azRcIjtcbmltcG9ydCBNcHJpcyBmcm9tIFwiZ2k6Ly9Bc3RhbE1wcmlzXCI7XG5pbXBvcnQgQ2F2YSBmcm9tIFwiZ2k6Ly9Bc3RhbENhdmFcIjtcbmltcG9ydCBIeXBybGFuZCBmcm9tIFwiZ2k6Ly9Bc3RhbEh5cHJsYW5kXCI7XG5pbXBvcnQgQ2Fpcm8gZnJvbSBcImNhaXJvXCI7XG5pbXBvcnQgeyBmb3JtYXRTZWNvbmRzIH0gZnJvbSBcIi4uL3V0aWxzL3RpbWVcIjtcbmltcG9ydCBQYW5nbyBmcm9tIFwiZ2k6Ly9QYW5nb1wiO1xuaW1wb3J0IHsgdXNlUGxheWVySW5mbyB9IGZyb20gXCIuLi9ob29rcy91c2VQbGF5ZXJJbmZvXCI7XG5pbXBvcnQgeyBQbGF5ZXJMaXN0SXRlbU9iamVjdCB9IGZyb20gXCIuLi9vYmplY3RzL1BsYXllckxpc3RJdGVtT2JqZWN0XCI7XG5pbXBvcnQgQ2lyY3VsYXJJbWFnZSBmcm9tIFwiLi9DaXJjdWxhckltYWdlXCI7XG5pbXBvcnQgeyBzcGFjaW5nIH0gZnJvbSBcIi4uL2NvbnN0YW50cy90aGVtZS9zcGFjaW5nXCI7XG5pbXBvcnQgeyBnZXRJc0ljb24gfSBmcm9tIFwiLi4vdXRpbHMvaWNvbnNcIjtcblxuLy8gVE9ETzogQWRkIHNvbWUgd2F5IHRvIHVwZGF0ZSB0aGUgdm9sdW1lIGJ5IHNjcm9sbGluZ1xuXG5jb25zdCBnZXRJc1ZhbGlkS2V5Rm9yU2NhbGUgPSAoa2V5dmFsOiBudW1iZXIpOiBib29sZWFuID0+IHtcbiAgcmV0dXJuIFtcbiAgICBHZGsuS0VZX1JpZ2h0LFxuICAgIEdkay5LRVlfTGVmdCxcbiAgICBHZGsuS0VZX1BhZ2VfRG93bixcbiAgICBHZGsuS0VZX1BhZ2VfVXAsXG4gICAgR2RrLktFWV9Ib21lLFxuICAgIEdkay5LRVlfRW5kLFxuICBdLmluY2x1ZGVzKGtleXZhbCk7XG59O1xuXG5jbGFzcyBMaXN0SXRlbVdpdGhJbWFnZSBleHRlbmRzIEd0ay5MaXN0SXRlbSB7XG4gIF9pbWFnZSE6IEd0ay5JbWFnZTtcbiAgX2xhYmVsITogR3RrLkxhYmVsO1xufVxuXG5mdW5jdGlvbiBtYXRjaENsaWVudFRvUGxheWVyKFxuICBwbGF5ZXI6IE1wcmlzLlBsYXllcixcbik6IEh5cHJsYW5kLkNsaWVudCB8IHVuZGVmaW5lZCB7XG4gIGNvbnN0IGh5cHIgPSBIeXBybGFuZC5nZXRfZGVmYXVsdCgpO1xuICBjb25zdCBlbnRyeSA9IHBsYXllci5nZXRfZW50cnkoKT8udG9Mb3dlckNhc2UoKS5yZXBsYWNlKC8tL2csIFwiX1wiKTsgLy8gbm9ybWFsaXplXG4gIGNvbnN0IGlkZW50aXR5ID0gcGxheWVyLmdldF9pZGVudGl0eSgpLnRvTG93ZXJDYXNlKCk7XG5cbiAgY29uc3QgY2xpZW50cyA9IGh5cHIuZ2V0X2NsaWVudHMoKTtcblxuICByZXR1cm4gKFxuICAgIGNsaWVudHMuZmluZCgoYykgPT5cbiAgICAgIGNcbiAgICAgICAgLmdldF9jbGFzcygpXG4gICAgICAgIC50b0xvd2VyQ2FzZSgpXG4gICAgICAgIC5pbmNsdWRlcyhlbnRyeSB8fCBpZGVudGl0eSksXG4gICAgKSA/PyBjbGllbnRzLmZpbmQoKGMpID0+IGMuZ2V0X3RpdGxlKCkudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhpZGVudGl0eSkpXG4gICk7XG59XG5cbmNvbnN0IGNyZWF0ZVBvc2l0aW9uQWRqdXN0bWVudCA9ICh7XG4gIGxlbmd0aCxcbiAgcG9zaXRpb24sXG59OiB7XG4gIHBvc2l0aW9uOiBudW1iZXIgfCB1bmRlZmluZWQ7XG4gIGxlbmd0aDogbnVtYmVyIHwgdW5kZWZpbmVkO1xufSkgPT4ge1xuICByZXR1cm4gR3RrLkFkanVzdG1lbnQubmV3KHBvc2l0aW9uID8/IDAsIDAsIGxlbmd0aCB8fCAxLCAxLCAxLCAwKTtcbn07XG5cbmNvbnN0IFNlbGVjdCA9ICh7XG4gIGFsbFBsYXllcnMsXG4gIHNldFNlbGVjdGVkUGxheWVyLFxuICBzZWxlY3RlZEluZGV4LFxuICBzZWxlY3Rpb25Nb2RlbCxcbn06IHtcbiAgYWxsUGxheWVyczogQWNjZXNzb3I8TXByaXMuUGxheWVyW10+O1xuICBzZXRTZWxlY3RlZFBsYXllcjogU2V0dGVyPE1wcmlzLlBsYXllcj47XG4gIHNlbGVjdGVkSW5kZXg6IEFjY2Vzc29yPG51bWJlcj47XG4gIHNlbGVjdGlvbk1vZGVsOiBHdGsuU2luZ2xlU2VsZWN0aW9uO1xufSkgPT4ge1xuICBjb25zdCBbaGFzSXRlbXMsIHNldEhhc0l0ZW1zXSA9IGNyZWF0ZVN0YXRlKHNlbGVjdGlvbk1vZGVsLmdldF9uX2l0ZW1zKCkgPiAwKTtcblxuICBzZWxlY3Rpb25Nb2RlbC5jb25uZWN0KFwibm90aWZ5OjpuLWl0ZW1zXCIsICgpID0+IHtcbiAgICBjb25zdCBpdGVtc0NvdW50ID0gc2VsZWN0aW9uTW9kZWwuZ2V0X25faXRlbXMoKTtcbiAgICBzZXRIYXNJdGVtcyhpdGVtc0NvdW50ID4gMCk7XG4gIH0pO1xuICByZXR1cm4gKFxuICAgIDxHdGsuRHJvcERvd25cbiAgICAgIG1vZGVsPXtzZWxlY3Rpb25Nb2RlbH1cbiAgICAgIHNlbGVjdGVkPXtzZWxlY3RlZEluZGV4fVxuICAgICAgc2Vuc2l0aXZlPXtoYXNJdGVtc31cbiAgICAgIG9uTm90aWZ5U2VsZWN0ZWRJdGVtPXsocykgPT4ge1xuICAgICAgICBjb25zdCBpdGVtID0gcy5nZXRfc2VsZWN0ZWRfaXRlbSgpIGFzIFBsYXllckxpc3RJdGVtT2JqZWN0O1xuXG4gICAgICAgIGNvbnN0IHBsYXllciA9IGFsbFBsYXllcnNcbiAgICAgICAgICAuZ2V0KClcbiAgICAgICAgICAuZmluZCgocCkgPT4gcC5nZXRfYnVzX25hbWUoKSA9PT0gaXRlbT8uYnVzTmFtZSk7XG5cbiAgICAgICAgaWYgKHBsYXllcikge1xuICAgICAgICAgIHNldFNlbGVjdGVkUGxheWVyKHBsYXllcik7XG4gICAgICAgIH1cbiAgICAgIH19XG4gICAgICBmYWN0b3J5PXtcbiAgICAgICAgPEd0ay5TaWduYWxMaXN0SXRlbUZhY3RvcnlcbiAgICAgICAgICBvblNldHVwPXsoX2ZhY3RvcnUsIGwpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxpc3RJdGVtID0gbCBhcyBMaXN0SXRlbVdpdGhJbWFnZTtcbiAgICAgICAgICAgIGNvbnN0IGJveCA9IG5ldyBHdGsuQm94KHtcbiAgICAgICAgICAgICAgc3BhY2luZzogc3BhY2luZy5ub3JtYWwsXG4gICAgICAgICAgICAgIG9yaWVudGF0aW9uOiBHdGsuT3JpZW50YXRpb24uSE9SSVpPTlRBTCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY29uc3QgaW1hZ2UgPSBuZXcgR3RrLkltYWdlKHtcbiAgICAgICAgICAgICAgaWNvbk5hbWU6IFwibWVkaWEtb3B0aWNhbC1zeW1ib2xpY1wiLCAvLyB5b3UgY2FuIGNoYW5nZSB0byBhbnkgaWNvbiBuYW1lXG4gICAgICAgICAgICAgIHBpeGVsU2l6ZTogMTYsXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgY29uc3QgbGFiZWwgPSBuZXcgR3RrLkxhYmVsKHsgeGFsaWduOiAwIH0pO1xuXG4gICAgICAgICAgICAvLyBTdG9yZSByZWZlcmVuY2VzIGZvciB1c2UgaW4gYG9uQmluZGBcbiAgICAgICAgICAgIGxpc3RJdGVtLl9pbWFnZSA9IGltYWdlO1xuICAgICAgICAgICAgbGlzdEl0ZW0uX2xhYmVsID0gbGFiZWw7XG5cbiAgICAgICAgICAgIGJveC5hcHBlbmQoaW1hZ2UpO1xuICAgICAgICAgICAgYm94LmFwcGVuZChsYWJlbCk7XG5cbiAgICAgICAgICAgIGxpc3RJdGVtLnNldF9jaGlsZChib3gpO1xuICAgICAgICAgIH19XG4gICAgICAgICAgb25CaW5kPXsoX2ZhY3RvcnksIGwpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxpc3RJdGVtID0gbCBhcyBMaXN0SXRlbVdpdGhJbWFnZTtcblxuICAgICAgICAgICAgY29uc3QgbGFiZWwgPSBsaXN0SXRlbS5fbGFiZWwgYXMgR3RrLkxhYmVsO1xuICAgICAgICAgICAgY29uc3QgaW1hZ2UgPSBsaXN0SXRlbS5faW1hZ2UgYXMgR3RrLkltYWdlO1xuXG4gICAgICAgICAgICBjb25zdCBpdGVtID0gbGlzdEl0ZW0uZ2V0X2l0ZW08UGxheWVyTGlzdEl0ZW1PYmplY3Q+KCk7XG5cbiAgICAgICAgICAgIGxhYmVsPy5zZXRfdGV4dChpdGVtLnRleHQpO1xuXG4gICAgICAgICAgICBjb25zdCBkaXNwbGF5ID0gR2RrLkRpc3BsYXkuZ2V0X2RlZmF1bHQoKTtcbiAgICAgICAgICAgIGlmIChkaXNwbGF5KSB7XG4gICAgICAgICAgICAgIGNvbnN0IGljb25UaGVtZSA9IEd0ay5JY29uVGhlbWUuZ2V0X2Zvcl9kaXNwbGF5KGRpc3BsYXkpO1xuXG4gICAgICAgICAgICAgIGNvbnN0IGljb24gPSBpdGVtLmRlc2t0b3BJY29uO1xuXG4gICAgICAgICAgICAgIGlmIChnZXRJc0ljb24oeyBpY29uLCBpY29uVGhlbWUgfSkpIHtcbiAgICAgICAgICAgICAgICBpbWFnZS5zZXRfZnJvbV9pY29uX25hbWUoaWNvbik7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaW1hZ2Uuc2V0X2Zyb21faWNvbl9uYW1lKFwibXVsdGltZWRpYS1wbGF5ZXItc3ltYm9saWNcIik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9fVxuICAgICAgICAvPlxuICAgICAgfVxuICAgID48L0d0ay5Ecm9wRG93bj5cbiAgKTtcbn07XG5cbmNvbnN0IE1lZGlhUGxheWVyID0gKHsgdmFyaWFudCB9OiB7IHZhcmlhbnQ6IFwiY29tcGxldGVcIiB8IFwibWluaW1hbFwiIH0pID0+IHtcbiAgY29uc3Qge1xuICAgIHBsYXllckluZm86IHtcbiAgICAgIGNhbkxvb3AsXG4gICAgICBjb3ZlckFydCxcbiAgICAgIHBsYXliYWNrU3RhdHVzLFxuICAgICAgY2FuUGxheU9yUGF1c2UsXG4gICAgICBjYW5OZXh0LFxuICAgICAgY2FuQmFjayxcbiAgICAgIHBvc2l0aW9uLFxuICAgICAgbGVuZ3RoLFxuICAgICAgYWxidW0sXG4gICAgICBsb29wU3RhdHVzLFxuICAgICAgY2FuU2h1ZmZsZSxcbiAgICAgIHNodWZmbGVTdGF0dXMsXG4gICAgICBhcnRpc3QsXG4gICAgICB0aXRsZSxcbiAgICB9LFxuICAgIHNlbGVjdGVkUGxheWVyLFxuICAgIHNldFNlbGVjdGVkUGxheWVyLFxuICAgIGFsbFBsYXllcnMsXG4gICAgc2VsZWN0ZWRJbmRleCxcbiAgICBzZWxlY3Rpb25Nb2RlbCxcbiAgfSA9IHVzZVBsYXllckluZm8oKTtcblxuICBjb25zdCBbaXNTZWVraW5nLCBzZXRJc1NlZWtpbmddID0gY3JlYXRlU3RhdGU8Ym9vbGVhbj4oZmFsc2UpO1xuXG4gIGNvbnN0IHBsYXlCdG5JY29uID0gcGxheWJhY2tTdGF0dXMoKHBsYXliYWNrU3RhdHVzKSA9PiB7XG4gICAgcmV0dXJuIHBsYXliYWNrU3RhdHVzID09PSBNcHJpcy5QbGF5YmFja1N0YXR1cy5QTEFZSU5HXG4gICAgICA/IFwibWVkaWEtcGxheWJhY2stcGF1c2VcIlxuICAgICAgOiBwbGF5YmFja1N0YXR1cyA9PT0gTXByaXMuUGxheWJhY2tTdGF0dXMuUEFVU0VEXG4gICAgICAgID8gXCJtZWRpYS1wbGF5YmFjay1zdGFydFwiXG4gICAgICAgIDogXCJtZWRpYS1wbGF5YmFjay1zdG9wXCI7XG4gIH0pO1xuXG4gIGNvbnN0IHNvbmdMYWJlbCA9IGNyZWF0ZUNvbXB1dGVkKFt0aXRsZSwgYXJ0aXN0XSwgKC4uLmFyZ3MpID0+IHtcbiAgICByZXR1cm4gYXJncy5maWx0ZXIoQm9vbGVhbikuam9pbihcIiAtIFwiKSB8fCBcIk5vdGhpbmcgUGxheWluZ1wiO1xuICB9KTtcblxuICBjb25zdCBpc1NlbnNpdGl2ZVBsYXlPclBhdXNlID0gY2FuUGxheU9yUGF1c2U7XG4gIGNvbnN0IGlzU2Vuc2l0aXZlTmV4dCA9IGNhbk5leHQ7XG4gIGNvbnN0IGlzU2Vuc2l0aXZlUHJldiA9IGNhbkJhY2s7XG5cbiAgY29uc3QgW3Bvc2l0aW9uQWRqdXN0bWVudCwgc2V0UG9zaXRpb25BZGp1c3RtZW50XSA9IGNyZWF0ZVN0YXRlKFxuICAgIGNyZWF0ZVBvc2l0aW9uQWRqdXN0bWVudCh7XG4gICAgICBwb3NpdGlvbjogcG9zaXRpb24uZ2V0KCksXG4gICAgICBsZW5ndGg6IGxlbmd0aC5nZXQoKSxcbiAgICB9KSxcbiAgKTtcblxuICBjb25zdCBjYXZhID0gQ2F2YS5nZXRfZGVmYXVsdCgpO1xuICBjYXZhPy5zZXRfYmFycyg0OCk7XG4gIGxldCBjYXZhRHJhd2luZ0FyZWE6IEd0ay5EcmF3aW5nQXJlYSB8IHVuZGVmaW5lZDtcbiAgbGV0IGltZ0RyYXdpbmdBcmVhOiBHdGsuRHJhd2luZ0FyZWEgfCB1bmRlZmluZWQ7XG5cbiAgY29uc3QgW2NhdmFCYXJzLCBzZXRDYXZhQmFyc10gPSBjcmVhdGVTdGF0ZTxudW1iZXJbXT4oXG4gICAgbmV3IEFycmF5KGNhdmE/LmdldF9iYXJzKCkpLmZpbGwoMCksXG4gICk7XG5cbiAgY29uc3QgdXBkYXRlU2NhbGUgPSAoczogR3RrLlNjYWxlKSA9PiB7XG4gICAgY29uc3QgYWRqdXN0bWVudCA9IHMuZ2V0X2FkanVzdG1lbnQoKTtcbiAgICBjb25zdCB2ID0gYWRqdXN0bWVudC5nZXRfdmFsdWUoKTtcblxuICAgIHNlbGVjdGVkUGxheWVyLmdldCgpPy5zZXRfcG9zaXRpb24odik7XG4gICAgc2V0SXNTZWVraW5nKGZhbHNlKTtcbiAgfTtcblxuICBjb25zdCB1cGRhdGVTY2FsZVNlZWtWYWx1ZSA9ICgpID0+IHtcbiAgICBzZXRJc1NlZWtpbmcodHJ1ZSk7XG4gIH07XG5cbiAgY29uc3QgbGVuZ3RoVW5zdWJzY3JpYmUgPSBsZW5ndGguc3Vic2NyaWJlKCgpID0+IHtcbiAgICBpZiAocG9zaXRpb25BZGp1c3RtZW50LmdldCgpLmdldF91cHBlcigpID09PSBsZW5ndGguZ2V0KCkpIHJldHVybjtcblxuICAgIHBvc2l0aW9uQWRqdXN0bWVudC5nZXQoKS5zZXRfdXBwZXIobGVuZ3RoLmdldCgpID8/IDApO1xuICB9KTtcblxuICBjb25zdCBwb3NpdGlvblVuc3Vic2NyaWJlID0gcG9zaXRpb24uc3Vic2NyaWJlKCgpID0+IHtcbiAgICBpZiAoaXNTZWVraW5nLmdldCgpKSByZXR1cm47XG5cbiAgICBjb25zdCB2ID0gcG9zaXRpb24uZ2V0KCk7XG5cbiAgICBpZiAodiA9PT0gcG9zaXRpb25BZGp1c3RtZW50LmdldCgpLmdldF92YWx1ZSgpKSByZXR1cm47XG4gICAgcG9zaXRpb25BZGp1c3RtZW50LmdldCgpLnNldF92YWx1ZSh2ID8/IDApO1xuICB9KTtcblxuICBjb25zdCBjb252ZXJ0VW5zdWJzY3JpYmUgPSBjb3ZlckFydC5zdWJzY3JpYmUoKCkgPT4ge1xuICAgIGltZ0RyYXdpbmdBcmVhPy5xdWV1ZV9kcmF3KCk7XG4gIH0pO1xuXG4gIGNvbnN0IHNlbGVjdGVkUGxheWVyVW5zdWJzY3JpYmUgPSBzZWxlY3RlZFBsYXllci5zdWJzY3JpYmUoKCkgPT4ge1xuICAgIGNvbnN0IGxlbmd0aCA9IHNlbGVjdGVkUGxheWVyLmdldCgpLmdldF9sZW5ndGgoKSA/PyAwO1xuICAgIGNvbnN0IHBvc2l0aW9uID0gc2VsZWN0ZWRQbGF5ZXIuZ2V0KCkuZ2V0X3Bvc2l0aW9uKCkgPz8gMDtcbiAgICAvLyB3ZSBuZWVkIHRvIHJlc3RhcnQgdGhlIHdob2xlIHBvc2l0aW9uQWRqdXN0bWVudCB0byB1cGRhdGUgdGhlIG1heCBsZW5ndGggY29ycmVjdGx5IHdoZW4gY2hhbmdpbmcgcGxheWVyc1xuICAgIC8vIHdpdGhvdXQgdGhpcyB0aGUgdXBwZXIgb3IgbWF4IHZhbHVlIGlzIG5vdCB1cGRhdGVkXG4gICAgc2V0UG9zaXRpb25BZGp1c3RtZW50KFxuICAgICAgY3JlYXRlUG9zaXRpb25BZGp1c3RtZW50KHtcbiAgICAgICAgcG9zaXRpb246IHBvc2l0aW9uLFxuICAgICAgICBsZW5ndGg6IGxlbmd0aCxcbiAgICAgIH0pLFxuICAgICk7XG4gIH0pO1xuXG4gIGNhdmE/LmNvbm5lY3QoXCJub3RpZnk6OnZhbHVlc1wiLCAoKSA9PiB7XG4gICAgY29uc3QgbGVycCA9IChhOiBudW1iZXIsIGI6IG51bWJlciwgdDogbnVtYmVyKSA9PiBhICsgKGIgLSBhKSAqIHQ7XG4gICAgY29uc3QgaXNQbGF5aW5nID0gcGxheWJhY2tTdGF0dXMuZ2V0KCkgPT09IE1wcmlzLlBsYXliYWNrU3RhdHVzLlBMQVlJTkc7XG5cbiAgICBjb25zdCBteUJhcnM6IG51bWJlcltdID0gWy4uLmNhdmFCYXJzLmdldCgpXTtcbiAgICBjb25zdCB2YWx1ZXMgPSBjYXZhLmdldF92YWx1ZXMoKTtcbiAgICBjb25zdCBiYXJzID0gY2F2YS5nZXRfYmFycygpO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBiYXJzOyBpKyspIHtcbiAgICAgIGNvbnN0IG5ld1ZhbCA9IHZhbHVlc1tpXSA/PyAxO1xuXG4gICAgICBpZiAoaXNQbGF5aW5nKSB7XG4gICAgICAgIG15QmFyc1tpXSA9IGxlcnAobXlCYXJzW2ldLCBuZXdWYWwsIDAuMyk7IC8vIHNtb290aCB0cmFuc2l0aW9uXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBteUJhcnNbaV0gPSBsZXJwKG15QmFyc1tpXSwgMCwgMC4xKTsgLy8gc21vb3RoIHRyYW5zaXRpb25cbiAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRDYXZhQmFycyhteUJhcnMpO1xuICAgIGNhdmFEcmF3aW5nQXJlYT8ucXVldWVfZHJhdygpO1xuICB9KTtcblxuICBvbkNsZWFudXAoKCkgPT4ge1xuICAgIGxlbmd0aFVuc3Vic2NyaWJlKCk7XG4gICAgcG9zaXRpb25VbnN1YnNjcmliZSgpO1xuICAgIGNvbnZlcnRVbnN1YnNjcmliZSgpO1xuICAgIHNlbGVjdGVkUGxheWVyVW5zdWJzY3JpYmUoKTtcbiAgfSk7XG5cbiAgcmV0dXJuIChcbiAgICA8Ym94XG4gICAgICBvcmllbnRhdGlvbj17XG4gICAgICAgIHZhcmlhbnQgPT09IFwiY29tcGxldGVcIlxuICAgICAgICAgID8gR3RrLk9yaWVudGF0aW9uLkhPUklaT05UQUxcbiAgICAgICAgICA6IEd0ay5PcmllbnRhdGlvbi5WRVJUSUNBTFxuICAgICAgfVxuICAgICAgaGV4cGFuZFxuICAgICAgc3BhY2luZz17c3BhY2luZy5zbWFsbH1cbiAgICA+XG4gICAgICA8b3ZlcmxheT5cbiAgICAgICAgPGJveFxuICAgICAgICAgIGhlaWdodFJlcXVlc3Q9e3ZhcmlhbnQgPT09IFwiY29tcGxldGVcIiA/IDMwMCA6IDEwMH1cbiAgICAgICAgICB3aWR0aFJlcXVlc3Q9e3ZhcmlhbnQgPT09IFwiY29tcGxldGVcIiA/IDMwMCA6IDE1MH1cbiAgICAgICAgLz5cbiAgICAgICAgPENpcmN1bGFySW1hZ2VcbiAgICAgICAgICAkdHlwZT1cIm92ZXJsYXlcIlxuICAgICAgICAgIGltZz17Y292ZXJBcnR9XG4gICAgICAgICAgc2l6ZT17dmFyaWFudCA9PT0gXCJjb21wbGV0ZVwiID8gMTgwIDogOTB9XG4gICAgICAgICAgaWNvbkZhbGxiYWNrPVwibWVkaWEtYWxidW0tdHJhY2tcIlxuICAgICAgICAvPlxuICAgICAgICA8R3RrLkRyYXdpbmdBcmVhXG4gICAgICAgICAgJHR5cGU9XCJvdmVybGF5XCJcbiAgICAgICAgICBjb250ZW50V2lkdGg9ezI4MH1cbiAgICAgICAgICBjb250ZW50SGVpZ2h0PXsyODB9XG4gICAgICAgICAgdmlzaWJsZT17dmFyaWFudCA9PT0gXCJjb21wbGV0ZVwifVxuICAgICAgICAgIGNsYXNzPVwiTWVkaWFQbGF5ZXJCYXJzXCJcbiAgICAgICAgICBoZXhwYW5kPXt0cnVlfVxuICAgICAgICAgIHZleHBhbmQ9e3RydWV9XG4gICAgICAgICAgJD17KHMpID0+IHtcbiAgICAgICAgICAgIHMuc2V0X2RyYXdfZnVuYygod2lkZ2V0LCBjciwgd2lkdGgsIGhlaWdodCkgPT4ge1xuICAgICAgICAgICAgICBjb25zdCBiYXJzID0gY2F2YUJhcnMuZ2V0KCk7IC8vIFlvdXIgY2F2YSBiYXJzIGRhdGFcblxuICAgICAgICAgICAgICBjb25zdCBjeCA9IHdpZHRoIC8gMjtcbiAgICAgICAgICAgICAgY29uc3QgY3kgPSBoZWlnaHQgLyAyO1xuICAgICAgICAgICAgICBjb25zdCByYWRpdXMgPSAxMDA7XG4gICAgICAgICAgICAgIGNvbnN0IG1heEJhckxlbmd0aCA9IDgwO1xuICAgICAgICAgICAgICBjb25zdCBjb3VudCA9IGJhcnMubGVuZ3RoO1xuXG4gICAgICAgICAgICAgIGNvbnN0IGNvbG9yID0gd2lkZ2V0LmdldF9jb2xvcigpO1xuXG4gICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGFuZ2xlID0gKGkgLyBjb3VudCkgKiBNYXRoLlBJICogMjtcbiAgICAgICAgICAgICAgICBjb25zdCBiYXJMZW5ndGggPSBNYXRoLnBvdyhiYXJzW2ldLCAxLjUpICogbWF4QmFyTGVuZ3RoO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgeDEgPSBjeCArIE1hdGguY29zKGFuZ2xlKSAqIHJhZGl1cztcbiAgICAgICAgICAgICAgICBjb25zdCB5MSA9IGN5ICsgTWF0aC5zaW4oYW5nbGUpICogcmFkaXVzO1xuICAgICAgICAgICAgICAgIGNvbnN0IHgyID0gY3ggKyBNYXRoLmNvcyhhbmdsZSkgKiAocmFkaXVzICsgYmFyTGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBjb25zdCB5MiA9IGN5ICsgTWF0aC5zaW4oYW5nbGUpICogKHJhZGl1cyArIGJhckxlbmd0aCk7XG5cbiAgICAgICAgICAgICAgICBjci5zZXRTb3VyY2VSR0JBKFxuICAgICAgICAgICAgICAgICAgY29sb3IucmVkLFxuICAgICAgICAgICAgICAgICAgY29sb3IuZ3JlZW4sXG4gICAgICAgICAgICAgICAgICBjb2xvci5ibHVlLFxuICAgICAgICAgICAgICAgICAgY29sb3IuYWxwaGEsXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBjci5zZXRMaW5lV2lkdGgoNCk7XG4gICAgICAgICAgICAgICAgY3Iuc2V0TGluZUNhcChDYWlyby5MaW5lQ2FwLlJPVU5EKTsgLy8gdGhpcyByb3VuZHMgdGhlIGxpbmUgZW5kc1xuICAgICAgICAgICAgICAgIGNyLm1vdmVUbyh4MSwgeTEpO1xuICAgICAgICAgICAgICAgIGNyLmxpbmVUbyh4MiwgeTIpO1xuICAgICAgICAgICAgICAgIGNyLnN0cm9rZSgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNhdmFEcmF3aW5nQXJlYSA9IHM7XG4gICAgICAgICAgfX1cbiAgICAgICAgLz5cbiAgICAgIDwvb3ZlcmxheT5cblxuICAgICAgPGJveFxuICAgICAgICBvcmllbnRhdGlvbj17R3RrLk9yaWVudGF0aW9uLlZFUlRJQ0FMfVxuICAgICAgICBzcGFjaW5nPXtzcGFjaW5nLnhTbWFsbH1cbiAgICAgICAgdmFsaWduPXtHdGsuQWxpZ24uQ0VOVEVSfVxuICAgICAgPlxuICAgICAgICA8Ym94XG4gICAgICAgICAgaGFsaWduPXtHdGsuQWxpZ24uQ0VOVEVSfVxuICAgICAgICAgIHZhbGlnbj17R3RrLkFsaWduLkNFTlRFUn1cbiAgICAgICAgICBvcmllbnRhdGlvbj17R3RrLk9yaWVudGF0aW9uLlZFUlRJQ0FMfVxuICAgICAgICA+XG4gICAgICAgICAgPGJveFxuICAgICAgICAgICAgd2lkdGhSZXF1ZXN0PXsxMDB9XG4gICAgICAgICAgICBoYWxpZ249e0d0ay5BbGlnbi5DRU5URVJ9XG4gICAgICAgICAgICB2YWxpZ249e0d0ay5BbGlnbi5DRU5URVJ9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGxhYmVsXG4gICAgICAgICAgICAgIGxhYmVsPXtzb25nTGFiZWx9XG4gICAgICAgICAgICAgIGNsYXNzPVwiTWVkaWFQbGF5ZXJTb25nTGFiZWxcIlxuICAgICAgICAgICAgICBlbGxpcHNpemU9e1BhbmdvLkVsbGlwc2l6ZU1vZGUuRU5EfVxuICAgICAgICAgICAgICBtYXhXaWR0aENoYXJzPXt2YXJpYW50ID09PSBcImNvbXBsZXRlXCIgPyA1MCA6IDMwfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L2JveD5cbiAgICAgICAgICA8Ym94XG4gICAgICAgICAgICBoYWxpZ249e0d0ay5BbGlnbi5DRU5URVJ9XG4gICAgICAgICAgICB2YWxpZ249e0d0ay5BbGlnbi5DRU5URVJ9XG4gICAgICAgICAgICB2aXNpYmxlPXthbGJ1bSgodikgPT4gISF2KX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8bGFiZWxcbiAgICAgICAgICAgICAgbGFiZWw9e2FsYnVtfVxuICAgICAgICAgICAgICBlbGxpcHNpemU9e1BhbmdvLkVsbGlwc2l6ZU1vZGUuRU5EfVxuICAgICAgICAgICAgICBtYXhXaWR0aENoYXJzPXt2YXJpYW50ID09PSBcImNvbXBsZXRlXCIgPyA1MCA6IDMwfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L2JveD5cbiAgICAgICAgPC9ib3g+XG5cbiAgICAgICAgPEd0ay5TY2FsZVxuICAgICAgICAgIG1hcmdpblN0YXJ0PXsxNn1cbiAgICAgICAgICBtYXJnaW5FbmQ9ezE2fVxuICAgICAgICAgIHNlbnNpdGl2ZT17aXNTZW5zaXRpdmVQbGF5T3JQYXVzZX1cbiAgICAgICAgICBhZGp1c3RtZW50PXtwb3NpdGlvbkFkanVzdG1lbnR9XG4gICAgICAgICAgZHJhd192YWx1ZT17ZmFsc2V9XG4gICAgICAgICAgLy8gdmFsdWUgY2hhbmdlZFxuICAgICAgICAgIG9uVmFsdWVDaGFuZ2VkPXsocykgPT4ge1xuICAgICAgICAgICAgY29uc3QgYWRqdXN0bWVudCA9IHMuZ2V0X2FkanVzdG1lbnQoKTtcbiAgICAgICAgICAgIGNvbnN0IG1heCA9IGFkanVzdG1lbnQuZ2V0X3VwcGVyKCk7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZTogbnVtYmVyID0gYWRqdXN0bWVudC5nZXRfdmFsdWUoKTtcblxuICAgICAgICAgICAgcy5jbGVhcl9tYXJrcygpO1xuXG4gICAgICAgICAgICBzLmFkZF9tYXJrKDAsIEd0ay5Qb3NpdGlvblR5cGUuQk9UVE9NLCBmb3JtYXRTZWNvbmRzKHZhbHVlKSk7XG4gICAgICAgICAgICBzLmFkZF9tYXJrKG1heCwgR3RrLlBvc2l0aW9uVHlwZS5SSUdIVCwgZm9ybWF0U2Vjb25kcyhtYXgpKTtcbiAgICAgICAgICB9fVxuICAgICAgICAgICQ9eyhzKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBrZXlDb250cm9sbGVyID0gR3RrLkV2ZW50Q29udHJvbGxlcktleS5uZXcoKTtcblxuICAgICAgICAgICAgLy8gdGhlIGNsaWNrIGNvbnRyb2xsZXIgZG9lc24ndCByZWNlaXZlIHRoZSByZWxlYXNlZCBldmVudCBkdWUgdG8gYSBidWdcbiAgICAgICAgICAgIC8vIHRoaXMgZml4ZXMgaXQ6IGh0dHBzOi8vZ2l0aHViLmNvbS9uZWl0aGVybi9nNG11c2ljL2Jsb2IvbWFzdGVyL3NyYy91aS9wbGF5LWJhci52YWxhI0wxNjdcbiAgICAgICAgICAgIGxldCBjbGlja0NPbnRyb2xsZXI6IEd0ay5HZXN0dXJlQ2xpY2sgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgIGNvbnN0IGNvbnRyb2xsZXJzID0gcy5vYnNlcnZlX2NvbnRyb2xsZXJzKCk7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29udHJvbGxlcnMuZ2V0X25faXRlbXMoKTsgaSsrKSB7XG4gICAgICAgICAgICAgIHZhciBjb250cm9sbGVyID0gY29udHJvbGxlcnMuZ2V0X2l0ZW0oaSk7XG4gICAgICAgICAgICAgIGlmIChjb250cm9sbGVyIGluc3RhbmNlb2YgR3RrLkdlc3R1cmVDbGljaykge1xuICAgICAgICAgICAgICAgIGNsaWNrQ09udHJvbGxlciA9IGNvbnRyb2xsZXI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFjbGlja0NPbnRyb2xsZXIpIHtcbiAgICAgICAgICAgICAgY2xpY2tDT250cm9sbGVyID0gbmV3IEd0ay5HZXN0dXJlQ2xpY2soKTtcbiAgICAgICAgICAgICAgcy5hZGRfY29udHJvbGxlcihjbGlja0NPbnRyb2xsZXIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBrZXlDb250cm9sbGVyLmNvbm5lY3QoXCJrZXktcHJlc3NlZFwiLCAoXywga2V5dmFsKSA9PiB7XG4gICAgICAgICAgICAgIGlmICghZ2V0SXNWYWxpZEtleUZvclNjYWxlKGtleXZhbCkpIHJldHVybjtcblxuICAgICAgICAgICAgICB1cGRhdGVTY2FsZVNlZWtWYWx1ZSgpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGtleUNvbnRyb2xsZXIuY29ubmVjdChcImtleS1yZWxlYXNlZFwiLCAoXywga2V5dmFsKSA9PiB7XG4gICAgICAgICAgICAgIGlmICghZ2V0SXNWYWxpZEtleUZvclNjYWxlKGtleXZhbCkpIHJldHVybjtcblxuICAgICAgICAgICAgICB1cGRhdGVTY2FsZShzKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjbGlja0NPbnRyb2xsZXIuY29ubmVjdChcInByZXNzZWRcIiwgKCkgPT4ge1xuICAgICAgICAgICAgICB1cGRhdGVTY2FsZVNlZWtWYWx1ZSgpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGNsaWNrQ09udHJvbGxlci5jb25uZWN0KFwicmVsZWFzZWRcIiwgKCkgPT4ge1xuICAgICAgICAgICAgICB1cGRhdGVTY2FsZShzKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyAgd2UgZG9uJ3QgYWRkIHRoZSBjbGljayBjb250cm9sbGVyIGFnYWluIGJlY2F1c2UgaXQncyBub3QgbmVlZGVkXG4gICAgICAgICAgICAvLyBzLmFkZF9jb250cm9sbGVyKGNsaWNrQ09udHJvbGxlcik7XG4gICAgICAgICAgICBzLmFkZF9jb250cm9sbGVyKGtleUNvbnRyb2xsZXIpO1xuICAgICAgICAgIH19XG4gICAgICAgIC8+XG5cbiAgICAgICAgPGNlbnRlcmJveCBoZXhwYW5kPlxuICAgICAgICAgIHt2YXJpYW50ID09PSBcImNvbXBsZXRlXCIgPyAoXG4gICAgICAgICAgICA8Ym94ICR0eXBlPVwic3RhcnRcIiBzcGFjaW5nPXtzcGFjaW5nLnNtYWxsfT5cbiAgICAgICAgICAgICAgPEd0ay5Ub2dnbGVCdXR0b25cbiAgICAgICAgICAgICAgICBzZW5zaXRpdmU9e2Nhbkxvb3B9XG4gICAgICAgICAgICAgICAgYWN0aXZlPXtsb29wU3RhdHVzKFxuICAgICAgICAgICAgICAgICAgKHMpID0+IHMgPT09IE1wcmlzLkxvb3AuUExBWUxJU1QgfHwgcyA9PT0gTXByaXMuTG9vcC5UUkFDSyxcbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgIG9uQ2xpY2tlZD17KCkgPT4ge1xuICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRQbGF5ZXIuZ2V0KCkubG9vcCgpO1xuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8aW1hZ2VcbiAgICAgICAgICAgICAgICAgIGljb25OYW1lPXtsb29wU3RhdHVzKChzdGF0dXMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXR1cyA9PT0gTXByaXMuTG9vcC5UUkFDSykge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIm1lZGlhLXBsYXlsaXN0LXJlcGVhdC1zb25nXCI7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwibWVkaWEtcGxheWxpc3QtcmVwZWF0XCI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvR3RrLlRvZ2dsZUJ1dHRvbj5cblxuICAgICAgICAgICAgICA8R3RrLlRvZ2dsZUJ1dHRvblxuICAgICAgICAgICAgICAgIHNlbnNpdGl2ZT17Y2FuU2h1ZmZsZX1cbiAgICAgICAgICAgICAgICBhY3RpdmU9e3NodWZmbGVTdGF0dXMoKHMpID0+IHMgPT09IE1wcmlzLlNodWZmbGUuT04pfVxuICAgICAgICAgICAgICAgIG9uQ2xpY2tlZD17KCkgPT4ge1xuICAgICAgICAgICAgICAgICAgLy8gaXQgdG9nZ2xlcyBjb3JyZWN0bHkgc2V0dGluZyBhbHdheXMgT04sIGNyYXp5XG4gICAgICAgICAgICAgICAgICBzZWxlY3RlZFBsYXllci5nZXQoKS5zZXRfc2h1ZmZsZV9zdGF0dXMoTXByaXMuU2h1ZmZsZS5PTik7XG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxpbWFnZVxuICAgICAgICAgICAgICAgICAgaWNvbk5hbWU9e3NodWZmbGVTdGF0dXMoKHN0YXR1cykgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdHVzID09PSBNcHJpcy5TaHVmZmxlLk9GRikge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIm1lZGlhLXBsYXlsaXN0LW5vLXNodWZmbGVcIjtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJtZWRpYS1wbGF5bGlzdC1zaHVmZmxlXCI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvR3RrLlRvZ2dsZUJ1dHRvbj5cbiAgICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICAgIGljb25OYW1lPVwiZWRpdC1maW5kXCJcbiAgICAgICAgICAgICAgICBvbkNsaWNrZWQ9eygpID0+IHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IHBsYXllciA9IHNlbGVjdGVkUGxheWVyLmdldCgpO1xuICAgICAgICAgICAgICAgICAgY29uc3QgY2xpZW50ID0gcGxheWVyICYmIG1hdGNoQ2xpZW50VG9QbGF5ZXIocGxheWVyKTtcbiAgICAgICAgICAgICAgICAgIGNsaWVudD8uZm9jdXMoKTtcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9ib3g+XG4gICAgICAgICAgKSA6IG51bGx9XG4gICAgICAgICAgPGJveFxuICAgICAgICAgICAgJHR5cGU9XCJjZW50ZXJcIlxuICAgICAgICAgICAgb3JpZW50YXRpb249e0d0ay5PcmllbnRhdGlvbi5IT1JJWk9OVEFMfVxuICAgICAgICAgICAgc3BhY2luZz17c3BhY2luZy5zbWFsbH1cbiAgICAgICAgICAgIGhhbGlnbj17R3RrLkFsaWduLkNFTlRFUn1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgIHNlbnNpdGl2ZT17aXNTZW5zaXRpdmVQcmV2fVxuICAgICAgICAgICAgICBvbkNsaWNrZWQ9eygpID0+IHtcbiAgICAgICAgICAgICAgICBzZXRJc1NlZWtpbmcoZmFsc2UpO1xuICAgICAgICAgICAgICAgIHNlbGVjdGVkUGxheWVyLmdldCgpPy5wcmV2aW91cygpO1xuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICBjbGFzcz17dmFyaWFudCA9PT0gXCJjb21wbGV0ZVwiID8gXCJcIiA6IFwiZmxhdFwifVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8aW1hZ2UgaWNvbk5hbWU9e1wibWVkaWEtc2tpcC1iYWNrd2FyZFwifSAvPlxuICAgICAgICAgICAgPC9idXR0b24+XG5cbiAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgc2Vuc2l0aXZlPXtpc1NlbnNpdGl2ZVBsYXlPclBhdXNlfVxuICAgICAgICAgICAgICBjbGFzcz1cImNpcmN1bGFyXCJcbiAgICAgICAgICAgICAgb25DbGlja2VkPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgc2V0SXNTZWVraW5nKGZhbHNlKTtcbiAgICAgICAgICAgICAgICBzZWxlY3RlZFBsYXllci5nZXQoKT8ucGxheV9wYXVzZSgpO1xuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8aW1hZ2UgaWNvbk5hbWU9e3BsYXlCdG5JY29ufSAvPlxuICAgICAgICAgICAgPC9idXR0b24+XG5cbiAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgc2Vuc2l0aXZlPXtpc1NlbnNpdGl2ZU5leHR9XG4gICAgICAgICAgICAgIG9uQ2xpY2tlZD17KCkgPT4ge1xuICAgICAgICAgICAgICAgIHNlbGVjdGVkUGxheWVyLmdldCgpPy5uZXh0KCk7XG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgIGNsYXNzPXt2YXJpYW50ID09PSBcImNvbXBsZXRlXCIgPyBcIlwiIDogXCJmbGF0XCJ9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxpbWFnZSBpY29uTmFtZT17XCJtZWRpYS1za2lwLWZvcndhcmRcIn0gLz5cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgIDwvYm94PlxuXG4gICAgICAgICAgey8qIFdlIG5lZWQgdG8gZml4IGl0IGJlY2F1c2UgY2hhbmdpbmcgdGhlIHZvbHVtZSBpbiB0aGUgYXBwIGNhdXNlcyB0aGUgb25WYWx1ZUNoYW5nZWQgdG8gdHJpZ2dlciBjYXVzaW5nICovfVxuICAgICAgICAgIHsvKiBhbiBpbmZpbml0ZSBjaGFuZ2Ugb2Ygdm9sdW1lICovfVxuICAgICAgICAgIHsvKiA8Ym94ICR0eXBlPVwiZW5kXCI+ICovfVxuICAgICAgICAgIHsvKiAgIDxHdGsuVm9sdW1lQnV0dG9uICovfVxuICAgICAgICAgIHsvKiAgICAgYWRqdXN0bWVudD17dm9sdW1lQWRqdXN0bWVudH0gKi99XG4gICAgICAgICAgey8qICAgICBvblZhbHVlQ2hhbmdlZD17KHMpID0+IHsgKi99XG4gICAgICAgICAgey8qICAgICAgIHNlbGVjdGVkUGxheWVyPy5nZXQoKT8uc2V0X3ZvbHVtZShzLmdldF92YWx1ZSgpKTsgKi99XG4gICAgICAgICAgey8qICAgICB9fSAqL31cbiAgICAgICAgICB7LyogICAgIG9yaWVudGF0aW9uPXtHdGsuT3JpZW50YXRpb24uSE9SSVpPTlRBTH0gKi99XG4gICAgICAgICAgey8qICAgLz4gKi99XG4gICAgICAgICAgey8qIDwvYm94PiAqL31cbiAgICAgICAgICB7dmFyaWFudCA9PT0gXCJjb21wbGV0ZVwiID8gKFxuICAgICAgICAgICAgPGJveCAkdHlwZT1cImVuZFwiIGNzcz1cIm1hcmdpbi1sZWZ0OjhweDtcIj5cbiAgICAgICAgICAgICAgPFNlbGVjdFxuICAgICAgICAgICAgICAgIGFsbFBsYXllcnM9e2FsbFBsYXllcnN9XG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRJbmRleD17c2VsZWN0ZWRJbmRleH1cbiAgICAgICAgICAgICAgICBzZXRTZWxlY3RlZFBsYXllcj17c2V0U2VsZWN0ZWRQbGF5ZXJ9XG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uTW9kZWw9e3NlbGVjdGlvbk1vZGVsfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9ib3g+XG4gICAgICAgICAgKSA6IG51bGx9XG4gICAgICAgIDwvY2VudGVyYm94PlxuICAgICAgPC9ib3g+XG4gICAgPC9ib3g+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBNZWRpYVBsYXllcjtcbiIsICJleHBvcnQgY29uc3QgZm9ybWF0U2Vjb25kcyA9IChzZWNvbmRzOiBudW1iZXIpID0+IHtcbiAgY29uc3QgdG90YWxTZWNvbmRzID0gTWF0aC5mbG9vcihzZWNvbmRzKTtcbiAgY29uc3QgaG91cnMgPSBNYXRoLmZsb29yKHRvdGFsU2Vjb25kcyAvIDM2MDApO1xuICBjb25zdCBtaW51dGVzID0gTWF0aC5mbG9vcigodG90YWxTZWNvbmRzICUgMzYwMCkgLyA2MCk7XG4gIGNvbnN0IHNlY3MgPSB0b3RhbFNlY29uZHMgJSA2MDtcblxuICBpZiAoaG91cnMgPiAwKSB7XG4gICAgcmV0dXJuIGAke2hvdXJzfToke21pbnV0ZXMudG9TdHJpbmcoKS5wYWRTdGFydCgyLCBcIjBcIil9OiR7c2Vjcy50b1N0cmluZygpLnBhZFN0YXJ0KDIsIFwiMFwiKX1gO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBgJHttaW51dGVzfToke3NlY3MudG9TdHJpbmcoKS5wYWRTdGFydCgyLCBcIjBcIil9YDtcbiAgfVxufTtcbiIsICJpbXBvcnQgeyBjcmVhdGVTdGF0ZSwgb25DbGVhbnVwLCBjcmVhdGVCaW5kaW5nLCBBY2Nlc3NvciB9IGZyb20gXCJhZ3NcIjtcbmltcG9ydCBNcHJpcyBmcm9tIFwiZ2k6Ly9Bc3RhbE1wcmlzXCI7XG5pbXBvcnQgeyBnZXRJc0xhc3RQbGF5ZXIsIGdldExhc3RQbGF5ZXIgfSBmcm9tIFwiLi4vdXRpbHMvbXByaXMvZ2V0LWxhc3QtcGxheWVyXCI7XG5pbXBvcnQgR2lvIGZyb20gXCJnaTovL0dpb1wiO1xuaW1wb3J0IEFwcHMgZnJvbSBcImdpOi8vQXN0YWxBcHBzXCI7XG5pbXBvcnQgeyBHdGsgfSBmcm9tIFwiYWdzL2d0azRcIjtcbmltcG9ydCB7IFBsYXllckxpc3RJdGVtT2JqZWN0IH0gZnJvbSBcIi4uL29iamVjdHMvUGxheWVyTGlzdEl0ZW1PYmplY3RcIjtcbmltcG9ydCB7IGNyZWF0ZUFwcHNJbnN0YW5jZSwgc2VhcmNoQXBwRnJvbU5hbWUgfSBmcm9tIFwiLi4vdXRpbHMvYXBwc1wiO1xuXG5jb25zdCBjYWxsYmFja0lmQ3VycmVudCA9IChcbiAgY2FsbGJhY2s6IChjaGFuZ2VkOiBNcHJpcy5QbGF5ZXIpID0+IHZvaWQsXG4gIGdldElzV2FudGVkUGxheWVyOiAocGxheWVyOiBNcHJpcy5QbGF5ZXIpID0+IGJvb2xlYW4sXG4pID0+IHtcbiAgcmV0dXJuIChjaGFuZ2VkOiBNcHJpcy5QbGF5ZXIpID0+IHtcbiAgICBpZiAoZ2V0SXNXYW50ZWRQbGF5ZXIoY2hhbmdlZCkpIGNhbGxiYWNrKGNoYW5nZWQpO1xuICB9O1xufTtcblxuY29uc3QgYmluZFByb3BlcnR5ID0gPEsgZXh0ZW5kcyBrZXlvZiBNcHJpcy5QbGF5ZXI+KFxuICBwbGF5ZXI6IE1wcmlzLlBsYXllcixcbiAgX3Byb3BlcnR5OiBLLFxuICBzaWduYWw6IHN0cmluZyxcbiAgZ2V0VmFsdWU6IChwOiBNcHJpcy5QbGF5ZXIpID0+IE1wcmlzLlBsYXllcltLXSxcbiAgc2V0U3RhdGU6ICh2YWw6IE1wcmlzLlBsYXllcltLXSkgPT4gdm9pZCxcbiAgZ2V0SXNXYW50ZWRQbGF5ZXI6IChwbGF5ZXI6IE1wcmlzLlBsYXllcikgPT4gYm9vbGVhbixcbikgPT4ge1xuICBwbGF5ZXIuY29ubmVjdChcbiAgICBzaWduYWwsXG4gICAgY2FsbGJhY2tJZkN1cnJlbnQoKGNoYW5nZWQpID0+IHtcbiAgICAgIHNldFN0YXRlKGdldFZhbHVlKGNoYW5nZWQpKTtcbiAgICB9LCBnZXRJc1dhbnRlZFBsYXllciksXG4gICk7XG59O1xuXG5jb25zdCBnZXR0ZXJzID0ge1xuICBnZXRDYW5QbGF5T3JQYXVzZShwbGF5ZXI6IE1wcmlzLlBsYXllciB8IHVuZGVmaW5lZCkge1xuICAgIGlmICghcGxheWVyKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHBsYXllci5nZXRfY2FuX2NvbnRyb2woKSAmJiBwbGF5ZXIuZ2V0X3BsYXliYWNrX3N0YXR1cygpICE9PSAyO1xuICB9LFxuICBnZXRDYW5Mb29wKHBsYXllcjogTXByaXMuUGxheWVyIHwgdW5kZWZpbmVkKSB7XG4gICAgaWYgKCFwbGF5ZXIpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gcGxheWVyLmdldF9sb29wX3N0YXR1cygpICE9PSBNcHJpcy5Mb29wLlVOU1VQUE9SVEVEO1xuICB9LFxuICBnZXRDYW5TaHVmZmxlKHBsYXllcjogTXByaXMuUGxheWVyIHwgdW5kZWZpbmVkKSB7XG4gICAgaWYgKCFwbGF5ZXIpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gcGxheWVyLmdldF9zaHVmZmxlX3N0YXR1cygpICE9PSBNcHJpcy5TaHVmZmxlLlVOU1VQUE9SVEVEO1xuICB9LFxuICBnZXRUaXRsZShwbGF5ZXI6IE1wcmlzLlBsYXllciB8IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBwbGF5ZXI/LmdldF90aXRsZSgpID8/IFwiXCI7XG4gIH0sXG4gIGdldEFydGlzdChwbGF5ZXI6IE1wcmlzLlBsYXllciB8IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBwbGF5ZXI/LmdldF9hcnRpc3QoKSA/PyBcIlwiO1xuICB9LFxuICBnZXRBbGJ1bShwbGF5ZXI6IE1wcmlzLlBsYXllciB8IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBwbGF5ZXI/LmdldF9hbGJ1bSgpID8/IFwiXCI7XG4gIH0sXG5cbiAgZ2V0Q292ZXJBcnQocGxheWVyOiBNcHJpcy5QbGF5ZXIgfCB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gcGxheWVyPy5nZXRfY292ZXJfYXJ0KCkgPz8gXCJcIjtcbiAgfSxcbiAgZ2V0UG9zaXRpb24ocGxheWVyOiBNcHJpcy5QbGF5ZXIgfCB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gcGxheWVyPy5nZXRfcG9zaXRpb24oKSA/PyAwO1xuICB9LFxuICBnZXRMZW5ndGgocGxheWVyOiBNcHJpcy5QbGF5ZXIgfCB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gcGxheWVyPy5nZXRfbGVuZ3RoKCkgPz8gMDtcbiAgfSxcbiAgZ2V0Vm9sdW1lKHBsYXllcjogTXByaXMuUGxheWVyIHwgdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHBsYXllcj8uZ2V0X3ZvbHVtZSgpID8/IDEwMDtcbiAgfSxcbiAgZ2V0TG9vcFN0YXR1cyhwbGF5ZXI6IE1wcmlzLlBsYXllciB8IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBwbGF5ZXI/LmdldF9sb29wX3N0YXR1cygpID8/IE1wcmlzLkxvb3AuVU5TVVBQT1JURUQ7XG4gIH0sXG4gIGdldFNodWZmbGVTdGF0dXMocGxheWVyOiBNcHJpcy5QbGF5ZXIgfCB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gcGxheWVyPy5nZXRfc2h1ZmZsZV9zdGF0dXMoKSA/PyBNcHJpcy5TaHVmZmxlLlVOU1VQUE9SVEVEO1xuICB9LFxuICBnZXRDYW5SYWlzZShwbGF5ZXI6IE1wcmlzLlBsYXllciB8IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBwbGF5ZXI/LmdldF9jYW5fcmFpc2UoKSA/PyBmYWxzZTtcbiAgfSxcbiAgZ2V0Q2FuTmV4dChwbGF5ZXI6IE1wcmlzLlBsYXllciB8IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBwbGF5ZXI/LmdldF9jYW5fZ29fbmV4dCgpID8/IGZhbHNlO1xuICB9LFxuICBnZXRDYW5CYWNrKHBsYXllcjogTXByaXMuUGxheWVyIHwgdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHBsYXllcj8uZ2V0X2Nhbl9nb19wcmV2aW91cygpID8/IGZhbHNlO1xuICB9LFxuICBnZXRQbGF5YmFja1N0YXR1cyhwbGF5ZXI6IE1wcmlzLlBsYXllciB8IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBwbGF5ZXI/LmdldF9wbGF5YmFja19zdGF0dXMoKSA/PyBNcHJpcy5QbGF5YmFja1N0YXR1cy5TVE9QUEVEO1xuICB9LFxufTtcblxuY29uc3QgYWRkUGxheWVyc1RvTGlzdFN0b3JlID0gKFxuICBsaXN0U3RvcmU6IEdpby5MaXN0U3RvcmUsXG4gIGFsbFBsYXllcnM6IEFjY2Vzc29yPE1wcmlzLlBsYXllcltdPixcbiAgYXBwczogQXBwcy5BcHBzLFxuKSA9PiB7XG4gIGxpc3RTdG9yZS5yZW1vdmVfYWxsKCk7XG5cbiAgbGV0IHNlZW46IFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+ID0ge307XG5cbiAgYWxsUGxheWVycy5nZXQoKS5mb3JFYWNoKChwKSA9PiB7XG4gICAgY29uc3QgdHJhY2tJZCA9IHAuZ2V0X3RyYWNraWQoKTtcbiAgICBjb25zdCBrZXkgPSB0cmFja0lkO1xuICAgIGlmIChzZWVuW2tleV0pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzZWVuW2tleV0gPSB0cnVlO1xuICAgIGNvbnN0IGlkZW50aXR5ID0gcC5nZXRfaWRlbnRpdHkoKTtcblxuICAgIGlmICghaWRlbnRpdHkpIHJldHVybjtcblxuICAgIGNvbnN0IGFwcCA9IHNlYXJjaEFwcEZyb21OYW1lKGFwcHMsIGlkZW50aXR5KTtcbiAgICBjb25zdCBpY29uID0gYXBwPy5bMF0/LmdldF9pY29uX25hbWUoKTtcblxuICAgIGNvbnN0IGl0ZW0gPSBuZXcgUGxheWVyTGlzdEl0ZW1PYmplY3Qoe1xuICAgICAgdGV4dDogaWRlbnRpdHksXG4gICAgICBkZXNrdG9wSWNvbjogaWNvbixcbiAgICAgIGJ1c05hbWU6IHAuZ2V0X2J1c19uYW1lKCksXG4gICAgfSk7XG4gICAgbGlzdFN0b3JlLmFwcGVuZChpdGVtKTtcbiAgfSk7XG59O1xuXG5jb25zdCBmaW5kU2VsZWN0ZWRJdGVtSW5kZXggPSAoXG4gIGFsbFBsYXllcnM6IEFjY2Vzc29yPE1wcmlzLlBsYXllcltdPixcbiAgc2VsZWN0ZWRQbGF5ZXI6IEFjY2Vzc29yPE1wcmlzLlBsYXllcj4sXG4pOiBudW1iZXIgPT4ge1xuICBjb25zdCBmb3VuZEluZGV4OiBudW1iZXIgPSBhbGxQbGF5ZXJzXG4gICAgLmdldCgpXG4gICAgLmZpbmRJbmRleCgocCkgPT4gcC5nZXRfYnVzX25hbWUoKSA9PT0gc2VsZWN0ZWRQbGF5ZXIuZ2V0KCkuZ2V0X2J1c19uYW1lKCkpO1xuICByZXR1cm4gZm91bmRJbmRleCA+IC0xID8gZm91bmRJbmRleCA6IDA7XG59O1xuXG5leHBvcnQgY29uc3QgdXNlUGxheWVySW5mbyA9ICgpID0+IHtcbiAgY29uc3QgbXByaXMgPSBNcHJpcy5nZXRfZGVmYXVsdCgpO1xuICBjb25zdCBwbGF5ZXJzID0gY3JlYXRlQmluZGluZyhtcHJpcywgXCJwbGF5ZXJzXCIpO1xuICBjb25zdCBbc2VsZWN0ZWRQbGF5ZXIsIHNldFNlbGVjdGVkUGxheWVyXSA9IGNyZWF0ZVN0YXRlKFxuICAgIGdldExhc3RQbGF5ZXIocGxheWVycy5nZXQoKSkgPz8gcGxheWVycy5nZXQoKT8uWzBdLFxuICApO1xuXG4gIGNvbnN0IFtzZWxlY3RlZEluZGV4LCBzZXRTZWxlY3RlZEluZGV4XSA9IGNyZWF0ZVN0YXRlKFxuICAgIGZpbmRTZWxlY3RlZEl0ZW1JbmRleChwbGF5ZXJzLCBzZWxlY3RlZFBsYXllciksXG4gICk7XG5cbiAgY29uc3QgYXBwcyA9IGNyZWF0ZUFwcHNJbnN0YW5jZSh7IHZhcmlhbnQ6IFwib3RoZXJcIiB9KTtcbiAgY29uc3QgbGlzdHN0b3JlID0gbmV3IEdpby5MaXN0U3RvcmUoKTtcbiAgYWRkUGxheWVyc1RvTGlzdFN0b3JlKGxpc3RzdG9yZSwgcGxheWVycywgYXBwcyk7XG5cbiAgY29uc3Qgc2VsZWN0aW9uTW9kZWwgPSBuZXcgR3RrLlNpbmdsZVNlbGVjdGlvbih7IG1vZGVsOiBsaXN0c3RvcmUgfSk7XG5cbiAgY29uc3QgZ2V0SXNXYW50ZWRQbGF5ZXIgPSAocGxheWVyOiBNcHJpcy5QbGF5ZXIpID0+XG4gICAgcGxheWVyLmdldF9idXNfbmFtZSgpID09PSBzZWxlY3RlZFBsYXllci5nZXQoKT8uZ2V0X2J1c19uYW1lKCk7XG5cbiAgY29uc3QgcCA9IHNlbGVjdGVkUGxheWVyLmdldCgpO1xuXG4gIGNvbnN0IFt0aXRsZSwgc2V0VGl0bGVdID0gY3JlYXRlU3RhdGUoZ2V0dGVycy5nZXRUaXRsZShwKSk7XG4gIGNvbnN0IFthcnRpc3QsIHNldEFydGlzdF0gPSBjcmVhdGVTdGF0ZShnZXR0ZXJzLmdldEFydGlzdChwKSk7XG4gIGNvbnN0IFthbGJ1bSwgc2V0QWxidW1dID0gY3JlYXRlU3RhdGUoZ2V0dGVycy5nZXRBbGJ1bShwKSk7XG4gIGNvbnN0IFtjb3ZlckFydCwgc2V0Q292ZXJBcnRdID0gY3JlYXRlU3RhdGUoZ2V0dGVycy5nZXRDb3ZlckFydChwKSk7XG4gIGNvbnN0IFtwbGF5YmFja1N0YXR1cywgc2V0UGxheWJhY2tTdGF0dXNdID0gY3JlYXRlU3RhdGUoXG4gICAgcD8uZ2V0X3BsYXliYWNrX3N0YXR1cygpLFxuICApO1xuICBjb25zdCBbcG9zaXRpb24sIHNldFBvc2l0aW9uXSA9IGNyZWF0ZVN0YXRlKGdldHRlcnMuZ2V0UG9zaXRpb24ocCkpO1xuICBjb25zdCBbbGVuZ3RoLCBzZXRMZW5ndGhdID0gY3JlYXRlU3RhdGUoZ2V0dGVycy5nZXRMZW5ndGgocCkpO1xuICBjb25zdCBbdm9sdW1lLCBzZXRWb2x1bWVdID0gY3JlYXRlU3RhdGUoZ2V0dGVycy5nZXRWb2x1bWUocCkpO1xuICBjb25zdCBbbG9vcFN0YXR1cywgc2V0TG9vcFN0YXR1c10gPSBjcmVhdGVTdGF0ZShnZXR0ZXJzLmdldExvb3BTdGF0dXMocCkpO1xuICBjb25zdCBbc2h1ZmZsZVN0YXR1cywgc2V0U2h1ZmZsZVN0YXR1c10gPSBjcmVhdGVTdGF0ZShcbiAgICBnZXR0ZXJzLmdldFNodWZmbGVTdGF0dXMocCksXG4gICk7XG4gIGNvbnN0IFtjYW5SYWlzZSwgc2V0Q2FuUmFpc2VdID0gY3JlYXRlU3RhdGUoZ2V0dGVycy5nZXRDYW5SYWlzZShwKSk7XG4gIGNvbnN0IFtjYW5OZXh0LCBzZXRDYW5OZXh0XSA9IGNyZWF0ZVN0YXRlKGdldHRlcnMuZ2V0Q2FuTmV4dChwKSk7XG4gIGNvbnN0IFtjYW5CYWNrLCBzZXRDYW5CYWNrXSA9IGNyZWF0ZVN0YXRlKGdldHRlcnMuZ2V0Q2FuQmFjayhwKSk7XG4gIGNvbnN0IFtjYW5QbGF5T3JQYXVzZSwgc2V0Q2FuUGxheU9yUGF1c2VdID0gY3JlYXRlU3RhdGUoXG4gICAgZ2V0dGVycy5nZXRDYW5QbGF5T3JQYXVzZShwKSxcbiAgKTtcbiAgY29uc3QgW2Nhbkxvb3AsIHNldENhbkxvb3BdID0gY3JlYXRlU3RhdGUoZ2V0dGVycy5nZXRDYW5Mb29wKHApKTtcbiAgY29uc3QgW2NhblNodWZmbGUsIHNldENhblNodWZmbGVdID0gY3JlYXRlU3RhdGUoZ2V0dGVycy5nZXRDYW5TaHVmZmxlKHApKTtcblxuICBjb25zdCB1bnN1YnNjcmliZVNlbGVjdGVkUGxheWVyID0gc2VsZWN0ZWRQbGF5ZXIuc3Vic2NyaWJlKCgpID0+IHtcbiAgICBjb25zdCBwID0gc2VsZWN0ZWRQbGF5ZXIuZ2V0KCk7XG4gICAgc2V0VGl0bGUoZ2V0dGVycy5nZXRUaXRsZShwKSk7XG4gICAgc2V0QXJ0aXN0KGdldHRlcnMuZ2V0QXJ0aXN0KHApKTtcbiAgICBzZXRQbGF5YmFja1N0YXR1cyhnZXR0ZXJzLmdldFBsYXliYWNrU3RhdHVzKHApKTtcbiAgICBzZXRDb3ZlckFydChnZXR0ZXJzLmdldENvdmVyQXJ0KHApKTtcbiAgICBzZXRBbGJ1bShnZXR0ZXJzLmdldEFsYnVtKHApKTtcbiAgICBzZXRQb3NpdGlvbihnZXR0ZXJzLmdldFBvc2l0aW9uKHApKTtcbiAgICBzZXRMZW5ndGgoZ2V0dGVycy5nZXRMZW5ndGgocCkpO1xuICAgIHNldFZvbHVtZShnZXR0ZXJzLmdldFZvbHVtZShwKSk7XG4gICAgc2V0TG9vcFN0YXR1cyhnZXR0ZXJzLmdldExvb3BTdGF0dXMocCkpO1xuICAgIHNldFNodWZmbGVTdGF0dXMoZ2V0dGVycy5nZXRTaHVmZmxlU3RhdHVzKHApKTtcbiAgICBzZXRDYW5SYWlzZShnZXR0ZXJzLmdldENhblJhaXNlKHApKTtcbiAgICBzZXRDYW5OZXh0KGdldHRlcnMuZ2V0Q2FuTmV4dChwKSk7XG4gICAgc2V0Q2FuQmFjayhnZXR0ZXJzLmdldENhbkJhY2socCkpO1xuICAgIHNldENhblBsYXlPclBhdXNlKGdldHRlcnMuZ2V0Q2FuUGxheU9yUGF1c2UocCkpO1xuICAgIHNldENhbkxvb3AoZ2V0dGVycy5nZXRDYW5Mb29wKHApKTtcbiAgICBzZXRDYW5TaHVmZmxlKGdldHRlcnMuZ2V0Q2FuU2h1ZmZsZShwKSk7XG5cbiAgICBjb25zdCBpbmRleCA9IGZpbmRTZWxlY3RlZEl0ZW1JbmRleChwbGF5ZXJzLCBzZWxlY3RlZFBsYXllcik7XG4gICAgc2V0U2VsZWN0ZWRJbmRleChpbmRleCk7XG4gIH0pO1xuXG4gIHBsYXllcnMuZ2V0KCkuZm9yRWFjaCgocGxheWVyKSA9PiB7XG4gICAgYmluZFByb3BlcnR5KFxuICAgICAgcGxheWVyLFxuICAgICAgXCJ0aXRsZVwiLFxuICAgICAgXCJub3RpZnk6OnRpdGxlXCIsXG4gICAgICBnZXR0ZXJzLmdldFRpdGxlLFxuICAgICAgc2V0VGl0bGUsXG4gICAgICBnZXRJc1dhbnRlZFBsYXllcixcbiAgICApO1xuICAgIGJpbmRQcm9wZXJ0eShcbiAgICAgIHBsYXllcixcbiAgICAgIFwiYXJ0aXN0XCIsXG4gICAgICBcIm5vdGlmeTo6YXJ0aXN0XCIsXG4gICAgICBnZXR0ZXJzLmdldEFydGlzdCxcbiAgICAgIHNldEFydGlzdCxcbiAgICAgIGdldElzV2FudGVkUGxheWVyLFxuICAgICk7XG4gICAgYmluZFByb3BlcnR5KFxuICAgICAgcGxheWVyLFxuICAgICAgXCJhbGJ1bVwiLFxuICAgICAgXCJub3RpZnk6OmFsYnVtXCIsXG4gICAgICBnZXR0ZXJzLmdldEFsYnVtLFxuICAgICAgc2V0QWxidW0sXG4gICAgICBnZXRJc1dhbnRlZFBsYXllcixcbiAgICApO1xuICAgIGJpbmRQcm9wZXJ0eShcbiAgICAgIHBsYXllcixcbiAgICAgIFwiY292ZXJfYXJ0XCIsXG4gICAgICBcIm5vdGlmeTo6Y292ZXItYXJ0XCIsXG4gICAgICBnZXR0ZXJzLmdldENvdmVyQXJ0LFxuICAgICAgc2V0Q292ZXJBcnQsXG4gICAgICBnZXRJc1dhbnRlZFBsYXllcixcbiAgICApO1xuICAgIGJpbmRQcm9wZXJ0eShcbiAgICAgIHBsYXllcixcbiAgICAgIFwicGxheWJhY2tfc3RhdHVzXCIsXG4gICAgICBcIm5vdGlmeTo6cGxheWJhY2stc3RhdHVzXCIsXG4gICAgICBnZXR0ZXJzLmdldFBsYXliYWNrU3RhdHVzLFxuICAgICAgc2V0UGxheWJhY2tTdGF0dXMsXG4gICAgICBnZXRJc1dhbnRlZFBsYXllcixcbiAgICApO1xuICAgIGJpbmRQcm9wZXJ0eShcbiAgICAgIHBsYXllcixcbiAgICAgIFwicG9zaXRpb25cIixcbiAgICAgIFwibm90aWZ5Ojpwb3NpdGlvblwiLFxuICAgICAgZ2V0dGVycy5nZXRQb3NpdGlvbixcbiAgICAgIHNldFBvc2l0aW9uLFxuICAgICAgZ2V0SXNXYW50ZWRQbGF5ZXIsXG4gICAgKTtcbiAgICBiaW5kUHJvcGVydHkoXG4gICAgICBwbGF5ZXIsXG4gICAgICBcImxlbmd0aFwiLFxuICAgICAgXCJub3RpZnk6Omxlbmd0aFwiLFxuICAgICAgZ2V0dGVycy5nZXRMZW5ndGgsXG4gICAgICBzZXRMZW5ndGgsXG4gICAgICBnZXRJc1dhbnRlZFBsYXllcixcbiAgICApO1xuICAgIGJpbmRQcm9wZXJ0eShcbiAgICAgIHBsYXllcixcbiAgICAgIFwidm9sdW1lXCIsXG4gICAgICBcIm5vdGlmeTo6dm9sdW1lXCIsXG4gICAgICBnZXR0ZXJzLmdldFZvbHVtZSxcbiAgICAgIHNldFZvbHVtZSxcbiAgICAgIGdldElzV2FudGVkUGxheWVyLFxuICAgICk7XG4gICAgYmluZFByb3BlcnR5KFxuICAgICAgcGxheWVyLFxuICAgICAgXCJsb29wX3N0YXR1c1wiLFxuICAgICAgXCJub3RpZnk6Omxvb3Atc3RhdHVzXCIsXG4gICAgICBnZXR0ZXJzLmdldExvb3BTdGF0dXMsXG4gICAgICBzZXRMb29wU3RhdHVzLFxuICAgICAgZ2V0SXNXYW50ZWRQbGF5ZXIsXG4gICAgKTtcbiAgICBiaW5kUHJvcGVydHkoXG4gICAgICBwbGF5ZXIsXG4gICAgICBcInNodWZmbGVfc3RhdHVzXCIsXG4gICAgICBcIm5vdGlmeTo6c2h1ZmZsZS1zdGF0dXNcIixcbiAgICAgIGdldHRlcnMuZ2V0U2h1ZmZsZVN0YXR1cyxcbiAgICAgIHNldFNodWZmbGVTdGF0dXMsXG4gICAgICBnZXRJc1dhbnRlZFBsYXllcixcbiAgICApO1xuICAgIGJpbmRQcm9wZXJ0eShcbiAgICAgIHBsYXllcixcbiAgICAgIFwiY2FuX3JhaXNlXCIsXG4gICAgICBcIm5vdGlmeTo6Y2FuLXJhaXNlXCIsXG4gICAgICBnZXR0ZXJzLmdldENhblJhaXNlLFxuICAgICAgc2V0Q2FuUmFpc2UsXG4gICAgICBnZXRJc1dhbnRlZFBsYXllcixcbiAgICApO1xuICAgIGJpbmRQcm9wZXJ0eShcbiAgICAgIHBsYXllcixcbiAgICAgIFwiY2FuX2dvX25leHRcIixcbiAgICAgIFwibm90aWZ5OjpjYW4tZ28tbmV4dFwiLFxuICAgICAgZ2V0dGVycy5nZXRDYW5OZXh0LFxuICAgICAgc2V0Q2FuTmV4dCxcbiAgICAgIGdldElzV2FudGVkUGxheWVyLFxuICAgICk7XG4gICAgYmluZFByb3BlcnR5KFxuICAgICAgcGxheWVyLFxuICAgICAgXCJjYW5fZ29fcHJldmlvdXNcIixcbiAgICAgIFwibm90aWZ5OjpjYW4tZ28tcHJldmlvdXNcIixcbiAgICAgIGdldHRlcnMuZ2V0Q2FuQmFjayxcbiAgICAgIHNldENhbkJhY2ssXG4gICAgICBnZXRJc1dhbnRlZFBsYXllcixcbiAgICApO1xuXG4gICAgcGxheWVyLmNvbm5lY3QoXG4gICAgICBcIm5vdGlmeVwiLFxuICAgICAgY2FsbGJhY2tJZkN1cnJlbnQoKHApID0+IHtcbiAgICAgICAgc2V0Q2FuUGxheU9yUGF1c2UoZ2V0dGVycy5nZXRDYW5QbGF5T3JQYXVzZShwKSk7XG4gICAgICAgIHNldENhbkxvb3AoZ2V0dGVycy5nZXRDYW5Mb29wKHApKTtcbiAgICAgICAgc2V0Q2FuU2h1ZmZsZShnZXR0ZXJzLmdldENhblNodWZmbGUocCkpO1xuICAgICAgfSwgZ2V0SXNXYW50ZWRQbGF5ZXIpLFxuICAgICk7XG5cbiAgICAvLyB3ZSB1cGRhdGUgdGhlIHNlbGVjdGVkIHBsYXllciB3aGVuIHRoZSBsYXN0IHBsYXllciBpcyBjaGFuZ2VkXG4gICAgcGxheWVyLmNvbm5lY3QoXCJub3RpZnk6OnRyYWNraWRcIiwgKHApID0+IHtcbiAgICAgIGNvbnN0IGlzTGFzdFBsYXllcjogYm9vbGVhbiA9IGdldElzTGFzdFBsYXllcihwKTtcbiAgICAgIGlmICghaXNMYXN0UGxheWVyKSByZXR1cm47XG5cbiAgICAgIHNldFNlbGVjdGVkUGxheWVyKHApO1xuICAgICAgYWRkUGxheWVyc1RvTGlzdFN0b3JlKGxpc3RzdG9yZSwgcGxheWVycywgYXBwcyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGNvbnN0IHVuc3Vic2NyaWJlQWxsUGxheWVycyA9IHBsYXllcnMuc3Vic2NyaWJlKCgpID0+IHtcbiAgICBhZGRQbGF5ZXJzVG9MaXN0U3RvcmUobGlzdHN0b3JlLCBwbGF5ZXJzLCBhcHBzKTtcbiAgfSk7XG5cbiAgb25DbGVhbnVwKCgpID0+IHtcbiAgICB1bnN1YnNjcmliZVNlbGVjdGVkUGxheWVyKCk7XG4gICAgdW5zdWJzY3JpYmVBbGxQbGF5ZXJzKCk7XG4gIH0pO1xuXG4gIHJldHVybiB7XG4gICAgcGxheWVySW5mbzoge1xuICAgICAgdGl0bGUsXG4gICAgICBhcnRpc3QsXG4gICAgICBhbGJ1bSxcbiAgICAgIGNvdmVyQXJ0LFxuICAgICAgcGxheWJhY2tTdGF0dXMsXG4gICAgICBwb3NpdGlvbixcbiAgICAgIGxlbmd0aCxcbiAgICAgIHZvbHVtZSxcbiAgICAgIGxvb3BTdGF0dXMsXG4gICAgICBzaHVmZmxlU3RhdHVzLFxuICAgICAgY2FuUmFpc2UsXG4gICAgICBjYW5OZXh0LFxuICAgICAgY2FuQmFjayxcbiAgICAgIGNhblBsYXlPclBhdXNlLFxuICAgICAgY2FuTG9vcCxcbiAgICAgIGNhblNodWZmbGUsXG4gICAgfSxcbiAgICBzZWxlY3RlZFBsYXllcixcbiAgICBzZXRTZWxlY3RlZFBsYXllcixcbiAgICBzZWxlY3Rpb25Nb2RlbCxcbiAgICBzZWxlY3RlZEluZGV4LFxuICAgIGFsbFBsYXllcnM6IHBsYXllcnMsXG4gIH07XG59O1xuIiwgImltcG9ydCBNcHJpcyBmcm9tIFwiZ2k6Ly9Bc3RhbE1wcmlzXCI7XG5cbmV4cG9ydCBjb25zdCBnZXRJc0xhc3RQbGF5ZXIgPSAocDogTXByaXMuUGxheWVyKSA9PiB7XG4gIHJldHVybiBwLmdldF9idXNfbmFtZSgpLmluY2x1ZGVzKFwicGxheWVyY3RsZFwiKTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRMYXN0UGxheWVyID0gKHBsYXllcnM6IE1wcmlzLlBsYXllcltdKSA9PiB7XG4gIHJldHVybiBwbGF5ZXJzLmZpbmQoKHApID0+IGdldElzTGFzdFBsYXllcihwKSk7XG59O1xuIiwgIi8qKlxuICogSW4gdGhlIGZ1dHVyZSBJIHdvdWxkIGxpa2UgdG8gbWFrZSB0eXBlIGRlY2xhcmF0aW9uIGluIGRlY29yYXRvcnMgb3B0aW9uYWxcbiAqIGFuZCBpbmZlciBpdCBmcm9tIHR5cGVzY3JpcHQgdHlwZXMgYXQgdHJhbnNwaWxlIHRpbWUuIEN1cnJlbnRseSwgd2UgY291bGRcbiAqIGVpdGhlciB1c2Ugc3RhZ2UgMiBkZWNvcmF0b3JzIHdpdGggdGhlIFwiZW1pdERlY29yYXRvck1ldGFkYXRhXCIgYW5kXG4gKiBcImV4cGVyaW1lbnRhbERlY29yYXRvcnNcIiB0c2NvbmZpZyBvcHRpb25zLiBIb3dldmVyLCBtZXRhZGF0YSBpcyBub3Qgc3VwcG9ydGVkXG4gKiBieSBlc2J1aWxkIHdoaWNoIGlzIHdoYXQgSSdtIG1vc3RseSB0YXJnZXRpbmcgYXMgdGhlIGJ1bmRsZXIgZm9yIHBlcmZvcm1hbmNlXG4gKiByZWFzb25zLiBodHRwczovL2dpdGh1Yi5jb20vZXZhbncvZXNidWlsZC9pc3N1ZXMvMjU3XG4gKiBIb3dldmVyLCBJIGJlbGlldmUgdGhhdCB3ZSBzaG91bGQgbm90IHVzZSBzdGFnZSAyIGFueW1vcmUsXG4gKiBzbyBJJ20gd2FpdGluZyBmb3IgYSBiZXR0ZXIgYWx0ZXJuYXRpdmUuXG4gKi9cblxuaW1wb3J0IEdPYmplY3QgZnJvbSBcImdpOi8vR09iamVjdFwiXG5pbXBvcnQgR0xpYiBmcm9tIFwiZ2k6Ly9HTGliXCJcbmltcG9ydCB7IGRlZmluZVByb3BlcnR5R2V0dGVyLCBrZWJhYmlmeSB9IGZyb20gXCIuL3V0aWwuanNcIlxuXG5jb25zdCBwcml2ID0gU3ltYm9sKFwiZ29iamVjdCBwcml2YXRlXCIpXG5jb25zdCB7IGRlZmluZVByb3BlcnR5LCBmcm9tRW50cmllcywgZW50cmllcyB9ID0gT2JqZWN0XG5jb25zdCB7IE9iamVjdDogR09iaiwgcmVnaXN0ZXJDbGFzcyB9ID0gR09iamVjdFxuXG5leHBvcnQgeyBHT2JqZWN0IGFzIGRlZmF1bHQgfVxuZXhwb3J0IHsgR09iaiBhcyBPYmplY3QgfVxuXG5leHBvcnQgY29uc3QgU2lnbmFsRmxhZ3MgPSBHT2JqZWN0LlNpZ25hbEZsYWdzXG5leHBvcnQgdHlwZSBTaWduYWxGbGFncyA9IEdPYmplY3QuU2lnbmFsRmxhZ3NcblxuZXhwb3J0IGNvbnN0IEFjY3VtdWxhdG9yVHlwZSA9IEdPYmplY3QuQWNjdW11bGF0b3JUeXBlXG5leHBvcnQgdHlwZSBBY2N1bXVsYXRvclR5cGUgPSBHT2JqZWN0LkFjY3VtdWxhdG9yVHlwZVxuXG5leHBvcnQgdHlwZSBQYXJhbVNwZWM8VCA9IHVua25vd24+ID0gR09iamVjdC5QYXJhbVNwZWM8VD5cbmV4cG9ydCBjb25zdCBQYXJhbVNwZWMgPSBHT2JqZWN0LlBhcmFtU3BlY1xuXG5leHBvcnQgdHlwZSBQYXJhbUZsYWdzID0gR09iamVjdC5QYXJhbUZsYWdzXG5leHBvcnQgY29uc3QgUGFyYW1GbGFncyA9IEdPYmplY3QuUGFyYW1GbGFnc1xuXG5leHBvcnQgdHlwZSBHVHlwZTxUID0gdW5rbm93bj4gPSBHT2JqZWN0LkdUeXBlPFQ+XG5cbnR5cGUgR09iaiA9IEdPYmplY3QuT2JqZWN0XG5cbmludGVyZmFjZSBHT2JqUHJpdmF0ZSBleHRlbmRzIEdPYmoge1xuICAgIFtwcml2XTogUmVjb3JkPHN0cmluZywgYW55PlxufVxuXG50eXBlIE1ldGEgPSB7XG4gICAgcHJvcGVydGllcz86IHtcbiAgICAgICAgW2ZpZWxkTmFtZTogc3RyaW5nXToge1xuICAgICAgICAgICAgZmxhZ3M6IFBhcmFtRmxhZ3NcbiAgICAgICAgICAgIHR5cGU6IFByb3BlcnR5VHlwZURlY2xhcmF0aW9uPHVua25vd24+XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2lnbmFscz86IHtcbiAgICAgICAgW2tleTogc3RyaW5nXToge1xuICAgICAgICAgICAgZGVmYXVsdD86IGJvb2xlYW5cbiAgICAgICAgICAgIGZsYWdzPzogU2lnbmFsRmxhZ3NcbiAgICAgICAgICAgIGFjY3VtdWxhdG9yPzogQWNjdW11bGF0b3JUeXBlXG4gICAgICAgICAgICByZXR1cm5fdHlwZT86IEdUeXBlXG4gICAgICAgICAgICBwYXJhbV90eXBlcz86IEFycmF5PEdUeXBlPlxuICAgICAgICAgICAgbWV0aG9kOiAoLi4uYXJnOiBhbnlbXSkgPT4gdW5rbm93blxuICAgICAgICB9XG4gICAgfVxufVxuXG50eXBlIENvbnRleHQgPSB7IHByaXZhdGU6IGZhbHNlOyBzdGF0aWM6IGZhbHNlOyBuYW1lOiBzdHJpbmcgfVxudHlwZSBQcm9wZXJ0eUNvbnRleHQ8VD4gPSBDbGFzc0ZpZWxkRGVjb3JhdG9yQ29udGV4dDxHT2JqLCBUPiAmIENvbnRleHRcbnR5cGUgR2V0dGVyQ29udGV4dDxUPiA9IENsYXNzR2V0dGVyRGVjb3JhdG9yQ29udGV4dDxHT2JqLCBUPiAmIENvbnRleHRcbnR5cGUgU2V0dGVyQ29udGV4dDxUPiA9IENsYXNzU2V0dGVyRGVjb3JhdG9yQ29udGV4dDxHT2JqLCBUPiAmIENvbnRleHRcbnR5cGUgU2lnbmFsQ29udGV4dDxUIGV4dGVuZHMgKCkgPT4gYW55PiA9IENsYXNzTWV0aG9kRGVjb3JhdG9yQ29udGV4dDxHT2JqLCBUPiAmIENvbnRleHRcblxudHlwZSBTaWduYWxPcHRpb25zID0ge1xuICAgIGRlZmF1bHQ/OiBib29sZWFuXG4gICAgZmxhZ3M/OiBTaWduYWxGbGFnc1xuICAgIGFjY3VtdWxhdG9yPzogQWNjdW11bGF0b3JUeXBlXG59XG5cbnR5cGUgUHJvcGVydHlUeXBlRGVjbGFyYXRpb248VD4gPVxuICAgIHwgKChuYW1lOiBzdHJpbmcsIGZsYWdzOiBQYXJhbUZsYWdzKSA9PiBQYXJhbVNwZWM8VD4pXG4gICAgfCBQYXJhbVNwZWM8VD5cbiAgICB8IHsgJGd0eXBlOiBHVHlwZTxUPiB9XG5cbmZ1bmN0aW9uIGFzc2VydEZpZWxkKFxuICAgIGN0eDogQ2xhc3NGaWVsZERlY29yYXRvckNvbnRleHQgfCBDbGFzc0dldHRlckRlY29yYXRvckNvbnRleHQgfCBDbGFzc1NldHRlckRlY29yYXRvckNvbnRleHQsXG4pOiBzdHJpbmcge1xuICAgIGlmIChjdHgucHJpdmF0ZSkgdGhyb3cgRXJyb3IoXCJwcml2YXRlIGZpZWxkcyBhcmUgbm90IHN1cHBvcnRlZFwiKVxuICAgIGlmIChjdHguc3RhdGljKSB0aHJvdyBFcnJvcihcInN0YXRpYyBmaWVsZHMgYXJlIG5vdCBzdXBwb3J0ZWRcIilcblxuICAgIGlmICh0eXBlb2YgY3R4Lm5hbWUgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoXCJvbmx5IHN0cmluZ3MgY2FuIGJlIGdvYmplY3QgcHJvcGVydHkga2V5c1wiKVxuICAgIH1cblxuICAgIHJldHVybiBjdHgubmFtZVxufVxuXG4vKipcbiAqIERlZmluZXMgYSByZWFkYWJsZSAqYW5kKiB3cml0ZWFibGUgcHJvcGVydHkgdG8gYmUgcmVnaXN0ZXJlZCB3aGVuIHVzaW5nIHRoZSB7QGxpbmsgcmVnaXN0ZXJ9IGRlY29yYXRvci5cbiAqXG4gKiBFeGFtcGxlOlxuICogYGBgdHNcbiAqIGNsYXNzIHtcbiAqICAgICBcXEBwcm9wZXJ0eShTdHJpbmcpIG15UHJvcCA9IFwiXCJcbiAqIH1cbiAqIGBgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gcHJvcGVydHk8VD4odHlwZURlY2xhcmF0aW9uOiBQcm9wZXJ0eVR5cGVEZWNsYXJhdGlvbjxUPikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoXG4gICAgICAgIF86IHZvaWQsXG4gICAgICAgIGN0eDogUHJvcGVydHlDb250ZXh0PFQ+LFxuICAgICAgICBvcHRpb25zPzogeyBtZXRhT25seTogdHJ1ZSB9LFxuICAgICk6ICh0aGlzOiBHT2JqLCBpbml0OiBUKSA9PiBUIHtcbiAgICAgICAgY29uc3QgZmllbGROYW1lID0gYXNzZXJ0RmllbGQoY3R4KVxuICAgICAgICBjb25zdCBrZXkgPSBrZWJhYmlmeShmaWVsZE5hbWUpXG4gICAgICAgIGNvbnN0IG1ldGE6IFBhcnRpYWw8TWV0YT4gPSBjdHgubWV0YWRhdGEhXG5cbiAgICAgICAgbWV0YS5wcm9wZXJ0aWVzID8/PSB7fVxuICAgICAgICBtZXRhLnByb3BlcnRpZXNbZmllbGROYW1lXSA9IHsgZmxhZ3M6IFBhcmFtRmxhZ3MuUkVBRFdSSVRFLCB0eXBlOiB0eXBlRGVjbGFyYXRpb24gfVxuXG4gICAgICAgIGN0eC5hZGRJbml0aWFsaXplcihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBkZWZpbmVQcm9wZXJ0eUdldHRlcih0aGlzLCBmaWVsZE5hbWUgYXMgRXh0cmFjdDxrZXlvZiBHT2JqLCBzdHJpbmc+KVxuXG4gICAgICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLm1ldGFPbmx5KSByZXR1cm5cblxuICAgICAgICAgICAgZGVmaW5lUHJvcGVydHkodGhpcywgZmllbGROYW1lLCB7XG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNldCh2OiBUKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzW3ByaXZdW2tleV0gIT09IHYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNbcHJpdl1ba2V5XSA9IHZcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90aWZ5KGtleSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZ2V0KCk6IFQge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1twcml2XVtrZXldXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0gc2F0aXNmaWVzIFRoaXNUeXBlPEdPYmpQcml2YXRlPilcbiAgICAgICAgfSlcblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGluaXQ6IFQpIHtcbiAgICAgICAgICAgIGNvbnN0IGRpY3QgPSAoKHRoaXMgYXMgR09ialByaXZhdGUpW3ByaXZdID8/PSB7fSlcbiAgICAgICAgICAgIGRpY3Rba2V5XSA9IGluaXRcbiAgICAgICAgICAgIHJldHVybiBpbml0XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qKlxuICogRGVmaW5lcyBhIHJlYWQtb25seSBwcm9wZXJ0eSB0byBiZSByZWdpc3RlcmVkIHdoZW4gdXNpbmcgdGhlIHtAbGluayByZWdpc3Rlcn0gZGVjb3JhdG9yLlxuICogSWYgdGhlIGdldHRlciBoYXMgYSBzZXR0ZXIgcGFpciBkZWNvcmF0ZWQgd2l0aCB0aGUge0BsaW5rIHNldHRlcn0gZGVjb3JhdG9yIHRoZSBwcm9wZXJ0eSB3aWxsIGJlIHJlYWRhYmxlICphbmQqIHdyaXRlYWJsZS5cbiAqXG4gKiBFeGFtcGxlOlxuICogYGBgdHNcbiAqIGNsYXNzIHtcbiAqICAgICBcXEBzZXR0ZXIoU3RyaW5nKVxuICogICAgIHNldCBteVByb3AodmFsdWU6IHN0cmluZykge1xuICogICAgICAgICAvL1xuICogICAgIH1cbiAqXG4gKiAgICAgXFxAZ2V0dGVyKFN0cmluZylcbiAqICAgICBnZXQgbXlQcm9wKCk6IHN0cmluZyB7XG4gKiAgICAgICAgIHJldHVybiBcIlwiXG4gKiAgICAgfVxuICogfVxuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXR0ZXI8VD4odHlwZURlY2xhcmF0aW9uOiBQcm9wZXJ0eVR5cGVEZWNsYXJhdGlvbjxUPikge1xuICAgIHJldHVybiBmdW5jdGlvbiBnZXR0ZXIoZ2V0dGVyOiAodGhpczogR09iaikgPT4gVCwgY3R4OiBHZXR0ZXJDb250ZXh0PFQ+KTogKHRoaXM6IEdPYmopID0+IFQge1xuICAgICAgICBjb25zdCBmaWVsZE5hbWUgPSBhc3NlcnRGaWVsZChjdHgpXG4gICAgICAgIGNvbnN0IG1ldGE6IFBhcnRpYWw8TWV0YT4gPSBjdHgubWV0YWRhdGEhXG4gICAgICAgIGNvbnN0IHByb3BzID0gKG1ldGEucHJvcGVydGllcyA/Pz0ge30pXG4gICAgICAgIGlmIChmaWVsZE5hbWUgaW4gcHJvcHMpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgZmxhZ3MsIHR5cGUgfSA9IHByb3BzW2ZpZWxkTmFtZV1cbiAgICAgICAgICAgIHByb3BzW2ZpZWxkTmFtZV0gPSB7IGZsYWdzOiBmbGFncyB8IFBhcmFtRmxhZ3MuUkVBREFCTEUsIHR5cGUgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJvcHNbZmllbGROYW1lXSA9IHsgZmxhZ3M6IFBhcmFtRmxhZ3MuUkVBREFCTEUsIHR5cGU6IHR5cGVEZWNsYXJhdGlvbiB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGdldHRlclxuICAgIH1cbn1cblxuLyoqXG4gKiBEZWZpbmVzIGEgd3JpdGUtb25seSBwcm9wZXJ0eSB0byBiZSByZWdpc3RlcmVkIHdoZW4gdXNpbmcgdGhlIHtAbGluayByZWdpc3Rlcn0gZGVjb3JhdG9yLlxuICogSWYgdGhlIHNldHRlciBoYXMgYSBnZXR0ZXIgcGFpciBkZWNvcmF0ZWQgd2l0aCB0aGUge0BsaW5rIGdldHRlcn0gZGVjb3JhdG9yIHRoZSBwcm9wZXJ0eSB3aWxsIGJlIHdyaXRlYWJsZSAqYW5kKiByZWFkYWJsZS5cbiAqXG4gKiBFeGFtcGxlOlxuICogYGBgdHNcbiAqIGNsYXNzIHtcbiAqICAgICBcXEBzZXR0ZXIoU3RyaW5nKVxuICogICAgIHNldCBteVByb3AodmFsdWU6IHN0cmluZykge1xuICogICAgICAgICAvL1xuICogICAgIH1cbiAqXG4gKiAgICAgXFxAZ2V0dGVyKFN0cmluZylcbiAqICAgICBnZXQgbXlQcm9wKCk6IHN0cmluZyB7XG4gKiAgICAgICAgIHJldHVybiBcIlwiXG4gKiAgICAgfVxuICogfVxuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXR0ZXI8VD4odHlwZURlY2xhcmF0aW9uOiBQcm9wZXJ0eVR5cGVEZWNsYXJhdGlvbjxUPikge1xuICAgIHJldHVybiBmdW5jdGlvbiBzZXR0ZXIoXG4gICAgICAgIHNldHRlcjogKHRoaXM6IEdPYmosIHZhbHVlOiBUKSA9PiB2b2lkLFxuICAgICAgICBjdHg6IFNldHRlckNvbnRleHQ8VD4sXG4gICAgKTogKHRoaXM6IEdPYmosIHZhbHVlOiBUKSA9PiB2b2lkIHtcbiAgICAgICAgY29uc3QgZmllbGROYW1lID0gYXNzZXJ0RmllbGQoY3R4KVxuICAgICAgICBjb25zdCBtZXRhOiBQYXJ0aWFsPE1ldGE+ID0gY3R4Lm1ldGFkYXRhIVxuICAgICAgICBjb25zdCBwcm9wcyA9IChtZXRhLnByb3BlcnRpZXMgPz89IHt9KVxuICAgICAgICBpZiAoZmllbGROYW1lIGluIHByb3BzKSB7XG4gICAgICAgICAgICBjb25zdCB7IGZsYWdzLCB0eXBlIH0gPSBwcm9wc1tmaWVsZE5hbWVdXG4gICAgICAgICAgICBwcm9wc1tmaWVsZE5hbWVdID0geyBmbGFnczogZmxhZ3MgfCBQYXJhbUZsYWdzLldSSVRBQkxFLCB0eXBlIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByb3BzW2ZpZWxkTmFtZV0gPSB7IGZsYWdzOiBQYXJhbUZsYWdzLldSSVRBQkxFLCB0eXBlOiB0eXBlRGVjbGFyYXRpb24gfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZXR0ZXJcbiAgICB9XG59XG5cbnR5cGUgUGFyYW1UeXBlPFA+ID0gUCBleHRlbmRzIHsgJGd0eXBlOiBHVHlwZTxpbmZlciBUPiB9ID8gVCA6IFAgZXh0ZW5kcyBHVHlwZTxpbmZlciBUPiA/IFQgOiBuZXZlclxuXG50eXBlIFBhcmFtVHlwZXM8UGFyYW1zPiA9IHtcbiAgICBbSyBpbiBrZXlvZiBQYXJhbXNdOiBQYXJhbVR5cGU8UGFyYW1zW0tdPlxufVxuXG4vKipcbiAqIERlZmluZXMgYSBzaWduYWwgdG8gYmUgcmVnaXN0ZXJlZCB3aGVuIHVzaW5nIHRoZSB7QGxpbmsgcmVnaXN0ZXJ9IGRlY29yYXRvci5cbiAqXG4gKiBFeGFtcGxlOlxuICogYGBgdHNcbiAqIGNsYXNzIHtcbiAqICAgICBcXEBzaWduYWwoW1N0cmluZywgTnVtYmVyXSwgQm9vbGVhbiwge1xuICogICAgICAgICBhY2N1bXVsYXRvcjogQWNjdW11bGF0b3JUeXBlLkZJUlNUX1dJTlNcbiAqICAgICB9KVxuICogICAgIG15U2lnbmFsKHN0cjogc3RyaW5nLCBuOiBudW1iZXIpOiBib29sZWFuIHtcbiAqICAgICAgICAgLy8gZGVmYXVsdCBoYW5kbGVyXG4gKiAgICAgICAgIHJldHVybiBmYWxzZVxuICogICAgIH1cbiAqIH1cbiAqIGBgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gc2lnbmFsPFxuICAgIGNvbnN0IFBhcmFtcyBleHRlbmRzIEFycmF5PHsgJGd0eXBlOiBHVHlwZSB9IHwgR1R5cGU+LFxuICAgIFJldHVybiBleHRlbmRzIHsgJGd0eXBlOiBHVHlwZSB9IHwgR1R5cGUsXG4+KFxuICAgIHBhcmFtczogUGFyYW1zLFxuICAgIHJldHVyblR5cGU/OiBSZXR1cm4sXG4gICAgb3B0aW9ucz86IFNpZ25hbE9wdGlvbnMsXG4pOiAoXG4gICAgbWV0aG9kOiAodGhpczogR09iaiwgLi4uYXJnczogUGFyYW1UeXBlczxQYXJhbXM+KSA9PiBQYXJhbVR5cGU8UmV0dXJuPixcbiAgICBjdHg6IFNpZ25hbENvbnRleHQ8dHlwZW9mIG1ldGhvZD4sXG4pID0+IHR5cGVvZiBtZXRob2RcblxuLyoqXG4gKiBEZWZpbmVzIGEgc2lnbmFsIHRvIGJlIHJlZ2lzdGVyZWQgd2hlbiB1c2luZyB0aGUge0BsaW5rIHJlZ2lzdGVyfSBkZWNvcmF0b3IuXG4gKlxuICogRXhhbXBsZTpcbiAqIGBgYHRzXG4gKiBjbGFzcyB7XG4gKiAgICAgXFxAc2lnbmFsKFN0cmluZywgTnVtYmVyKVxuICogICAgIG15U2lnbmFsKHN0cjogc3RyaW5nLCBuOiBudW1iZXIpOiB2b2lkIHtcbiAqICAgICAgICAgLy8gZGVmYXVsdCBoYW5kbGVyXG4gKiAgICAgfVxuICogfVxuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaWduYWw8UGFyYW1zIGV4dGVuZHMgQXJyYXk8eyAkZ3R5cGU6IEdUeXBlIH0gfCBHVHlwZT4+KFxuICAgIC4uLnBhcmFtczogUGFyYW1zXG4pOiAoXG4gICAgbWV0aG9kOiAodGhpczogR09iamVjdC5PYmplY3QsIC4uLmFyZ3M6IFBhcmFtVHlwZXM8UGFyYW1zPikgPT4gdm9pZCxcbiAgICBjdHg6IFNpZ25hbENvbnRleHQ8dHlwZW9mIG1ldGhvZD4sXG4pID0+IHR5cGVvZiBtZXRob2RcblxuZXhwb3J0IGZ1bmN0aW9uIHNpZ25hbDxcbiAgICBQYXJhbXMgZXh0ZW5kcyBBcnJheTx7ICRndHlwZTogR1R5cGUgfSB8IEdUeXBlPixcbiAgICBSZXR1cm4gZXh0ZW5kcyB7ICRndHlwZTogR1R5cGUgfSB8IEdUeXBlLFxuPihcbiAgICAuLi5hcmdzOiBQYXJhbXMgfCBbcGFyYW1zOiBQYXJhbXMsIHJldHVyblR5cGU/OiBSZXR1cm4sIG9wdGlvbnM/OiBTaWduYWxPcHRpb25zXVxuKTogKFxuICAgIG1ldGhvZDogKHRoaXM6IEdPYmosIC4uLmFyZ3M6IFBhcmFtVHlwZXM8UGFyYW1zPikgPT4gUGFyYW1UeXBlPFJldHVybj4gfCB2b2lkLFxuICAgIGN0eDogU2lnbmFsQ29udGV4dDx0eXBlb2YgbWV0aG9kPixcbikgPT4gdHlwZW9mIG1ldGhvZCB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChtZXRob2QsIGN0eCkge1xuICAgICAgICBpZiAoY3R4LnByaXZhdGUpIHRocm93IEVycm9yKFwicHJpdmF0ZSBmaWVsZHMgYXJlIG5vdCBzdXBwb3J0ZWRcIilcbiAgICAgICAgaWYgKGN0eC5zdGF0aWMpIHRocm93IEVycm9yKFwic3RhdGljIGZpZWxkcyBhcmUgbm90IHN1cHBvcnRlZFwiKVxuXG4gICAgICAgIGlmICh0eXBlb2YgY3R4Lm5hbWUgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKFwib25seSBzdHJpbmdzIGNhbiBiZSBnb2JqZWN0IHNpZ25hbHNcIilcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHNpZ25hbE5hbWUgPSBrZWJhYmlmeShjdHgubmFtZSlcbiAgICAgICAgY29uc3QgbWV0YTogUGFydGlhbDxNZXRhPiA9IGN0eC5tZXRhZGF0YSFcbiAgICAgICAgY29uc3Qgc2lnbmFscyA9IChtZXRhLnNpZ25hbHMgPz89IHt9KVxuXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGFyZ3NbMF0pKSB7XG4gICAgICAgICAgICBjb25zdCBbcGFyYW1zLCByZXR1cm5UeXBlLCBvcHRpb25zXSA9IGFyZ3MgYXMgW1xuICAgICAgICAgICAgICAgIHBhcmFtczogUGFyYW1zLFxuICAgICAgICAgICAgICAgIHJldHVyblR5cGU/OiBSZXR1cm4sXG4gICAgICAgICAgICAgICAgb3B0aW9ucz86IFNpZ25hbE9wdGlvbnMsXG4gICAgICAgICAgICBdXG5cbiAgICAgICAgICAgIHNpZ25hbHNbc2lnbmFsTmFtZV0gPSB7XG4gICAgICAgICAgICAgICAgbWV0aG9kLFxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IG9wdGlvbnM/LmRlZmF1bHQgPz8gdHJ1ZSxcbiAgICAgICAgICAgICAgICBwYXJhbV90eXBlczogcGFyYW1zLm1hcCgoaSkgPT4gKFwiJGd0eXBlXCIgaW4gaSA/IGkuJGd0eXBlIDogaSkpLFxuICAgICAgICAgICAgICAgIC4uLihyZXR1cm5UeXBlICYmIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuX3R5cGU6IFwiJGd0eXBlXCIgaW4gcmV0dXJuVHlwZSA/IHJldHVyblR5cGUuJGd0eXBlIDogcmV0dXJuVHlwZSxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAuLi4ob3B0aW9ucz8uZmxhZ3MgJiYge1xuICAgICAgICAgICAgICAgICAgICBmbGFnczogb3B0aW9ucy5mbGFncyxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAuLi4odHlwZW9mIG9wdGlvbnM/LmFjY3VtdWxhdG9yID09PSBcIm51bWJlclwiICYmIHtcbiAgICAgICAgICAgICAgICAgICAgYWNjdW11bGF0b3I6IG9wdGlvbnMuYWNjdW11bGF0b3IsXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBwYXJhbXMgPSBhcmdzIGFzIFBhcmFtc1xuICAgICAgICAgICAgc2lnbmFsc1tzaWduYWxOYW1lXSA9IHtcbiAgICAgICAgICAgICAgICBtZXRob2QsXG4gICAgICAgICAgICAgICAgcGFyYW1fdHlwZXM6IHBhcmFtcy5tYXAoKGkpID0+IChcIiRndHlwZVwiIGluIGkgPyBpLiRndHlwZSA6IGkpKSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoLi4ucGFyYW1zKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lbWl0KHNpZ25hbE5hbWUsIC4uLnBhcmFtcykgYXMgUGFyYW1UeXBlPFJldHVybj5cbiAgICAgICAgfVxuICAgIH1cbn1cblxuY29uc3QgTUFYSU5UID0gMiAqKiAzMSAtIDFcbmNvbnN0IE1JTklOVCA9IC0oMiAqKiAzMSlcbmNvbnN0IE1BWFVJTlQgPSAyICoqIDMyIC0gMVxuY29uc3QgTUFYRkxPQVQgPSAzLjQwMjgyMzVlMzhcbmNvbnN0IE1JTkZMT0FUID0gLTMuNDAyODIzNWUzOFxuY29uc3QgTUlOSU5UNjQgPSBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUlxuY29uc3QgTUFYSU5UNjQgPSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUlxuXG5mdW5jdGlvbiBwc3BlY0Zyb21HVHlwZSh0eXBlOiBHVHlwZTx1bmtub3duPiwgbmFtZTogc3RyaW5nLCBmbGFnczogUGFyYW1GbGFncykge1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIEdPYmplY3QuVFlQRV9CT09MRUFOOlxuICAgICAgICAgICAgcmV0dXJuIFBhcmFtU3BlYy5ib29sZWFuKG5hbWUsIFwiXCIsIFwiXCIsIGZsYWdzLCBmYWxzZSlcbiAgICAgICAgY2FzZSBHT2JqZWN0LlRZUEVfU1RSSU5HOlxuICAgICAgICAgICAgcmV0dXJuIFBhcmFtU3BlYy5zdHJpbmcobmFtZSwgXCJcIiwgXCJcIiwgZmxhZ3MsIFwiXCIpXG4gICAgICAgIGNhc2UgR09iamVjdC5UWVBFX0lOVDpcbiAgICAgICAgICAgIHJldHVybiBQYXJhbVNwZWMuaW50KG5hbWUsIFwiXCIsIFwiXCIsIGZsYWdzLCBNSU5JTlQsIE1BWElOVCwgMClcbiAgICAgICAgY2FzZSBHT2JqZWN0LlRZUEVfVUlOVDpcbiAgICAgICAgICAgIHJldHVybiBQYXJhbVNwZWMudWludChuYW1lLCBcIlwiLCBcIlwiLCBmbGFncywgMCwgTUFYVUlOVCwgMClcbiAgICAgICAgY2FzZSBHT2JqZWN0LlRZUEVfSU5UNjQ6XG4gICAgICAgICAgICByZXR1cm4gUGFyYW1TcGVjLmludDY0KG5hbWUsIFwiXCIsIFwiXCIsIGZsYWdzLCBNSU5JTlQ2NCwgTUFYSU5UNjQsIDApXG4gICAgICAgIGNhc2UgR09iamVjdC5UWVBFX1VJTlQ2NDpcbiAgICAgICAgICAgIHJldHVybiBQYXJhbVNwZWMudWludDY0KG5hbWUsIFwiXCIsIFwiXCIsIGZsYWdzLCAwLCBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUiwgMClcbiAgICAgICAgY2FzZSBHT2JqZWN0LlRZUEVfRkxPQVQ6XG4gICAgICAgICAgICByZXR1cm4gUGFyYW1TcGVjLmZsb2F0KG5hbWUsIFwiXCIsIFwiXCIsIGZsYWdzLCBNSU5GTE9BVCwgTUFYRkxPQVQsIDApXG4gICAgICAgIGNhc2UgR09iamVjdC5UWVBFX0RPVUJMRTpcbiAgICAgICAgICAgIHJldHVybiBQYXJhbVNwZWMuZG91YmxlKG5hbWUsIFwiXCIsIFwiXCIsIGZsYWdzLCBOdW1iZXIuTUlOX1ZBTFVFLCBOdW1iZXIuTUlOX1ZBTFVFLCAwKVxuICAgICAgICBjYXNlIEdPYmplY3QuVFlQRV9KU09CSkVDVDpcbiAgICAgICAgICAgIHJldHVybiBQYXJhbVNwZWMuanNvYmplY3QobmFtZSwgXCJcIiwgXCJcIiwgZmxhZ3MpXG4gICAgICAgIGNhc2UgR09iamVjdC5UWVBFX1ZBUklBTlQ6XG4gICAgICAgICAgICByZXR1cm4gUGFyYW1TcGVjLm9iamVjdChuYW1lLCBcIlwiLCBcIlwiLCBmbGFncyBhcyBhbnksIEdMaWIuVmFyaWFudClcblxuICAgICAgICBjYXNlIEdPYmplY3QuVFlQRV9FTlVNOlxuICAgICAgICBjYXNlIEdPYmplY3QuVFlQRV9JTlRFUkZBQ0U6XG4gICAgICAgIGNhc2UgR09iamVjdC5UWVBFX0JPWEVEOlxuICAgICAgICBjYXNlIEdPYmplY3QuVFlQRV9QT0lOVEVSOlxuICAgICAgICBjYXNlIEdPYmplY3QuVFlQRV9QQVJBTTpcbiAgICAgICAgY2FzZSBHT2JqZWN0LnR5cGVfZnJvbV9uYW1lKFwiR1R5cGVcIik6XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihgY2Fubm90IGd1ZXNzIFBhcmFtU3BlYyBmcm9tIEdUeXBlIFwiJHt0eXBlfVwiYClcbiAgICAgICAgY2FzZSBHT2JqZWN0LlRZUEVfT0JKRUNUOlxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIFBhcmFtU3BlYy5vYmplY3QobmFtZSwgXCJcIiwgXCJcIiwgZmxhZ3MgYXMgYW55LCB0eXBlKVxuICAgIH1cbn1cblxuZnVuY3Rpb24gcHNwZWMobmFtZTogc3RyaW5nLCBmbGFnczogUGFyYW1GbGFncywgZGVjbGFyYXRpb246IFByb3BlcnR5VHlwZURlY2xhcmF0aW9uPHVua25vd24+KSB7XG4gICAgaWYgKGRlY2xhcmF0aW9uIGluc3RhbmNlb2YgUGFyYW1TcGVjKSByZXR1cm4gZGVjbGFyYXRpb25cblxuICAgIGlmIChkZWNsYXJhdGlvbiA9PT0gT2JqZWN0IHx8IGRlY2xhcmF0aW9uID09PSBGdW5jdGlvbiB8fCBkZWNsYXJhdGlvbiA9PT0gQXJyYXkpIHtcbiAgICAgICAgcmV0dXJuIFBhcmFtU3BlYy5qc29iamVjdChuYW1lLCBcIlwiLCBcIlwiLCBmbGFncylcbiAgICB9XG5cbiAgICBpZiAoZGVjbGFyYXRpb24gPT09IFN0cmluZykge1xuICAgICAgICByZXR1cm4gUGFyYW1TcGVjLnN0cmluZyhuYW1lLCBcIlwiLCBcIlwiLCBmbGFncywgXCJcIilcbiAgICB9XG5cbiAgICBpZiAoZGVjbGFyYXRpb24gPT09IE51bWJlcikge1xuICAgICAgICByZXR1cm4gUGFyYW1TcGVjLmRvdWJsZShuYW1lLCBcIlwiLCBcIlwiLCBmbGFncywgLU51bWJlci5NQVhfVkFMVUUsIE51bWJlci5NQVhfVkFMVUUsIDApXG4gICAgfVxuXG4gICAgaWYgKGRlY2xhcmF0aW9uID09PSBCb29sZWFuKSB7XG4gICAgICAgIHJldHVybiBQYXJhbVNwZWMuYm9vbGVhbihuYW1lLCBcIlwiLCBcIlwiLCBmbGFncywgZmFsc2UpXG4gICAgfVxuXG4gICAgaWYgKFwiJGd0eXBlXCIgaW4gZGVjbGFyYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHBzcGVjRnJvbUdUeXBlKGRlY2xhcmF0aW9uLiRndHlwZSwgbmFtZSwgZmxhZ3MpXG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBkZWNsYXJhdGlvbiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBkZWNsYXJhdGlvbihuYW1lLCBmbGFncylcbiAgICB9XG5cbiAgICB0aHJvdyBFcnJvcihcImludmFsaWQgUHJvcGVydHlUeXBlRGVjbGFyYXRpb25cIilcbn1cblxudHlwZSBNZXRhSW5mbyA9IEdPYmplY3QuTWV0YUluZm88bmV2ZXIsIEFycmF5PHsgJGd0eXBlOiBHVHlwZTx1bmtub3duPiB9PiwgbmV2ZXI+XG5cbi8qKlxuICogUmVwbGFjZW1lbnQgZm9yIHtAbGluayBHT2JqZWN0LnJlZ2lzdGVyQ2xhc3N9XG4gKiBUaGlzIGRlY29yYXRvciBjb25zdW1lcyBtZXRhZGF0YSBuZWVkZWQgdG8gcmVnaXN0ZXIgdHlwZXMgd2hlcmUgdGhlIHByb3ZpZGVkIGRlY29yYXRvcnMgYXJlIHVzZWQ6XG4gKiAtIHtAbGluayBzaWduYWx9XG4gKiAtIHtAbGluayBwcm9wZXJ0eX1cbiAqIC0ge0BsaW5rIGdldHRlcn1cbiAqIC0ge0BsaW5rIHNldHRlcn1cbiAqXG4gKiBFeGFtcGxlOlxuICogYGBgdHNcbiAqIFxcQHJlZ2lzdGVyKHsgR1R5cGVOYW1lOiBcIk15Q2xhc3NcIiB9KVxuICogY2xhc3MgTXlDbGFzcyBleHRlbmRzIEdPYmplY3QuT2JqZWN0IHsgfVxuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlcjxDbHMgZXh0ZW5kcyB7IG5ldyAoLi4uYXJnczogYW55KTogR09iaiB9PihvcHRpb25zOiBNZXRhSW5mbyA9IHt9KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChjbHM6IENscywgY3R4OiBDbGFzc0RlY29yYXRvckNvbnRleHQ8Q2xzPikge1xuICAgICAgICBjb25zdCB0ID0gb3B0aW9ucy5UZW1wbGF0ZVxuXG4gICAgICAgIGlmICh0eXBlb2YgdCA9PT0gXCJzdHJpbmdcIiAmJiAhdC5zdGFydHNXaXRoKFwicmVzb3VyY2U6Ly9cIikgJiYgIXQuc3RhcnRzV2l0aChcImZpbGU6Ly9cIikpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuVGVtcGxhdGUgPSBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUodClcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG1ldGEgPSBjdHgubWV0YWRhdGEhIGFzIE1ldGFcblxuICAgICAgICBjb25zdCBwcm9wczogUmVjb3JkPHN0cmluZywgUGFyYW1TcGVjPHVua25vd24+PiA9IGZyb21FbnRyaWVzKFxuICAgICAgICAgICAgZW50cmllcyhtZXRhLnByb3BlcnRpZXMgPz8ge30pLm1hcCgoW2ZpZWxkTmFtZSwgeyBmbGFncywgdHlwZSB9XSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IGtlYmFiaWZ5KGZpZWxkTmFtZSlcbiAgICAgICAgICAgICAgICBjb25zdCBzcGVjID0gcHNwZWMoa2V5LCBmbGFncywgdHlwZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gW2tleSwgc3BlY11cbiAgICAgICAgICAgIH0pLFxuICAgICAgICApXG5cbiAgICAgICAgY29uc3Qgc2lnbmFscyA9IGZyb21FbnRyaWVzKFxuICAgICAgICAgICAgZW50cmllcyhtZXRhLnNpZ25hbHMgPz8ge30pLm1hcCgoW3NpZ25hbE5hbWUsIHsgZGVmYXVsdDogZGVmLCBtZXRob2QsIC4uLnNpZ25hbCB9XSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChkZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmaW5lUHJvcGVydHkoY2xzLnByb3RvdHlwZSwgYG9uXyR7c2lnbmFsTmFtZS5yZXBsYWNlQWxsKFwiLVwiLCBcIl9cIil9YCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IG1ldGhvZCxcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtzaWduYWxOYW1lLCBzaWduYWxdXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgKVxuXG4gICAgICAgIGRlbGV0ZSBtZXRhLnByb3BlcnRpZXNcbiAgICAgICAgZGVsZXRlIG1ldGEuc2lnbmFsc1xuXG4gICAgICAgIHJlZ2lzdGVyQ2xhc3MoeyAuLi5vcHRpb25zLCBQcm9wZXJ0aWVzOiBwcm9wcywgU2lnbmFsczogc2lnbmFscyB9LCBjbHMpXG4gICAgfVxufVxuXG4vKipcbiAqIEBleHBlcmltZW50YWxcbiAqIEFzc2VydHMgYSBndHlwZSBpbiBjYXNlcyB3aGVyZSB0aGUgdHlwZSBpcyB0b28gbG9vc2Uvc3RyaWN0LlxuICpcbiAqIEV4YW1wbGU6XG4gKiBgYGB0c1xuICogdHlwZSBUdXBsZSA9IFtudW1iZXIsIG51bWJlcl1cbiAqIGNvbnN0IFR1cGxlID0gZ3R5cGU8VHVwbGU+KEFycmF5KVxuICpcbiAqIGNsYXNzIHtcbiAqICAgXFxAcHJvcGVydHkoVHVwbGUpIHZhbHVlID0gWzEsIDJdIGFzIFR1cGxlXG4gKiB9XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGd0eXBlPEFzc2VydD4odHlwZTogR1R5cGU8YW55PiB8IHsgJGd0eXBlOiBHVHlwZTxhbnk+IH0pOiB7XG4gICAgJGd0eXBlOiBHVHlwZTxBc3NlcnQ+XG59IHtcbiAgICByZXR1cm4gXCIkZ3R5cGVcIiBpbiB0eXBlID8gdHlwZSA6IHsgJGd0eXBlOiB0eXBlIH1cbn1cblxuZGVjbGFyZSBnbG9iYWwge1xuICAgIGludGVyZmFjZSBGdW5jdGlvbkNvbnN0cnVjdG9yIHtcbiAgICAgICAgJGd0eXBlOiBHVHlwZTwoLi4uYXJnczogYW55W10pID0+IGFueT5cbiAgICB9XG5cbiAgICBpbnRlcmZhY2UgQXJyYXlDb25zdHJ1Y3RvciB7XG4gICAgICAgICRndHlwZTogR1R5cGU8YW55W10+XG4gICAgfVxufVxuXG5GdW5jdGlvbi4kZ3R5cGUgPSBPYmplY3QuJGd0eXBlIGFzIEZ1bmN0aW9uQ29uc3RydWN0b3JbXCIkZ3R5cGVcIl1cbkFycmF5LiRndHlwZSA9IE9iamVjdC4kZ3R5cGUgYXMgQXJyYXlDb25zdHJ1Y3RvcltcIiRndHlwZVwiXVxuIiwgImltcG9ydCBHT2JqZWN0LCB7IHByb3BlcnR5LCByZWdpc3RlciB9IGZyb20gXCJhZ3MvZ29iamVjdFwiO1xuXG5AcmVnaXN0ZXIoeyBHVHlwZU5hbWU6IFwiUGxheWVyTGlzdEl0ZW1cIiB9KVxuZXhwb3J0IGNsYXNzIFBsYXllckxpc3RJdGVtT2JqZWN0IGV4dGVuZHMgR09iamVjdC5PYmplY3Qge1xuICBAcHJvcGVydHkoU3RyaW5nKSB0ZXh0ID0gXCJcIjtcbiAgQHByb3BlcnR5KFN0cmluZykgZGVza3RvcEljb24gPSBcIlwiO1xuICBAcHJvcGVydHkoU3RyaW5nKSBidXNOYW1lID0gXCJcIjtcblxuICBjb25zdHJ1Y3Rvcih7XG4gICAgYnVzTmFtZSxcbiAgICBkZXNrdG9wSWNvbixcbiAgICB0ZXh0LFxuICB9OiB7XG4gICAgdGV4dDogc3RyaW5nO1xuICAgIGRlc2t0b3BJY29uOiBzdHJpbmc7XG4gICAgYnVzTmFtZTogc3RyaW5nO1xuICB9KSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMudGV4dCA9IHRleHQ7XG4gICAgdGhpcy5kZXNrdG9wSWNvbiA9IGRlc2t0b3BJY29uO1xuICAgIHRoaXMuYnVzTmFtZSA9IGJ1c05hbWU7XG4gIH1cbn1cbiIsICJpbXBvcnQgQXBwcyBmcm9tIFwiZ2k6Ly9Bc3RhbEFwcHNcIjtcbmltcG9ydCBHaW8gZnJvbSBcImdpOi8vR2lvXCI7XG5pbXBvcnQgR0xpYiBmcm9tIFwiZ2k6Ly9HTGliXCI7XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVBcHBzSW5zdGFuY2UgPSAoe1xuICB2YXJpYW50LFxufToge1xuICB2YXJpYW50OiBcImFwcFNlYXJjaFwiIHwgXCJvdGhlclwiO1xufSkgPT4ge1xuICByZXR1cm4gbmV3IEFwcHMuQXBwcyhcbiAgICB2YXJpYW50ID09PSBcImFwcFNlYXJjaFwiXG4gICAgICA/IHVuZGVmaW5lZFxuICAgICAgOiB7XG4gICAgICAgICAgbmFtZU11bHRpcGxpZXI6IDIsXG4gICAgICAgICAgZW50cnlNdWx0aXBsaWVyOiAwLFxuICAgICAgICAgIGV4ZWN1dGFibGVNdWx0aXBsaWVyOiAyLFxuICAgICAgICB9LFxuICApO1xufTtcblxuZnVuY3Rpb24gc2ltcGxpZnlBcHBOYW1lKGFwcElkOiBzdHJpbmcpOiBzdHJpbmcge1xuICBjb25zdCBhZnRlclNsYXNoID0gYXBwSWQuc3BsaXQoXCIvXCIpLnBvcCgpID8/IGFwcElkO1xuICBjb25zdCBhZnRlckRvdCA9IGFmdGVyU2xhc2guaW5jbHVkZXMoXCIuXCIpXG4gICAgPyBhZnRlclNsYXNoLnNwbGl0KFwiLlwiKS5wb3AoKSFcbiAgICA6IGFmdGVyU2xhc2g7XG4gIGxldCBiZWZvcmVEYXNoID0gYWZ0ZXJEb3QuaW5jbHVkZXMoXCItXCIpID8gYWZ0ZXJEb3Quc3BsaXQoXCItXCIpWzBdIDogYWZ0ZXJEb3Q7XG5cbiAgYmVmb3JlRGFzaCA9IGJlZm9yZURhc2gucmVwbGFjZShcIl9cIiwgXCIgXCIpO1xuXG4gIHJldHVybiBiZWZvcmVEYXNoO1xufVxuXG5leHBvcnQgY29uc3Qgc2VhcmNoQXBwRnJvbU5hbWUgPSAoYXBwczogQXBwcy5BcHBzLCBuYW1lOiBzdHJpbmcpID0+IHtcbiAgY29uc3QgbmFtZVRvVXNlID0gc2ltcGxpZnlBcHBOYW1lKG5hbWUpO1xuXG4gIGNvbnN0IHJlc3VsdHMgPSBhcHBzLmZ1enp5X3F1ZXJ5KG5hbWVUb1VzZSk7XG5cbiAgcmV0dXJuIHJlc3VsdHM7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QWxsQ29tbWFuZHMoKSB7XG4gIGxldCBwYXRoID0gR0xpYi5nZXRlbnYoXCJQQVRIXCIpO1xuICBpZiAoIXBhdGgpIHJldHVybiBbXTtcblxuICBsZXQgY29tbWFuZHMgPSBuZXcgU2V0PHN0cmluZz4oKTtcblxuICBmb3IgKGxldCBkaXJwYXRoIG9mIHBhdGguc3BsaXQoXCI6XCIpKSB7XG4gICAgLy8gVmVyaWZpY2FyIHF1ZSBlbCBkaXJlY3RvcmlvIGV4aXN0ZSBhbnRlcyBkZSBhYnJpcmxvXG4gICAgaWYgKCFHTGliLmZpbGVfdGVzdChkaXJwYXRoLCBHTGliLkZpbGVUZXN0LklTX0RJUikpIGNvbnRpbnVlO1xuXG4gICAgbGV0IGRpciA9IEdMaWIuRGlyLm9wZW4oZGlycGF0aCwgMCk7XG4gICAgaWYgKCFkaXIpIGNvbnRpbnVlO1xuXG4gICAgbGV0IG5hbWU7XG4gICAgd2hpbGUgKChuYW1lID0gZGlyLnJlYWRfbmFtZSgpKSAhPT0gbnVsbCkge1xuICAgICAgbGV0IGZ1bGwgPSBHTGliLmJ1aWxkX2ZpbGVuYW1ldihbZGlycGF0aCwgbmFtZV0pO1xuICAgICAgaWYgKFxuICAgICAgICBHTGliLmZpbGVfdGVzdChcbiAgICAgICAgICBmdWxsLFxuICAgICAgICAgIEdMaWIuRmlsZVRlc3QuSVNfUkVHVUxBUiB8IEdMaWIuRmlsZVRlc3QuSVNfRVhFQ1VUQUJMRSxcbiAgICAgICAgKVxuICAgICAgKSB7XG4gICAgICAgIGNvbW1hbmRzLmFkZChuYW1lKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBkaXIuY2xvc2UoKTtcbiAgfVxuXG4gIHJldHVybiBBcnJheS5mcm9tKGNvbW1hbmRzKS5zb3J0KCk7XG59XG5cbmNvbnN0IHRlcm1pbmFscyA9IFtcbiAgXCJraXR0eVwiLFxuICBcImZvb3RcIixcbiAgXCJhbGFjcml0dHlcIixcbiAgXCJ3ZXp0ZXJtXCIsXG4gIFwiZ25vbWUtdGVybWluYWxcIixcbiAgXCJrb25zb2xlXCIsXG4gIFwieHRlcm1cIixcbiAgXCJseHRlcm1pbmFsXCIsXG4gIFwidGlsaXhcIixcbiAgXCJ0ZXJtaW5hdG9yXCIsXG4gIFwidXJ4dnRcIixcbl0gYXMgY29uc3Q7XG5cbmV4cG9ydCBmdW5jdGlvbiBmaW5kQXZhaWxhYmxlVGVybWluYWwoKSB7XG4gIGZvciAobGV0IHRlcm0gb2YgdGVybWluYWxzKSB7XG4gICAgaWYgKEdMaWIuZmluZF9wcm9ncmFtX2luX3BhdGgodGVybSkpIHJldHVybiB0ZXJtO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGdldFRlcm1pbmFsQ29tbWFuZChcbiAgdGVybWluYWw6ICh0eXBlb2YgdGVybWluYWxzKVtudW1iZXJdLFxuICBjb21tYW5kU3RyaW5nOiBzdHJpbmcsXG4pIHtcbiAgc3dpdGNoICh0ZXJtaW5hbCkge1xuICAgIGNhc2UgXCJraXR0eVwiOlxuICAgIGNhc2UgXCJmb290XCI6XG4gICAgY2FzZSBcImFsYWNyaXR0eVwiOlxuICAgIGNhc2UgXCJ3ZXp0ZXJtXCI6XG4gICAgY2FzZSBcInh0ZXJtXCI6XG4gICAgY2FzZSBcInVyeHZ0XCI6XG4gICAgY2FzZSBcInRlcm1pbmF0b3JcIjpcbiAgICBjYXNlIFwibHh0ZXJtaW5hbFwiOlxuICAgICAgcmV0dXJuIFt0ZXJtaW5hbCwgXCItZVwiLCBcImJhc2hcIiwgXCItY1wiLCBgJHtjb21tYW5kU3RyaW5nfTsgZXhlYyBiYXNoYF07XG4gICAgY2FzZSBcImdub21lLXRlcm1pbmFsXCI6XG4gICAgY2FzZSBcInRpbGl4XCI6XG4gICAgY2FzZSBcImtvbnNvbGVcIjpcbiAgICAgIHJldHVybiBbdGVybWluYWwsIFwiLS1cIiwgXCJiYXNoXCIsIFwiLWNcIiwgYCR7Y29tbWFuZFN0cmluZ307IGV4ZWMgYmFzaGBdO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuZnVuY3Rpb24gaXNMaWtlbHlHdWlBcHAoY29tbWFuZDogc3RyaW5nKSB7XG4gIGNvbnN0IGtub3duR3VpID0gbmV3IFNldChbXG4gICAgXCJ3YXliYXJcIixcbiAgICBcInN3YXliZ1wiLFxuICAgIFwicm9maVwiLFxuICAgIFwid29maVwiLFxuICAgIFwiZHVuc3RcIixcbiAgICBcInRodW5hclwiLFxuICAgIFwiYWxhY3JpdHR5XCIsXG4gICAgXCJraXR0eVwiLFxuICAgIFwiZmlyZWZveFwiLFxuICAgIFwiY29kZVwiLFxuICAgIFwibmF1dGlsdXNcIixcbiAgICBcImdub21lLWNhbGN1bGF0b3JcIixcbiAgICBcInBhdnVjb250cm9sXCIsXG4gICAgXCJ2bGNcIixcbiAgICBcImdpbXBcIixcbiAgXSk7XG5cbiAgaWYgKGtub3duR3VpLmhhcyhjb21tYW5kKSkgcmV0dXJuIHRydWU7XG5cbiAgLy8gQ2hlY2sgaWYgaXQncyBpbiBBcHBJbmZvXG4gIGNvbnN0IGFwcEluZm8gPSBHaW8uQXBwSW5mby5nZXRfYWxsKCkuZmluZChcbiAgICAoYXBwKSA9PiBhcHAuZ2V0X2V4ZWN1dGFibGUoKSA9PT0gY29tbWFuZCxcbiAgKTtcbiAgaWYgKGFwcEluZm8pIHJldHVybiB0cnVlO1xuXG4gIC8vIEZhbGxiYWNrOiBjaGVjayBpZiB0aGUgYmluYXJ5IGlzIGxpbmtlZCB0byBHVEsvUXQgKG9wdGlvbmFsLCBzZWUgYmVsb3cpXG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcnVuQXBwQ29tbWFuZChjb21tYW5kU3RyaW5nOiBzdHJpbmcpIHtcbiAgbGV0IFtvaywgYXJndl0gPSBHTGliLnNoZWxsX3BhcnNlX2FyZ3YoY29tbWFuZFN0cmluZyk7XG4gIGlmICghb2sgfHwgIWFyZ3YgfHwgYXJndi5sZW5ndGggPT09IDApIHJldHVybjtcblxuICBsZXQgY29tbWFuZCA9IGFyZ3ZbMF07XG5cbiAgdHJ5IHtcbiAgICBpZiAoaXNMaWtlbHlHdWlBcHAoY29tbWFuZCkpIHtcbiAgICAgIEdpby5TdWJwcm9jZXNzLm5ldyhhcmd2LCBHaW8uU3VicHJvY2Vzc0ZsYWdzLlNFQVJDSF9QQVRIX0ZST01fRU5WUCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCB0ZXJtaW5hbCA9IGZpbmRBdmFpbGFibGVUZXJtaW5hbCgpO1xuICAgICAgaWYgKCF0ZXJtaW5hbCkgdGhyb3cgbmV3IEVycm9yKFwiTm8gdGVybWluYWwgZW11bGF0b3IgZm91bmRcIik7XG5cbiAgICAgIGxldCB0ZXJtQ29tbWFuZCA9IGdldFRlcm1pbmFsQ29tbWFuZCh0ZXJtaW5hbCwgY29tbWFuZFN0cmluZyk7XG5cbiAgICAgIGlmICghdGVybUNvbW1hbmQ/Lmxlbmd0aCkge1xuICAgICAgICBwcmludGVycihcIk5vIHRlcm1Db21tYW5kXCIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBHaW8uU3VicHJvY2Vzcy5uZXcoXG4gICAgICAgIHRlcm1Db21tYW5kLFxuICAgICAgICBHaW8uU3VicHJvY2Vzc0ZsYWdzLlNFQVJDSF9QQVRIX0ZST01fRU5WUCxcbiAgICAgICk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgbG9nRXJyb3IoZSk7XG4gIH1cbn1cbiIsICJpbXBvcnQgeyBBY2Nlc3Nvciwgb25DbGVhbnVwIH0gZnJvbSBcImFnc1wiO1xuaW1wb3J0IHsgR2RrLCBHdGsgfSBmcm9tIFwiYWdzL2d0azRcIjtcbmltcG9ydCBHZGtQaXhidWYgZnJvbSBcImdpOi8vR2RrUGl4YnVmXCI7XG5pbXBvcnQgeyBnZXRJc0ljb24gfSBmcm9tIFwiLi4vdXRpbHMvaWNvbnNcIjtcblxuY29uc3QgZ2V0UGl4YnVmRm9ySWNvbk5hbWUgPSAoe1xuICBpY29uLFxuICBzaXplLFxufToge1xuICBpY29uOiBzdHJpbmc7XG4gIHNpemU6IG51bWJlcjtcbn0pID0+IHtcbiAgY29uc3QgZGlzcGxheSA9IEdkay5EaXNwbGF5LmdldF9kZWZhdWx0KCk7XG4gIGlmICghZGlzcGxheSkgcmV0dXJuIG51bGw7XG5cbiAgY29uc3QgaWNvblRoZW1lID0gR3RrLkljb25UaGVtZS5nZXRfZm9yX2Rpc3BsYXkoZGlzcGxheSk7XG5cbiAgaWYgKCFnZXRJc0ljb24oeyBpY29uLCBpY29uVGhlbWUgfSkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNvbnN0IGljb25JbmZvID0gaWNvblRoZW1lLmxvb2t1cF9pY29uKFxuICAgIGljb24sXG4gICAgbnVsbCwgLy8gZmFsbGJhY2tzXG4gICAgMjAwLCAvLyBzaXplIGluIGFwcCBwaXhlbHNcbiAgICAxLCAvLyBzY2FsZSAoZm9yIEhpRFBJLCB1c3VhbGx5IDEgb3Igd2luZG93IHNjYWxlKVxuICAgIG51bGwsIC8vIHRleHQgZGlyZWN0aW9uLCBudWxsIGZvciBMVFJcbiAgICBudWxsLCAvLyBmbGFncyk7XG4gICk7XG4gIGNvbnN0IGZpbGUgPSBpY29uSW5mbz8uZ2V0X2ZpbGUoKTtcbiAgY29uc3QgcGF0aCA9IGZpbGU/LmdldF9wYXRoKCk7XG5cbiAgaWYgKCFwYXRoKSByZXR1cm4gbnVsbDtcblxuICB0cnkge1xuICAgIHJldHVybiBHZGtQaXhidWYuUGl4YnVmLm5ld19mcm9tX2ZpbGVfYXRfc2NhbGUocGF0aCwgc2l6ZSwgc2l6ZSwgdHJ1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn07XG5cbmNvbnN0IENpcmN1bGFySW1hZ2UgPSAoe1xuICBpbWcsXG4gIHNpemU6IHdhbnRlZFNpemUsXG4gICR0eXBlLFxuICBpY29uRmFsbGJhY2ssXG4gIG9uQ2xpY2tlZCxcbiAgb25SaWdodENsaWNrZWQsXG4gIC4uLnByb3BzXG59OiB7XG4gIGltZzogQWNjZXNzb3I8c3RyaW5nPjtcbiAgdmlzaWJsZT86IEFjY2Vzc29yPGJvb2xlYW4+O1xuICBzaXplOiBudW1iZXI7XG4gICR0eXBlPzogc3RyaW5nO1xuICBpY29uRmFsbGJhY2s6IHN0cmluZyB8IG51bGw7XG4gIG9uQ2xpY2tlZD86ICgpID0+IHZvaWQ7XG4gIG9uUmlnaHRDbGlja2VkPzogKCkgPT4gdm9pZDtcbn0gJiBQYXJ0aWFsPFxuICBQaWNrPFxuICAgIEd0ay5EcmF3aW5nQXJlYSxcbiAgICBcIndpZHRoUmVxdWVzdFwiIHwgXCJoZWlnaHRSZXF1ZXN0XCIgfCBcImhleHBhbmRcIiB8IFwidmV4cGFuZFwiXG4gID5cbj4pID0+IHtcbiAgbGV0IGRyYXdpbkFyZWE6IEd0ay5EcmF3aW5nQXJlYTtcblxuICBjb25zdCB1bnN1YnNjcmliZSA9IGltZy5zdWJzY3JpYmUoKCkgPT4ge1xuICAgIGRyYXdpbkFyZWEucXVldWVfZHJhdygpO1xuICB9KTtcblxuICBvbkNsZWFudXAoKCkgPT4ge1xuICAgIHVuc3Vic2NyaWJlKCk7XG4gIH0pO1xuXG4gIHJldHVybiAoXG4gICAgPEd0ay5EcmF3aW5nQXJlYVxuICAgICAgJHR5cGU9eyR0eXBlfVxuICAgICAgey4uLnByb3BzfVxuICAgICAgJD17KHMpID0+IHtcbiAgICAgICAgcy5zZXRfZHJhd19mdW5jKChfLCBjciwgd2lkdGgsIGhlaWdodCkgPT4ge1xuICAgICAgICAgIGxldCBjb3ZlciA9IGltZy5nZXQoKTtcblxuICAgICAgICAgIGNvdmVyID0gY292ZXI/LnN0YXJ0c1dpdGgoXCJmaWxlOi8vXCIpXG4gICAgICAgICAgICA/IGNvdmVyLnJlcGxhY2UoXCJmaWxlOi8vXCIsIFwiXCIpXG4gICAgICAgICAgICA6IGNvdmVyO1xuXG4gICAgICAgICAgY29uc3Qgc2l6ZSA9IE1hdGgubWluKHdpZHRoLCBoZWlnaHQsIHdhbnRlZFNpemUpO1xuXG4gICAgICAgICAgbGV0IHBpeGJ1ZjogR2RrUGl4YnVmLlBpeGJ1ZiB8IG51bGwgPSBudWxsO1xuXG4gICAgICAgICAgaWYgKGNvdmVyKSB7XG4gICAgICAgICAgICAvLyBsb2FkIHRoZSBjb3ZlciBpbWFnZSwgc2NhbGVkIHNxdWFyZVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgY29uc3Qgb3JpZ1BpeGJ1ZiA9IEdka1BpeGJ1Zi5QaXhidWYubmV3X2Zyb21fZmlsZShjb3Zlcik7XG5cbiAgICAgICAgICAgICAgY29uc3QgaW1nV2lkdGggPSBvcmlnUGl4YnVmLmdldF93aWR0aCgpO1xuICAgICAgICAgICAgICBjb25zdCBpbWdIZWlnaHQgPSBvcmlnUGl4YnVmLmdldF9oZWlnaHQoKTtcbiAgICAgICAgICAgICAgY29uc3QgY2lyY2xlRGlhbWV0ZXIgPSBzaXplO1xuXG4gICAgICAgICAgICAgIGNvbnN0IHNjYWxlWCA9IGNpcmNsZURpYW1ldGVyIC8gaW1nV2lkdGg7XG4gICAgICAgICAgICAgIGNvbnN0IHNjYWxlWSA9IGNpcmNsZURpYW1ldGVyIC8gaW1nSGVpZ2h0O1xuICAgICAgICAgICAgICBjb25zdCBzY2FsZSA9IE1hdGgubWF4KHNjYWxlWCwgc2NhbGVZKTtcblxuICAgICAgICAgICAgICBjb25zdCBzY2FsZWRXaWR0aCA9IE1hdGguY2VpbChpbWdXaWR0aCAqIHNjYWxlKTtcbiAgICAgICAgICAgICAgY29uc3Qgc2NhbGVkSGVpZ2h0ID0gTWF0aC5jZWlsKGltZ0hlaWdodCAqIHNjYWxlKTtcblxuICAgICAgICAgICAgICBwaXhidWYgPSBvcmlnUGl4YnVmLnNjYWxlX3NpbXBsZShcbiAgICAgICAgICAgICAgICBzY2FsZWRXaWR0aCxcbiAgICAgICAgICAgICAgICBzY2FsZWRIZWlnaHQsXG4gICAgICAgICAgICAgICAgR2RrUGl4YnVmLkludGVycFR5cGUuSFlQRVIsXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICAgICAgcGl4YnVmID0gZ2V0UGl4YnVmRm9ySWNvbk5hbWUoeyBpY29uOiBjb3Zlciwgc2l6ZSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIXBpeGJ1ZiAmJiBpY29uRmFsbGJhY2spIHtcbiAgICAgICAgICAgIHBpeGJ1ZiA9IGdldFBpeGJ1ZkZvckljb25OYW1lKHtcbiAgICAgICAgICAgICAgaWNvbjogaWNvbkZhbGxiYWNrLFxuICAgICAgICAgICAgICBzaXplLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFwaXhidWYpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBjeCA9IHdpZHRoIC8gMjtcbiAgICAgICAgICBjb25zdCBjeSA9IGhlaWdodCAvIDI7XG4gICAgICAgICAgY29uc3QgcmFkaXVzID0gc2l6ZSAvIDI7XG5cbiAgICAgICAgICBjci5hcmMoY3gsIGN5LCByYWRpdXMsIDAsIE1hdGguUEkgKiAyKTtcbiAgICAgICAgICBjci5jbGlwKCk7XG5cbiAgICAgICAgICBjb25zdCB4ID0gY3ggLSBwaXhidWYuZ2V0X3dpZHRoKCkgLyAyO1xuICAgICAgICAgIGNvbnN0IHkgPSBjeSAtIHBpeGJ1Zi5nZXRfaGVpZ2h0KCkgLyAyO1xuXG4gICAgICAgICAgR2RrLmNhaXJvX3NldF9zb3VyY2VfcGl4YnVmKGNyLCBwaXhidWYsIHgsIHkpO1xuICAgICAgICAgIGNyLnBhaW50KCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChvbkNsaWNrZWQpIHtcbiAgICAgICAgICBjb25zdCBnZXN0dXJlID0gR3RrLkdlc3R1cmVDbGljay5uZXcoKTtcblxuICAgICAgICAgIGdlc3R1cmUuc2V0X2J1dHRvbigxKTtcblxuICAgICAgICAgIGdlc3R1cmUuY29ubmVjdChcInJlbGVhc2VkXCIsICgpID0+IHtcbiAgICAgICAgICAgIG9uQ2xpY2tlZCgpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgcy5hZGRfY29udHJvbGxlcihnZXN0dXJlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvblJpZ2h0Q2xpY2tlZCkge1xuICAgICAgICAgIGNvbnN0IGdlc3R1cmUgPSBHdGsuR2VzdHVyZUNsaWNrLm5ldygpO1xuXG4gICAgICAgICAgZ2VzdHVyZS5zZXRfYnV0dG9uKDMpO1xuXG4gICAgICAgICAgZ2VzdHVyZS5jb25uZWN0KFwicmVsZWFzZWRcIiwgKCkgPT4ge1xuICAgICAgICAgICAgb25SaWdodENsaWNrZWQoKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHMuYWRkX2NvbnRyb2xsZXIoZ2VzdHVyZSk7XG4gICAgICAgIH1cblxuICAgICAgICBkcmF3aW5BcmVhID0gcztcbiAgICAgIH19XG4gICAgLz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IENpcmN1bGFySW1hZ2U7XG4iLCAiaW1wb3J0IHsgR3RrIH0gZnJvbSBcImFncy9ndGs0XCI7XG5pbXBvcnQgR2lvIGZyb20gXCJnaTovL0dpb1wiO1xuaW1wb3J0IEdMaWIgZnJvbSBcImdpOi8vR0xpYlwiO1xuaW1wb3J0IHsgY3JlYXRlQXBwc0luc3RhbmNlLCBzZWFyY2hBcHBGcm9tTmFtZSB9IGZyb20gXCIuL2FwcHNcIjtcblxuY29uc3QgSE9NRSA9IEdMaWIuZ2V0ZW52KFwiSE9NRVwiKTtcblxuZXhwb3J0IGNvbnN0IGdldElzSWNvbiA9ICh7XG4gIGljb24sXG4gIGljb25UaGVtZSxcbn06IHtcbiAgaWNvbjogc3RyaW5nO1xuICBpY29uVGhlbWU6IEd0ay5JY29uVGhlbWU7XG59KSA9PiB7XG4gIHJldHVybiBpY29uID8gaWNvblRoZW1lLmhhc19pY29uKGljb24pIDogZmFsc2U7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0SXNJY29uRmlsZSA9ICh7IGljb24gfTogeyBpY29uOiBzdHJpbmcgfSkgPT4ge1xuICByZXR1cm4gaWNvbj8uc3RhcnRzV2l0aChcIi9cIik7XG59O1xuXG5mdW5jdGlvbiBlbnVtZXJhdGVEaXIocGF0aDogc3RyaW5nKTogc3RyaW5nW10ge1xuICBjb25zdCBlbnVtZXJhdG9yID0gR2lvLkZpbGUubmV3X2Zvcl9wYXRoKHBhdGgpLmVudW1lcmF0ZV9jaGlsZHJlbihcbiAgICBcInN0YW5kYXJkOjpuYW1lLHN0YW5kYXJkOjp0eXBlXCIsXG4gICAgR2lvLkZpbGVRdWVyeUluZm9GbGFncy5OT05FLFxuICAgIG51bGwsXG4gICk7XG4gIGNvbnN0IHBpeG1hcEZpbGVzOiBzdHJpbmdbXSA9IFtdO1xuICB3aGlsZSAodHJ1ZSkge1xuICAgIGNvbnN0IGluZm8gPSBlbnVtZXJhdG9yLm5leHRfZmlsZShudWxsKTtcbiAgICBpZiAoIWluZm8pIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBwaXhtYXBGaWxlcy5wdXNoKGAke3BhdGh9LyR7aW5mby5nZXRfbmFtZSgpfWApO1xuICB9XG5cbiAgcmV0dXJuIHBpeG1hcEZpbGVzO1xufVxuXG4vLyBUT0RPOiBhZGQgbWlzc2luZyBpY29uIHBhdGhcbmNvbnN0IE1JU1NJTkdfSUNPTiA9IFwiXCI7XG5cbmNvbnN0IGljb25DYWNoZTogUmVjb3JkPHN0cmluZywgc3RyaW5nIHwgXCJOTy1JQ09OXCI+ID0ge307XG5jb25zdCBhcHBzID0gY3JlYXRlQXBwc0luc3RhbmNlKHsgdmFyaWFudDogXCJvdGhlclwiIH0pO1xuY29uc3QgcGl4bWFwRmlsZXMgPSBlbnVtZXJhdGVEaXIoXCIvdXNyL3NoYXJlL3BpeG1hcHNcIik7XG5jb25zdCBoaWNvbG9yU2NhbGFibGUgPSBlbnVtZXJhdGVEaXIoXCIvdXNyL3NoYXJlL2ljb25zL2hpY29sb3Ivc2NhbGFibGUvYXBwc1wiKTtcbi8vIGNvbnN0IGN1c3RvbUljb25zID0gZW51bWVyYXRlRGlyKGAke0hPTUV9Ly5jb25maWcvYWdzL2Fzc2V0cy9hcHAtaWNvbnNgKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEFwcEljb24obmFtZTogc3RyaW5nIHwgdW5kZWZpbmVkKTogc3RyaW5nIHtcbiAgLy8gbm8gbmFtZSwgY2FudCBzZWFyY2ggZm9yIGljb25cbiAgaWYgKCFuYW1lKSB7XG4gICAgcmV0dXJuIE1JU1NJTkdfSUNPTjtcbiAgfVxuXG4gIC8vIGljb24gYWxyZWFkeSBpbiBjYWNoZVxuICBpZiAoaWNvbkNhY2hlW25hbWVdICYmIGljb25DYWNoZVtuYW1lXSAhPSBcIk5PLUlDT05cIikge1xuICAgIHJldHVybiBpY29uQ2FjaGVbbmFtZV07XG4gIH1cblxuICAvLyBpY29uIHdhcyBhbHJlYWR5IHNlYXJjaGVkIGZvciBhbmQgbm90IGZvdW5kXG4gIGlmIChpY29uQ2FjaGVbbmFtZV0gJiYgaWNvbkNhY2hlW25hbWVdID09IFwiTk8tSUNPTlwiKSB7XG4gICAgcmV0dXJuIE1JU1NJTkdfSUNPTjtcbiAgfVxuXG4gIC8vIGNoZWNrIGN1c3RvbSBpY29ucyBpbiBhZ3MvYXNzZXRzL2FwcC1pY29ucyBkaXJcbiAgLy8gY29uc3QgY3VzdG9tID0gY3VzdG9tSWNvbnMuZmlsdGVyKChpdCkgPT4gaXQuaW5jbHVkZXMobmFtZSkpO1xuICAvLyBpZiAoY3VzdG9tLmxlbmd0aCkge1xuICAvLyAgICAgaWNvbkNhY2hlW25hbWVdID0gY3VzdG9tLmF0KC0xKSEhO1xuICAvLyAgICAgcmV0dXJuIGljb25DYWNoZVtuYW1lXTtcbiAgLy8gfVxuXG4gIC8vIGNoZWNrIHN0ZWFtIGdhbWUgaWNvbnNcbiAgaWYgKG5hbWUuc3RhcnRzV2l0aChcInN0ZWFtX2FwcFwiKSkge1xuICAgIHRyeSB7XG4gICAgICAvLyBzZWVtcyBsaWtlIGV2ZXJ5IHN0ZWFtIGdhbWUgaGFzIGFuIGljb24gaW4gZm9ybWF0IGxpa2UgJ2Y2ZGExNDIwYTE3MzMyNGQ0OWJjZDQ3MGZhM2VlZTc4MWFkMGZhNWUuanBnJ1xuICAgICAgLy8gYWxsIHRoZXNlIGljb25zIGFyZSBqcGcgYW5kIG5vIG90aGVyIGltYWdlcyB3aXRoIHNpbWlsYXIgbmFtZSBhcmUgcHJlc2VudCBpbiBhbnkgZ2FtZSBmcm9tIHdoYXQgSSBjYW4gdGVsbC5cbiAgICAgIGNvbnN0IGdhbWVGaWxlcyA9IGVudW1lcmF0ZURpcihcbiAgICAgICAgYCR7SE9NRX0vLmxvY2FsL3NoYXJlL1N0ZWFtL2FwcGNhY2hlL2xpYnJhcnljYWNoZS8ke25hbWUuc3Vic3RyaW5nKDEwKX1gLFxuICAgICAgKTtcbiAgICAgIGNvbnN0IHNoYTI1NlBhdHRlcm4gPSAvWzAtOWEtZl17NDB9XFwuanBnJC87XG4gICAgICBjb25zdCBpY29uID0gZ2FtZUZpbGVzLmZpbmQoKGYpID0+IHNoYTI1NlBhdHRlcm4udGVzdChmKSk7XG4gICAgICBpZiAoaWNvbikge1xuICAgICAgICBpY29uQ2FjaGVbbmFtZV0gPSBpY29uO1xuICAgICAgICByZXR1cm4gaWNvbkNhY2hlW25hbWVdO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgY29uc29sZS5lcnJvcihcIkZvdW5kIHN0ZWFtIGFwcCBidXQgbm8gY2FjaGUgZGlyXCIsIG5hbWUpO1xuICAgIH1cblxuICAgIC8vIElmIGFib3ZlIGZhaWxzLCBjaGVjayBmb3IgbG9nby5wbmcgaW4gdGhlIHNhbWUgZGlyXG4gICAgY29uc3Qgc3RlYW1JY29uUGF0aCA9IGAke0hPTUV9Ly5sb2NhbC9zaGFyZS9TdGVhbS9hcHBjYWNoZS9saWJyYXJ5Y2FjaGUvJHtuYW1lLnN1YnN0cmluZygxMCl9L2xvZ28ucG5nYDtcbiAgICBpZiAoR0xpYi5maWxlX3Rlc3Qoc3RlYW1JY29uUGF0aCwgR0xpYi5GaWxlVGVzdC5FWElTVFMpKSB7XG4gICAgICBpY29uQ2FjaGVbbmFtZV0gPSBzdGVhbUljb25QYXRoO1xuICAgICAgcmV0dXJuIGljb25DYWNoZVtuYW1lXTtcbiAgICB9XG4gIH1cblxuICAvLyBUcnkgdGhlIGFwcHMgbGlicmFyeSBoZXJlLi5cbiAgY29uc3QgaWNvbk5hbWUgPSBzZWFyY2hBcHBGcm9tTmFtZShhcHBzLCBuYW1lKT8uWzBdPy5nZXRfaWNvbl9uYW1lKCk7XG5cbiAgaWYgKGljb25OYW1lKSB7XG4gICAgaWNvbkNhY2hlW25hbWVdID0gaWNvbk5hbWU7XG4gICAgcmV0dXJuIGljb25OYW1lO1xuICB9XG5cbiAgLy8gdHJ5IC91c3Ivc2hhcmUvcGl4bWFwc1xuICBjb25zdCBwaXhtYXBzID0gcGl4bWFwRmlsZXMuZmlsdGVyKChpdCkgPT4gaXQuaW5jbHVkZXMobmFtZSkpO1xuICBpZiAocGl4bWFwcy5sZW5ndGgpIHtcbiAgICBpY29uQ2FjaGVbbmFtZV0gPSBwaXhtYXBzLmF0KC0xKSEhO1xuICAgIHJldHVybiBpY29uQ2FjaGVbbmFtZV07XG4gIH1cblxuICAvLyB0cnkgL3Vzci9zaGFyZS9pY29ucy9oaWNvbG9yL3NjYWxhYmxlL2FwcHNcbiAgY29uc3Qgc2NhbGFibGUgPSBoaWNvbG9yU2NhbGFibGUuZmlsdGVyKChpdCkgPT4gaXQuaW5jbHVkZXMobmFtZSkpO1xuICBpZiAoc2NhbGFibGUubGVuZ3RoKSB7XG4gICAgaWNvbkNhY2hlW25hbWVdID0gc2NhbGFibGUuYXQoLTEpISE7XG4gICAgcmV0dXJuIGljb25DYWNoZVtuYW1lXTtcbiAgfVxuXG4gIC8vIGV2ZXJ5IGF0dGVtcHQgZmFpbGVkLCBjYWNoZSBhIG1pc3NpbmcgaWNvblxuICBpY29uQ2FjaGVbXCJOTy1JQ09OXCJdID0gTUlTU0lOR19JQ09OO1xuICByZXR1cm4gTUlTU0lOR19JQ09OO1xufVxuIiwgIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1uYW1lc3BhY2UgKi9cbmltcG9ydCBHdGsgZnJvbSBcImdpOi8vR3RrP3ZlcnNpb249NC4wXCJcbmltcG9ydCBBc3RhbCBmcm9tIFwiZ2k6Ly9Bc3RhbD92ZXJzaW9uPTQuMFwiXG5pbXBvcnQgeyBDQ1Byb3BzIH0gZnJvbSBcIi4uLy4uL2duaW0vc3JjL2pzeC9pbmRleC5qc1wiXG5pbXBvcnQgeyBpbnRyaW5zaWNFbGVtZW50cyB9IGZyb20gXCIuLi8uLi9nbmltL3NyYy9ndGs0L2pzeC1ydW50aW1lLmpzXCJcblxudHlwZSBQcm9wczxUIGV4dGVuZHMgR3RrLldpZGdldCwgUHJvcHM+ID0gQ0NQcm9wczxULCBQYXJ0aWFsPFByb3BzPj5cblxuT2JqZWN0LmFzc2lnbihpbnRyaW5zaWNFbGVtZW50cywge1xuICAgIGJveDogR3RrLkJveCxcbiAgICBidXR0b246IEd0ay5CdXR0b24sXG4gICAgY2VudGVyYm94OiBHdGsuQ2VudGVyQm94LFxuICAgIC8vIGNpcmN1bGFycHJvZ3Jlc3M6IEFzdGFsLkNpcmN1bGFyUHJvZ3Jlc3MsXG4gICAgZHJhd2luZ2FyZWE6IEd0ay5EcmF3aW5nQXJlYSxcbiAgICBlbnRyeTogR3RrLkVudHJ5LFxuICAgIGltYWdlOiBHdGsuSW1hZ2UsXG4gICAgbGFiZWw6IEd0ay5MYWJlbCxcbiAgICBsZXZlbGJhcjogR3RrLkxldmVsQmFyLFxuICAgIG1lbnVidXR0b246IEd0ay5NZW51QnV0dG9uLFxuICAgIG92ZXJsYXk6IEd0ay5PdmVybGF5LFxuICAgIHBvcG92ZXI6IEd0ay5Qb3BvdmVyLFxuICAgIHJldmVhbGVyOiBHdGsuUmV2ZWFsZXIsXG4gICAgc2Nyb2xsZWR3aW5kb3c6IEd0ay5TY3JvbGxlZFdpbmRvdyxcbiAgICBzbGlkZXI6IEFzdGFsLlNsaWRlcixcbiAgICBzdGFjazogR3RrLlN0YWNrLFxuICAgIHN3aXRjaDogR3RrLlN3aXRjaCxcbiAgICB0b2dnbGVidXR0b246IEd0ay5Ub2dnbGVCdXR0b24sXG4gICAgd2luZG93OiBBc3RhbC5XaW5kb3csXG59KVxuXG5kZWNsYXJlIGdsb2JhbCB7XG4gICAgbmFtZXNwYWNlIEpTWCB7XG4gICAgICAgIGludGVyZmFjZSBJbnRyaW5zaWNFbGVtZW50cyB7XG4gICAgICAgICAgICBib3g6IFByb3BzPEd0ay5Cb3gsIEd0ay5Cb3guQ29uc3RydWN0b3JQcm9wcz5cbiAgICAgICAgICAgIGJ1dHRvbjogUHJvcHM8R3RrLkJ1dHRvbiwgR3RrLkJ1dHRvbi5Db25zdHJ1Y3RvclByb3BzPlxuICAgICAgICAgICAgY2VudGVyYm94OiBQcm9wczxHdGsuQ2VudGVyQm94LCBHdGsuQ2VudGVyQm94LkNvbnN0cnVjdG9yUHJvcHM+XG4gICAgICAgICAgICAvLyBjaXJjdWxhcnByb2dyZXNzOiBQcm9wczxBc3RhbC5DaXJjdWxhclByb2dyZXNzLCBBc3RhbC5DaXJjdWxhclByb2dyZXNzLkNvbnN0cnVjdG9yUHJvcHM+XG4gICAgICAgICAgICBkcmF3aW5nYXJlYTogUHJvcHM8R3RrLkRyYXdpbmdBcmVhLCBHdGsuRHJhd2luZ0FyZWEuQ29uc3RydWN0b3JQcm9wcz5cbiAgICAgICAgICAgIGVudHJ5OiBQcm9wczxHdGsuRW50cnksIEd0ay5FbnRyeS5Db25zdHJ1Y3RvclByb3BzPlxuICAgICAgICAgICAgaW1hZ2U6IFByb3BzPEd0ay5JbWFnZSwgR3RrLkltYWdlLkNvbnN0cnVjdG9yUHJvcHM+XG4gICAgICAgICAgICBsYWJlbDogUHJvcHM8R3RrLkxhYmVsLCBHdGsuTGFiZWwuQ29uc3RydWN0b3JQcm9wcz5cbiAgICAgICAgICAgIGxldmVsYmFyOiBQcm9wczxHdGsuTGV2ZWxCYXIsIEd0ay5MZXZlbEJhci5Db25zdHJ1Y3RvclByb3BzPlxuICAgICAgICAgICAgbWVudWJ1dHRvbjogUHJvcHM8R3RrLk1lbnVCdXR0b24sIEd0ay5NZW51QnV0dG9uLkNvbnN0cnVjdG9yUHJvcHM+XG4gICAgICAgICAgICBvdmVybGF5OiBQcm9wczxHdGsuT3ZlcmxheSwgR3RrLk92ZXJsYXkuQ29uc3RydWN0b3JQcm9wcz5cbiAgICAgICAgICAgIHBvcG92ZXI6IFByb3BzPEd0ay5Qb3BvdmVyLCBHdGsuUG9wb3Zlci5Db25zdHJ1Y3RvclByb3BzPlxuICAgICAgICAgICAgcmV2ZWFsZXI6IFByb3BzPEd0ay5SZXZlYWxlciwgR3RrLlJldmVhbGVyLkNvbnN0cnVjdG9yUHJvcHM+XG4gICAgICAgICAgICBzY3JvbGxlZHdpbmRvdzogUHJvcHM8R3RrLlNjcm9sbGVkV2luZG93LCBHdGsuU2Nyb2xsZWRXaW5kb3cuQ29uc3RydWN0b3JQcm9wcz5cbiAgICAgICAgICAgIHNsaWRlcjogUHJvcHM8QXN0YWwuU2xpZGVyLCBBc3RhbC5TbGlkZXIuQ29uc3RydWN0b3JQcm9wcz5cbiAgICAgICAgICAgIHN0YWNrOiBQcm9wczxHdGsuU3RhY2ssIEd0ay5TdGFjay5Db25zdHJ1Y3RvclByb3BzPlxuICAgICAgICAgICAgc3dpdGNoOiBQcm9wczxHdGsuU3dpdGNoLCBHdGsuU3dpdGNoLkNvbnN0cnVjdG9yUHJvcHM+XG4gICAgICAgICAgICB0b2dnbGVidXR0b246IFByb3BzPEd0ay5Ub2dnbGVCdXR0b24sIEd0ay5Ub2dnbGVCdXR0b24uQ29uc3RydWN0b3JQcm9wcz5cbiAgICAgICAgICAgIHdpbmRvdzogUHJvcHM8QXN0YWwuV2luZG93LCBBc3RhbC5XaW5kb3cuQ29uc3RydWN0b3JQcm9wcz5cbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0ICogZnJvbSBcIi4uLy4uL2duaW0vc3JjL2d0azQvanN4LXJ1bnRpbWUuanNcIlxuIiwgImltcG9ydCBHdGsgZnJvbSBcImdpOi8vR3RrP3ZlcnNpb249NC4wXCJcbmltcG9ydCBHaW8gZnJvbSBcImdpOi8vR2lvP3ZlcnNpb249Mi4wXCJcbmltcG9ydCBHT2JqZWN0IGZyb20gXCJnaTovL0dPYmplY3RcIlxuaW1wb3J0IHsgZ2V0VHlwZSwgb25DbGVhbnVwLCBBY2Nlc3NvciwgRnJhZ21lbnQgfSBmcm9tIFwiLi4vanN4L2luZGV4LmpzXCJcbmltcG9ydCB7IGNvbmZpZ3VlIH0gZnJvbSBcIi4uL2pzeC9lbnYuanNcIlxuXG5jb25zdCBkdW1teUJ1aWxkZXIgPSBuZXcgR3RrLkJ1aWxkZXIoKVxuXG5mdW5jdGlvbiBhZGQocGFyZW50OiBHdGsuQnVpbGRhYmxlLCBjaGlsZDogR09iamVjdC5PYmplY3QsIF86IG51bWJlcikge1xuICAgIGlmICghc3BlY2lhbEFkZChwYXJlbnQsIGNoaWxkLCBfKSkge1xuICAgICAgICBwYXJlbnQudmZ1bmNfYWRkX2NoaWxkKGR1bW15QnVpbGRlciwgY2hpbGQsIGdldFR5cGUoY2hpbGQpKVxuICAgIH1cbn1cblxuZnVuY3Rpb24gc3BlY2lhbFJlbW92ZShfcGFyZW50OiBHT2JqZWN0Lk9iamVjdCwgX2NoaWxkOiBHT2JqZWN0Lk9iamVjdCkge1xuICAgIC8vIFRPRE86IGFkZCBhbnkgc3BlY2lhbCBjYXNlXG4gICAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIHNwZWNpYWxBZGQocGFyZW50OiBHT2JqZWN0Lk9iamVjdCwgY2hpbGQ6IEdPYmplY3QuT2JqZWN0LCBfOiBudW1iZXIpIHtcbiAgICAvLyBUT0RPOiBhZGQgYW55IG90aGVyIHNwZWNpYWwgY2FzZVxuICAgIGlmIChcbiAgICAgICAgY2hpbGQgaW5zdGFuY2VvZiBHdGsuQWRqdXN0bWVudCAmJlxuICAgICAgICBcInNldF9hZGp1c3RtZW50XCIgaW4gcGFyZW50ICYmXG4gICAgICAgIHR5cGVvZiBwYXJlbnQuc2V0X2FkanVzdG1lbnQgPT09IFwiZnVuY3Rpb25cIlxuICAgICkge1xuICAgICAgICBwYXJlbnQuc2V0X2FkanVzdG1lbnQoY2hpbGQpXG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgICBjaGlsZCBpbnN0YW5jZW9mIEd0ay5XaWRnZXQgJiZcbiAgICAgICAgcGFyZW50IGluc3RhbmNlb2YgR3RrLlN0YWNrICYmXG4gICAgICAgIGNoaWxkLm5hbWUgIT09IFwiXCIgJiZcbiAgICAgICAgY2hpbGQubmFtZSAhPT0gbnVsbCAmJlxuICAgICAgICBnZXRUeXBlKGNoaWxkKSA9PT0gXCJuYW1lZFwiXG4gICAgKSB7XG4gICAgICAgIHBhcmVudC5hZGRfbmFtZWQoY2hpbGQsIGNoaWxkLm5hbWUpXG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgR3RrLlBvcG92ZXIgJiYgcGFyZW50IGluc3RhbmNlb2YgR3RrLk1lbnVCdXR0b24pIHtcbiAgICAgICAgcGFyZW50LnNldF9wb3BvdmVyKGNoaWxkKVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIGlmIChcbiAgICAgICAgY2hpbGQgaW5zdGFuY2VvZiBHaW8uTWVudU1vZGVsICYmXG4gICAgICAgIChwYXJlbnQgaW5zdGFuY2VvZiBHdGsuTWVudUJ1dHRvbiB8fCBwYXJlbnQgaW5zdGFuY2VvZiBHdGsuUG9wb3Zlck1lbnUpXG4gICAgKSB7XG4gICAgICAgIHBhcmVudC5zZXRfbWVudV9tb2RlbChjaGlsZClcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICBpZiAoY2hpbGQgaW5zdGFuY2VvZiBHaW8uTWVudUl0ZW0gJiYgcGFyZW50IGluc3RhbmNlb2YgR2lvLk1lbnUpIHtcbiAgICAgICAgLy8gVE9ETzpcbiAgICB9XG5cbiAgICBpZiAoY2hpbGQgaW5zdGFuY2VvZiBHdGsuV2luZG93ICYmIHBhcmVudCBpbnN0YW5jZW9mIEd0ay5BcHBsaWNhdGlvbikge1xuICAgICAgICBwYXJlbnQuYWRkX3dpbmRvdyhjaGlsZClcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICBpZiAoY2hpbGQgaW5zdGFuY2VvZiBHdGsuVGV4dEJ1ZmZlciAmJiBwYXJlbnQgaW5zdGFuY2VvZiBHdGsuVGV4dFZpZXcpIHtcbiAgICAgICAgcGFyZW50LnNldF9idWZmZXIoY2hpbGQpXG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIHJlbW92ZShwYXJlbnQ6IEdPYmplY3QuT2JqZWN0LCBjaGlsZDogR09iamVjdC5PYmplY3QpIHtcbiAgICBpZiAoc3BlY2lhbFJlbW92ZShwYXJlbnQsIGNoaWxkKSkgcmV0dXJuXG5cbiAgICBpZiAoXCJzZXRfY2hpbGRcIiBpbiBwYXJlbnQgJiYgdHlwZW9mIHBhcmVudC5zZXRfY2hpbGQgPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBwYXJlbnQuc2V0X2NoaWxkKG51bGwpXG4gICAgfVxuXG4gICAgaWYgKFwicmVtb3ZlXCIgaW4gcGFyZW50ICYmIHR5cGVvZiBwYXJlbnQucmVtb3ZlID09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gcGFyZW50LnJlbW92ZShjaGlsZClcbiAgICB9XG5cbiAgICB0aHJvdyBFcnJvcihgY2Fubm90IHJlbW92ZSAke2NoaWxkfSBmcm9tICR7cGFyZW50fWApXG59XG5cbmNvbnN0IHsgYWRkQ2hpbGQsIGludHJpbnNpY0VsZW1lbnRzIH0gPSBjb25maWd1ZSh7XG4gICAgc2V0Q3NzKG9iamVjdCwgY3NzKSB7XG4gICAgICAgIGlmICghKG9iamVjdCBpbnN0YW5jZW9mIEd0ay5XaWRnZXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gY29uc29sZS53YXJuKEVycm9yKGBjYW5ub3Qgc2V0IGNzcyBvbiAke29iamVjdH1gKSlcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGN0eCA9IG9iamVjdC5nZXRfc3R5bGVfY29udGV4dCgpXG4gICAgICAgIGxldCBwcm92aWRlcjogR3RrLkNzc1Byb3ZpZGVyXG5cbiAgICAgICAgY29uc3Qgc2V0dGVyID0gKGNzczogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWNzcy5pbmNsdWRlcyhcIntcIikgfHwgIWNzcy5pbmNsdWRlcyhcIn1cIikpIHtcbiAgICAgICAgICAgICAgICBjc3MgPSBgKiB7ICR7Y3NzfSB9YFxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocHJvdmlkZXIpIGN0eC5yZW1vdmVfcHJvdmlkZXIocHJvdmlkZXIpXG5cbiAgICAgICAgICAgIHByb3ZpZGVyID0gbmV3IEd0ay5Dc3NQcm92aWRlcigpXG4gICAgICAgICAgICBwcm92aWRlci5sb2FkX2Zyb21fc3RyaW5nKGNzcylcbiAgICAgICAgICAgIGN0eC5hZGRfcHJvdmlkZXIocHJvdmlkZXIsIEd0ay5TVFlMRV9QUk9WSURFUl9QUklPUklUWV9VU0VSKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNzcyBpbnN0YW5jZW9mIEFjY2Vzc29yKSB7XG4gICAgICAgICAgICBzZXR0ZXIoY3NzLmdldCgpKVxuICAgICAgICAgICAgY29uc3QgZGlzcG9zZSA9IGNzcy5zdWJzY3JpYmUoKCkgPT4gc2V0dGVyKGNzcy5nZXQoKSkpXG4gICAgICAgICAgICBvbkNsZWFudXAoZGlzcG9zZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNldHRlcihjc3MpXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHNldENsYXNzKG9iamVjdCwgY2xhc3NOYW1lKSB7XG4gICAgICAgIGlmICghKG9iamVjdCBpbnN0YW5jZW9mIEd0ay5XaWRnZXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gY29uc29sZS53YXJuKEVycm9yKGBjYW5ub3Qgc2V0IGNsYXNzTmFtZSBvbiAke29iamVjdH1gKSlcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjbGFzc05hbWUgaW5zdGFuY2VvZiBBY2Nlc3Nvcikge1xuICAgICAgICAgICAgb2JqZWN0LmNzc0NsYXNzZXMgPSBjbGFzc05hbWUuZ2V0KCkuc3BsaXQoL1xccysvKVxuICAgICAgICAgICAgY29uc3QgZGlzcG9zZSA9IGNsYXNzTmFtZS5zdWJzY3JpYmUoXG4gICAgICAgICAgICAgICAgKCkgPT4gKG9iamVjdC5jc3NDbGFzc2VzID0gY2xhc3NOYW1lLmdldCgpLnNwbGl0KC9cXHMrLykpLFxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgb25DbGVhbnVwKGRpc3Bvc2UpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvYmplY3Quc2V0X2Nzc19jbGFzc2VzKGNsYXNzTmFtZS5zcGxpdCgvXFxzKy8pKVxuICAgICAgICB9XG4gICAgfSxcbiAgICBhZGRDaGlsZChwYXJlbnQsIGNoaWxkLCBpbmRleCA9IC0xKSB7XG4gICAgICAgIGlmICghKGNoaWxkIGluc3RhbmNlb2YgR09iamVjdC5PYmplY3QpKSB7XG4gICAgICAgICAgICBjaGlsZCA9IEd0ay5MYWJlbC5uZXcoU3RyaW5nKGNoaWxkKSlcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzcGVjaWFsQWRkKHBhcmVudCwgY2hpbGQsIGluZGV4KSkgcmV0dXJuXG5cbiAgICAgICAgaWYgKHBhcmVudCBpbnN0YW5jZW9mIEZyYWdtZW50KSB7XG4gICAgICAgICAgICBwYXJlbnQuYWRkQ2hpbGQoY2hpbGQpXG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwYXJlbnQgaW5zdGFuY2VvZiBHdGsuQnVpbGRhYmxlKSB7XG4gICAgICAgICAgICBpZiAoY2hpbGQgaW5zdGFuY2VvZiBGcmFnbWVudCkge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgY2ggb2YgY2hpbGQuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkKHBhcmVudCwgY2gsIGluZGV4KVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNoaWxkLmNvbm5lY3QoXCJjaGlsZC1hZGRlZFwiLCAoXywgY2g6IHVua25vd24sIGluZGV4OiBudW1iZXIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoY2ggaW5zdGFuY2VvZiBHT2JqZWN0Lk9iamVjdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoVHlwZUVycm9yKGBjYW5ub3QgYWRkICR7Y2h9IHRvICR7cGFyZW50fWApKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYWRkQ2hpbGQocGFyZW50LCBjaCwgaW5kZXgpXG4gICAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgICAgIGNoaWxkLmNvbm5lY3QoXCJjaGlsZC1yZW1vdmVkXCIsIChfLCBjaDogdW5rbm93bikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIShjaCBpbnN0YW5jZW9mIEdPYmplY3QuT2JqZWN0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihUeXBlRXJyb3IoYGNhbm5vdCByZW1vdmUgJHtjaH0gZnJvbSAke3BhcmVudH1gKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZShwYXJlbnQsIGNoKVxuICAgICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgICAgICBvbkNsZWFudXAoKCkgPT4gY2hpbGQuZGVzdHJveSgpKVxuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhZGQocGFyZW50LCBjaGlsZCwgaW5kZXgpXG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuXG4gICAgICAgIHRocm93IEVycm9yKGBjYW5ub3QgYWRkICR7Y2hpbGR9IHRvICR7cGFyZW50fWApXG4gICAgfSxcbn0pXG5cbmV4cG9ydCB7IEZyYWdtZW50LCBpbnRyaW5zaWNFbGVtZW50cyB9XG5leHBvcnQgeyBqc3gsIGpzeHMgfSBmcm9tIFwiLi4vanN4L2pzeC5qc1wiXG4iLCAiZXhwb3J0IGNvbnN0IHNwYWNpbmcgPSB7XG4gIHhTbWFsbDogMixcbiAgc21hbGw6IDQsXG4gIG5vcm1hbDogOCxcbiAgbGFyZ2U6IDEyLFxufTtcbiIsICJpbXBvcnQge1xuICBBY2Nlc3NvcixcbiAgY3JlYXRlQmluZGluZyxcbiAgY3JlYXRlQ29tcHV0ZWQsXG4gIGNyZWF0ZVN0YXRlLFxuICBvbkNsZWFudXAsXG59IGZyb20gXCJhZ3NcIjtcbmltcG9ydCBNcHJpcyBmcm9tIFwiZ2k6Ly9Bc3RhbE1wcmlzXCI7XG5cbmNvbnN0IGdldFBsYXllcnNQbGF5aW5nID0gKHBsYXllcnM6IEFjY2Vzc29yPE1wcmlzLlBsYXllcltdPikgPT4ge1xuICByZXR1cm4gcGxheWVycy5nZXQoKS5tYXAoKHApID0+ICh7XG4gICAgYnVzTmFtZTogcC5nZXRfYnVzX25hbWUoKSxcbiAgICBpc1BsYXlpbmc6IHAuZ2V0X3BsYXliYWNrX3N0YXR1cygpID09PSBNcHJpcy5QbGF5YmFja1N0YXR1cy5QTEFZSU5HLFxuICB9KSk7XG59O1xuXG5leHBvcnQgY29uc3QgdXNlSXNBbnlQbGF5ZXJQbGF5aW5nID0gKCkgPT4ge1xuICBjb25zdCBtcHJpcyA9IE1wcmlzLmdldF9kZWZhdWx0KCk7XG4gIGNvbnN0IGFsbFBsYXllcnMgPSBjcmVhdGVCaW5kaW5nKG1wcmlzLCBcInBsYXllcnNcIik7XG5cbiAgY29uc3QgW3BsYXllcnNQbGF5aW5nLCBzZXRQbGF5ZXJzUGxheWluZ10gPSBjcmVhdGVTdGF0ZShcbiAgICBnZXRQbGF5ZXJzUGxheWluZyhhbGxQbGF5ZXJzKSxcbiAgKTtcblxuICBjb25zdCBpc0FueVBsYXllclBsYXlpbmcgPSBjcmVhdGVDb21wdXRlZChbcGxheWVyc1BsYXlpbmddLCAocGxheWVycykgPT4ge1xuICAgIHJldHVybiBwbGF5ZXJzLnNvbWUoKHApID0+ICEhcC5pc1BsYXlpbmcpO1xuICB9KTtcblxuICBhbGxQbGF5ZXJzLmdldCgpLmZvckVhY2goKHBsYXllcikgPT4ge1xuICAgIHBsYXllci5jb25uZWN0KFwibm90aWZ5OjpwbGF5YmFjay1zdGF0dXNcIiwgKCkgPT4ge1xuICAgICAgc2V0UGxheWVyc1BsYXlpbmcoZ2V0UGxheWVyc1BsYXlpbmcoYWxsUGxheWVycykpO1xuICAgIH0pO1xuICB9KTtcblxuICBjb25zdCB1bnN1YnNjcmliZVBsYXllcnMgPSBhbGxQbGF5ZXJzLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgc2V0UGxheWVyc1BsYXlpbmcoZ2V0UGxheWVyc1BsYXlpbmcoYWxsUGxheWVycykpO1xuICB9KTtcblxuICBvbkNsZWFudXAoKCkgPT4ge1xuICAgIHVuc3Vic2NyaWJlUGxheWVycygpO1xuICB9KTtcblxuICByZXR1cm4gaXNBbnlQbGF5ZXJQbGF5aW5nO1xufTtcbiIsICJpbXBvcnQgR2lvIGZyb20gXCJnaTovL0dpb1wiO1xuaW1wb3J0IEdMaWIgZnJvbSBcImdpOi8vR0xpYlwiO1xuXG5mdW5jdGlvbiBleHRyYWN0RnJhbWUodmlkZW9QYXRoOiBzdHJpbmcsIG91dHB1dFBhdGg6IHN0cmluZykge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IGNtZCA9IFtcbiAgICAgIFwiZmZtcGVnXCIsXG4gICAgICBcIi15XCIsIC8vIG92ZXJ3cml0ZSBvdXRwdXRcbiAgICAgIFwiLWlcIixcbiAgICAgIHZpZGVvUGF0aCxcbiAgICAgIFwiLWZyYW1lczp2XCIsXG4gICAgICBcIjFcIixcbiAgICAgIFwiLXE6dlwiLFxuICAgICAgXCIyXCIsXG4gICAgICBvdXRwdXRQYXRoLFxuICAgIF07XG5cbiAgICBjb25zdCBwcm9jID0gR2lvLlN1YnByb2Nlc3MubmV3KFxuICAgICAgY21kLFxuICAgICAgR2lvLlN1YnByb2Nlc3NGbGFncy5TVERPVVRfU0lMRU5DRSB8IEdpby5TdWJwcm9jZXNzRmxhZ3MuU1RERVJSX1NJTEVOQ0UsXG4gICAgKTtcblxuICAgIHByb2Mud2FpdF9jaGVja19hc3luYyhudWxsLCAocHJvY09iaiwgcmVzKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBzdWNjZXNzID0gcHJvY09iaj8ud2FpdF9jaGVja19maW5pc2gocmVzKTtcbiAgICAgICAgaWYgKHN1Y2Nlc3MpIHJlc29sdmUodHJ1ZSk7XG4gICAgICAgIGVsc2UgcmVqZWN0KG5ldyBFcnJvcihcImZmbXBlZyBmYWlsZWRcIikpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn1cblxuLy8gTmV3OiBMaXN0ZW4gZm9yIG1wdiAncGF0aCcgY2hhbmdlcyB2aWEgSVBDIGFuZCBleHRyYWN0IGZyYW1lIG9uIGVhY2ggdXBkYXRlXG5hc3luYyBmdW5jdGlvbiBsaXN0ZW5NcHZQYXRoQ2hhbmdlcyhcbiAgb25GcmFtZUV4dHJhY3RlZDogKGZyYW1lUGF0aDogc3RyaW5nKSA9PiB2b2lkLFxuICByZXRyeSA9IHRydWUsXG4pIHtcbiAgY29uc3QgYWRkcmVzcyA9IEdpby5Vbml4U29ja2V0QWRkcmVzcy5uZXcoXCIvdG1wL21wdnNvY2tldFwiKTtcbiAgY29uc3QgY2xpZW50ID0gbmV3IEdpby5Tb2NrZXRDbGllbnQoKTtcblxuICBsZXQgY29ubjogR2lvLklPU3RyZWFtO1xuXG4gIHRyeSB7XG4gICAgY29ubiA9IGF3YWl0IG5ldyBQcm9taXNlPEdpby5JT1N0cmVhbT4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY2xpZW50LmNvbm5lY3RfYXN5bmMoYWRkcmVzcywgbnVsbCwgKHNyYywgcmVzKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmVzb2x2ZShjbGllbnQuY29ubmVjdF9maW5pc2gocmVzKSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBwcmludGVycihcIkNvbm5lY3Rpb24gZmFpbGVkOlwiLCAoZXJyIGFzIHsgbWVzc2FnZTogc3RyaW5nIH0pLm1lc3NhZ2UpO1xuICAgIGlmIChyZXRyeSkge1xuICAgICAgR0xpYi50aW1lb3V0X2FkZF9zZWNvbmRzKEdMaWIuUFJJT1JJVFlfREVGQVVMVCwgMywgKCkgPT4ge1xuICAgICAgICBsaXN0ZW5NcHZQYXRoQ2hhbmdlcyhvbkZyYW1lRXh0cmFjdGVkLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIEdMaWIuU09VUkNFX1JFTU9WRTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBpbnB1dCA9IGNvbm4uZ2V0X2lucHV0X3N0cmVhbSgpO1xuICBjb25zdCBvdXRwdXQgPSBjb25uLmdldF9vdXRwdXRfc3RyZWFtKCk7XG5cbiAgLy8gU3Vic2NyaWJlXG4gIGNvbnN0IHN1YnNjcmliZUNtZCA9XG4gICAgSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgY29tbWFuZDogW1wib2JzZXJ2ZV9wcm9wZXJ0eVwiLCAxLCBcInBhdGhcIl0sXG4gICAgfSkgKyBcIlxcblwiO1xuXG4gIHRyeSB7XG4gICAgb3V0cHV0LndyaXRlX2FsbChzdWJzY3JpYmVDbWQsIG51bGwpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcHJpbnRlcnIoXCJXcml0ZSBmYWlsZWQ6XCIsIChlIGFzIHsgbWVzc2FnZTogc3RyaW5nIH0pLm1lc3NhZ2UpO1xuICAgIGlmIChyZXRyeSkge1xuICAgICAgR0xpYi50aW1lb3V0X2FkZF9zZWNvbmRzKEdMaWIuUFJJT1JJVFlfREVGQVVMVCwgMywgKCkgPT4ge1xuICAgICAgICBsaXN0ZW5NcHZQYXRoQ2hhbmdlcyhvbkZyYW1lRXh0cmFjdGVkLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIEdMaWIuU09VUkNFX1JFTU9WRTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cblxuICBsZXQgYnVmZmVyID0gXCJcIjtcblxuICBmdW5jdGlvbiBvblJlYWQoc3JjOiBHaW8uSW5wdXRTdHJlYW0gfCBudWxsLCByZXM6IEdpby5Bc3luY1Jlc3VsdCkge1xuICAgIGlmICghc3JjKSByZXR1cm47XG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgYnl0ZXMgPSBzcmMucmVhZF9ieXRlc19maW5pc2gocmVzKTtcbiAgICAgIGNvbnN0IGRhdGEgPSBieXRlcz8uZ2V0X2RhdGEoKTtcblxuICAgICAgaWYgKCFkYXRhIHx8IGRhdGEubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHByaW50ZXJyKFwiRGlzY29ubmVjdGVkIG9yIEVPRi4gUmVjb25uZWN0aW5nLi4uXCIpO1xuICAgICAgICBjb25uLmNsb3NlKG51bGwpOyAvLyBjbGVhbnVwXG4gICAgICAgIGlmIChyZXRyeSkge1xuICAgICAgICAgIEdMaWIudGltZW91dF9hZGRfc2Vjb25kcyhHTGliLlBSSU9SSVRZX0RFRkFVTFQsIDMsICgpID0+IHtcbiAgICAgICAgICAgIGxpc3Rlbk1wdlBhdGhDaGFuZ2VzKG9uRnJhbWVFeHRyYWN0ZWQsIHRydWUpO1xuICAgICAgICAgICAgcmV0dXJuIEdMaWIuU09VUkNFX1JFTU9WRTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGJ1ZmZlciArPSBuZXcgVGV4dERlY29kZXIoKS5kZWNvZGUoZGF0YSk7XG5cbiAgICAgIGNvbnN0IGxpbmVzID0gYnVmZmVyLnNwbGl0KFwiXFxuXCIpO1xuICAgICAgYnVmZmVyID0gbGluZXMucG9wKCkgfHwgXCJcIjtcblxuICAgICAgZm9yIChjb25zdCBsaW5lIG9mIGxpbmVzKSB7XG4gICAgICAgIGlmICghbGluZS50cmltKCkpIGNvbnRpbnVlO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IGpzb24gPSBKU09OLnBhcnNlKGxpbmUpO1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIGpzb24uZXZlbnQgPT09IFwicHJvcGVydHktY2hhbmdlXCIgJiZcbiAgICAgICAgICAgIGpzb24ubmFtZSA9PT0gXCJwYXRoXCIgJiZcbiAgICAgICAgICAgIGpzb24uZGF0YVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgY29uc3Qgb3V0cHV0UGF0aCA9IEdMaWIuYnVpbGRfZmlsZW5hbWV2KFtcbiAgICAgICAgICAgICAgXCIvdG1wXCIsXG4gICAgICAgICAgICAgIGBtcHZfY3VycmVudF9mcmFtZS0ke0RhdGUubm93KCl9LmpwZ2AsXG4gICAgICAgICAgICBdKTtcblxuICAgICAgICAgICAgZXh0cmFjdEZyYW1lKGpzb24uZGF0YSwgb3V0cHV0UGF0aClcbiAgICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIG9uRnJhbWVFeHRyYWN0ZWQob3V0cHV0UGF0aCk7XG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIC5jYXRjaCgoZSkgPT4ge1xuICAgICAgICAgICAgICAgIHByaW50ZXJyKFwiRnJhbWUgZXh0cmFjdGlvbiBlcnJvcjpcIiwgZS5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgcHJpbnRlcnIoXCJKU09OIHBhcnNlIGVycm9yOlwiLCAoZSBhcyB7IG1lc3NhZ2U6IHN0cmluZyB9KS5tZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBLZWVwIHJlYWRpbmdcbiAgICAgIHNyYy5yZWFkX2J5dGVzX2FzeW5jKDQwOTYsIEdMaWIuUFJJT1JJVFlfREVGQVVMVCwgbnVsbCwgb25SZWFkKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBwcmludGVycihcIlN0cmVhbSByZWFkIGVycm9yOlwiLCAoZSBhcyB7IG1lc3NhZ2U6IHN0cmluZyB9KS5tZXNzYWdlKTtcbiAgICB9XG4gIH1cblxuICBpbnB1dC5yZWFkX2J5dGVzX2FzeW5jKDQwOTYsIEdMaWIuUFJJT1JJVFlfREVGQVVMVCwgbnVsbCwgb25SZWFkKTtcbn1cblxuLy8gRXhwb3J0IGEgZnVuY3Rpb24gdG8gc3RhcnQgdGhlIGxpc3RlbmVyXG5leHBvcnQgZnVuY3Rpb24gc3RhcnRNcHZJbWFnZUxpc3RlbmVyKFxuICBvbkZyYW1lRXh0cmFjdGVkOiAoZnJhbWVQYXRoOiBzdHJpbmcpID0+IHZvaWQsXG4pIHtcbiAgbGlzdGVuTXB2UGF0aENoYW5nZXMob25GcmFtZUV4dHJhY3RlZCk7XG59XG4iLCAiaW1wb3J0IEdpbyBmcm9tIFwiZ2k6Ly9HaW9cIjtcbmltcG9ydCBHTGliIGZyb20gXCJnaTovL0dMaWJcIjtcblxuZnVuY3Rpb24gc2VuZE1wdkNvbW1hbmQoY29tbWFuZDogc3RyaW5nW10pIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCBhZGRyZXNzID0gR2lvLlVuaXhTb2NrZXRBZGRyZXNzLm5ldyhcIi90bXAvbXB2c29ja2V0XCIpO1xuICAgIGNvbnN0IGNsaWVudCA9IG5ldyBHaW8uU29ja2V0Q2xpZW50KCk7XG5cbiAgICBjbGllbnQuY29ubmVjdF9hc3luYyhhZGRyZXNzLCBudWxsLCAoY2xpZW50XywgcmVzKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoIWNsaWVudF8pIHtcbiAgICAgICAgICBwcmludGVycihcIk5vIGNsaWVudF8gZm9yIHNlbmRNcHZDb21tYW5kXCIpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNvbm4gPSBjbGllbnRfLmNvbm5lY3RfZmluaXNoKHJlcyk7XG4gICAgICAgIGNvbnN0IG91dHB1dCA9IGNvbm4uZ2V0X291dHB1dF9zdHJlYW0oKTtcblxuICAgICAgICBjb25zdCBjbWRTdHIgPSBKU09OLnN0cmluZ2lmeSh7IGNvbW1hbmQgfSkgKyBcIlxcblwiO1xuICAgICAgICBjb25zdCBieXRlQXJyYXkgPSBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUoY21kU3RyKTsgLy8gXHUyNzA1IENvbnZlcnQgdG8gVWludDhBcnJheVxuXG4gICAgICAgIG91dHB1dC53cml0ZV9ieXRlc19hc3luYyhcbiAgICAgICAgICBieXRlQXJyYXksXG4gICAgICAgICAgR0xpYi5QUklPUklUWV9ERUZBVUxULFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgKHN0cmVhbSwgcmVzdWx0KSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBzdHJlYW0/LndyaXRlX2J5dGVzX2ZpbmlzaChyZXN1bHQpO1xuICAgICAgICAgICAgICBvdXRwdXQuY2xvc2UobnVsbCk7XG4gICAgICAgICAgICAgIGNvbm4uY2xvc2UobnVsbCk7XG4gICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBlIGFzIHsgbWVzc2FnZTogc3RyaW5nIH07XG4gICAgICAgICAgICAgIHJlamVjdChcbiAgICAgICAgICAgICAgICBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gd3JpdGUgdG8gTVBWIHNvY2tldDogXCIgKyBlcnJvci5tZXNzYWdlKSxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICApO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zdCBlcnJvciA9IGUgYXMgeyBtZXNzYWdlOiBzdHJpbmcgfTtcbiAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihcIkZhaWxlZCB0byBjb25uZWN0IHRvIE1QViBzb2NrZXQ6IFwiICsgZXJyb3IubWVzc2FnZSkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn1cblxuZXhwb3J0IGNvbnN0IGNoYW5nZU1wdlBhcGVySW1hZ2UgPSAoYWN0aW9uOiBcIm5leHRcIiB8IFwicHJldlwiKSA9PiB7XG4gIGlmIChhY3Rpb24gPT09IFwibmV4dFwiKSB7XG4gICAgc2VuZE1wdkNvbW1hbmQoW1wicGxheWxpc3QtbmV4dFwiXSk7XG4gIH0gZWxzZSB7XG4gICAgc2VuZE1wdkNvbW1hbmQoW1wicGxheWxpc3QtcHJldlwiXSk7XG4gIH1cbn07XG4iLCAiaW1wb3J0IEdUb3AgZnJvbSBcImdpOi8vR1RvcFwiO1xuXG5jb25zdCBjcHU6IEdUb3AuZ2xpYnRvcF9jcHUgPSBuZXcgR1RvcC5nbGlidG9wX2NwdSgpO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q3B1VXNhZ2UoKSB7XG4gIEdUb3AuZ2xpYnRvcF9nZXRfY3B1KGNwdSk7XG5cbiAgY29uc3QgdXNlZCA9XG4gICAgY3B1LnVzZXIgKyBjcHUuc3lzICsgY3B1Lm5pY2UgKyBjcHUuaXJxICsgY3B1LnNvZnRpcnEgKyBjcHUuaW93YWl0O1xuICBjb25zdCB0b3RhbCA9IHVzZWQgKyBjcHUuaWRsZSArIGNwdS5pb3dhaXQ7XG5cbiAgcmV0dXJuIHsgdXNlZCwgdG90YWwgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZUNwdUxvYWQoXG4gIHByZXY6IFJldHVyblR5cGU8dHlwZW9mIGdldENwdVVzYWdlPixcbiAgY3VycjogUmV0dXJuVHlwZTx0eXBlb2YgZ2V0Q3B1VXNhZ2U+LFxuKSB7XG4gIGlmICghcHJldiB8fCAhY3VycikgcmV0dXJuIG51bGw7XG5cbiAgY29uc3QgZGlmZlVzZWQgPSBjdXJyLnVzZWQgLSBwcmV2LnVzZWQ7XG4gIGNvbnN0IGRpZmZUb3RhbCA9IGN1cnIudG90YWwgLSBwcmV2LnRvdGFsO1xuXG4gIGNvbnN0IHJlcyA9IGRpZmZVc2VkIC8gZGlmZlRvdGFsO1xuXG4gIHJldHVybiByZXM7XG59XG4iLCAiaW1wb3J0IHsgY3JlYXRlU3RhdGUgfSBmcm9tIFwiYWdzXCI7XG5pbXBvcnQgeyBjYWxjdWxhdGVDcHVMb2FkLCBnZXRDcHVVc2FnZSB9IGZyb20gXCIuLi91dGlscy9jcHVcIjtcbmltcG9ydCB7IGNyZWF0ZVBvbGwgfSBmcm9tIFwiYWdzL3RpbWVcIjtcblxuZXhwb3J0IGNvbnN0IHVzZUNwdVVzYWdlID0gKCkgPT4ge1xuICBjb25zdCBbcHJldiwgc2V0UHJldl0gPSBjcmVhdGVTdGF0ZShnZXRDcHVVc2FnZSgpKTtcblxuICBjb25zdCBkYXRhID0gY3JlYXRlUG9sbChcbiAgICB7XG4gICAgICBjcHVVc2FnZTogMCxcbiAgICAgIGNwdVVzYWdlSW5GcmFjdGlvbjogMCxcbiAgICB9LFxuICAgIDEwMDAsXG4gICAgKCkgPT4ge1xuICAgICAgY29uc3QgY3VyciA9IGdldENwdVVzYWdlKCk7XG4gICAgICBjb25zdCBsb2FkID0gY2FsY3VsYXRlQ3B1TG9hZChwcmV2LmdldCgpLCBjdXJyKTtcblxuICAgICAgaWYgKCFsb2FkKSByZXR1cm4geyBjcHVVc2FnZTogMCwgY3B1VXNhZ2VJbkZyYWN0aW9uOiAwIH07XG5cbiAgICAgIHNldFByZXYoY3Vycik7XG5cbiAgICAgIGNvbnN0IGNwdVVzYWdlID0gTnVtYmVyKGxvYWQpICogMTAwO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY3B1VXNhZ2UsXG4gICAgICAgIGNwdVVzYWdlSW5GcmFjdGlvbjogY3B1VXNhZ2UgLyAxMDAsXG4gICAgICB9O1xuICAgIH0sXG4gICk7XG5cbiAgcmV0dXJuIGRhdGE7XG59O1xuIiwgImltcG9ydCBHVG9wIGZyb20gXCJnaTovL0dUb3BcIjtcblxuY29uc3QgbWVtID0gbmV3IEdUb3AuZ2xpYnRvcF9tZW0oKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldE1lbW9yeVVzYWdlKCkge1xuICBHVG9wLmdsaWJ0b3BfZ2V0X21lbShtZW0pO1xuXG4gIGNvbnN0IHRvdGFsID0gbWVtLnRvdGFsO1xuICBjb25zdCBhdmFpbGFibGUgPSBtZW0uZnJlZSArIG1lbS5idWZmZXIgKyBtZW0uY2FjaGVkO1xuICBjb25zdCB1c2VkID0gdG90YWwgLSBhdmFpbGFibGU7XG4gIGNvbnN0IHBlcmNlbnRVc2VkID0gdXNlZCAvIHRvdGFsO1xuXG4gIHJldHVybiB7XG4gICAgdG90YWxLQjogdG90YWwsXG4gICAgYXZhaWxhYmxlS0I6IGF2YWlsYWJsZSxcbiAgICB1c2VkS0I6IHVzZWQsXG4gICAgcGVyY2VudFVzZWQ6IHBlcmNlbnRVc2VkLnRvRml4ZWQoMiksXG4gIH07XG59XG4iLCAiaW1wb3J0IHsgY3JlYXRlUG9sbCB9IGZyb20gXCJhZ3MvdGltZVwiO1xuaW1wb3J0IHsgZ2V0TWVtb3J5VXNhZ2UgfSBmcm9tIFwiLi4vdXRpbHMvbWVtb3J5LXJhbVwiO1xuXG5leHBvcnQgY29uc3QgdXNlTWVtb3J5UmFtVXNhZ2UgPSAoKSA9PiB7XG4gIGNvbnN0IGRhdGEgPSBjcmVhdGVQb2xsKFxuICAgIHtcbiAgICAgIG1lbW9yeVVzYWdlOiAwLFxuICAgICAgbWVtb3J5VXNhZ2VJbkZyYWN0aW9uOiAwLFxuICAgIH0sXG4gICAgMTAwMCxcbiAgICAoKSA9PiB7XG4gICAgICBjb25zdCBsb2FkID0gZ2V0TWVtb3J5VXNhZ2UoKTtcblxuICAgICAgaWYgKCFsb2FkKSByZXR1cm4geyBtZW1vcnlVc2FnZTogMCwgbWVtb3J5VXNhZ2VJbkZyYWN0aW9uOiAwIH07XG5cbiAgICAgIGNvbnN0IHVzZWQgPSBOdW1iZXIobG9hZC5wZXJjZW50VXNlZCkgKiAxMDA7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIG1lbW9yeVVzYWdlOiB1c2VkLFxuICAgICAgICBtZW1vcnlVc2FnZUluRnJhY3Rpb246IHVzZWQgLyAxMDAsXG4gICAgICB9O1xuICAgIH0sXG4gICk7XG5cbiAgcmV0dXJuIGRhdGE7XG59O1xuIiwgImltcG9ydCB7IGNyZWF0ZVBvbGwgfSBmcm9tIFwiYWdzL3RpbWVcIjtcbmltcG9ydCBHTGliIGZyb20gXCJnaTovL0dMaWJcIjtcblxuZXhwb3J0IGNvbnN0IHVzZUZvcm1hdHRlZFRpbWUgPSAoZm9ybWF0OiBcInRpbWVcIiB8IFwidGltZS13aXRoLXBtXCIpID0+IHtcbiAgY29uc3QgdGltZVN0cmluZyA9IGNyZWF0ZVBvbGwoXCJcIiwgNTAwLCAoKSA9PiB7XG4gICAgbGV0IG5vdyA9IEdMaWIuRGF0ZVRpbWUubmV3X25vd19sb2NhbCgpO1xuICAgIGNvbnN0IGZvcm1hdFRvVXNlID0gZm9ybWF0ID09PSBcInRpbWVcIiA/IFwiJUk6JU1cIiA6IFwiJUk6JU0gJXBcIjtcbiAgICByZXR1cm4gbm93LmZvcm1hdChmb3JtYXRUb1VzZSkgPz8gXCJcIjtcbiAgfSk7XG5cbiAgcmV0dXJuIHRpbWVTdHJpbmc7XG59O1xuIiwgImltcG9ydCB7IEFjY2Vzc29yLCBjcmVhdGVCaW5kaW5nLCBjcmVhdGVDb21wdXRlZCwgY3JlYXRlU3RhdGUsIEZvciB9IGZyb20gXCJhZ3NcIjtcbmltcG9ydCB7IEdkayB9IGZyb20gXCJhZ3MvZ3RrNFwiO1xuaW1wb3J0IEh5cHJsYW5kIGZyb20gXCJnaTovL0FzdGFsSHlwcmxhbmRcIjtcbmltcG9ydCB7IGdldEFwcEljb24sIGdldElzSWNvbkZpbGUgfSBmcm9tIFwiLi4vdXRpbHMvaWNvbnNcIjtcbmltcG9ydCB7IGdldFdvcmtzcGFjZXNPZkN1cnJlbnRNb25pdG9yIH0gZnJvbSBcIi4uL3V0aWxzL3dvcmtzcGFjZXNcIjtcbmltcG9ydCB7IEVtcHR5SHlwcmxhbmRXb3Jrc3BhY2UgfSBmcm9tIFwiLi4vb2JqZWN0cy9FbXB0eUh5cHJsYW5kV29ya3NwYWNlXCI7XG5cbmNvbnN0IENsaWVudEl0ZW0gPSAoe1xuICBjbGllbnQsXG4gIGZvY3VzZWRDbGllbnQsXG4gIGhhc01vcmVDbGllbnRzLFxufToge1xuICBjbGllbnQ6IEh5cHJsYW5kLkNsaWVudDtcbiAgZm9jdXNlZENsaWVudDogQWNjZXNzb3I8SHlwcmxhbmQuQ2xpZW50PjtcbiAgaGFzTW9yZUNsaWVudHM6IEFjY2Vzc29yPGJvb2xlYW4+O1xufSkgPT4ge1xuICBjb25zdCBmb3VuZCA9IGdldEFwcEljb24oY2xpZW50LmdldF9jbGFzcygpKTtcbiAgY29uc3QgaXNJY29uID0gZ2V0SXNJY29uRmlsZSh7IGljb246IGZvdW5kIH0pID09PSBmYWxzZTtcbiAgY29uc3QgdGl0bGUgPSBjcmVhdGVCaW5kaW5nKGNsaWVudCwgXCJ0aXRsZVwiKTtcblxuICBjb25zdCBpc0ZvY3VzZWQgPSBmb2N1c2VkQ2xpZW50KFxuICAgIChjKSA9PiBjPy5nZXRfYWRkcmVzcygpID09PSBjbGllbnQ/LmdldF9hZGRyZXNzKCksXG4gICk7XG5cbiAgY29uc3QgY2xhc3NOYW1lID0gY3JlYXRlQ29tcHV0ZWQoXG4gICAgW2lzRm9jdXNlZCwgaGFzTW9yZUNsaWVudHNdLFxuICAgIChpc0ZvY3VzZWQsIGhhc01vcmVDbGllbnRzKSA9PiB7XG4gICAgICBsZXQgcmVzID0gXCJXb3Jrc3BhY2VDbGllbnRJdGVtIGNpcmN1bGFyXCI7XG5cbiAgICAgIGlmIChpc0ZvY3VzZWQgPT09IHRydWUpIHtcbiAgICAgICAgcmVzICs9IFwiIGZvY3VzZWRcIjtcbiAgICAgIH0gZWxzZSBpZiAoaGFzTW9yZUNsaWVudHMgPT09IHRydWUpIHtcbiAgICAgICAgcmVzICs9IFwiIGZsYXRcIjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlcztcbiAgICB9LFxuICApO1xuICByZXR1cm4gKFxuICAgIDxidXR0b25cbiAgICAgIGNsYXNzPXtjbGFzc05hbWV9XG4gICAgICB0b29sdGlwVGV4dD17dGl0bGV9XG4gICAgICBvbkNsaWNrZWQ9eygpID0+IHtcbiAgICAgICAgY29uc3QgaXNDdXJyZW50bHlGb2N1c2VkID0gaXNGb2N1c2VkLmdldCgpO1xuICAgICAgICBpZiAoaXNDdXJyZW50bHlGb2N1c2VkID09PSB0cnVlKSByZXR1cm47XG5cbiAgICAgICAgY2xpZW50LmZvY3VzKCk7XG4gICAgICB9fVxuICAgICAgZm9jdXNhYmxlPXtmYWxzZX1cbiAgICA+XG4gICAgICA8aW1hZ2VcbiAgICAgICAgaWNvbk5hbWU9e2lzSWNvbiA/IGZvdW5kIDogdW5kZWZpbmVkfVxuICAgICAgICB2aXNpYmxlPXshIWZvdW5kfVxuICAgICAgICBmaWxlPXtpc0ljb24gPyB1bmRlZmluZWQgOiBmb3VuZH1cbiAgICAgIC8+XG4gICAgPC9idXR0b24+XG4gICk7XG59O1xuXG5jb25zdCBXb3Jrc3BhY2VJdGVtID0gKHtcbiAgd29ya3NwYWNlLFxuICBmb2N1c2VkQ2xpZW50LFxuICBmb2N1c2VkV29ya3NwYWNlSWQsXG4gIGh5cHJsYW5kLFxuICBpbmRleCxcbn06IHtcbiAgZm9jdXNlZFdvcmtzcGFjZUlkOiBBY2Nlc3NvcjxudW1iZXI+O1xuICB3b3Jrc3BhY2U6IEh5cHJsYW5kLldvcmtzcGFjZSB8IEVtcHR5SHlwcmxhbmRXb3Jrc3BhY2U7XG4gIGZvY3VzZWRDbGllbnQ6IEFjY2Vzc29yPEh5cHJsYW5kLkNsaWVudD47XG4gIGh5cHJsYW5kOiBIeXBybGFuZC5IeXBybGFuZDtcbiAgaW5kZXg6IEFjY2Vzc29yPG51bWJlcj47XG59KSA9PiB7XG4gIGNvbnN0IGNsaWVudHMgPSBjcmVhdGVCaW5kaW5nKHdvcmtzcGFjZSwgXCJjbGllbnRzXCIpO1xuICBjb25zdCBoYXNOb0NsaWVudHMgPSBjbGllbnRzKChjKSA9PiBjLmxlbmd0aCA+IDAgPT09IGZhbHNlKTtcblxuICBjb25zdCBjbGFzc05hbWUgPSBjbGllbnRzKChjbGllbnRzKSA9PiB7XG4gICAgbGV0IHJlcyA9IFwiV29ya3NwYWNlSXRlbVwiO1xuXG4gICAgaWYgKGNsaWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgcmVzICs9IFwiIGdyb3VwXCI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfSk7XG5cbiAgY29uc3QgaXNGb2N1c2VkRW1wdHkgPSBmb2N1c2VkV29ya3NwYWNlSWQoKHYpID0+IHtcbiAgICByZXR1cm4gd29ya3NwYWNlLmdldF9pZCgpID09PSB2O1xuICB9KTtcblxuICByZXR1cm4gKFxuICAgIDxib3ggY2xhc3M9e2NsYXNzTmFtZX0+XG4gICAgICA8Rm9yIGVhY2g9e2NsaWVudHN9PlxuICAgICAgICB7KGNsaWVudCkgPT4gKFxuICAgICAgICAgIDxDbGllbnRJdGVtXG4gICAgICAgICAgICBjbGllbnQ9e2NsaWVudH1cbiAgICAgICAgICAgIGZvY3VzZWRDbGllbnQ9e2ZvY3VzZWRDbGllbnR9XG4gICAgICAgICAgICBoYXNNb3JlQ2xpZW50cz17Y2xpZW50cygoYykgPT4gYy5sZW5ndGggPiAxKX1cbiAgICAgICAgICAvPlxuICAgICAgICApfVxuICAgICAgPC9Gb3I+XG5cbiAgICAgIDxidXR0b25cbiAgICAgICAgdmlzaWJsZT17aGFzTm9DbGllbnRzfVxuICAgICAgICBjbGFzcz17aXNGb2N1c2VkRW1wdHkoKHYpID0+XG4gICAgICAgICAgdiA9PT0gdHJ1ZSA/IFwiV29ya3NwYWNlQ2xpZW50SXRlbSBmb2N1c2VkXCIgOiBcIldvcmtzcGFjZUNsaWVudEl0ZW1cIixcbiAgICAgICAgKX1cbiAgICAgICAgb25DbGlja2VkPXsoKSA9PiB7XG4gICAgICAgICAgaHlwcmxhbmQuZGlzcGF0Y2goXCJzcGxpdC13b3Jrc3BhY2VcIiwgKGluZGV4LmdldCgpICsgMSkudG9TdHJpbmcoKSk7XG4gICAgICAgIH19XG4gICAgICAgIHRvb2x0aXBUZXh0PXtcIlZhY2lvXCJ9XG4gICAgICA+XG4gICAgICAgIDxsYWJlbCBsYWJlbD1cIlx1MjAyMlwiIC8+XG4gICAgICA8L2J1dHRvbj5cbiAgICA8L2JveD5cbiAgKTtcbn07XG5jb25zdCBXb3Jrc3BhY2VzID0gKHtcbiAgZ2RrbW9uaXRvcixcbiAgaW5kZXgsXG59OiB7XG4gIGdka21vbml0b3I6IEdkay5Nb25pdG9yO1xuICBpbmRleDogbnVtYmVyO1xufSkgPT4ge1xuICBjb25zdCBoeXBybGFuZCA9IEh5cHJsYW5kLmdldF9kZWZhdWx0KCk7XG4gIGNvbnN0IGZvY3VzZWRXb3Jrc3BhY2UgPSBjcmVhdGVCaW5kaW5nKGh5cHJsYW5kLCBcImZvY3VzZWRXb3Jrc3BhY2VcIik7XG4gIGNvbnN0IGZvY3VzZWRXb3Jrc3BhY2VJZCA9IGZvY3VzZWRXb3Jrc3BhY2UoKHYpID0+IHY/LmdldF9pZCgpKTtcblxuICBjb25zdCBbd29ya3NwYWNlcywgc2V0V29ya3NwYWNlc10gPSBjcmVhdGVTdGF0ZShcbiAgICBnZXRXb3Jrc3BhY2VzT2ZDdXJyZW50TW9uaXRvcihoeXBybGFuZCwgZ2RrbW9uaXRvciwgaW5kZXgpLFxuICApO1xuICBjb25zdCBmb2N1c2VkQ2xpZW50ID0gY3JlYXRlQmluZGluZyhoeXBybGFuZCwgXCJmb2N1c2VkX2NsaWVudFwiKTtcblxuICBoeXBybGFuZC5jb25uZWN0KFwibm90aWZ5Ojp3b3Jrc3BhY2VzXCIsICgpID0+IHtcbiAgICBjb25zdCBuZXdXb3Jrc3BhY2VzID0gZ2V0V29ya3NwYWNlc09mQ3VycmVudE1vbml0b3IoXG4gICAgICBoeXBybGFuZCxcbiAgICAgIGdka21vbml0b3IsXG4gICAgICBpbmRleCxcbiAgICApO1xuXG4gICAgc2V0V29ya3NwYWNlcyhuZXdXb3Jrc3BhY2VzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIChcbiAgICA8Ym94IGNsYXNzPVwiV29ya3NwYWNlc1wiPlxuICAgICAgPEZvciBlYWNoPXt3b3Jrc3BhY2VzfT5cbiAgICAgICAgeyhpdGVtLCBpbmRleCkgPT4gKFxuICAgICAgICAgIDxXb3Jrc3BhY2VJdGVtXG4gICAgICAgICAgICBpbmRleD17aW5kZXh9XG4gICAgICAgICAgICBoeXBybGFuZD17aHlwcmxhbmR9XG4gICAgICAgICAgICBmb2N1c2VkV29ya3NwYWNlSWQ9e2ZvY3VzZWRXb3Jrc3BhY2VJZH1cbiAgICAgICAgICAgIHdvcmtzcGFjZT17aXRlbX1cbiAgICAgICAgICAgIGZvY3VzZWRDbGllbnQ9e2ZvY3VzZWRDbGllbnR9XG4gICAgICAgICAgLz5cbiAgICAgICAgKX1cbiAgICAgIDwvRm9yPlxuICAgIDwvYm94PlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgV29ya3NwYWNlcztcbiIsICJpbXBvcnQgeyBHZGsgfSBmcm9tIFwiYWdzL2d0azRcIjtcbmltcG9ydCBIeXBybGFuZCBmcm9tIFwiZ2k6Ly9Bc3RhbEh5cHJsYW5kXCI7XG5cbmV4cG9ydCBjb25zdCBnZXRJc0N1cnJlbnRNb25pdG9yID0gKFxuICBoTW9uaXRvcjogSHlwcmxhbmQuTW9uaXRvcixcbiAgZ01vbml0b3I6IEdkay5Nb25pdG9yLFxuKSA9PiB7XG4gIHJldHVybiBoTW9uaXRvcj8uZ2V0X21vZGVsKCkgPT09IGdNb25pdG9yPy5nZXRfbW9kZWwoKTtcbn07XG4iLCAiaW1wb3J0IEdPYmplY3QsIHsgcHJvcGVydHksIHJlZ2lzdGVyIH0gZnJvbSBcImFncy9nb2JqZWN0XCI7XG5pbXBvcnQgQXN0YWxIeXBybGFuZCBmcm9tIFwiZ2k6Ly9Bc3RhbEh5cHJsYW5kP3ZlcnNpb249MC4xXCI7XG5cbkByZWdpc3Rlcih7IEdUeXBlTmFtZTogXCJFbXB0eUh5cHJsYW5kV29ya3NwYWNlXCIgfSlcbmV4cG9ydCBjbGFzcyBFbXB0eUh5cHJsYW5kV29ya3NwYWNlIGV4dGVuZHMgR09iamVjdC5PYmplY3Qge1xuICBAcHJvcGVydHkoTnVtYmVyKSBpZCA9IDA7XG5cbiAgY29uc3RydWN0b3IoeyBpZCB9OiB7IGlkOiBudW1iZXIgfSkge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLmlkID0gaWQ7XG4gIH1cblxuICBnZXRfaWQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5pZDtcbiAgfVxuXG4gIGdldF9jbGllbnRzKCk6IEFzdGFsSHlwcmxhbmQuQ2xpZW50W10ge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIGdldCBjbGllbnRzKCk6IEFzdGFsSHlwcmxhbmQuQ2xpZW50W10ge1xuICAgIHJldHVybiB0aGlzLmdldF9jbGllbnRzKCk7XG4gIH1cbn1cbiIsICJpbXBvcnQgeyBHZGsgfSBmcm9tIFwiYWdzL2d0azRcIjtcbmltcG9ydCBBc3RhbEh5cHJsYW5kIGZyb20gXCJnaTovL0FzdGFsSHlwcmxhbmQ/dmVyc2lvbj0wLjFcIjtcbmltcG9ydCB7IGdldElzQ3VycmVudE1vbml0b3IgfSBmcm9tIFwiLi9pcy1jdXJyZW50LW1vbml0b3JcIjtcbmltcG9ydCB7IEVtcHR5SHlwcmxhbmRXb3Jrc3BhY2UgfSBmcm9tIFwiLi4vb2JqZWN0cy9FbXB0eUh5cHJsYW5kV29ya3NwYWNlXCI7XG5cbmNvbnN0IHdvcmtzcGFjZXNMaW1pdCA9IDU7XG5cbmV4cG9ydCBjb25zdCBnZXRXb3Jrc3BhY2VzT2ZDdXJyZW50TW9uaXRvciA9IChcbiAgaHlwcmxhbmQ6IEFzdGFsSHlwcmxhbmQuSHlwcmxhbmQsXG4gIGdka21vbml0b3I6IEdkay5Nb25pdG9yLFxuICBtb25pdG9ySW5kZXg6IG51bWJlcixcbik6IChBc3RhbEh5cHJsYW5kLldvcmtzcGFjZSB8IEVtcHR5SHlwcmxhbmRXb3Jrc3BhY2UpW10gPT4ge1xuICBjb25zdCB3b3Jrc3BhY2VzID0gaHlwcmxhbmQuZ2V0X3dvcmtzcGFjZXMoKTtcbiAgY29uc3QgZXhpc3RpbmcgPSB3b3Jrc3BhY2VzLmZpbHRlcigodykgPT4ge1xuICAgIHJldHVybiBnZXRJc0N1cnJlbnRNb25pdG9yKHcuZ2V0X21vbml0b3IoKSwgZ2RrbW9uaXRvcik7XG4gIH0pO1xuXG4gIGNvbnN0IGJ5SWQgPSBuZXcgTWFwKGV4aXN0aW5nLm1hcCgodykgPT4gW3cuZ2V0X2lkKCksIHddKSk7XG5cbiAgY29uc3QgcmVzdWx0OiAoQXN0YWxIeXBybGFuZC5Xb3Jrc3BhY2UgfCBFbXB0eUh5cHJsYW5kV29ya3NwYWNlKVtdID0gW107XG5cbiAgZm9yIChsZXQgaSA9IDE7IGkgPD0gd29ya3NwYWNlc0xpbWl0OyBpKyspIHtcbiAgICBjb25zdCBpZCA9IGkgKyB3b3Jrc3BhY2VzTGltaXQgKiBtb25pdG9ySW5kZXg7XG4gICAgY29uc3Qgd3MgPSBieUlkLmdldChpZCk7XG5cbiAgICBpZiAod3MpIHtcbiAgICAgIHJlc3VsdC5wdXNoKHdzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ3JlYXRlIGEgZmFrZSBlbXB0eSB3b3Jrc3BhY2Ugb2JqZWN0XG4gICAgICBjb25zdCBmYWtlID0gbmV3IEVtcHR5SHlwcmxhbmRXb3Jrc3BhY2Uoe1xuICAgICAgICBpZCxcbiAgICAgIH0pO1xuXG4gICAgICByZXN1bHQucHVzaChmYWtlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsICJpbXBvcnQgeyBjcmVhdGVCaW5kaW5nLCBjcmVhdGVTdGF0ZSwgRm9yIH0gZnJvbSBcImFnc1wiO1xuaW1wb3J0IEFzdGFsVHJheSBmcm9tIFwiZ2k6Ly9Bc3RhbFRyYXlcIjtcbmltcG9ydCB7IHNwYWNpbmcgfSBmcm9tIFwiLi4vY29uc3RhbnRzL3RoZW1lL3NwYWNpbmdcIjtcblxuY29uc3QgZ2V0RmluYWxUb29sdGlwTWFya3VwID0gKGl0ZW06IEFzdGFsVHJheS5UcmF5SXRlbSk6IHN0cmluZyA9PiB7XG4gIHJldHVybiBpdGVtLmdldF90b29sdGlwX21hcmt1cCgpIHx8IGl0ZW0uZ2V0X3RpdGxlKCk7XG59O1xuXG5jb25zdCBUcmF5SXRlbSA9ICh7IGl0ZW0gfTogeyBpdGVtOiBBc3RhbFRyYXkuVHJheUl0ZW0gfSkgPT4ge1xuICBjb25zdCBoYXNJdGVtczogYm9vbGVhbiA9ICEhKGl0ZW0uZ2V0X21lbnVfbW9kZWwoKT8uZ2V0X25faXRlbXMoKSBzYXRpc2ZpZXNcbiAgICB8IG51bWJlclxuICAgIHwgdW5kZWZpbmVkKTtcblxuICBjb25zdCBbZmluYWxUb29sdGlwTWFya3VwLCBzZXRGaW5hbFRvb2x0aXBNYXJrdXBdID0gY3JlYXRlU3RhdGUoXG4gICAgZ2V0RmluYWxUb29sdGlwTWFya3VwKGl0ZW0pLFxuICApO1xuXG4gIGNvbnN0IGdpY29uID0gY3JlYXRlQmluZGluZyhpdGVtLCBcImdpY29uXCIpO1xuICBjb25zdCBtZW51TW9kZWwgPSBjcmVhdGVCaW5kaW5nKGl0ZW0sIFwibWVudU1vZGVsXCIpO1xuXG4gIGl0ZW0uY29ubmVjdChcIm5vdGlmeTo6dG9vbHRpcFwiLCAocykgPT4ge1xuICAgIC8vIG5vdGlmeTo6dG9vbHRpcC1tYXJrdXAgZG9lc24ndCBkbyBhbnl0aGluZyBidXQgbm90aWZ5Ojp0b29sdGlwIGRvZXNcbiAgICBzZXRGaW5hbFRvb2x0aXBNYXJrdXAoZ2V0RmluYWxUb29sdGlwTWFya3VwKHMpKTtcbiAgfSk7XG5cbiAgaXRlbS5jb25uZWN0KFwibm90aWZ5Ojp0aXRsZVwiLCAocykgPT4ge1xuICAgIHNldEZpbmFsVG9vbHRpcE1hcmt1cChnZXRGaW5hbFRvb2x0aXBNYXJrdXAocykpO1xuICB9KTtcblxuICBpZiAoaGFzSXRlbXMpXG4gICAgcmV0dXJuIChcbiAgICAgIDxtZW51YnV0dG9uXG4gICAgICAgIGNsYXNzPXtcImZsYXRcIn1cbiAgICAgICAgJD17KHMpID0+IHtcbiAgICAgICAgICAvLyBwYXNzIGFjdGlvbnMgc28gaXQgY2FuIHdvcmtcbiAgICAgICAgICBjb25zdCBhY3Rpb25zID0gaXRlbS5nZXRfYWN0aW9uX2dyb3VwKCk7XG4gICAgICAgICAgLy8gZGJ1c21lbnUgaXMgbmVlZGVkLCBpdCBtYWtlcyBpdCB3b3JrLCBpdCB3YXMgaW4gdGhlIGRvY3NcbiAgICAgICAgICBpZiAoYWN0aW9ucykgcy5pbnNlcnRfYWN0aW9uX2dyb3VwKFwiZGJ1c21lbnVcIiwgYWN0aW9ucyk7XG4gICAgICAgIH19XG4gICAgICAgIC8vIGdlbmVyYWxseSB0aGV5IGRvbid0IGhhdmUgdG9vbHRpcF9tYXJrdXAgYnV0IGp1c3QgaW4gY2FzZVxuICAgICAgICB0b29sdGlwX21hcmt1cD17ZmluYWxUb29sdGlwTWFya3VwfVxuICAgICAgICBtZW51TW9kZWw9e21lbnVNb2RlbH1cbiAgICAgID5cbiAgICAgICAgPGltYWdlIGdpY29uPXtnaWNvbn0gLz5cbiAgICAgIDwvbWVudWJ1dHRvbj5cbiAgICApO1xuXG4gIHJldHVybiAoXG4gICAgPGJ1dHRvblxuICAgICAgY3NzPXtcImZsYXRcIn1cbiAgICAgIG9uQ2xpY2tlZD17KCkgPT4ge1xuICAgICAgICBpdGVtLmFjdGl2YXRlKDAsIDApO1xuICAgICAgfX1cbiAgICAgIHRvb2x0aXBfbWFya3VwPXtmaW5hbFRvb2x0aXBNYXJrdXB9XG4gICAgPlxuICAgICAgPGltYWdlIGdpY29uPXtnaWNvbn0gLz5cbiAgICA8L2J1dHRvbj5cbiAgKTtcbn07XG5cbmNvbnN0IFRyYXkgPSAoKSA9PiB7XG4gIGNvbnN0IHRyYXkgPSBBc3RhbFRyYXkuZ2V0X2RlZmF1bHQoKTtcbiAgY29uc3QgaXRlbXMgPSBjcmVhdGVCaW5kaW5nKHRyYXksIFwiaXRlbXNcIik7XG5cbiAgcmV0dXJuIChcbiAgICA8Ym94XG4gICAgICBjbGFzcz1cIlRyYXlSb3dcIlxuICAgICAgc3BhY2luZz17c3BhY2luZy5zbWFsbH1cbiAgICAgIHZpc2libGU9e2l0ZW1zKChpdGVtcykgPT4gaXRlbXMubGVuZ3RoID4gMCl9XG4gICAgPlxuICAgICAgPEZvciBlYWNoPXtpdGVtc30+eyhpdGVtKSA9PiA8VHJheUl0ZW0gaXRlbT17aXRlbX0gLz59PC9Gb3I+XG4gICAgPC9ib3g+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBUcmF5O1xuIiwgImV4cG9ydCBjb25zdCB3aW5kb3dOYW1lcyA9IHtcbiAgTWFpblNlYXJjaFdpbmRvdzogXCJNYWluU2VhcmNoV2luZG93XCIsXG4gIEJhcjogXCJCYXJcIixcbiAgTm90aWZpY2F0aW9uV2luZG93OiBcIk5vdGlmaWNhdGlvbldpbmRvd1wiLFxufTtcbiIsICJpbXBvcnQgeyBleGVjIH0gZnJvbSBcImFncy9wcm9jZXNzXCI7XG5cbmV4cG9ydCBjb25zdCBnZXRLZXlib2FyZCA9ICgpID0+IHtcbiAgcmV0dXJuIGV4ZWMoW1xuICAgIFwiYmFzaFwiLFxuICAgIFwiLWNcIixcbiAgICBcImh5cHJjdGwgZGV2aWNlcyAtaiB8IGpxIC1yICcua2V5Ym9hcmRzW10gfCBzZWxlY3QoLm1haW4gPT0gdHJ1ZSkgfCAuYWN0aXZlX2tleW1hcCdcIixcbiAgXSk7XG59O1xuXG5leHBvcnQgY29uc3QgZm9ybWF0S2V5Ym9hcmQgPSAoa2V5Ym9hcmQ6IHN0cmluZykgPT4ge1xuICBpZiAoa2V5Ym9hcmQgPT09IFwiU3BhbmlzaFwiIHx8IGtleWJvYXJkID09PSBcIkVzcGFcdTAwRjFvbFwiKSB7XG4gICAgcmV0dXJuIFwiRVNcIjtcbiAgfSBlbHNlIGlmIChrZXlib2FyZD8uaW5jbHVkZXMoXCJFbmdsaXNoXCIpKSB7XG4gICAgcmV0dXJuIFwiVVNcIjtcbiAgfVxuXG4gIHJldHVybiBrZXlib2FyZDtcbn07XG4iLCAiaW1wb3J0IHsgY3JlYXRlQmluZGluZywgY3JlYXRlQ29tcHV0ZWQsIGNyZWF0ZVN0YXRlIH0gZnJvbSBcImFnc1wiO1xuaW1wb3J0IEFzdGFsQmx1ZXRvb3RoIGZyb20gXCJnaTovL0FzdGFsQmx1ZXRvb3RoXCI7XG5pbXBvcnQgQXN0YWxOZXR3b3JrIGZyb20gXCJnaTovL0FzdGFsTmV0d29ya1wiO1xuaW1wb3J0IHsgc3BhY2luZyB9IGZyb20gXCIuLi8uLi9jb25zdGFudHMvdGhlbWUvc3BhY2luZ1wiO1xuaW1wb3J0IHsgZ2V0SGFzVnBuIH0gZnJvbSBcIi4uLy4uL3V0aWxzL25ldHdvcmtcIjtcbmltcG9ydCB7IEd0ayB9IGZyb20gXCJhZ3MvZ3RrNFwiO1xuXG5jb25zdCBCbHVldG9vdGhJY29uID0gKCkgPT4ge1xuICBjb25zdCBibHVldG9vdGggPSBBc3RhbEJsdWV0b290aC5nZXRfZGVmYXVsdCgpO1xuICBjb25zdCBpc0Nvbm5lY3RlZEJsdWV0b290aCA9IGNyZWF0ZUJpbmRpbmcoYmx1ZXRvb3RoLCBcImlzX2Nvbm5lY3RlZFwiKTtcbiAgY29uc3QgaXNQb3dlcmVkQmx1ZXRvb3RoID0gY3JlYXRlQmluZGluZyhibHVldG9vdGgsIFwiaXNfcG93ZXJlZFwiKTtcbiAgY29uc3QgYmx1ZXRvb3RoQWRhcHRlciA9IGNyZWF0ZUJpbmRpbmcoYmx1ZXRvb3RoLCBcImFkYXB0ZXJcIik7XG5cbiAgY29uc3QgaWNvbk5hbWUgPSBjcmVhdGVDb21wdXRlZChcbiAgICBbaXNDb25uZWN0ZWRCbHVldG9vdGgsIGlzUG93ZXJlZEJsdWV0b290aCwgYmx1ZXRvb3RoQWRhcHRlcl0sXG4gICAgKF9pc0Nvbm5lY3RlZEJsdWV0b290aCwgaXNQb3dlcmVkQmx1ZXRvb3RoLCBibHVldG9vdGhBZGFwdGVyKSA9PiB7XG4gICAgICBpZiAoYmx1ZXRvb3RoQWRhcHRlciA9PT0gbnVsbCB8fCBibHVldG9vdGhBZGFwdGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIFwiYmx1ZXRvb3RoLXgtc3ltYm9saWNcIjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzUG93ZXJlZEJsdWV0b290aCA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIFwiYmx1ZXRvb3RoLW5vbmUtc3ltYm9saWNcIjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFwiYmx1ZXRvb3RoLXN5bWJvbGljXCI7XG4gICAgfSxcbiAgKTtcblxuICByZXR1cm4gKFxuICAgIDxpbWFnZVxuICAgICAgaWNvbk5hbWU9e2ljb25OYW1lfVxuICAgICAgY2xhc3M9e2lzQ29ubmVjdGVkQmx1ZXRvb3RoKCh2KSA9PlxuICAgICAgICB2ID8gXCJDb250cm9sUGFuZWxCbHVldG9vdGhBY3RpdmVcIiA6IFwiXCIsXG4gICAgICApfVxuICAgIC8+XG4gICk7XG59O1xuXG5jb25zdCBOZXR3b3JrSWNvbiA9ICgpID0+IHtcbiAgY29uc3QgbmV0d29yayA9IEFzdGFsTmV0d29yay5nZXRfZGVmYXVsdCgpO1xuXG4gIGNvbnN0IGNsaWVudCA9IGNyZWF0ZUJpbmRpbmcobmV0d29yaywgXCJjbGllbnRcIik7XG4gIGNvbnN0IHByaW1hcnkgPSBjcmVhdGVCaW5kaW5nKG5ldHdvcmssIFwicHJpbWFyeVwiKTtcbiAgY29uc3QgY29ubmVjdGl2aXR5ID0gY3JlYXRlQmluZGluZyhuZXR3b3JrLCBcImNvbm5lY3Rpdml0eVwiKTtcbiAgY29uc3Qgc3RhdGUgPSBjcmVhdGVCaW5kaW5nKG5ldHdvcmssIFwic3RhdGVcIik7XG4gIGNvbnN0IHdpZmkgPSBjcmVhdGVCaW5kaW5nKG5ldHdvcmssIFwid2lmaVwiKTtcblxuICBjb25zdCBbd2lmaVN0cmVuZ3RoLCBzZXRXaWZpU3RyZW5ndGhdID0gY3JlYXRlU3RhdGUoXG4gICAgd2lmaS5nZXQoKS5nZXRfc3RyZW5ndGgoKSA/PyAwLFxuICApO1xuXG4gIGNvbnN0IFtoYXNWcG4sIHNldEhhc1Zwbl0gPSBjcmVhdGVTdGF0ZShcbiAgICBnZXRIYXNWcG4oY2xpZW50LmdldCgpLmdldF9hY3RpdmVfY29ubmVjdGlvbnMoKSksXG4gICk7XG5cbiAgd2lmaS5nZXQoKS5jb25uZWN0KFwibm90aWZ5OjpzdHJlbmd0aFwiLCAoKSA9PiB7XG4gICAgc2V0V2lmaVN0cmVuZ3RoKHdpZmkuZ2V0KCk/LmdldF9zdHJlbmd0aCgpID8/IDApO1xuICB9KTtcblxuICBjbGllbnQuZ2V0KCkuY29ubmVjdChcIm5vdGlmeTo6YWN0aXZlLWNvbm5lY3Rpb25zXCIsIChzKSA9PiB7XG4gICAgc2V0SGFzVnBuKGdldEhhc1ZwbihzLmdldF9hY3RpdmVfY29ubmVjdGlvbnMoKSkpO1xuICB9KTtcblxuICBjb25zdCBpY29uTmFtZSA9IGNyZWF0ZUNvbXB1dGVkKFxuICAgIFtwcmltYXJ5LCBjb25uZWN0aXZpdHksIHN0YXRlLCB3aWZpU3RyZW5ndGhdLFxuICAgIChwcmltYXJ5LCBjb25uZWN0aXZpdHksIHN0YXRlLCB3aWZpU3RyZW5ndGgpID0+IHtcbiAgICAgIGlmIChzdGF0ZSA9PT0gQXN0YWxOZXR3b3JrLlN0YXRlLkNPTk5FQ1RJTkcpIHtcbiAgICAgICAgcmV0dXJuIFwicmFkaW93YXZlcy1kb3RzLXN5bWJvbGljXCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChcbiAgICAgICAgcHJpbWFyeSA9PT0gQXN0YWxOZXR3b3JrLlByaW1hcnkuV0lGSSAmJlxuICAgICAgICBjb25uZWN0aXZpdHkgPT09IEFzdGFsTmV0d29yay5Db25uZWN0aXZpdHkuRlVMTFxuICAgICAgKSB7XG4gICAgICAgIGlmICh3aWZpU3RyZW5ndGggPD0gMCkge1xuICAgICAgICAgIHJldHVybiBcInJhZGlvd2F2ZXMtNC1zeW1ib2xpY1wiO1xuICAgICAgICB9IGVsc2UgaWYgKHdpZmlTdHJlbmd0aCA8PSA1MCkge1xuICAgICAgICAgIHJldHVybiBcInJhZGlvd2F2ZXMtMy1zeW1ib2xpY1wiO1xuICAgICAgICB9IGVsc2UgaWYgKHdpZmlTdHJlbmd0aCA8PSA3NSkge1xuICAgICAgICAgIHJldHVybiBcInJhZGlvd2F2ZXMtMi1zeW1ib2xpY1wiO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFwicmFkaW93YXZlcy0xLXN5bWJvbGljXCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChcbiAgICAgICAgcHJpbWFyeSA9PT0gQXN0YWxOZXR3b3JrLlByaW1hcnkuV0lSRUQgJiZcbiAgICAgICAgY29ubmVjdGl2aXR5ID09PSBBc3RhbE5ldHdvcmsuQ29ubmVjdGl2aXR5LkZVTExcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gXCJsYW4tc3ltYm9saWNcIjtcbiAgICAgIH1cblxuICAgICAgaWYgKFxuICAgICAgICBjb25uZWN0aXZpdHkgPT09IEFzdGFsTmV0d29yay5Db25uZWN0aXZpdHkuTElNSVRFRCB8fFxuICAgICAgICBwcmltYXJ5ID09PSBBc3RhbE5ldHdvcmsuUHJpbWFyeS5VTktOT1dOXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIFwicmFkaW93YXZlcy01LXN5bWJvbGljXCI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBcInRlc3RcIjtcbiAgICB9LFxuICApO1xuXG4gIHJldHVybiAoXG4gICAgPGJveCBzcGFjaW5nPXtzcGFjaW5nLnNtYWxsfT5cbiAgICAgIHsvKiA8bGFiZWwgbGFiZWw9e3ByaW1hcnkoKHApID0+IHAudG9TdHJpbmcoKSl9IC8+ICovfVxuICAgICAgey8qIDxsYWJlbCBsYWJlbD17Y29ubmVjdGl2aXR5KChwKSA9PiBwLnRvU3RyaW5nKCkpfSAvPiAqL31cbiAgICAgIHsvKiA8bGFiZWwgbGFiZWw9e3N0YXRlKChwKSA9PiBwLnRvU3RyaW5nKCkpfSAvPiAqL31cbiAgICAgIDxpbWFnZSBpY29uTmFtZT17aWNvbk5hbWV9IC8+XG4gICAgICA8aW1hZ2UgaWNvbk5hbWU9e1widnBuLWNhcHMtc3ltYm9saWNcIn0gdmlzaWJsZT17aGFzVnBufSAvPlxuICAgIDwvYm94PlxuICApO1xufTtcblxuY29uc3QgQ29udHJvbFBhbmVsID0gKCkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxtZW51YnV0dG9uPlxuICAgICAgPGJveCBzcGFjaW5nPXtzcGFjaW5nLm5vcm1hbH0+XG4gICAgICAgIDxOZXR3b3JrSWNvbiAvPlxuICAgICAgICA8R3RrLlNlcGFyYXRvciBvcmllbnRhdGlvbj17R3RrLk9yaWVudGF0aW9uLlZFUlRJQ0FMfSAvPlxuICAgICAgICA8Qmx1ZXRvb3RoSWNvbiAvPlxuICAgICAgPC9ib3g+XG5cbiAgICAgIDxwb3BvdmVyPkhlbGxvPC9wb3BvdmVyPlxuICAgIDwvbWVudWJ1dHRvbj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IENvbnRyb2xQYW5lbDtcbiIsICJpbXBvcnQgTk0gZnJvbSBcImdpOi8vTk1cIjtcblxuZXhwb3J0IGNvbnN0IGdldEhhc1ZwbiA9IChcbiAgYWN0aXZlQ29ubmVjdGlvbnM6IE5NLkFjdGl2ZUNvbm5lY3Rpb25bXSA9IFtdLFxuKTogYm9vbGVhbiA9PiB7XG4gIHJldHVybiBhY3RpdmVDb25uZWN0aW9ucy5zb21lKChhYykgPT4ge1xuICAgIGlmIChhYy5nZXRfdnBuKCkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGNvbnN0IHR5cGUgPSBhYy5nZXRfY29ubmVjdGlvbl90eXBlKCk7XG5cbiAgICBpZiAoW1wid2lyZWd1YXJkXCIsIFwib3BlbnZwblwiLCBcImlwc2VjXCIsIFwiaWtldjJcIl0uaW5jbHVkZXModHlwZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfSk7XG59O1xuIiwgImltcG9ydCB7IEFzdGFsLCBHZGssIEd0ayB9IGZyb20gXCJhZ3MvZ3RrNFwiO1xuaW1wb3J0IGFwcCBmcm9tIFwiYWdzL2d0azQvYXBwXCI7XG5pbXBvcnQgeyBzcGFjaW5nIH0gZnJvbSBcIi4uLy4uL2NvbnN0YW50cy90aGVtZS9zcGFjaW5nXCI7XG5pbXBvcnQgSHlwcmxhbmQgZnJvbSBcImdpOi8vQXN0YWxIeXBybGFuZFwiO1xuaW1wb3J0IEdpbyBmcm9tIFwiZ2k6Ly9HaW8/dmVyc2lvbj0yLjBcIjtcbmltcG9ydCBBc3RhbEFwcHMgZnJvbSBcImdpOi8vQXN0YWxBcHBzP3ZlcnNpb249MC4xXCI7XG5pbXBvcnQgeyBNYWluU2VhcmNoTGlzdEl0ZW1PYmplY3QgfSBmcm9tIFwiLi4vLi4vb2JqZWN0cy9NYWluU2VhcmNoTGlzdEl0ZW1PYmplY3RcIjtcbmltcG9ydCB7XG4gIGNyZWF0ZUFwcHNJbnN0YW5jZSxcbiAgZ2V0QWxsQ29tbWFuZHMsXG4gIHJ1bkFwcENvbW1hbmQsXG59IGZyb20gXCIuLi8uLi91dGlscy9hcHBzXCI7XG5pbXBvcnQgeyBNYWluU2VhcmNoV2luZG93Q29udGV4dCB9IGZyb20gXCIuLi8uLi9jb250ZXh0L01haW5TZWFyY2hXaW5kb3dDb250ZXh0XCI7XG5pbXBvcnQge1xuICBBY2Nlc3NvcixcbiAgY3JlYXRlQmluZGluZyxcbiAgY3JlYXRlQ29tcHV0ZWQsXG4gIGNyZWF0ZVN0YXRlLFxuICBTZXR0ZXIsXG59IGZyb20gXCJhZ3NcIjtcbmltcG9ydCB7IGdldElzQ3VycmVudE1vbml0b3IgfSBmcm9tIFwiLi4vLi4vdXRpbHMvaXMtY3VycmVudC1tb25pdG9yXCI7XG5pbXBvcnQgeyBnZXRJc0ljb25GaWxlIH0gZnJvbSBcIi4uLy4uL3V0aWxzL2ljb25zXCI7XG5pbXBvcnQgeyB3aW5kb3dOYW1lcyB9IGZyb20gXCIuLi8uLi9jb25zdGFudHMvd2luZG93c1wiO1xuXG5jb25zdCB0cmFuc2l0aW9uRHVyYXRpb24gPSA1MDA7XG5cbmNsYXNzIE15TGlzdEl0ZW0gZXh0ZW5kcyBHdGsuTGlzdEl0ZW0ge1xuICBfdGV4dExhYmVsITogR3RrLkxhYmVsO1xuICBfZGVzY0xhYmVsITogR3RrLkxhYmVsO1xuICBfaW1hZ2UhOiBHdGsuSW1hZ2U7XG59XG5cbmNvbnN0IGZpbHRlckNvbW1hbmRzID0gKGNvbW1hbmRzOiBzdHJpbmdbXSwgcXVlcnk6IHN0cmluZyk6IHN0cmluZ1tdID0+IHtcbiAgY29uc3QgbG93ZXJRdWVyeSA9IHF1ZXJ5LnRvTG93ZXJDYXNlKCk7XG5cbiAgcmV0dXJuIGNvbW1hbmRzLmZpbHRlcigoY21kKSA9PiB7XG4gICAgY29uc3QgbmFtZSA9IGNtZDtcblxuICAgIC8vIENoZWNrIGlmIHF1ZXJ5IGlzIHN1YnN0cmluZyBvZiBuYW1lIG9yIGRlc2NyaXB0aW9uXG4gICAgcmV0dXJuIG5hbWUuaW5jbHVkZXMobG93ZXJRdWVyeSk7XG4gIH0pO1xufTtcblxuY29uc3QgYWRkQXBwc1RvTGlzdFN0b3JlID0gKFxuICBsaXN0U3RvcmU6IEdpby5MaXN0U3RvcmUsXG4gIHJlc3VsdHM6IEFzdGFsQXBwcy5BcHBsaWNhdGlvbltdLFxuKSA9PiB7XG4gIGxpc3RTdG9yZS5yZW1vdmVfYWxsKCk7XG5cbiAgcmVzdWx0cy5mb3JFYWNoKChyKSA9PiB7XG4gICAgY29uc3QgaXRlbSA9IG5ldyBNYWluU2VhcmNoTGlzdEl0ZW1PYmplY3Qoe1xuICAgICAgZGVza3RvcEljb246IHIuZ2V0X2ljb25fbmFtZSgpLFxuICAgICAgdGV4dDogci5nZXRfbmFtZSgpLFxuICAgICAgb25TZWxlY3Q6ICgpID0+IHIubGF1bmNoKCksXG4gICAgICBkZXNjOiByLmdldF9kZXNjcmlwdGlvbigpLFxuICAgIH0pO1xuXG4gICAgbGlzdFN0b3JlLmFwcGVuZChpdGVtKTtcbiAgfSk7XG59O1xuXG5jb25zdCBhZGRDb21tYW5kc1RvTGlzdFN0b3JlID0gKFxuICBsaXN0U3RvcmU6IEdpby5MaXN0U3RvcmUsXG4gIHJlc3VsdHM6IHN0cmluZ1tdLFxuKSA9PiB7XG4gIGxpc3RTdG9yZS5yZW1vdmVfYWxsKCk7XG5cbiAgcmVzdWx0cy5mb3JFYWNoKChyKSA9PiB7XG4gICAgY29uc3QgaXRlbSA9IG5ldyBNYWluU2VhcmNoTGlzdEl0ZW1PYmplY3Qoe1xuICAgICAgZGVza3RvcEljb246IFwiXCIsXG4gICAgICB0ZXh0OiByLFxuICAgICAgb25TZWxlY3Q6ICgpID0+IHtcbiAgICAgICAgcnVuQXBwQ29tbWFuZChyKTtcbiAgICAgIH0sXG4gICAgICBkZXNjOiBcIlwiLFxuICAgIH0pO1xuXG4gICAgbGlzdFN0b3JlLmFwcGVuZChpdGVtKTtcbiAgfSk7XG59O1xuXG5jb25zdCBnZXRBbGxBcHBzRm9yTGlzdCA9IChhcHBzOiBBc3RhbEFwcHMuQXBwcykgPT4ge1xuICByZXR1cm4gYXBwc1xuICAgIC5nZXRfbGlzdCgpXG4gICAgLnNvcnQoKGEsIGIpID0+IGEuZ2V0X25hbWUoKS5sb2NhbGVDb21wYXJlKGIuZ2V0X25hbWUoKSkpO1xufTtcblxuY29uc3QgTWFpblNlYXJjaCA9ICh7XG4gIGxpc3RWaWV3LFxuICBzZXRMaXN0VmlldyxcbiAgc2V0U2VhcmNoRW50cnksXG4gIGhhbmRsZUNsb3NlLFxufToge1xuICBsaXN0VmlldzogQWNjZXNzb3I8R3RrLkxpc3RWaWV3IHwgdW5kZWZpbmVkPjtcbiAgc2V0TGlzdFZpZXc6IFNldHRlcjxHdGsuTGlzdFZpZXcgfCB1bmRlZmluZWQ+O1xuICBzZXRTZWFyY2hFbnRyeTogU2V0dGVyPEd0ay5TZWFyY2hFbnRyeSB8IHVuZGVmaW5lZD47XG4gIGhhbmRsZUNsb3NlOiAoaW1tZWRpYXRlOiBib29sZWFuKSA9PiBQcm9taXNlPHZvaWQ+O1xufSkgPT4ge1xuICBjb25zdCBhcHBzID0gY3JlYXRlQXBwc0luc3RhbmNlKHsgdmFyaWFudDogXCJhcHBTZWFyY2hcIiB9KTtcbiAgY29uc3QgbGlzdFN0b3JlID0gbmV3IEdpby5MaXN0U3RvcmUoKTtcbiAgY29uc3QgbW9kZWwgPSBuZXcgR3RrLlNpbmdsZVNlbGVjdGlvbih7IG1vZGVsOiBsaXN0U3RvcmUgfSk7XG4gIGNvbnN0IGNvbW1hbmRzID0gZ2V0QWxsQ29tbWFuZHMoKTtcblxuICBsZXQgc2Nyb2xsZWRXaW5kb3c6IEd0ay5TY3JvbGxlZFdpbmRvdyB8IHVuZGVmaW5lZDtcblxuICBhZGRBcHBzVG9MaXN0U3RvcmUobGlzdFN0b3JlLCBnZXRBbGxBcHBzRm9yTGlzdChhcHBzKSk7XG5cbiAgY29uc3QgaGFuZGxlU2VsZWN0ID0gYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHNlbGVjdGVkSXRlbSA9IG1vZGVsLmdldF9zZWxlY3RlZF9pdGVtPE1haW5TZWFyY2hMaXN0SXRlbU9iamVjdD4oKTtcbiAgICBhd2FpdCBoYW5kbGVDbG9zZSh0cnVlKTtcblxuICAgIHNlbGVjdGVkSXRlbS5vblNlbGVjdCgpO1xuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPGJveFxuICAgICAgb3JpZW50YXRpb249e0d0ay5PcmllbnRhdGlvbi5WRVJUSUNBTH1cbiAgICAgIHZhbGlnbj17R3RrLkFsaWduLkVORH1cbiAgICAgIHZleHBhbmRcbiAgICAgIGhleHBhbmRcbiAgICA+XG4gICAgICA8R3RrLlNjcm9sbGVkV2luZG93XG4gICAgICAgIG1heENvbnRlbnRIZWlnaHQ9ezYwMH1cbiAgICAgICAgcHJvcGFnYXRlTmF0dXJhbEhlaWdodFxuICAgICAgICAkPXsocykgPT4gKHNjcm9sbGVkV2luZG93ID0gcyl9XG4gICAgICA+XG4gICAgICAgIDxHdGsuTGlzdFZpZXdcbiAgICAgICAgICB2ZXhwYW5kXG4gICAgICAgICAgJD17KHMpID0+IHtcbiAgICAgICAgICAgIHNldExpc3RWaWV3KHMpO1xuICAgICAgICAgIH19XG4gICAgICAgICAgb25BY3RpdmF0ZT17KCkgPT4ge1xuICAgICAgICAgICAgaGFuZGxlU2VsZWN0KCk7XG4gICAgICAgICAgfX1cbiAgICAgICAgICBmb2N1c2FibGU9e2ZhbHNlfVxuICAgICAgICAgIGNhbl9mb2N1cz17ZmFsc2V9XG4gICAgICAgICAgbW9kZWw9e21vZGVsfVxuICAgICAgICAgIGZhY3Rvcnk9e1xuICAgICAgICAgICAgPEd0ay5TaWduYWxMaXN0SXRlbUZhY3RvcnlcbiAgICAgICAgICAgICAgb25TZXR1cD17KF8sIGwpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBsaXN0SXRlbSA9IGwgYXMgTXlMaXN0SXRlbTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IG1haW5Cb3ggPSBuZXcgR3RrLkJveCh7XG4gICAgICAgICAgICAgICAgICBzcGFjaW5nOiBzcGFjaW5nLm5vcm1hbCxcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHJpZ2h0Qm94ID0gbmV3IEd0ay5Cb3goe1xuICAgICAgICAgICAgICAgICAgc3BhY2luZzogc3BhY2luZy5zbWFsbCxcbiAgICAgICAgICAgICAgICAgIG9yaWVudGF0aW9uOiBHdGsuT3JpZW50YXRpb24uVkVSVElDQUwsXG4gICAgICAgICAgICAgICAgICB2YWxpZ246IEd0ay5BbGlnbi5DRU5URVIsXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCB0ZXh0TGFiZWwgPSBuZXcgR3RrLkxhYmVsKHtcbiAgICAgICAgICAgICAgICAgIHhhbGlnbjogMCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBjb25zdCBkZXNjTGFiZWwgPSBuZXcgR3RrLkxhYmVsKHtcbiAgICAgICAgICAgICAgICAgIHhhbGlnbjogMCxcbiAgICAgICAgICAgICAgICAgIHdyYXA6IHRydWUsXG4gICAgICAgICAgICAgICAgICBtYXhXaWR0aENoYXJzOiA0MCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBjb25zdCBpbWFnZSA9IG5ldyBHdGsuSW1hZ2Uoe1xuICAgICAgICAgICAgICAgICAgcGl4ZWxTaXplOiA0MCxcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGxpc3RJdGVtLl90ZXh0TGFiZWwgPSB0ZXh0TGFiZWw7XG4gICAgICAgICAgICAgICAgbGlzdEl0ZW0uX2Rlc2NMYWJlbCA9IGRlc2NMYWJlbDtcbiAgICAgICAgICAgICAgICBsaXN0SXRlbS5faW1hZ2UgPSBpbWFnZTtcblxuICAgICAgICAgICAgICAgIHJpZ2h0Qm94LmFwcGVuZCh0ZXh0TGFiZWwpO1xuICAgICAgICAgICAgICAgIHJpZ2h0Qm94LmFwcGVuZChkZXNjTGFiZWwpO1xuXG4gICAgICAgICAgICAgICAgbWFpbkJveC5hcHBlbmQoaW1hZ2UpO1xuICAgICAgICAgICAgICAgIG1haW5Cb3guYXBwZW5kKHJpZ2h0Qm94KTtcblxuICAgICAgICAgICAgICAgIGxpc3RJdGVtLnNldF9jaGlsZChtYWluQm94KTtcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgb25CaW5kPXsoXywgbCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxpc3RJdGVtID0gbCBhcyBNeUxpc3RJdGVtO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgdGV4dExhYmVsID0gbGlzdEl0ZW0uX3RleHRMYWJlbDtcbiAgICAgICAgICAgICAgICBjb25zdCBkZXNjTGFiZWwgPSBsaXN0SXRlbS5fZGVzY0xhYmVsO1xuICAgICAgICAgICAgICAgIGNvbnN0IGltYWdlID0gbGlzdEl0ZW0uX2ltYWdlO1xuICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSBsaXN0SXRlbS5nZXRfaXRlbTxNYWluU2VhcmNoTGlzdEl0ZW1PYmplY3Q+KCk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBpY29uID0gaXRlbS5kZXNrdG9wSWNvbjtcblxuICAgICAgICAgICAgICAgIGlmIChpY29uKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoZ2V0SXNJY29uRmlsZSh7IGljb24gfSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2Uuc2V0X2Zyb21fZmlsZShpY29uKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGltYWdlLnNldF9mcm9tX2ljb25fbmFtZShpY29uKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgaW1hZ2Uuc2V0X3Zpc2libGUoZmFsc2UpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRleHRMYWJlbD8uc2V0X3RleHQoaXRlbS50ZXh0KTtcblxuICAgICAgICAgICAgICAgIGlmIChpdGVtLmRlc2MpIHtcbiAgICAgICAgICAgICAgICAgIGRlc2NMYWJlbD8uc2V0X3RleHQoaXRlbS5kZXNjKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgZGVzY0xhYmVsLnNldF92aXNpYmxlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIH1cbiAgICAgICAgLz5cbiAgICAgIDwvR3RrLlNjcm9sbGVkV2luZG93PlxuXG4gICAgICA8R3RrLlNlYXJjaEVudHJ5XG4gICAgICAgIHZhbGlnbj17R3RrLkFsaWduLkVORH1cbiAgICAgICAgb25TZWFyY2hDaGFuZ2VkPXsocykgPT4ge1xuICAgICAgICAgIGNvbnN0IHRleHQgPSBzLmdldF90ZXh0KCk7XG5cbiAgICAgICAgICBpZiAodGV4dC5zdGFydHNXaXRoKFwiPlwiKSkge1xuICAgICAgICAgICAgLy8gaGFuZGxlIG90aGVyIHN0dWZmXG4gICAgICAgICAgICBjb25zdCBbXywgLi4ucmVzdF0gPSB0ZXh0LnNwbGl0KFwiPlwiKTtcbiAgICAgICAgICAgIGNvbnN0IHF1ZXJ5ID0gcmVzdC5qb2luKFwiPlwiKTtcblxuICAgICAgICAgICAgaWYgKHF1ZXJ5Lmxlbmd0aCkge1xuICAgICAgICAgICAgICBhZGRDb21tYW5kc1RvTGlzdFN0b3JlKFxuICAgICAgICAgICAgICAgIGxpc3RTdG9yZSxcbiAgICAgICAgICAgICAgICBmaWx0ZXJDb21tYW5kcyhjb21tYW5kcywgcXVlcnkpLFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgYWRkQ29tbWFuZHNUb0xpc3RTdG9yZShsaXN0U3RvcmUsIGNvbW1hbmRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gaGFuZGxlIGFwcHNcbiAgICAgICAgICAgIGlmICh0ZXh0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICBjb25zdCByZXN1bHRzID0gYXBwcy5mdXp6eV9xdWVyeShzLmdldF90ZXh0KCkpO1xuICAgICAgICAgICAgICBhZGRBcHBzVG9MaXN0U3RvcmUobGlzdFN0b3JlLCByZXN1bHRzKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGFkZEFwcHNUb0xpc3RTdG9yZShsaXN0U3RvcmUsIGdldEFsbEFwcHNGb3JMaXN0KGFwcHMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH19XG4gICAgICAgIG9uQWN0aXZhdGU9eygpID0+IHtcbiAgICAgICAgICBoYW5kbGVTZWxlY3QoKTtcbiAgICAgICAgfX1cbiAgICAgICAgb25TdG9wU2VhcmNoPXsoKSA9PiB7XG4gICAgICAgICAgaGFuZGxlQ2xvc2UoZmFsc2UpO1xuICAgICAgICB9fVxuICAgICAgICAkPXsocykgPT4ge1xuICAgICAgICAgIGNvbnN0IGtleUNvbnRyb2xsZXIgPSBHdGsuRXZlbnRDb250cm9sbGVyS2V5Lm5ldygpO1xuXG4gICAgICAgICAga2V5Q29udHJvbGxlci5jb25uZWN0KFwia2V5LXByZXNzZWRcIiwgKF8sIGtleXZhbCkgPT4ge1xuICAgICAgICAgICAgaWYgKGtleXZhbCAhPT0gR2RrLktFWV9VcCAmJiBrZXl2YWwgIT09IEdkay5LRVlfRG93bikge1xuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gbW9kZWwuZ2V0X3NlbGVjdGVkKCk7XG4gICAgICAgICAgICBsZXQgbmV3SW5kZXggPSBpbmRleDtcblxuICAgICAgICAgICAgaWYgKGtleXZhbCA9PSBHZGsuS0VZX1VwICYmIGluZGV4ID4gMCkge1xuICAgICAgICAgICAgICBuZXdJbmRleCA9IGluZGV4IC0gMTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICAgIGtleXZhbCA9PSBHZGsuS0VZX0Rvd24gJiZcbiAgICAgICAgICAgICAgaW5kZXggPCBsaXN0U3RvcmUuZ2V0X25faXRlbXMoKSAtIDFcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICBuZXdJbmRleCA9IGluZGV4ICsgMTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbW9kZWwuc2VsZWN0X2l0ZW0obmV3SW5kZXgsIHRydWUpO1xuXG4gICAgICAgICAgICBsaXN0Vmlldy5nZXQoKT8uc2Nyb2xsX3RvKG5ld0luZGV4LCBudWxsLCBudWxsKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlOyAvLyBhdm9pZCBwcm9wYWdhdGlvblxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgcy5hZGRfY29udHJvbGxlcihrZXlDb250cm9sbGVyKTtcblxuICAgICAgICAgIHNldFNlYXJjaEVudHJ5KHMpO1xuICAgICAgICB9fVxuICAgICAgLz5cbiAgICA8L2JveD5cbiAgKTtcbn07XG5cbmNvbnN0IE1haW5TZWFyY2hXaW5kb3cgPSAoeyBnZGttb25pdG9yIH06IHsgZ2RrbW9uaXRvcjogR2RrLk1vbml0b3IgfSkgPT4ge1xuICBjb25zdCB7IEJPVFRPTSB9ID0gQXN0YWwuV2luZG93QW5jaG9yO1xuICBjb25zdCB7IHZpc2libGUsIHNldFZpc2libGUgfSA9IE1haW5TZWFyY2hXaW5kb3dDb250ZXh0LnVzZSgpO1xuXG4gIGNvbnN0IGh5cHJsYW5kID0gSHlwcmxhbmQuZ2V0X2RlZmF1bHQoKTtcbiAgY29uc3QgZm9jdXNlZE1vbml0b3IgPSBjcmVhdGVCaW5kaW5nKGh5cHJsYW5kLCBcImZvY3VzZWRNb25pdG9yXCIpO1xuXG4gIGNvbnN0IFtzZWFyY2hFbnRyeSwgc2V0U2VhcmNoRW50cnldID0gY3JlYXRlU3RhdGU8XG4gICAgR3RrLlNlYXJjaEVudHJ5IHwgdW5kZWZpbmVkXG4gID4odW5kZWZpbmVkKTtcbiAgY29uc3QgW2xpc3RWaWV3LCBzZXRMaXN0Vmlld10gPSBjcmVhdGVTdGF0ZTxHdGsuTGlzdFZpZXcgfCB1bmRlZmluZWQ+KFxuICAgIHVuZGVmaW5lZCxcbiAgKTtcbiAgY29uc3QgW3dpbmRvd0luc3RhbmNlLCBzZXRXaW5kb3dJbnN0YW5jZV0gPSBjcmVhdGVTdGF0ZTxcbiAgICBHdGsuV2luZG93IHwgdW5kZWZpbmVkXG4gID4odW5kZWZpbmVkKTtcblxuICBjb25zdCBbcmV2ZWFsQ2hpbGQsIHNldFJldmVhbENoaWxkXSA9IGNyZWF0ZVN0YXRlKGZhbHNlKTtcblxuICBjb25zdCBpc1Zpc2libGUgPSBjcmVhdGVDb21wdXRlZChcbiAgICBbdmlzaWJsZSEsIGZvY3VzZWRNb25pdG9yXSxcbiAgICAodmlzaWJsZSwgZm9jdXNlZE1vbml0b3IpID0+IHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIGdldElzQ3VycmVudE1vbml0b3IoZm9jdXNlZE1vbml0b3IsIGdka21vbml0b3IpICYmIHZpc2libGUgPT09IHRydWVcbiAgICAgICk7XG4gICAgfSxcbiAgKTtcblxuICBjb25zdCBoYW5kbGVDbG9zZSA9IGFzeW5jIChpbW1lZGlhdGU6IGJvb2xlYW4pID0+IHtcbiAgICBzZXRSZXZlYWxDaGlsZChmYWxzZSk7XG5cbiAgICBjb25zdCBjbG9zZSA9ICgpID0+IHtcbiAgICAgIHNldFZpc2libGU/LihmYWxzZSk7XG4gICAgICBzZWFyY2hFbnRyeS5nZXQoKT8uc2V0X3RleHQoXCJcIik7XG4gICAgfTtcblxuICAgIGlmIChpbW1lZGlhdGUpIHtcbiAgICAgIGNsb3NlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXMpID0+IHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgY2xvc2UoKTtcbiAgICAgICAgICByZXModHJ1ZSk7XG4gICAgICAgIH0sIHRyYW5zaXRpb25EdXJhdGlvbiAtIDEwMCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8d2luZG93XG4gICAgICB2aXNpYmxlPXtpc1Zpc2libGV9XG4gICAgICBuYW1lPXt3aW5kb3dOYW1lcy5Ob3RpZmljYXRpb25XaW5kb3d9XG4gICAgICBjbGFzcz1cIk1haW5TZWFyY2hXaW5kb3dcIlxuICAgICAgcmVzaXphYmxlPXtmYWxzZX1cbiAgICAgIGdka21vbml0b3I9e2dka21vbml0b3J9XG4gICAgICBhbmNob3I9e0JPVFRPTX1cbiAgICAgIGV4Y2x1c2l2aXR5PXtBc3RhbC5FeGNsdXNpdml0eS5OT1JNQUx9XG4gICAgICBhcHBsaWNhdGlvbj17YXBwfVxuICAgICAga2V5bW9kZT17QXN0YWwuS2V5bW9kZS5FWENMVVNJVkV9XG4gICAgICBvbk5vdGlmeVZpc2libGU9eyh3aW4pID0+IHtcbiAgICAgICAgY29uc3QgdmlzaWJsZSA9IHdpbi5pc192aXNpYmxlKCk7XG5cbiAgICAgICAgaWYgKHZpc2libGUpIHtcbiAgICAgICAgICBzZWFyY2hFbnRyeS5nZXQoKT8uZ3JhYl9mb2N1cygpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZpc2libGUpIHtcbiAgICAgICAgICBzZXRSZXZlYWxDaGlsZCh2aXNpYmxlKTtcbiAgICAgICAgfVxuICAgICAgfX1cbiAgICAgICQ9eyhzKSA9PiB7XG4gICAgICAgIGNvbnN0IGNsaWNrSGFuZGxlciA9IEd0ay5HZXN0dXJlQ2xpY2submV3KCk7XG5cbiAgICAgICAgY2xpY2tIYW5kbGVyLnNldF9idXR0b24oMCk7IC8vIGxpc3RlbiBhbnkgYnV0dG9uXG5cbiAgICAgICAgY2xpY2tIYW5kbGVyLmNvbm5lY3QoXCJyZWxlYXNlZFwiLCAoX2dlc3R1cmUsIF9uX3ByZXNzLCB4LCB5KSA9PiB7XG4gICAgICAgICAgbGV0IHd4ID0geCxcbiAgICAgICAgICAgIHd5ID0geTtcbiAgICAgICAgICBjb25zdCByZXN1bHQgPSB3aW5kb3dJbnN0YW5jZVxuICAgICAgICAgICAgLmdldCgpXG4gICAgICAgICAgICA/LnRyYW5zbGF0ZV9jb29yZGluYXRlcyh3aW5kb3dJbnN0YW5jZS5nZXQoKSEsIHgsIHkpO1xuXG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocmVzdWx0KSAmJiByZXN1bHRbMF0pIHtcbiAgICAgICAgICAgIHd4ID0gcmVzdWx0WzFdO1xuICAgICAgICAgICAgd3kgPSByZXN1bHRbMl07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgaXNJbnNpZGUgPSAod2lkZ2V0OiBHdGsuV2lkZ2V0IHwgdW5kZWZpbmVkKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXdpZGdldCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgY29uc3QgYWxsb2MgPSB3aWRnZXQuZ2V0X2FsbG9jYXRpb24oKTtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgIHd4ID49IGFsbG9jLnggJiZcbiAgICAgICAgICAgICAgd3kgPj0gYWxsb2MueSAmJlxuICAgICAgICAgICAgICB3eCA8PSBhbGxvYy54ICsgYWxsb2Mud2lkdGggJiZcbiAgICAgICAgICAgICAgd3kgPD0gYWxsb2MueSArIGFsbG9jLmhlaWdodFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgaWYgKCFpc0luc2lkZShzZWFyY2hFbnRyeS5nZXQoKSkgJiYgIWlzSW5zaWRlKGxpc3RWaWV3LmdldCgpKSkge1xuICAgICAgICAgICAgaGFuZGxlQ2xvc2UoZmFsc2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcy5hZGRfY29udHJvbGxlcihjbGlja0hhbmRsZXIpO1xuICAgICAgICBzZXRXaW5kb3dJbnN0YW5jZShzKTtcbiAgICAgIH19XG4gICAgPlxuICAgICAgPEd0ay5SZXZlYWxlclxuICAgICAgICByZXZlYWxDaGlsZD17cmV2ZWFsQ2hpbGR9XG4gICAgICAgIHRyYW5zaXRpb25fdHlwZT17R3RrLlJldmVhbGVyVHJhbnNpdGlvblR5cGUuU0xJREVfVVB9XG4gICAgICAgIHRyYW5zaXRpb25EdXJhdGlvbj17dHJhbnNpdGlvbkR1cmF0aW9ufVxuICAgICAgICB3aWR0aFJlcXVlc3Q9ezgwMH1cbiAgICAgICAgaGVpZ2h0UmVxdWVzdD17ODAwfVxuICAgICAgPlxuICAgICAgICA8Ym94XG4gICAgICAgICAgY2xhc3M9e3JldmVhbENoaWxkKCh2KSA9PiAodiA/IFwiTWFpblNlYXJjaFwiIDogXCJNYWluU2VhcmNoIGhpZGVcIikpfVxuICAgICAgICAgIHZhbGlnbj17R3RrLkFsaWduLkVORH1cbiAgICAgICAgPlxuICAgICAgICAgIDxNYWluU2VhcmNoXG4gICAgICAgICAgICBsaXN0Vmlldz17bGlzdFZpZXd9XG4gICAgICAgICAgICBzZXRMaXN0Vmlldz17c2V0TGlzdFZpZXd9XG4gICAgICAgICAgICBzZXRTZWFyY2hFbnRyeT17c2V0U2VhcmNoRW50cnl9XG4gICAgICAgICAgICBoYW5kbGVDbG9zZT17aGFuZGxlQ2xvc2V9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9ib3g+XG4gICAgICA8L0d0ay5SZXZlYWxlcj5cbiAgICA8L3dpbmRvdz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE1haW5TZWFyY2hXaW5kb3c7XG4iLCAiaW1wb3J0IEdPYmplY3QsIHsgcHJvcGVydHksIHJlZ2lzdGVyIH0gZnJvbSBcImFncy9nb2JqZWN0XCI7XG5cbnR5cGUgU2VsZWN0Q2FsbGJhY2sgPSAoc2VsZjogTWFpblNlYXJjaExpc3RJdGVtT2JqZWN0KSA9PiB2b2lkO1xuXG5AcmVnaXN0ZXIoeyBHVHlwZU5hbWU6IFwiTWFpblNlYXJjaExpc3RJdGVtXCIgfSlcbmV4cG9ydCBjbGFzcyBNYWluU2VhcmNoTGlzdEl0ZW1PYmplY3QgZXh0ZW5kcyBHT2JqZWN0Lk9iamVjdCB7XG4gIEBwcm9wZXJ0eShTdHJpbmcpIHRleHQgPSBcIlwiO1xuICBAcHJvcGVydHkoU3RyaW5nKSBkZXNjID0gXCJcIjtcbiAgQHByb3BlcnR5KFN0cmluZykgZGVza3RvcEljb24gPSBcIlwiO1xuXG4gIHByaXZhdGUgX29uU2VsZWN0PzogU2VsZWN0Q2FsbGJhY2s7XG5cbiAgY29uc3RydWN0b3Ioe1xuICAgIGRlc2t0b3BJY29uLFxuICAgIHRleHQsXG4gICAgb25TZWxlY3QsXG4gICAgZGVzYyxcbiAgfToge1xuICAgIHRleHQ6IHN0cmluZztcbiAgICBkZXNrdG9wSWNvbjogc3RyaW5nO1xuICAgIGRlc2M6IHN0cmluZztcblxuICAgIG9uU2VsZWN0OiBTZWxlY3RDYWxsYmFjaztcbiAgfSkge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLnRleHQgPSB0ZXh0O1xuICAgIHRoaXMuZGVza3RvcEljb24gPSBkZXNrdG9wSWNvbjtcbiAgICB0aGlzLmRlc2MgPSBkZXNjO1xuICAgIHRoaXMuX29uU2VsZWN0ID0gb25TZWxlY3Q7XG4gIH1cblxuICBvblNlbGVjdCgpIHtcbiAgICB0aGlzLl9vblNlbGVjdD8uKHRoaXMpO1xuICB9XG59XG4iLCAiaW1wb3J0IHsgQWNjZXNzb3IsIGNyZWF0ZUNvbnRleHQsIFNldHRlciB9IGZyb20gXCJhZ3NcIjtcblxuZXhwb3J0IGNvbnN0IE1haW5TZWFyY2hXaW5kb3dDb250ZXh0ID0gY3JlYXRlQ29udGV4dDx7XG4gIHZpc2libGU6IEFjY2Vzc29yPGJvb2xlYW4+IHwgdW5kZWZpbmVkO1xuICBzZXRWaXNpYmxlOiBTZXR0ZXI8Ym9vbGVhbj4gfCB1bmRlZmluZWQ7XG59Pih7IHNldFZpc2libGU6IHVuZGVmaW5lZCwgdmlzaWJsZTogdW5kZWZpbmVkIH0pO1xuIiwgImltcG9ydCBhcHAgZnJvbSBcImFncy9ndGs0L2FwcFwiO1xuaW1wb3J0IHN0eWxlIGZyb20gXCIuL3N0eWxlLnNjc3NcIjtcbmltcG9ydCBCYXIgZnJvbSBcIi4vc3JjL3dpZGdldC9CYXJcIjtcbmltcG9ydCBNYWluU2VhcmNoV2luZG93IGZyb20gXCIuL3NyYy93aWRnZXQvTWFpblNlYXJjaC9NYWluU2VhcmNoV2luZG93XCI7XG5pbXBvcnQgeyBNYWluU2VhcmNoV2luZG93Q29udGV4dCB9IGZyb20gXCIuL3NyYy9jb250ZXh0L01haW5TZWFyY2hXaW5kb3dDb250ZXh0XCI7XG5pbXBvcnQgeyBjcmVhdGVTdGF0ZSB9IGZyb20gXCJhZ3NcIjtcbmltcG9ydCB7IHdpbmRvd05hbWVzIH0gZnJvbSBcIi4vc3JjL2NvbnN0YW50cy93aW5kb3dzXCI7XG5pbXBvcnQgeyBnZXRLZXlib2FyZCB9IGZyb20gXCIuL3NyYy91dGlscy9rZXlib2FyZFwiO1xuLy8gaW1wb3J0IE5vdGlmaWNhdGlvbldpbmRvdyBmcm9tIFwiLi9zcmMvd2lkZ2V0L05vdGlmaWNhdGlvbnMvTm90aWZpY2F0aW9uV2luZG93XCI7XG5cbmNvbnN0IFtpc1Zpc2libGVNYWluU2VhcmNoLCBzZXRJc1Zpc2libGVNYWluU2VhcmNoXSA9IGNyZWF0ZVN0YXRlKGZhbHNlKTtcbmNvbnN0IFtrZXlib2FyZCwgc2V0S2V5Ym9hcmRdID0gY3JlYXRlU3RhdGUoZ2V0S2V5Ym9hcmQoKSk7XG5cbmFwcC5zdGFydCh7XG4gIGNzczogc3R5bGUsXG4gIGljb25zOiBcIi9ob21lL2pvc2UvLmNvbmZpZy9teS1hZ3MvaWNvbnNcIixcbiAgcmVxdWVzdEhhbmRsZXI6IChyZXF1ZXN0LCByZXMpID0+IHtcbiAgICBpZiAocmVxdWVzdCA9PT0gd2luZG93TmFtZXMuTWFpblNlYXJjaFdpbmRvdykge1xuICAgICAgc2V0SXNWaXNpYmxlTWFpblNlYXJjaCh0cnVlKTtcbiAgICAgIHJlcyhgb3BlbmVkIHdpbmRvd2ApO1xuICAgICAgcmV0dXJuO1xuICAgIH0gZWxzZSBpZiAocmVxdWVzdCA9PT0gXCJrZXlib2FyZC1jaGFuZ2VkXCIpIHtcbiAgICAgIHNldEtleWJvYXJkKGdldEtleWJvYXJkKCkpO1xuICAgICAgcmVzKFwia2V5Ym9hcmQgY2hhbmdlZFwiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByZXMoXCJ1bmtub3duIGNvbW1hbmRcIik7XG4gIH0sXG4gIG1haW4oKSB7XG4gICAgYXBwLmdldF9tb25pdG9ycygpLm1hcCgobW9uaXRvciwgaSkgPT4ge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPE1haW5TZWFyY2hXaW5kb3dDb250ZXh0XG4gICAgICAgICAgdmFsdWU9e3tcbiAgICAgICAgICAgIHZpc2libGU6IGlzVmlzaWJsZU1haW5TZWFyY2gsXG4gICAgICAgICAgICBzZXRWaXNpYmxlOiBzZXRJc1Zpc2libGVNYWluU2VhcmNoLFxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICB7KCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICA8QmFyXG4gICAgICAgICAgICAgICAgICBnZGttb25pdG9yPXttb25pdG9yfVxuICAgICAgICAgICAgICAgICAgaW5kZXg9e2l9XG4gICAgICAgICAgICAgICAgICBrZXlib2FyZD17a2V5Ym9hcmR9XG4gICAgICAgICAgICAgICAgICBzZXRLZXlib2FyZD17c2V0S2V5Ym9hcmR9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8TWFpblNlYXJjaFdpbmRvdyBnZGttb25pdG9yPXttb25pdG9yfSAvPlxuICAgICAgICAgICAgICAgIHsvKiA8Tm90aWZpY2F0aW9uV2luZG93IGdka21vbml0b3I9e21vbml0b3J9IC8+ICovfVxuICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfX1cbiAgICAgICAgPC9NYWluU2VhcmNoV2luZG93Q29udGV4dD5cbiAgICAgICk7XG4gICAgfSk7XG4gICAgLy8gTm90aWZpY2F0aW9uV2luZG93IGNhdXNlcyBhIGhpZ2ggY3B1IHVzZ2Ugb2YgOCUgKHRoZSBub3JtYWwgaXMgMC4zJSkgd2hlbiBzd2F5bmMgaXMgcnVubmluZ1xuICAgIC8vIHNvIGl0J3MgYmV0dGVyIHRvIGhhdmUgdGhpcyBjb21wb25lbnQgZG9uZSAoYW5kIHdvcmtpbmcgcGVyZmVjdGx5KSBiZWZvcmUgcmVwbGFjaW5nIHN3YXluY1xuICAgIC8vIChpdCBoYXMgaXNzdWVzIHdpdGggcmVjZWl2aW5nIG5vdGlmaWNhdGlvbnMsIG5ldyBub3RpZmljYXRpb25zIGFyZSBub3QgYWx3YXlzIGFkZGVkLCB0aGUgZG9jcyBoYXZlIGFuIGV4YW1wbGUgc28gSSBtaWdodCBzZWUgdGhhdClcbiAgICAvLyBhcHAuZ2V0X21vbml0b3JzKCkubWFwKE5vdGlmaWNhdGlvbldpbmRvdyk7XG4gIH0sXG59KTtcbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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QXNCLFNBQVMsY0FBYztBQUMzRCxxQkFBaUIsS0FBSztBQUFBLEVBQ3hCLENBQUM7QUFFRCxVQUFRLElBQUksRUFBRSxRQUFRLENBQUMsV0FBVztBQUNoQztBQUFBLE1BQ0U7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0EsUUFBUTtBQUFBLE1BQ1I7QUFBQSxNQUNBO0FBQUEsSUFDRjtBQUNBO0FBQUEsTUFDRTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQSxRQUFRO0FBQUEsTUFDUjtBQUFBLE1BQ0E7QUFBQSxJQUNGO0FBQ0E7QUFBQSxNQUNFO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBLFFBQVE7QUFBQSxNQUNSO0FBQUEsTUFDQTtBQUFBLElBQ0Y7QUFDQTtBQUFBLE1BQ0U7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0EsUUFBUTtBQUFBLE1BQ1I7QUFBQSxNQUNBO0FBQUEsSUFDRjtBQUNBO0FBQUEsTUFDRTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQSxRQUFRO0FBQUEsTUFDUjtBQUFBLE1BQ0E7QUFBQSxJQUNGO0FBQ0E7QUFBQSxNQUNFO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBLFFBQVE7QUFBQSxNQUNSO0FBQUEsTUFDQTtBQUFBLElBQ0Y7QUFDQTtBQUFBLE1BQ0U7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0EsUUFBUTtBQUFBLE1BQ1I7QUFBQSxNQUNBO0FBQUEsSUFDRjtBQUNBO0FBQUEsTUFDRTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQSxRQUFRO0FBQUEsTUFDUjtBQUFBLE1BQ0E7QUFBQSxJQUNGO0FBQ0E7QUFBQSxNQUNFO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBLFFBQVE7QUFBQSxNQUNSO0FBQUEsTUFDQTtBQUFBLElBQ0Y7QUFDQTtBQUFBLE1BQ0U7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0EsUUFBUTtBQUFBLE1BQ1I7QUFBQSxNQUNBO0FBQUEsSUFDRjtBQUNBO0FBQUEsTUFDRTtB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QUFlO0FBQ25CO0FBQUEsSUFDRixXQUFXLFlBQVksb0JBQW9CO0FBQ3pDLGtCQUFZLFlBQVksQ0FBQztBQUN6QixVQUFJLGtCQUFrQjtBQUN0QjtBQUFBLElBQ0Y7QUFFQSxRQUFJLGlCQUFpQjtBQUFBLEVBQ3ZCO0FBQUEsRUFDQSxPQUFPO0FBQ0wsZ0JBQUksYUFBYSxFQUFFLElBQUksQ0FBQyxTQUFTLE1BQU07QUFDckMsYUFDRTtBQUFBLFFBQUM7QUFBQTtBQUFBLFVBQ0MsT0FBTztBQUFBLFlBQ0wsU0FBUztBQUFBLFlBQ1QsWUFBWTtBQUFBLFVBQ2Q7QUFBQSxVQUVDLGdCQUFNO0FBQ0wsbUJBQ0UsaUNBQ0U7QUFBQTtBQUFBLGdCQUFDO0FBQUE7QUFBQSxrQkFDQyxZQUFZO0FBQUEsa0JBQ1osT0FBTztBQUFBLGtCQUNQO0FBQUEsa0JBQ0E7QUFBQTtBQUFBLGNBQ0Y7QUFBQSxjQUNBLG9CQUFDLDRCQUFpQixZQUFZLFNBQVM7QUFBQSxlQUV6QztBQUFBLFVBRUo7QUFBQTtBQUFBLE1BQ0Y7QUFBQSxJQUVKLENBQUM7QUFBQSxFQUtIO0FBQ0YsQ0FBQzsiLAogICJuYW1lcyI6IFsibW9kIiwgInBhdGNoIiwgIkFwcHMiLCAiSHlwcmxhbmQiLCAiTXByaXMiLCAiVHJheSIsICJHT2JqZWN0IiwgIkdPYmplY3QiLCAiR0xpYiIsICJzbmFrZWlmeSIsICJzbmFrZWlmeSIsICJHT2JqZWN0IiwgInNldCIsICJHT2JqZWN0IiwgImtleSIsICJvYmplY3QiLCAiR09iamVjdCIsICJtb2QiLCAiR09iamVjdCIsICJyZW1vdmUiLCAiQXN0YWwiLCAiR3RrIiwgIkFzdGFsSU8iLCAiQXN0YWxJTyIsICJpbnRlcnZhbCIsICJ0aW1lb3V0IiwgInNldCIsICJHTGliIiwgIk1wcmlzIiwgIkdpbyIsICJHT2JqZWN0IiwgIkdMaWIiLCAiR09iamVjdCIsICJHT2JqZWN0IiwgIkdPYmplY3QiLCAiR0xpYiIsICJfYSIsICJHT2JqZWN0IiwgIkdpbyIsICJHTGliIiwgImFwcHMiLCAiYXBwcyIsICJHaW8iLCAiR3RrIiwgInAiLCAiR2lvIiwgIkdMaWIiLCAiR0xpYiIsICJHaW8iLCAicGl4bWFwRmlsZXMiLCAiR3RrIiwgIkFzdGFsIiwgIkd0ayIsICJHaW8iLCAiR09iamVjdCIsICJHdGsiLCAiR2lvIiwgImNzcyIsICJHT2JqZWN0IiwgImluZGV4IiwgIkd0ayIsICJBc3RhbCIsICJHdGsiLCAiR3RrIiwgInBsYXliYWNrU3RhdHVzIiwgIk1wcmlzIiwgImxlbmd0aCIsICJwb3NpdGlvbiIsICJNcHJpcyIsICJHaW8iLCAiR0xpYiIsICJHaW8iLCAiR0xpYiIsICJHVG9wIiwgIkdMaWIiLCAiSHlwcmxhbmQiLCAiX2EiLCAiX2luaXQiLCAiR09iamVjdCIsICJpc0ZvY3VzZWQiLCAiaGFzTW9yZUNsaWVudHMiLCAiY2xpZW50cyIsICJIeXBybGFuZCIsICJpbmRleCIsICJpdGVtcyIsICJrZXlib2FyZCIsICJpc1Bvd2VyZWRCbHVldG9vdGgiLCAiYmx1ZXRvb3RoQWRhcHRlciIsICJwcmltYXJ5IiwgImNvbm5lY3Rpdml0eSIsICJzdGF0ZSIsICJ3aWZpU3RyZW5ndGgiLCAiR3RrIiwgIkdMaWIiLCAiR3RrIiwgImtleWJvYXJkIiwgInNldEtleWJvYXJkIiwgIkFzdGFsIiwgIkh5cHJsYW5kIiwgIkdpbyIsICJfZGVza3RvcEljb25fZGVjIiwgIl90ZXh0X2RlYyIsICJfYSIsICJfaW5pdCIsICJHT2JqZWN0IiwgIkd0ayIsICJhcHBzIiwgIkdpbyIsICJBc3RhbCIsICJIeXBybGFuZCIsICJ2aXNpYmxlIiwgImZvY3VzZWRNb25pdG9yIl0KfQo=

EOF

LD_PRELOAD="/usr/lib/libgtk4-layer-shell.so" /usr/bin/gjs -m $file $@