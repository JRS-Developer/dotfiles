#!/usr/bin/bash
file="${XDG_RUNTIME_DIR:-/tmp}/dmFyIF-ags.js"

cat <<EOF | base64 --decode > $file
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __knownSymbol = (name, symbol) => (symbol = Symbol[name]) ? symbol : Symbol.for("Symbol." + name);
var __typeError = (msg) => {
  throw TypeError(msg);
};
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __decoratorStart = (base) => [, , , __create(base?.[__knownSymbol("metadata")] ?? null)];
var __decoratorStrings = ["class", "method", "getter", "setter", "accessor", "field", "value", "get", "set"];
var __expectFn = (fn) => fn !== void 0 && typeof fn !== "function" ? __typeError("Function expected") : fn;
var __decoratorContext = (kind, name, done, metadata, fns) => ({ kind: __decoratorStrings[kind], name, metadata, addInitializer: (fn) => done._ ? __typeError("Already initialized") : fns.push(__expectFn(fn || null)) });
var __decoratorMetadata = (array, target) => __defNormalProp(target, __knownSymbol("metadata"), array[3]);
var __runInitializers = (array, flags, self, value) => {
  for (var i = 0, fns = array[flags >> 1], n = fns && fns.length; i < n; i++) flags & 1 ? fns[i].call(self) : value = fns[i].call(self, value);
  return value;
};
var __decorateElement = (array, flags, name, decorators, target, extra) => {
  var fn, it, done, ctx, access, k = flags & 7, s = !!(flags & 8), p = !!(flags & 16);
  var j = k > 3 ? array.length + 1 : k ? s ? 1 : 2 : 0, key = __decoratorStrings[k + 5];
  var initializers = k > 3 && (array[j - 1] = []), extraInitializers = array[j] || (array[j] = []);
  var desc = k && (!p && !s && (target = target.prototype), k < 5 && (k > 3 || !p) && __getOwnPropDesc(k < 4 ? target : { get [name]() {
    return __privateGet(this, extra);
  }, set [name](x) {
    return __privateSet(this, extra, x);
  } }, name));
  k ? p && k < 4 && __name(extra, (k > 2 ? "set " : k > 1 ? "get " : "") + name) : __name(target, name);
  for (var i = decorators.length - 1; i >= 0; i--) {
    ctx = __decoratorContext(k, name, done = {}, array[3], extraInitializers);
    if (k) {
      ctx.static = s, ctx.private = p, access = ctx.access = { has: p ? (x) => __privateIn(target, x) : (x) => name in x };
      if (k ^ 3) access.get = p ? (x) => (k ^ 1 ? __privateGet : __privateMethod)(x, target, k ^ 4 ? extra : desc.get) : (x) => x[name];
      if (k > 2) access.set = p ? (x, y) => __privateSet(x, target, y, k ^ 4 ? extra : desc.set) : (x, y) => x[name] = y;
    }
    it = (0, decorators[i])(k ? k < 4 ? p ? extra : desc[key] : k > 4 ? void 0 : { get: desc.get, set: desc.set } : target, ctx), done._ = 1;
    if (k ^ 4 || it === void 0) __expectFn(it) && (k > 4 ? initializers.unshift(it) : k ? p ? extra = it : desc[key] = it : target = it);
    else if (typeof it !== "object" || it === null) __typeError("Object expected");
    else __expectFn(fn = it.get) && (desc.get = fn), __expectFn(fn = it.set) && (desc.set = fn), __expectFn(fn = it.init) && initializers.unshift(fn);
  }
  return k || __decoratorMetadata(array, target), desc && __defProp(target, name, desc), p ? k ^ 4 ? extra : desc : target;
};
var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
var __privateIn = (member, obj) => Object(obj) !== obj ? __typeError('Cannot use the "in" operator on this value') : member.has(obj);
var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
var __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
var __privateMethod = (obj, member, method) => (__accessCheck(obj, member, "access private method"), method);

// ../../../../usr/share/ags/js/src/gtk4/app.ts
import GLib from "gi://GLib?version=2.0";
import Gtk from "gi://Gtk?version=4.0";
import Astal from "gi://Astal?version=4.0";

// ../../../../usr/share/ags/js/src/overrides.ts
function snakeify(str) {
  return str.replace(/([a-z])([A-Z])/g, "$1_$2").replaceAll("-", "_").toLowerCase();
}
async function suppress(mod2, patch2) {
  return mod2.then((m) => patch2(m.default)).catch(() => void 0);
}
function patch(proto, prop) {
  Object.defineProperty(proto, prop, {
    get() {
      return this[`get_${snakeify(prop)}`]();
    }
  });
}
await suppress(import("gi://AstalApps"), ({ Apps: Apps2, Application }) => {
  patch(Apps2.prototype, "list");
  patch(Application.prototype, "keywords");
  patch(Application.prototype, "categories");
});
await suppress(import("gi://AstalBattery"), ({ UPower }) => {
  patch(UPower.prototype, "devices");
});
await suppress(import("gi://AstalBluetooth"), ({ Adapter, Bluetooth, Device }) => {
  patch(Adapter.prototype, "uuids");
  patch(Bluetooth.prototype, "adapters");
  patch(Bluetooth.prototype, "devices");
  patch(Device.prototype, "uuids");
});
await suppress(import("gi://AstalHyprland"), ({ Hyprland: Hyprland5, Monitor, Workspace }) => {
  patch(Hyprland5.prototype, "binds");
  patch(Hyprland5.prototype, "monitors");
  patch(Hyprland5.prototype, "workspaces");
  patch(Hyprland5.prototype, "clients");
  patch(Monitor.prototype, "availableModes");
  patch(Monitor.prototype, "available_modes");
  patch(Workspace.prototype, "clients");
});
await suppress(import("gi://AstalMpris"), ({ Mpris: Mpris4, Player }) => {
  patch(Mpris4.prototype, "players");
  patch(Player.prototype, "supported_uri_schemes");
  patch(Player.prototype, "supportedUriSchemes");
  patch(Player.prototype, "supported_mime_types");
  patch(Player.prototype, "supportedMimeTypes");
  patch(Player.prototype, "comments");
});
await suppress(import("gi://AstalNetwork"), ({ Wifi }) => {
  patch(Wifi.prototype, "access_points");
  patch(Wifi.prototype, "accessPoints");
});
await suppress(import("gi://AstalNotifd"), ({ Notifd: Notifd2, Notification }) => {
  patch(Notifd2.prototype, "notifications");
  patch(Notification.prototype, "actions");
});
await suppress(import("gi://AstalPowerProfiles"), ({ PowerProfiles }) => {
  patch(PowerProfiles.prototype, "actions");
});
await suppress(import("gi://AstalWp"), ({ Wp, Audio, Video }) => {
  patch(Wp.prototype, "endpoints");
  patch(Wp.prototype, "devices");
  patch(Audio.prototype, "streams");
  patch(Audio.prototype, "recorders");
  patch(Audio.prototype, "microphones");
  patch(Audio.prototype, "speakers");
  patch(Audio.prototype, "devices");
  patch(Video.prototype, "streams");
  patch(Video.prototype, "recorders");
  patch(Video.prototype, "sinks");
  patch(Video.prototype, "sources");
  patch(Video.prototype, "devices");
});
await suppress(import("gi://AstalTray"), ({ Tray: Tray2 }) => {
  patch(Tray2.prototype, "items");
});

// ../../../../usr/share/ags/js/src/_app.ts
import { setConsoleLogDomain } from "console";
import { exit, programArgs } from "system";

// ../../../../usr/share/ags/js/gnim/src/jsx/scope.ts
var Scope = class _Scope {
  constructor(parent) {
    this.contexts = /* @__PURE__ */ new Map();
    this.cleanups = /* @__PURE__ */ new Set();
    this.mounts = /* @__PURE__ */ new Set();
    this.mounted = false;
    this.parent = parent;
  }
  onCleanup(callback) {
    this.cleanups?.add(callback);
  }
  onMount(callback) {
    if (this.parent && !this.parent.mounted) {
      this.parent.onMount(callback);
    } else {
      this.mounts.add(callback);
    }
  }
  run(fn) {
    const prev = _Scope.current;
    _Scope.current = this;
    try {
      return fn();
    } finally {
      this.mounts.forEach((cb) => cb());
      this.mounts.clear();
      this.mounted = true;
      _Scope.current = prev;
    }
  }
  dispose() {
    this.cleanups.forEach((cb) => cb());
    this.cleanups.clear();
    this.contexts.clear();
    delete this.parent;
  }
};
function createContext(defaultValue) {
  let ctx;
  function provide(value, fn) {
    const scope = getScope();
    scope.contexts.set(ctx, value);
    return scope.run(fn);
  }
  function use() {
    let scope = Scope.current;
    while (scope) {
      const value = scope.contexts.get(ctx);
      if (value !== void 0) return value;
      scope = scope.parent;
    }
    return defaultValue;
  }
  function context({ value, children }) {
    return provide(value, children);
  }
  return ctx = Object.assign(context, {
    provide,
    use
  });
}
function getScope() {
  const scope = Scope.current;
  if (!scope) {
    throw Error("cannot get scope: out of tracking context");
  }
  return scope;
}
function onCleanup(cleanup) {
  if (!Scope.current) {
    console.error(Error("out of tracking context: will not be able to cleanup"));
  }
  Scope.current?.onCleanup(cleanup);
}
function createRoot(fn) {
  const scope = new Scope(null);
  return scope.run(() => fn(() => scope.dispose()));
}

// ../../../../usr/share/ags/js/src/_app.ts
import IO from "gi://AstalIO";
import GObject from "gi://GObject";
function mkApp(App) {
  return new class AstalJS extends App {
    static {
      GObject.registerClass({ GTypeName: "AstalJS" }, this);
    }
    eval(body) {
      return new Promise((res, rej) => {
        try {
          const fn = Function(`return (async function() {
                        ${body.includes(";") ? body : `return ${body};`}
                    })`);
          fn()().then(res).catch(rej);
        } catch (error) {
          rej(error);
        }
      });
    }
    vfunc_shutdown() {
      super.vfunc_shutdown();
      this.disposeRoot?.();
    }
    vfunc_request(msg, conn) {
      if (typeof this.requestHandler === "function") {
        this.requestHandler(msg, (response) => {
          IO.write_sock(conn, String(response), (_, res) => IO.write_sock_finish(res));
        });
      } else {
        super.vfunc_request(msg, conn);
      }
    }
    apply_css(style, reset = false) {
      super.apply_css(style, reset);
    }
    quit(code) {
      super.quit();
      exit(code ?? 0);
    }
    start({ requestHandler, css, hold, main, client, icons, ...cfg } = {}) {
      const app = this;
      client ??= () => {
        print(`Astal instance "${app.instanceName}" already running`);
        exit(1);
      };
      Object.assign(this, cfg);
      setConsoleLogDomain(app.instanceName);
      this.requestHandler = requestHandler;
      app.connect("activate", () => {
        createRoot((dispose) => {
          this.disposeRoot = dispose;
          main?.(...programArgs);
        });
      });
      try {
        app.acquire_socket();
      } catch {
        return client((msg) => IO.send_request(app.instanceName, msg), ...programArgs);
      }
      if (css) this.apply_css(css, false);
      if (icons) app.add_icons(icons);
      hold ??= true;
      if (hold) app.hold();
      app.runAsync([]);
    }
  }();
}

// ../../../../usr/share/ags/js/src/gtk4/app.ts
Gtk.init();
GLib.unsetenv("LD_PRELOAD");
await import("gi://Adw?version=1").then(({ default: Adw }) => Adw.init()).catch(() => void 0);
var app_default = mkApp(Astal.Application);

// sass:/home/jose/.config/my-ags/style.scss
var style_default = "button {\n  transition-duration: 200ms;\n}\nbutton.circular {\n  border-radius: 999px;\n}\nbutton label {\n  color: @theme_fg_color;\n}\n\ncalendar.view .day-name {\n  text-transform: capitalize;\n}\n\nwindow.Bar {\n  background: transparent;\n  color: @theme_fg_color;\n  font-weight: bold;\n}\nwindow.Bar centerbox {\n  background: @theme_bg_color;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 16px;\n  padding-right: 16px;\n}\nwindow.Bar button {\n  border: none;\n}\n\n.TestRadiusLeft {\n  background-color: white;\n  border-top-left-radius: 25px;\n  box-shadow: -10px -5px 0 0 red;\n  border: none;\n  margin-left: 10px;\n}\n\n.TestRadiusRight {\n  background-color: white;\n  border-top-right-radius: 25px;\n  box-shadow: 10px -5px 0 0 @theme_bg_color;\n  border: none;\n}\n\n.DashboardTab {\n  padding: 8px;\n}\n\n.DashboardTabHourAndMinute {\n  font-size: 40px;\n  font-weight: bold;\n}\n\n.DashboardTabDate {\n  color: @theme_selected_bg_color;\n  font-weight: bolder;\n}\n\n.DashboardBox {\n  background-color: var(--popover-shade-color);\n  padding: 8px;\n  border-radius: 8px;\n  color: @theme_selected_fg_color;\n}\n.DashboardBox.extraPadding {\n  padding-left: 16px;\n  padding-right: 16px;\n}\n.DashboardBox calendar.view {\n  background-color: transparent;\n  border: none;\n}\n\n.DashboardTabSysInfoLabel {\n  font-weight: 500;\n  text-transform: capitalize;\n}\n\n.WallpaperImgButtonContainer {\n  opacity: 0;\n  transition: opacity 200ms ease-in-out;\n  border-radius: 999px;\n}\n\n.WallpaperImgButtonContainer:hover {\n  opacity: 1;\n}\n\n.NotificationWindow {\n  background: transparent;\n  margin-right: 18px;\n  margin-top: 20px;\n}\n\n.NotificationWindowNotificationItem {\n  background: @theme_bg_color;\n  padding: 8px 4px 8px 8px;\n  border-radius: 8px;\n}\n\n.NotificationWindowNotificationItemSummary {\n  font-weight: bold;\n  font-size: 20;\n}\n\n.MediaPlayerBars {\n  color: @theme_selected_bg_color;\n}\n\n.MediaPlayerSongLabel {\n  color: @theme_selected_bg_color;\n  font-weight: bold;\n}\n\n.EndeavourOsIcon {\n  color: #7e3ebe;\n}\n\n.HyprLandIcon {\n  color: #00e2d1;\n}\n\n.UptimeIcon {\n  color: @theme_selected_bg_color;\n}\n\n.TrayRow {\n  background-color: var(--popover-shade-color);\n  border-radius: 8px;\n}\n\n.Workspaces {\n  background-color: @theme_bg_color;\n  border-radius: 8px;\n}\n\n.WorkspaceItem.group {\n  background-color: var(--popover-shade-color);\n  border-radius: 999px;\n}\n\n.WorkspaceClientItem {\n  border-radius: 999px;\n}\n.WorkspaceClientItem.focused {\n  background-color: @theme_selected_bg_color;\n  border-radius: 999px;\n}\n\n.MainSearchWindow {\n  background-color: transparent;\n}\n\n.MainSearch {\n  background-color: @theme_bg_color;\n  padding: 8px;\n  border-radius: 8px;\n  margin-bottom: 20px;\n  box-shadow: rgba(0, 0, 0, 0.1) 0px 1px 3px 0px, rgba(0, 0, 0, 0.06) 0px 1px 2px 0px;\n  border: 2px solid var(--popover-shade-color);\n}\n.MainSearch.hide {\n  margin-bottom: 0;\n}\n.MainSearch scrolledwindow {\n  background-color: @theme_bg_color;\n}\n.MainSearch entry {\n  margin-top: 8px;\n}\n.MainSearch listview {\n  background-color: @theme_bg_color;\n  border-radius: 8px;\n}\n.MainSearch listview row {\n  border-radius: 999px;\n  padding-left: 12px;\n  padding-top: 8px;\n  padding-bottom: 8px;\n}\n\n.unstyledMenuButton button {\n  all: unset;\n}\n\n.LogoutPanelWindow {\n  background-color: var(--popover-shade-color);\n}\n\n.LogoutFlowBox flowboxchild {\n  background-color: @theme_bg_color;\n  padding: 32px;\n  transition: border-radius 200ms ease-in-out;\n}\n.LogoutFlowBox flowboxchild:selected {\n  background-color: @theme_selected_bg_color;\n  color: @theme_selected_fg_color;\n  border-radius: 999px;\n}\n\n.LogoutPanelwindowLabel {\n  font-size: 16px;\n  font-weight: bold;\n}\n\n.ControlPanelActiveIcon {\n  color: @theme_selected_bg_color;\n}";

// ../../../../usr/share/ags/js/gnim/src/jsx/jsx.ts
import GObject3 from "gi://GObject";

// ../../../../usr/share/ags/js/gnim/src/jsx/state.ts
import GObject2 from "gi://GObject";
import Gio from "gi://Gio";
import GLib2 from "gi://GLib";

// ../../../../usr/share/ags/js/gnim/src/util.ts
function kebabify(str) {
  return str.replace(/([a-z])([A-Z])/g, "$1-$2").replaceAll("_", "-").toLowerCase();
}
function snakeify2(str) {
  return str.replace(/([a-z])([A-Z])/g, "$1-$2").replaceAll("-", "_").toLowerCase();
}
function definePropertyGetter(object, prop) {
  Object.defineProperty(object, `get_${kebabify(prop).replaceAll("-", "_")}`, {
    configurable: false,
    enumerable: true,
    value: () => object[prop]
  });
}
function set(obj, prop, value) {
  const key = snakeify2(prop);
  const getter = `get_${key}`;
  const setter = `set_${key}`;
  let current;
  if (getter in obj && typeof obj[getter] === "function") {
    current = obj[getter]();
  } else {
    current = obj[prop];
  }
  if (current !== value) {
    if (setter in obj && typeof obj[setter] === "function") {
      ;
      obj[setter](value);
    } else {
      Object.assign(obj, { [prop]: value });
    }
  }
}

// ../../../../usr/share/ags/js/gnim/src/jsx/state.ts
var Accessor = class _Accessor extends Function {
  static {
    this.$gtype = GObject2.TYPE_JSOBJECT;
  }
  #get;
  #subscribe;
  constructor(get, subscribe) {
    super("return arguments.callee._call.apply(arguments.callee, arguments)");
    this.#subscribe = subscribe ?? (() => () => void 0);
    this.#get = get;
  }
  /**
   * Subscribe for value changes.
   * @param callback The function to run when the current value changes.
   * @returns Unsubscribe function.
   */
  subscribe(callback) {
    return this.#subscribe(callback);
  }
  /**
   * @returns The current value.
   */
  get() {
    _Accessor.evaluating?.add(this);
    return this.#get();
  }
  /**
   * Create a new `Accessor` that applies a transformation on its value.
   * @param transform The transformation to apply. Should be a pure function.
   */
  as(transform) {
    return new _Accessor(() => transform(this.#get()), this.#subscribe);
  }
  _call(transform) {
    return this.as(transform);
  }
  toString() {
    return `Accessor<${this.get()}>`;
  }
  [Symbol.toPrimitive]() {
    console.warn("Accessor implicitly converted to a primitive value.");
    return this.toString();
  }
};
function createState(init) {
  let currentValue = init;
  const subscribers = /* @__PURE__ */ new Set();
  const subscribe = (callback) => {
    subscribers.add(callback);
    return () => subscribers.delete(callback);
  };
  const set2 = (newValue) => {
    const value = typeof newValue === "function" ? newValue(currentValue) : newValue;
    if (currentValue !== value) {
      currentValue = value;
      subscribers.forEach((cb) => cb());
    }
  };
  return [new Accessor(() => currentValue, subscribe), set2];
}
function createComputed(deps, transform) {
  let dispose;
  const subscribers = /* @__PURE__ */ new Set();
  const cache = new Array(deps.length);
  const subscribe = (callback) => {
    if (subscribers.size === 0) {
      dispose = deps.map(
        (dep, i) => dep.subscribe(() => {
          const value = dep.get();
          if (cache[i] !== value) {
            cache[i] = dep.get();
            subscribers.forEach((cb) => cb());
          }
        })
      );
    }
    subscribers.add(callback);
    return () => {
      subscribers.delete(callback);
      if (subscribers.size === 0) {
        dispose.map((cb) => cb());
        dispose.length = 0;
        cache.length = 0;
      }
    };
  };
  const get = () => {
    const args = deps.map((dep, i) => {
      if (!cache[i]) {
        cache[i] = dep.get();
      }
      return cache[i];
    });
    return transform ? transform(...args) : args;
  };
  return new Accessor(get, subscribe);
}
function createBinding(object, key) {
  const prop = kebabify(key);
  const subscribe = (callback) => {
    const sig = object instanceof Gio.Settings ? "changed" : "notify";
    const id = object.connect(`${sig}::${prop}`, () => callback());
    return () => object.disconnect(id);
  };
  const get = () => {
    if (object instanceof Gio.Settings) {
      return object.get_value(key).recursiveUnpack();
    } else {
      const getter = `get_${prop.replaceAll("-", "_")}`;
      if (getter in object && typeof object[getter] === "function") {
        return object[getter]();
      }
      if (prop in object) return object[prop];
      if (key in object) return object[key];
      throw Error(`cannot get property ${key}`);
    }
  };
  return new Accessor(get, subscribe);
}

// ../../../../usr/share/ags/js/gnim/src/jsx/env.ts
function configue(conf) {
  return Object.assign(env, conf);
}
function missingImpl() {
  throw Error("missing impl");
}
var env = {
  intrinsicElements: {},
  addChild: missingImpl,
  setCss: missingImpl,
  setClass: missingImpl,
  initProps: () => void 0,
  defaultCleanup: () => void 0
};

// ../../../../usr/share/ags/js/gnim/src/jsx/jsx.ts
var gtkType = Symbol("gtk builder type");
function getType(object) {
  return gtkType in object ? object[gtkType] : null;
}
function isGObjectCtor(ctor) {
  return ctor.prototype instanceof GObject3.Object;
}
function isFunctionCtor(ctor) {
  return typeof ctor === "function" && !isGObjectCtor(ctor);
}
function setType(object, type) {
  if (gtkType in object && object[gtkType] !== "") {
    console.warn(`type overriden from ${object[gtkType]} to ${type} on ${object}`);
  }
  Object.assign(object, { [gtkType]: type });
}
function jsx(ctor, inprops, key) {
  const { $, $type, $constructor, children = [], ...rest } = inprops;
  const props = rest;
  if (key) Object.assign(props, { key });
  env.initProps(props);
  for (const [key2, value] of Object.entries(props)) {
    if (value === void 0) delete props[key2];
  }
  if (typeof ctor === "string") {
    if (ctor in env.intrinsicElements) {
      ctor = env.intrinsicElements[ctor];
    } else {
      throw Error(`unknown intrinsic element "${ctor}"`);
    }
  }
  if (isFunctionCtor(ctor)) {
    const object2 = ctor({ children, ...props });
    if ($type) setType(object2, $type);
    $?.(object2);
    return object2;
  }
  const { css, class: className } = props;
  delete props.css;
  delete props.class;
  const signals = [];
  const bindings = [];
  for (const [key2, value] of Object.entries(props)) {
    if (key2.startsWith("on")) {
      signals.push([key2.slice(2), value]);
      delete props[key2];
    }
    if (value instanceof Accessor) {
      bindings.push([key2, value]);
      props[key2] = value.get();
    }
  }
  const object = $constructor ? $constructor(props) : new ctor(props);
  if ($constructor) Object.assign(object, props);
  if ($type) setType(object, $type);
  if (css) env.setCss(object, css);
  if (className) env.setClass(object, className);
  for (const child of Array.isArray(children) ? children : [children]) {
    if (child === true) {
      console.warn("Trying to add boolean value of `true` as a child.");
      continue;
    }
    if (Array.isArray(child)) {
      for (const ch of child) {
        env.addChild(object, ch, -1);
      }
    } else if (child) {
      env.addChild(object, child, -1);
    }
  }
  const disposeHandlers = signals.map(([sig, handler]) => {
    const name = kebabify(sig);
    const id = name.startsWith("notify-") ? object.connect(`notify::${name.slice(7)}`, handler) : object.connect(kebabify(sig), handler);
    return () => object.disconnect(id);
  });
  const disposeBindings = bindings.map(([prop, binding]) => {
    const dispose = binding.subscribe(() => {
      set(object, prop, binding.get());
    });
    set(object, prop, binding.get());
    return dispose;
  });
  if (disposeBindings.length > 0 || disposeHandlers.length > 0) {
    onCleanup(() => {
      disposeHandlers.forEach((cb) => cb());
      disposeBindings.forEach((cb) => cb());
    });
  }
  $?.(object);
  return object;
}
var jsxs = jsx;

// ../../../../usr/share/ags/js/gnim/src/jsx/Fragment.ts
import GObject4 from "gi://GObject";

// ../../../../usr/share/ags/js/gnim/src/gnome/signalTracker.ts
var mod = import("resource:///org/gnome/shell/misc/signalTracker.js");
var registerDestroyableType = await mod.then((mod2) => mod2.registerDestroyableType).catch(() => () => void 0);

// ../../../../usr/share/ags/js/gnim/src/jsx/Fragment.ts
var _a, _b, _c;
var Fragment = class _Fragment extends (_c = GObject4.Object, _b = GObject4.signals, _a = GObject4.properties, _c) {
  constructor({ children = [] } = {}) {
    super();
    this.connectionIds = /* @__PURE__ */ new Set();
    this._children = Array.isArray(children) ? children : [children];
  }
  static {
    this[_b] = {
      "destroy": {},
      "child-added": {
        param_types: [GObject4.TYPE_OBJECT, GObject4.TYPE_UINT]
      },
      "child-removed": {
        param_types: [GObject4.TYPE_OBJECT, GObject4.TYPE_UINT]
      }
    };
  }
  static {
    this[_a] = {
      children: GObject4.ParamSpec.jsobject("children", "", "", GObject4.ParamFlags.READABLE)
    };
  }
  static {
    GObject4.registerClass(this);
    registerDestroyableType(this);
  }
  static new(children = []) {
    return new _Fragment({ children });
  }
  get children() {
    return [...this._children];
  }
  addChild(child, index = -1) {
    if (child instanceof _Fragment) {
      throw Error(`nesting Fragments are not yet supported`);
    }
    if (index > 0) {
      this._children = [
        ...this._children.slice(0, index),
        child,
        ...this._children.slice(index)
      ];
    } else {
      this._children.push(child);
      index = this._children.length - 1;
    }
    this.emit("child-added", child, index);
    this.notify("children");
  }
  hasChild(child) {
    return this._children.findIndex((ch) => ch === child) > -1;
  }
  removeChild(child) {
    const index = this._children.findIndex((i) => i === child);
    this._children.splice(index, 1);
    this.emit("child-removed", child, index);
    this.notify("children");
  }
  connect(signal, callback) {
    const id = super.connect(signal, callback);
    this.connectionIds.add(id);
    return id;
  }
  disconnect(id) {
    super.disconnect(id);
    this.connectionIds.delete(id);
  }
  destroy() {
    this.emit("destroy");
    for (const id of this.connectionIds.values()) {
      super.disconnect(id);
    }
  }
};

// ../../../../usr/share/ags/js/gnim/src/jsx/For.ts
function For({
  each,
  children: mkChild,
  cleanup,
  id = (item) => item
}) {
  const currentScope = getScope();
  const map = /* @__PURE__ */ new Map();
  const fragment = new Fragment();
  function remove2({ item, child, index: [index], scope }) {
    if (typeof cleanup === "function") {
      cleanup(child, item, index.get());
    } else if (cleanup !== null) {
      env.defaultCleanup(child);
    }
    scope.dispose();
  }
  function callback(itareable) {
    const items = [...itareable];
    const ids = items.map(id);
    const idSet = new Set(ids);
    for (const [key, value] of map.entries()) {
      fragment.removeChild(value.child);
      if (!idSet.has(key)) {
        remove2(value);
        map.delete(key);
      }
    }
    items.map((item, i) => {
      const key = ids[i];
      if (map.has(key)) {
        const {
          index: [, setIndex],
          child
        } = map.get(key);
        setIndex(i);
        if (fragment.hasChild(child)) {
          console.warn(`duplicate keys found: ${key}`);
        } else {
          fragment.addChild(child);
        }
      } else {
        const [index, setIndex] = createState(i);
        const scope = new Scope(currentScope);
        const child = scope.run(() => mkChild(item, index));
        map.set(key, { item, child, index: [index, setIndex], scope });
        fragment.addChild(child);
      }
    });
  }
  const dispose = each.subscribe(() => {
    callback(each.get());
  });
  callback(each.get());
  onCleanup(() => {
    dispose();
    for (const value of map.values()) {
      remove2(value);
    }
    map.clear();
  });
  return fragment;
}

// ../../../../usr/share/ags/js/src/gtk4/index.ts
import Astal2 from "gi://Astal?version=4.0";
import Gtk2 from "gi://Gtk?version=4.0";
import Gdk from "gi://Gdk?version=4.0";

// ../../../../usr/share/ags/js/src/process.ts
import AstalIO from "gi://AstalIO";
var Process = AstalIO.Process;
function exec(cmd) {
  return Array.isArray(cmd) ? AstalIO.Process.execv(cmd) : AstalIO.Process.exec(cmd);
}
function execAsync(cmd) {
  return new Promise((resolve, reject) => {
    if (Array.isArray(cmd)) {
      AstalIO.Process.exec_asyncv(cmd, (_, res) => {
        try {
          resolve(AstalIO.Process.exec_asyncv_finish(res));
        } catch (error) {
          reject(error);
        }
      });
    } else {
      AstalIO.Process.exec_async(cmd, (_, res) => {
        try {
          resolve(AstalIO.Process.exec_finish(res));
        } catch (error) {
          reject(error);
        }
      });
    }
  });
}

// ../../../../usr/share/ags/js/src/time.ts
import AstalIO2 from "gi://AstalIO";
var Time = AstalIO2.Time;
function interval(interval2, callback) {
  return AstalIO2.Time.interval(interval2, () => void callback?.());
}
function timeout(timeout2, callback) {
  return AstalIO2.Time.timeout(timeout2, () => void callback?.());
}
function createPoll(init, ival, execOrFn, transform) {
  let currentValue = init;
  let timer = null;
  const subscribers = /* @__PURE__ */ new Set();
  function subscribe(callback) {
    function set2(value) {
      if (value !== currentValue) {
        currentValue = value;
        subscribers.forEach((cb) => cb());
      }
    }
    if (subscribers.size === 0) {
      timer = interval(ival, () => {
        if (typeof execOrFn === "function") {
          const value = execOrFn(currentValue);
          if (value instanceof Promise) {
            value.then(set2);
          } else {
            set2(value);
          }
        } else {
          execAsync(execOrFn).then((stdout) => {
            set2(transform ? transform(stdout, currentValue) : stdout);
          });
        }
      });
    }
    subscribers.add(callback);
    return () => {
      subscribers.delete(callback);
      if (subscribers.size === 0) {
        timer?.cancel();
        timer = null;
      }
    };
  }
  return new Accessor(() => currentValue, subscribe);
}

// src/widget/Bar.tsx
import GLib10 from "gi://GLib";

// src/widget/MediaPlayer.tsx
import Mpris2 from "gi://AstalMpris";
import Cava from "gi://AstalCava";
import Hyprland from "gi://AstalHyprland";
import Cairo from "cairo";

// src/utils/time.ts
var formatSeconds = (seconds) => {
  const totalSeconds = Math.floor(seconds);
  const hours = Math.floor(totalSeconds / 3600);
  const minutes = Math.floor(totalSeconds % 3600 / 60);
  const secs = totalSeconds % 60;
  if (hours > 0) {
    return `${hours}:${minutes.toString().padStart(2, "0")}:${secs.toString().padStart(2, "0")}`;
  } else {
    return `${minutes}:${secs.toString().padStart(2, "0")}`;
  }
};

// src/widget/MediaPlayer.tsx
import Pango from "gi://Pango";

// src/hooks/usePlayerInfo.ts
import Mpris from "gi://AstalMpris";

// src/utils/mpris/get-last-player.ts
var getIsLastPlayer = (p) => {
  return p.get_bus_name().includes("playerctld");
};
var getLastPlayer = (players) => {
  return players.find((p) => getIsLastPlayer(p));
};

// src/hooks/usePlayerInfo.ts
import Gio3 from "gi://Gio";

// ../../../../usr/share/ags/js/gnim/src/gobject.ts
import GObject5 from "gi://GObject";
import GLib3 from "gi://GLib";
var priv = Symbol("gobject private");
var { defineProperty, fromEntries, entries } = Object;
var { Object: GObj, registerClass } = GObject5;
var SignalFlags = GObject5.SignalFlags;
var AccumulatorType = GObject5.AccumulatorType;
var ParamSpec = GObject5.ParamSpec;
var ParamFlags = GObject5.ParamFlags;
function assertField(ctx) {
  if (ctx.private) throw Error("private fields are not supported");
  if (ctx.static) throw Error("static fields are not supported");
  if (typeof ctx.name !== "string") {
    throw Error("only strings can be gobject property keys");
  }
  return ctx.name;
}
function property(typeDeclaration) {
  return function(_, ctx, options) {
    const fieldName = assertField(ctx);
    const key = kebabify(fieldName);
    const meta = ctx.metadata;
    meta.properties ??= {};
    meta.properties[fieldName] = { flags: ParamFlags.READWRITE, type: typeDeclaration };
    ctx.addInitializer(function() {
      definePropertyGetter(this, fieldName);
      if (options && options.metaOnly) return;
      defineProperty(this, fieldName, {
        enumerable: true,
        configurable: false,
        set(v) {
          if (this[priv][key] !== v) {
            this[priv][key] = v;
            this.notify(key);
          }
        },
        get() {
          return this[priv][key];
        }
      });
    });
    return function(init) {
      const dict = this[priv] ??= {};
      dict[key] = init;
      return init;
    };
  };
}
var MAXINT = 2 ** 31 - 1;
var MININT = -(2 ** 31);
var MAXUINT = 2 ** 32 - 1;
var MAXFLOAT = 34028235e31;
var MINFLOAT = -34028235e31;
var MININT64 = Number.MIN_SAFE_INTEGER;
var MAXINT64 = Number.MAX_SAFE_INTEGER;
function pspecFromGType(type, name, flags) {
  switch (type) {
    case GObject5.TYPE_BOOLEAN:
      return ParamSpec.boolean(name, "", "", flags, false);
    case GObject5.TYPE_STRING:
      return ParamSpec.string(name, "", "", flags, "");
    case GObject5.TYPE_INT:
      return ParamSpec.int(name, "", "", flags, MININT, MAXINT, 0);
    case GObject5.TYPE_UINT:
      return ParamSpec.uint(name, "", "", flags, 0, MAXUINT, 0);
    case GObject5.TYPE_INT64:
      return ParamSpec.int64(name, "", "", flags, MININT64, MAXINT64, 0);
    case GObject5.TYPE_UINT64:
      return ParamSpec.uint64(name, "", "", flags, 0, Number.MAX_SAFE_INTEGER, 0);
    case GObject5.TYPE_FLOAT:
      return ParamSpec.float(name, "", "", flags, MINFLOAT, MAXFLOAT, 0);
    case GObject5.TYPE_DOUBLE:
      return ParamSpec.double(name, "", "", flags, Number.MIN_VALUE, Number.MIN_VALUE, 0);
    case GObject5.TYPE_JSOBJECT:
      return ParamSpec.jsobject(name, "", "", flags);
    case GObject5.TYPE_VARIANT:
      return ParamSpec.object(name, "", "", flags, GLib3.Variant);
    case GObject5.TYPE_ENUM:
    case GObject5.TYPE_INTERFACE:
    case GObject5.TYPE_BOXED:
    case GObject5.TYPE_POINTER:
    case GObject5.TYPE_PARAM:
    case GObject5.type_from_name("GType"):
      throw Error(`cannot guess ParamSpec from GType "${type}"`);
    case GObject5.TYPE_OBJECT:
    default:
      return ParamSpec.object(name, "", "", flags, type);
  }
}
function pspec(name, flags, declaration) {
  if (declaration instanceof ParamSpec) return declaration;
  if (declaration === Object || declaration === Function || declaration === Array) {
    return ParamSpec.jsobject(name, "", "", flags);
  }
  if (declaration === String) {
    return ParamSpec.string(name, "", "", flags, "");
  }
  if (declaration === Number) {
    return ParamSpec.double(name, "", "", flags, -Number.MAX_VALUE, Number.MAX_VALUE, 0);
  }
  if (declaration === Boolean) {
    return ParamSpec.boolean(name, "", "", flags, false);
  }
  if ("$gtype" in declaration) {
    return pspecFromGType(declaration.$gtype, name, flags);
  }
  if (typeof declaration === "function") {
    return declaration(name, flags);
  }
  throw Error("invalid PropertyTypeDeclaration");
}
function register(options = {}) {
  return function(cls, ctx) {
    const t = options.Template;
    if (typeof t === "string" && !t.startsWith("resource://") && !t.startsWith("file://")) {
      options.Template = new TextEncoder().encode(t);
    }
    const meta = ctx.metadata;
    const props = fromEntries(
      entries(meta.properties ?? {}).map(([fieldName, { flags, type }]) => {
        const key = kebabify(fieldName);
        const spec = pspec(key, flags, type);
        return [key, spec];
      })
    );
    const signals = fromEntries(
      entries(meta.signals ?? {}).map(([signalName, { default: def, method, ...signal }]) => {
        if (def) {
          defineProperty(cls.prototype, `on_${signalName.replaceAll("-", "_")}`, {
            enumerable: false,
            configurable: false,
            value: method
          });
        }
        return [signalName, signal];
      })
    );
    delete meta.properties;
    delete meta.signals;
    registerClass({ ...options, Properties: props, Signals: signals }, cls);
  };
}
Function.$gtype = Object.$gtype;
Array.$gtype = Object.$gtype;

// src/objects/PlayerListItemObject.ts
var _busName_dec, _desktopIcon_dec, _text_dec, _a2, _PlayerListItemObject_decorators, _init;
_PlayerListItemObject_decorators = [register({ GTypeName: "PlayerListItem" })];
var PlayerListItemObject = class extends (_a2 = GObject5.Object, _text_dec = [property(String)], _desktopIcon_dec = [property(String)], _busName_dec = [property(String)], _a2) {
  constructor({
    busName,
    desktopIcon,
    text
  }) {
    super();
    this.text = __runInitializers(_init, 8, this, ""), __runInitializers(_init, 11, this);
    this.desktopIcon = __runInitializers(_init, 12, this, ""), __runInitializers(_init, 15, this);
    this.busName = __runInitializers(_init, 16, this, ""), __runInitializers(_init, 19, this);
    this.text = text;
    this.desktopIcon = desktopIcon;
    this.busName = busName;
  }
};
_init = __decoratorStart(_a2);
__decorateElement(_init, 5, "text", _text_dec, PlayerListItemObject);
__decorateElement(_init, 5, "desktopIcon", _desktopIcon_dec, PlayerListItemObject);
__decorateElement(_init, 5, "busName", _busName_dec, PlayerListItemObject);
PlayerListItemObject = __decorateElement(_init, 0, "PlayerListItemObject", _PlayerListItemObject_decorators, PlayerListItemObject);
__runInitializers(_init, 1, PlayerListItemObject);

// src/utils/apps.ts
import Apps from "gi://AstalApps";
import Gio2 from "gi://Gio";
import GLib4 from "gi://GLib";
var createAppsInstance = ({
  variant
}) => {
  return new Apps.Apps(
    variant === "appSearch" ? void 0 : {
      nameMultiplier: 2,
      entryMultiplier: 0,
      executableMultiplier: 2
    }
  );
};
function simplifyAppName(appId = "") {
  const afterSlash = appId.split("/").pop() ?? appId;
  const afterDot = afterSlash.includes(".") ? afterSlash.split(".").pop() : afterSlash;
  let beforeDash = afterDot.includes("-") ? afterDot.split("-")[0] : afterDot;
  beforeDash = beforeDash.replace("_", " ");
  return beforeDash;
}
var searchAppFromName = (apps2, name) => {
  const nameToUse = simplifyAppName(name);
  const results = apps2.fuzzy_query(nameToUse);
  return results;
};
function getAllCommands() {
  let path = GLib4.getenv("PATH");
  if (!path) return [];
  let commands = /* @__PURE__ */ new Set();
  for (let dirpath of path.split(":")) {
    if (!GLib4.file_test(dirpath, GLib4.FileTest.IS_DIR)) continue;
    let dir = GLib4.Dir.open(dirpath, 0);
    if (!dir) continue;
    let name;
    while ((name = dir.read_name()) !== null) {
      let full = GLib4.build_filenamev([dirpath, name]);
      if (GLib4.file_test(
        full,
        GLib4.FileTest.IS_REGULAR | GLib4.FileTest.IS_EXECUTABLE
      )) {
        commands.add(name);
      }
    }
    dir.close();
  }
  return Array.from(commands).sort();
}
var terminals = [
  "kitty",
  "foot",
  "alacritty",
  "wezterm",
  "gnome-terminal",
  "konsole",
  "xterm",
  "lxterminal",
  "tilix",
  "terminator",
  "urxvt"
];
function findAvailableTerminal() {
  for (let term of terminals) {
    if (GLib4.find_program_in_path(term)) return term;
  }
  return null;
}
function getTerminalCommand(terminal, commandString) {
  switch (terminal) {
    case "kitty":
    case "foot":
    case "alacritty":
    case "wezterm":
    case "xterm":
    case "urxvt":
    case "terminator":
    case "lxterminal":
      return [terminal, "-e", "bash", "-c", `${commandString}; exec bash`];
    case "gnome-terminal":
    case "tilix":
    case "konsole":
      return [terminal, "--", "bash", "-c", `${commandString}; exec bash`];
    default:
      return null;
  }
}
function isLikelyGuiApp(command) {
  const knownGui = /* @__PURE__ */ new Set([
    "waybar",
    "swaybg",
    "rofi",
    "wofi",
    "dunst",
    "thunar",
    "alacritty",
    "kitty",
    "firefox",
    "code",
    "nautilus",
    "gnome-calculator",
    "pavucontrol",
    "vlc",
    "gimp"
  ]);
  if (knownGui.has(command)) return true;
  const appInfo = Gio2.AppInfo.get_all().find(
    (app) => app.get_executable() === command
  );
  if (appInfo) return true;
  return false;
}
function runAppCommand(commandString) {
  let [ok, argv] = GLib4.shell_parse_argv(commandString);
  if (!ok || !argv || argv.length === 0) return;
  let command = argv[0];
  try {
    if (isLikelyGuiApp(command)) {
      Gio2.Subprocess.new(argv, Gio2.SubprocessFlags.SEARCH_PATH_FROM_ENVP);
    } else {
      let terminal = findAvailableTerminal();
      if (!terminal) throw new Error("No terminal emulator found");
      let termCommand = getTerminalCommand(terminal, commandString);
      if (!termCommand?.length) {
        printerr("No termCommand");
        return;
      }
      Gio2.Subprocess.new(
        termCommand,
        Gio2.SubprocessFlags.SEARCH_PATH_FROM_ENVP
      );
    }
  } catch (e) {
    logError(e);
  }
}

// src/hooks/usePlayerInfo.ts
var callbackIfCurrent = (callback, getIsWantedPlayer) => {
  return (changed) => {
    if (getIsWantedPlayer(changed)) callback(changed);
  };
};
var bindProperty = (player, _property, signal, getValue, setState, getIsWantedPlayer) => {
  player.connect(
    signal,
    callbackIfCurrent((changed) => {
      setState(getValue(changed));
    }, getIsWantedPlayer)
  );
};
var getters = {
  getCanPlayOrPause(player) {
    if (!player) return false;
    return player.get_can_control() && player.get_playback_status() !== 2;
  },
  getCanLoop(player) {
    if (!player) return false;
    return player.get_loop_status() !== Mpris.Loop.UNSUPPORTED;
  },
  getCanShuffle(player) {
    if (!player) return false;
    return player.get_shuffle_status() !== Mpris.Shuffle.UNSUPPORTED;
  },
  getTitle(player) {
    return player?.get_title() ?? "";
  },
  getArtist(player) {
    return player?.get_artist() ?? "";
  },
  getAlbum(player) {
    return player?.get_album() ?? "";
  },
  getCoverArt(player) {
    return player?.get_cover_art() ?? "";
  },
  getPosition(player) {
    return player?.get_position() ?? 0;
  },
  getLength(player) {
    return player?.get_length() ?? 0;
  },
  getVolume(player) {
    return player?.get_volume() ?? 100;
  },
  getLoopStatus(player) {
    return player?.get_loop_status() ?? Mpris.Loop.UNSUPPORTED;
  },
  getShuffleStatus(player) {
    return player?.get_shuffle_status() ?? Mpris.Shuffle.UNSUPPORTED;
  },
  getCanRaise(player) {
    return player?.get_can_raise() ?? false;
  },
  getCanNext(player) {
    return player?.get_can_go_next() ?? false;
  },
  getCanBack(player) {
    return player?.get_can_go_previous() ?? false;
  },
  getPlaybackStatus(player) {
    return player?.get_playback_status() ?? Mpris.PlaybackStatus.STOPPED;
  }
};
var addPlayerToListStore = (listStore, apps2, p) => {
  const identity = p.get_identity();
  if (!identity) return;
  const app = searchAppFromName(apps2, identity);
  const icon = app?.[0]?.get_icon_name();
  const item = new PlayerListItemObject({
    text: identity,
    desktopIcon: icon,
    busName: p.get_bus_name()
  });
  listStore.append(item);
};
var addPlayersToListStore = (listStore, allPlayers, apps2) => {
  listStore.remove_all();
  let seen = {};
  allPlayers.get().forEach((p) => {
    const trackId = p.get_trackid();
    const key = trackId;
    if (seen[key]) {
      return;
    }
    seen[key] = true;
    addPlayerToListStore(listStore, apps2, p);
  });
};
var findSelectedItemIndex = (allPlayers, selectedPlayer) => {
  const foundIndex = allPlayers.get().findIndex((p) => p.get_bus_name() === selectedPlayer.get().get_bus_name());
  return foundIndex > -1 ? foundIndex : 0;
};
var usePlayerInfo = () => {
  const mpris = Mpris.get_default();
  const players = createBinding(mpris, "players");
  const [selectedPlayer, setSelectedPlayer] = createState(
    getLastPlayer(players.get()) ?? players.get()?.[0]
  );
  const [selectedIndex, setSelectedIndex] = createState(
    findSelectedItemIndex(players, selectedPlayer)
  );
  const apps2 = createAppsInstance({ variant: "other" });
  const liststore = new Gio3.ListStore();
  addPlayersToListStore(liststore, players, apps2);
  const selectionModel = new Gtk2.SingleSelection({ model: liststore });
  const getIsWantedPlayer = (player) => player.get_bus_name() === selectedPlayer.get()?.get_bus_name();
  const p = selectedPlayer.get();
  const [title, setTitle] = createState(getters.getTitle(p));
  const [artist, setArtist] = createState(getters.getArtist(p));
  const [album, setAlbum] = createState(getters.getAlbum(p));
  const [coverArt, setCoverArt] = createState(getters.getCoverArt(p));
  const [playbackStatus, setPlaybackStatus] = createState(
    p?.get_playback_status()
  );
  const [position, setPosition] = createState(getters.getPosition(p));
  const [length, setLength] = createState(getters.getLength(p));
  const [volume, setVolume] = createState(getters.getVolume(p));
  const [loopStatus, setLoopStatus] = createState(getters.getLoopStatus(p));
  const [shuffleStatus, setShuffleStatus] = createState(
    getters.getShuffleStatus(p)
  );
  const [canRaise, setCanRaise] = createState(getters.getCanRaise(p));
  const [canNext, setCanNext] = createState(getters.getCanNext(p));
  const [canBack, setCanBack] = createState(getters.getCanBack(p));
  const [canPlayOrPause, setCanPlayOrPause] = createState(
    getters.getCanPlayOrPause(p)
  );
  const [canLoop, setCanLoop] = createState(getters.getCanLoop(p));
  const [canShuffle, setCanShuffle] = createState(getters.getCanShuffle(p));
  const unsubscribeSelectedPlayer = selectedPlayer.subscribe(() => {
    const p2 = selectedPlayer.get();
    setTitle(getters.getTitle(p2));
    setArtist(getters.getArtist(p2));
    setPlaybackStatus(getters.getPlaybackStatus(p2));
    setCoverArt(getters.getCoverArt(p2));
    setAlbum(getters.getAlbum(p2));
    setPosition(getters.getPosition(p2));
    setLength(getters.getLength(p2));
    setVolume(getters.getVolume(p2));
    setLoopStatus(getters.getLoopStatus(p2));
    setShuffleStatus(getters.getShuffleStatus(p2));
    setCanRaise(getters.getCanRaise(p2));
    setCanNext(getters.getCanNext(p2));
    setCanBack(getters.getCanBack(p2));
    setCanPlayOrPause(getters.getCanPlayOrPause(p2));
    setCanLoop(getters.getCanLoop(p2));
    setCanShuffle(getters.getCanShuffle(p2));
    const index = findSelectedItemIndex(players, selectedPlayer);
    setSelectedIndex(index);
  });
  players.get().forEach((player) => {
    bindProperty(
      player,
      "title",
      "notify::title",
      getters.getTitle,
      setTitle,
      getIsWantedPlayer
    );
    bindProperty(
      player,
      "artist",
      "notify::artist",
      getters.getArtist,
      setArtist,
      getIsWantedPlayer
    );
    bindProperty(
      player,
      "album",
      "notify::album",
      getters.getAlbum,
      setAlbum,
      getIsWantedPlayer
    );
    bindProperty(
      player,
      "cover_art",
      "notify::cover-art",
      getters.getCoverArt,
      setCoverArt,
      getIsWantedPlayer
    );
    bindProperty(
      player,
      "playback_status",
      "notify::playback-status",
      getters.getPlaybackStatus,
      setPlaybackStatus,
      getIsWantedPlayer
    );
    bindProperty(
      player,
      "position",
      "notify::position",
      getters.getPosition,
      setPosition,
      getIsWantedPlayer
    );
    bindProperty(
      player,
      "length",
      "notify::length",
      getters.getLength,
      setLength,
      getIsWantedPlayer
    );
    bindProperty(
      player,
      "volume",
      "notify::volume",
      getters.getVolume,
      setVolume,
      getIsWantedPlayer
    );
    bindProperty(
      player,
      "loop_status",
      "notify::loop-status",
      getters.getLoopStatus,
      setLoopStatus,
      getIsWantedPlayer
    );
    bindProperty(
      player,
      "shuffle_status",
      "notify::shuffle-status",
      getters.getShuffleStatus,
      setShuffleStatus,
      getIsWantedPlayer
    );
    bindProperty(
      player,
      "can_raise",
      "notify::can-raise",
      getters.getCanRaise,
      setCanRaise,
      getIsWantedPlayer
    );
    bindProperty(
      player,
      "can_go_next",
      "notify::can-go-next",
      getters.getCanNext,
      setCanNext,
      getIsWantedPlayer
    );
    bindProperty(
      player,
      "can_go_previous",
      "notify::can-go-previous",
      getters.getCanBack,
      setCanBack,
      getIsWantedPlayer
    );
    player.connect(
      "notify",
      callbackIfCurrent((p2) => {
        setCanPlayOrPause(getters.getCanPlayOrPause(p2));
        setCanLoop(getters.getCanLoop(p2));
        setCanShuffle(getters.getCanShuffle(p2));
      }, getIsWantedPlayer)
    );
    player.connect("notify::trackid", (p2) => {
      const isLastPlayer = getIsLastPlayer(p2);
      if (!isLastPlayer) return;
      setSelectedPlayer(p2);
      addPlayersToListStore(liststore, players, apps2);
    });
  });
  const unsubscribeAllPlayers = players.subscribe(() => {
    addPlayersToListStore(liststore, players, apps2);
  });
  onCleanup(() => {
    unsubscribeSelectedPlayer();
    unsubscribeAllPlayers();
  });
  return {
    playerInfo: {
      title,
      artist,
      album,
      coverArt,
      playbackStatus,
      position,
      length,
      volume,
      loopStatus,
      shuffleStatus,
      canRaise,
      canNext,
      canBack,
      canPlayOrPause,
      canLoop,
      canShuffle
    },
    selectedPlayer,
    setSelectedPlayer,
    selectionModel,
    selectedIndex,
    allPlayers: players
  };
};

// src/widget/CircularImage.tsx
import GdkPixbuf from "gi://GdkPixbuf";

// src/utils/icons.ts
import Gio4 from "gi://Gio";
import GLib5 from "gi://GLib";
var HOME = GLib5.getenv("HOME");
var getIsIcon = ({
  icon,
  iconTheme
}) => {
  return icon ? iconTheme.has_icon(icon) : false;
};
var getIsIconFile = ({ icon }) => {
  return icon?.startsWith("/");
};
function enumerateDir(path) {
  const enumerator = Gio4.File.new_for_path(path).enumerate_children(
    "standard::name,standard::type",
    Gio4.FileQueryInfoFlags.NONE,
    null
  );
  const pixmapFiles2 = [];
  while (true) {
    const info = enumerator.next_file(null);
    if (!info) {
      break;
    }
    pixmapFiles2.push(`${path}/${info.get_name()}`);
  }
  return pixmapFiles2;
}
var MISSING_ICON = "";
var iconCache = {};
var apps = createAppsInstance({ variant: "other" });
var pixmapFiles = enumerateDir("/usr/share/pixmaps");
var hicolorScalable = enumerateDir("/usr/share/icons/hicolor/scalable/apps");
function getAppIcon(name) {
  if (!name) {
    return MISSING_ICON;
  }
  if (iconCache[name] && iconCache[name] != "NO-ICON") {
    return iconCache[name];
  }
  if (iconCache[name] && iconCache[name] == "NO-ICON") {
    return MISSING_ICON;
  }
  if (name.startsWith("steam_app")) {
    try {
      const gameFiles = enumerateDir(
        `${HOME}/.local/share/Steam/appcache/librarycache/${name.substring(10)}`
      );
      const sha256Pattern = /[0-9a-f]{40}\.jpg$/;
      const icon = gameFiles.find((f) => sha256Pattern.test(f));
      if (icon) {
        iconCache[name] = icon;
        return iconCache[name];
      }
    } catch (err) {
      console.error("Found steam app but no cache dir", name);
    }
    const steamIconPath = `${HOME}/.local/share/Steam/appcache/librarycache/${name.substring(10)}/logo.png`;
    if (GLib5.file_test(steamIconPath, GLib5.FileTest.EXISTS)) {
      iconCache[name] = steamIconPath;
      return iconCache[name];
    }
  }
  const iconName = searchAppFromName(apps, name)?.[0]?.get_icon_name();
  if (iconName) {
    iconCache[name] = iconName;
    return iconName;
  }
  const pixmaps = pixmapFiles.filter((it) => it.includes(name));
  if (pixmaps.length) {
    iconCache[name] = pixmaps.at(-1);
    return iconCache[name];
  }
  const scalable = hicolorScalable.filter((it) => it.includes(name));
  if (scalable.length) {
    iconCache[name] = scalable.at(-1);
    return iconCache[name];
  }
  iconCache["NO-ICON"] = MISSING_ICON;
  return MISSING_ICON;
}

// ../../../../usr/share/ags/js/src/gtk4/jsx-runtime.ts
import Gtk4 from "gi://Gtk?version=4.0";
import Astal3 from "gi://Astal?version=4.0";

// ../../../../usr/share/ags/js/gnim/src/gtk4/jsx-runtime.ts
import Gtk3 from "gi://Gtk?version=4.0";
import Gio5 from "gi://Gio?version=2.0";
import GObject6 from "gi://GObject";
var dummyBuilder = new Gtk3.Builder();
function add(parent, child, _) {
  if (!specialAdd(parent, child, _)) {
    parent.vfunc_add_child(dummyBuilder, child, getType(child));
  }
}
function specialRemove(_parent, _child) {
  return false;
}
function specialAdd(parent, child, _) {
  if (child instanceof Gtk3.Adjustment && "set_adjustment" in parent && typeof parent.set_adjustment === "function") {
    parent.set_adjustment(child);
    return true;
  }
  if (child instanceof Gtk3.Widget && parent instanceof Gtk3.Stack && child.name !== "" && child.name !== null && getType(child) === "named") {
    parent.add_named(child, child.name);
    return true;
  }
  if (child instanceof Gtk3.Popover && parent instanceof Gtk3.MenuButton) {
    parent.set_popover(child);
    return true;
  }
  if (child instanceof Gio5.MenuModel && (parent instanceof Gtk3.MenuButton || parent instanceof Gtk3.PopoverMenu)) {
    parent.set_menu_model(child);
    return true;
  }
  if (child instanceof Gio5.MenuItem && parent instanceof Gio5.Menu) {
  }
  if (child instanceof Gtk3.Window && parent instanceof Gtk3.Application) {
    parent.add_window(child);
    return true;
  }
  if (child instanceof Gtk3.TextBuffer && parent instanceof Gtk3.TextView) {
    parent.set_buffer(child);
    return true;
  }
  return false;
}
function remove(parent, child) {
  if (specialRemove(parent, child)) return;
  if ("set_child" in parent && typeof parent.set_child == "function") {
    return parent.set_child(null);
  }
  if ("remove" in parent && typeof parent.remove == "function") {
    return parent.remove(child);
  }
  throw Error(`cannot remove ${child} from ${parent}`);
}
var { addChild, intrinsicElements } = configue({
  setCss(object, css) {
    if (!(object instanceof Gtk3.Widget)) {
      return console.warn(Error(`cannot set css on ${object}`));
    }
    const ctx = object.get_style_context();
    let provider;
    const setter = (css2) => {
      if (!css2.includes("{") || !css2.includes("}")) {
        css2 = `* { ${css2} }`;
      }
      if (provider) ctx.remove_provider(provider);
      provider = new Gtk3.CssProvider();
      provider.load_from_string(css2);
      ctx.add_provider(provider, Gtk3.STYLE_PROVIDER_PRIORITY_USER);
    };
    if (css instanceof Accessor) {
      setter(css.get());
      const dispose = css.subscribe(() => setter(css.get()));
      onCleanup(dispose);
    } else {
      setter(css);
    }
  },
  setClass(object, className) {
    if (!(object instanceof Gtk3.Widget)) {
      return console.warn(Error(`cannot set className on ${object}`));
    }
    if (className instanceof Accessor) {
      object.cssClasses = className.get().split(/\s+/);
      const dispose = className.subscribe(
        () => object.cssClasses = className.get().split(/\s+/)
      );
      onCleanup(dispose);
    } else {
      object.set_css_classes(className.split(/\s+/));
    }
  },
  addChild(parent, child, index = -1) {
    if (!(child instanceof GObject6.Object)) {
      child = Gtk3.Label.new(String(child));
    }
    if (specialAdd(parent, child, index)) return;
    if (parent instanceof Fragment) {
      parent.addChild(child);
      return;
    }
    if (parent instanceof Gtk3.Buildable) {
      if (child instanceof Fragment) {
        for (const ch of child.children) {
          add(parent, ch, index);
        }
        child.connect("child-added", (_, ch, index2) => {
          if (!(ch instanceof GObject6.Object)) {
            console.error(TypeError(`cannot add ${ch} to ${parent}`));
            return;
          }
          addChild(parent, ch, index2);
        });
        child.connect("child-removed", (_, ch) => {
          if (!(ch instanceof GObject6.Object)) {
            console.error(TypeError(`cannot remove ${ch} from ${parent}`));
            return;
          }
          remove(parent, ch);
        });
        onCleanup(() => child.destroy());
        return;
      }
      add(parent, child, index);
      return;
    }
    throw Error(`cannot add ${child} to ${parent}`);
  }
});

// ../../../../usr/share/ags/js/src/gtk4/jsx-runtime.ts
Object.assign(intrinsicElements, {
  box: Gtk4.Box,
  button: Gtk4.Button,
  centerbox: Gtk4.CenterBox,
  // circularprogress: Astal.CircularProgress,
  drawingarea: Gtk4.DrawingArea,
  entry: Gtk4.Entry,
  image: Gtk4.Image,
  label: Gtk4.Label,
  levelbar: Gtk4.LevelBar,
  menubutton: Gtk4.MenuButton,
  overlay: Gtk4.Overlay,
  popover: Gtk4.Popover,
  revealer: Gtk4.Revealer,
  scrolledwindow: Gtk4.ScrolledWindow,
  slider: Astal3.Slider,
  stack: Gtk4.Stack,
  switch: Gtk4.Switch,
  togglebutton: Gtk4.ToggleButton,
  window: Astal3.Window
});

// src/widget/CircularImage.tsx
var getPixbufForIconName = ({
  icon,
  size
}) => {
  const display = Gdk.Display.get_default();
  if (!display) return null;
  const iconTheme = Gtk2.IconTheme.get_for_display(display);
  if (!getIsIcon({ icon, iconTheme })) {
    return null;
  }
  const iconInfo = iconTheme.lookup_icon(
    icon,
    null,
    // fallbacks
    200,
    // size in app pixels
    1,
    // scale (for HiDPI, usually 1 or window scale)
    null,
    // text direction, null for LTR
    null
    // flags);
  );
  const file = iconInfo?.get_file();
  const path = file?.get_path();
  if (!path) return null;
  try {
    return GdkPixbuf.Pixbuf.new_from_file_at_scale(path, size, size, true);
  } catch (error) {
    return null;
  }
};
var CircularImage = ({
  img,
  size: wantedSize,
  $type,
  iconFallback,
  onClicked,
  onRightClicked,
  ...props
}) => {
  let drawinArea;
  const unsubscribe = img.subscribe(() => {
    drawinArea.queue_draw();
  });
  onCleanup(() => {
    unsubscribe();
  });
  return /* @__PURE__ */ jsx(
    Gtk2.DrawingArea,
    {
      $type,
      ...props,
      $: (s) => {
        s.set_draw_func((_, cr, width, height) => {
          let cover = img.get();
          cover = cover?.startsWith("file://") ? cover.replace("file://", "") : cover;
          const size = Math.min(width, height, wantedSize);
          let pixbuf = null;
          if (cover) {
            try {
              const origPixbuf = GdkPixbuf.Pixbuf.new_from_file(cover);
              const imgWidth = origPixbuf.get_width();
              const imgHeight = origPixbuf.get_height();
              const circleDiameter = size;
              const scaleX = circleDiameter / imgWidth;
              const scaleY = circleDiameter / imgHeight;
              const scale = Math.max(scaleX, scaleY);
              const scaledWidth = Math.ceil(imgWidth * scale);
              const scaledHeight = Math.ceil(imgHeight * scale);
              pixbuf = origPixbuf.scale_simple(
                scaledWidth,
                scaledHeight,
                GdkPixbuf.InterpType.HYPER
              );
            } catch {
              pixbuf = getPixbufForIconName({ icon: cover, size });
            }
          }
          if (!pixbuf && iconFallback) {
            pixbuf = getPixbufForIconName({
              icon: iconFallback,
              size
            });
          }
          if (!pixbuf) {
            return;
          }
          const cx = width / 2;
          const cy = height / 2;
          const radius = size / 2;
          cr.arc(cx, cy, radius, 0, Math.PI * 2);
          cr.clip();
          const x = cx - pixbuf.get_width() / 2;
          const y = cy - pixbuf.get_height() / 2;
          Gdk.cairo_set_source_pixbuf(cr, pixbuf, x, y);
          cr.paint();
        });
        if (onClicked) {
          const gesture = Gtk2.GestureClick.new();
          gesture.set_button(1);
          gesture.connect("released", () => {
            onClicked();
          });
          s.add_controller(gesture);
        }
        if (onRightClicked) {
          const gesture = Gtk2.GestureClick.new();
          gesture.set_button(3);
          gesture.connect("released", () => {
            onRightClicked();
          });
          s.add_controller(gesture);
        }
        drawinArea = s;
      }
    }
  );
};
var CircularImage_default = CircularImage;

// src/constants/theme/spacing.ts
var spacing = {
  xSmall: 2,
  small: 4,
  normal: 8,
  large: 12,
  xLarge: 20
};

// src/hooks/useControlledScale.ts
var getIsValidKeyForScale = (keyval) => {
  return [
    Gdk.KEY_Right,
    Gdk.KEY_Left,
    Gdk.KEY_Page_Down,
    Gdk.KEY_Page_Up,
    Gdk.KEY_Home,
    Gdk.KEY_End
  ].includes(keyval);
};
var createAdjustment = ({
  length,
  position,
  incrementer
}) => {
  return Gtk2.Adjustment.new(
    position ?? 0,
    0,
    length || 1,
    incrementer,
    incrementer,
    0
  );
};
var useControlledScale = ({
  updateValue,
  limit,
  value,
  incrementer,
  variant = "seek"
}) => {
  const [isSeeking, setIsSeeking] = createState(false);
  const [adjustment, setAdjustment] = createState(
    createAdjustment({
      position: value.get(),
      length: limit.get(),
      incrementer
    })
  );
  const updateScale = (s) => {
    const adjustment2 = s.get_adjustment();
    const v = adjustment2.get_value();
    updateValue(v);
    setIsSeeking(false);
  };
  const updateScaleInstant = (s) => {
    const v = s.get_adjustment().get_value();
    updateValue(v);
  };
  const restartAdjustment = ({
    limit: limit2,
    value: value2
  }) => {
    setAdjustment(
      createAdjustment({
        position: value2,
        length: limit2,
        incrementer
      })
    );
  };
  const lengthUnsubscribe = limit.subscribe(() => {
    if (adjustment.get().get_upper() === limit.get()) return;
    adjustment.get().set_upper(limit.get() ?? 0);
  });
  const positionUnsubscribe = value.subscribe(() => {
    if (isSeeking.get()) return;
    const v = value.get();
    if (v === adjustment.get().get_value()) return;
    adjustment.get().set_value(v ?? 0);
  });
  const updateScaleSeekValue = () => {
    setIsSeeking(true);
  };
  const setup = (s) => {
    const keyController = Gtk2.EventControllerKey.new();
    let clickController;
    const controllers = s.observe_controllers();
    for (let i = 0; i < controllers.get_n_items(); i++) {
      const controller = controllers.get_item(i);
      if (controller instanceof Gtk2.GestureClick) {
        clickController = controller;
        break;
      }
    }
    if (!clickController) {
      clickController = new Gtk2.GestureClick();
      s.add_controller(clickController);
    }
    if (variant === "seek") {
      keyController.connect("key-pressed", (_, keyval) => {
        if (!getIsValidKeyForScale(keyval)) return;
        updateScaleSeekValue();
      });
      keyController.connect("key-released", (_, keyval) => {
        if (!getIsValidKeyForScale(keyval)) return;
        updateScale(s);
      });
      clickController.connect("pressed", () => {
        updateScaleSeekValue();
      });
      clickController.connect("released", () => {
        updateScale(s);
      });
    } else if (variant === "instant") {
      s.connect("value-changed", () => {
        updateScaleInstant(s);
      });
    }
    s.add_controller(keyController);
  };
  onCleanup(() => {
    lengthUnsubscribe();
    positionUnsubscribe();
  });
  return {
    setup,
    adjustment,
    state: {
      isSeeking,
      setIsSeeking
    },
    restartAdjustment
  };
};

// src/widget/MediaPlayer.tsx
var ListItemWithImage = class extends Gtk2.ListItem {
};
function matchClientToPlayer(player) {
  const hypr = Hyprland.get_default();
  const entry = player.get_entry()?.toLowerCase().replace(/-/g, "_");
  const identity = player.get_identity().toLowerCase();
  const clients = hypr.get_clients();
  return clients.find(
    (c) => c.get_class().toLowerCase().includes(entry || identity)
  ) ?? clients.find((c) => c.get_title().toLowerCase().includes(identity));
}
var Select = ({
  allPlayers,
  setSelectedPlayer,
  selectedIndex,
  selectionModel
}) => {
  const [hasItems, setHasItems] = createState(selectionModel.get_n_items() > 0);
  selectionModel.connect("notify::n-items", () => {
    const itemsCount = selectionModel.get_n_items();
    setHasItems(itemsCount > 0);
  });
  return /* @__PURE__ */ jsx(
    Gtk2.DropDown,
    {
      model: selectionModel,
      selected: selectedIndex,
      sensitive: hasItems,
      onNotifySelectedItem: (s) => {
        const item = s.get_selected_item();
        const player = allPlayers.get().find((p) => p.get_bus_name() === item?.busName);
        if (player) {
          setSelectedPlayer(player);
        }
      },
      factory: /* @__PURE__ */ jsx(
        Gtk2.SignalListItemFactory,
        {
          onSetup: (_factoru, l) => {
            const listItem = l;
            const box = new Gtk2.Box({
              spacing: spacing.normal,
              orientation: Gtk2.Orientation.HORIZONTAL
            });
            const image = new Gtk2.Image({
              iconName: "media-optical-symbolic",
              // you can change to any icon name
              pixelSize: 16
            });
            const label = new Gtk2.Label({ xalign: 0 });
            listItem._image = image;
            listItem._label = label;
            box.append(image);
            box.append(label);
            listItem.set_child(box);
          },
          onBind: (_factory, l) => {
            const listItem = l;
            const label = listItem._label;
            const image = listItem._image;
            const item = listItem.get_item();
            label?.set_text(item.text);
            const display = Gdk.Display.get_default();
            if (display) {
              const iconTheme = Gtk2.IconTheme.get_for_display(display);
              const icon = item.desktopIcon;
              if (getIsIcon({ icon, iconTheme })) {
                image.set_from_icon_name(icon);
              } else {
                image.set_from_icon_name("multimedia-player-symbolic");
              }
            }
          }
        }
      )
    }
  );
};
var MediaPlayer = ({ variant }) => {
  const {
    playerInfo: {
      canLoop,
      coverArt,
      playbackStatus,
      canPlayOrPause,
      canNext,
      canBack,
      position,
      length,
      album,
      loopStatus,
      canShuffle,
      shuffleStatus,
      artist,
      title
    },
    selectedPlayer,
    setSelectedPlayer,
    allPlayers,
    selectedIndex,
    selectionModel
  } = usePlayerInfo();
  const playBtnIcon = playbackStatus((playbackStatus2) => {
    return playbackStatus2 === Mpris2.PlaybackStatus.PLAYING ? "media-playback-pause" : playbackStatus2 === Mpris2.PlaybackStatus.PAUSED ? "media-playback-start" : "media-playback-stop";
  });
  const songLabel = createComputed([title, artist], (...args) => {
    return args.filter(Boolean).join(" - ") || "Nothing Playing";
  });
  const isSensitivePlayOrPause = canPlayOrPause;
  const isSensitiveNext = canNext;
  const isSensitivePrev = canBack;
  const {
    restartAdjustment,
    setup,
    state: { setIsSeeking },
    adjustment
  } = useControlledScale({
    value: position,
    limit: length,
    incrementer: 1,
    updateValue: (v) => {
      selectedPlayer.get()?.set_position(v);
    },
    variant: "seek"
  });
  const cava = Cava.get_default();
  cava?.set_bars(48);
  let cavaDrawingArea;
  let imgDrawingArea;
  const [cavaBars, setCavaBars] = createState(
    new Array(cava?.get_bars()).fill(0)
  );
  const convertUnsubscribe = coverArt.subscribe(() => {
    imgDrawingArea?.queue_draw();
  });
  const selectedPlayerUnsubscribe = selectedPlayer.subscribe(() => {
    const length2 = selectedPlayer.get().get_length() ?? 0;
    const position2 = selectedPlayer.get().get_position() ?? 0;
    restartAdjustment({
      value: position2,
      limit: length2
    });
  });
  cava?.connect("notify::values", () => {
    const lerp = (a, b, t) => a + (b - a) * t;
    const isPlaying = playbackStatus.get() === Mpris2.PlaybackStatus.PLAYING;
    const myBars = [...cavaBars.get()];
    const values = cava.get_values();
    const bars = cava.get_bars();
    for (let i = 0; i < bars; i++) {
      const newVal = values[i] ?? 1;
      if (isPlaying) {
        myBars[i] = lerp(myBars[i], newVal, 0.3);
      } else {
        myBars[i] = lerp(myBars[i], 0, 0.1);
      }
    }
    setCavaBars(myBars);
    cavaDrawingArea?.queue_draw();
  });
  onCleanup(() => {
    convertUnsubscribe();
    selectedPlayerUnsubscribe();
  });
  return /* @__PURE__ */ jsxs(
    "box",
    {
      orientation: variant === "complete" ? Gtk2.Orientation.HORIZONTAL : Gtk2.Orientation.VERTICAL,
      hexpand: true,
      spacing: spacing.small,
      children: [
        /* @__PURE__ */ jsxs("overlay", { children: [
          /* @__PURE__ */ jsx(
            "box",
            {
              heightRequest: variant === "complete" ? 300 : 100,
              widthRequest: variant === "complete" ? 300 : 150
            }
          ),
          /* @__PURE__ */ jsx(
            CircularImage_default,
            {
              $type: "overlay",
              img: coverArt,
              size: variant === "complete" ? 180 : 90,
              iconFallback: "media-album-track"
            }
          ),
          /* @__PURE__ */ jsx(
            Gtk2.DrawingArea,
            {
              $type: "overlay",
              contentWidth: 280,
              contentHeight: 280,
              visible: variant === "complete",
              class: "MediaPlayerBars",
              hexpand: true,
              vexpand: true,
              $: (s) => {
                s.set_draw_func((widget, cr, width, height) => {
                  const bars = cavaBars.get();
                  const cx = width / 2;
                  const cy = height / 2;
                  const radius = 100;
                  const maxBarLength = 80;
                  const count = bars.length;
                  const color = widget.get_color();
                  for (let i = 0; i < count; i++) {
                    const angle = i / count * Math.PI * 2;
                    const barLength = Math.pow(bars[i], 1.5) * maxBarLength;
                    const x1 = cx + Math.cos(angle) * radius;
                    const y1 = cy + Math.sin(angle) * radius;
                    const x2 = cx + Math.cos(angle) * (radius + barLength);
                    const y2 = cy + Math.sin(angle) * (radius + barLength);
                    cr.setSourceRGBA(
                      color.red,
                      color.green,
                      color.blue,
                      color.alpha
                    );
                    cr.setLineWidth(4);
                    cr.setLineCap(Cairo.LineCap.ROUND);
                    cr.moveTo(x1, y1);
                    cr.lineTo(x2, y2);
                    cr.stroke();
                  }
                });
                cavaDrawingArea = s;
              }
            }
          )
        ] }),
        /* @__PURE__ */ jsxs(
          "box",
          {
            orientation: Gtk2.Orientation.VERTICAL,
            spacing: spacing.xSmall,
            valign: Gtk2.Align.CENTER,
            children: [
              /* @__PURE__ */ jsxs(
                "box",
                {
                  halign: Gtk2.Align.CENTER,
                  valign: Gtk2.Align.CENTER,
                  orientation: Gtk2.Orientation.VERTICAL,
                  children: [
                    /* @__PURE__ */ jsx(
                      "box",
                      {
                        widthRequest: 100,
                        halign: Gtk2.Align.CENTER,
                        valign: Gtk2.Align.CENTER,
                        children: /* @__PURE__ */ jsx(
                          "label",
                          {
                            label: songLabel,
                            class: "MediaPlayerSongLabel",
                            ellipsize: Pango.EllipsizeMode.END,
                            maxWidthChars: variant === "complete" ? 50 : 30
                          }
                        )
                      }
                    ),
                    /* @__PURE__ */ jsx(
                      "box",
                      {
                        halign: Gtk2.Align.CENTER,
                        valign: Gtk2.Align.CENTER,
                        visible: album((v) => !!v),
                        children: /* @__PURE__ */ jsx(
                          "label",
                          {
                            label: album,
                            ellipsize: Pango.EllipsizeMode.END,
                            maxWidthChars: variant === "complete" ? 50 : 30
                          }
                        )
                      }
                    )
                  ]
                }
              ),
              /* @__PURE__ */ jsx(
                Gtk2.Scale,
                {
                  marginStart: 16,
                  marginEnd: 16,
                  sensitive: isSensitivePlayOrPause,
                  adjustment,
                  draw_value: false,
                  onValueChanged: (s) => {
                    const adjustment2 = s.get_adjustment();
                    const max = adjustment2.get_upper();
                    const value = adjustment2.get_value();
                    s.clear_marks();
                    s.add_mark(0, Gtk2.PositionType.BOTTOM, formatSeconds(value));
                    s.add_mark(max, Gtk2.PositionType.RIGHT, formatSeconds(max));
                  },
                  $: (s) => {
                    setup(s);
                  }
                }
              ),
              /* @__PURE__ */ jsxs("centerbox", { hexpand: true, children: [
                variant === "complete" ? /* @__PURE__ */ jsxs("box", { $type: "start", spacing: spacing.small, children: [
                  /* @__PURE__ */ jsx(
                    Gtk2.ToggleButton,
                    {
                      sensitive: canLoop,
                      active: loopStatus(
                        (s) => s === Mpris2.Loop.PLAYLIST || s === Mpris2.Loop.TRACK
                      ),
                      onClicked: () => {
                        selectedPlayer.get().loop();
                      },
                      children: /* @__PURE__ */ jsx(
                        "image",
                        {
                          iconName: loopStatus((status) => {
                            if (status === Mpris2.Loop.TRACK) {
                              return "media-playlist-repeat-song";
                            } else {
                              return "media-playlist-repeat";
                            }
                          })
                        }
                      )
                    }
                  ),
                  /* @__PURE__ */ jsx(
                    Gtk2.ToggleButton,
                    {
                      sensitive: canShuffle,
                      active: shuffleStatus((s) => s === Mpris2.Shuffle.ON),
                      onClicked: () => {
                        selectedPlayer.get().set_shuffle_status(Mpris2.Shuffle.ON);
                      },
                      children: /* @__PURE__ */ jsx(
                        "image",
                        {
                          iconName: shuffleStatus((status) => {
                            if (status === Mpris2.Shuffle.OFF) {
                              return "media-playlist-no-shuffle";
                            } else {
                              return "media-playlist-shuffle";
                            }
                          })
                        }
                      )
                    }
                  ),
                  /* @__PURE__ */ jsx(
                    "button",
                    {
                      iconName: "edit-find",
                      onClicked: () => {
                        const player = selectedPlayer.get();
                        const client = player && matchClientToPlayer(player);
                        client?.focus();
                      }
                    }
                  )
                ] }) : null,
                /* @__PURE__ */ jsxs(
                  "box",
                  {
                    $type: "center",
                    orientation: Gtk2.Orientation.HORIZONTAL,
                    spacing: spacing.small,
                    halign: Gtk2.Align.CENTER,
                    children: [
                      /* @__PURE__ */ jsx(
                        "button",
                        {
                          sensitive: isSensitivePrev,
                          onClicked: () => {
                            setIsSeeking(false);
                            selectedPlayer.get()?.previous();
                          },
                          class: variant === "complete" ? "" : "flat",
                          children: /* @__PURE__ */ jsx("image", { iconName: "media-skip-backward" })
                        }
                      ),
                      /* @__PURE__ */ jsx(
                        "button",
                        {
                          sensitive: isSensitivePlayOrPause,
                          class: "circular",
                          onClicked: () => {
                            setIsSeeking(false);
                            selectedPlayer.get()?.play_pause();
                          },
                          children: /* @__PURE__ */ jsx("image", { iconName: playBtnIcon })
                        }
                      ),
                      /* @__PURE__ */ jsx(
                        "button",
                        {
                          sensitive: isSensitiveNext,
                          onClicked: () => {
                            selectedPlayer.get()?.next();
                          },
                          class: variant === "complete" ? "" : "flat",
                          children: /* @__PURE__ */ jsx("image", { iconName: "media-skip-forward" })
                        }
                      )
                    ]
                  }
                ),
                variant === "complete" ? /* @__PURE__ */ jsx("box", { $type: "end", css: "margin-left:8px;", children: /* @__PURE__ */ jsx(
                  Select,
                  {
                    allPlayers,
                    selectedIndex,
                    setSelectedPlayer,
                    selectionModel
                  }
                ) }) : null
              ] })
            ]
          }
        )
      ]
    }
  );
};
var MediaPlayer_default = MediaPlayer;

// src/hooks/useIsAnyPlayerPlaying.ts
import Mpris3 from "gi://AstalMpris";
var getPlayersPlaying = (players) => {
  return players.get().map((p) => ({
    busName: p.get_bus_name(),
    isPlaying: p.get_playback_status() === Mpris3.PlaybackStatus.PLAYING
  }));
};
var useIsAnyPlayerPlaying = () => {
  const mpris = Mpris3.get_default();
  const allPlayers = createBinding(mpris, "players");
  const [playersPlaying, setPlayersPlaying] = createState(
    getPlayersPlaying(allPlayers)
  );
  const isAnyPlayerPlaying = createComputed([playersPlaying], (players) => {
    return players.some((p) => !!p.isPlaying);
  });
  allPlayers.get().forEach((player) => {
    player.connect("notify::playback-status", () => {
      setPlayersPlaying(getPlayersPlaying(allPlayers));
    });
  });
  const unsubscribePlayers = allPlayers.subscribe(() => {
    setPlayersPlaying(getPlayersPlaying(allPlayers));
  });
  onCleanup(() => {
    unsubscribePlayers();
  });
  return isAnyPlayerPlaying;
};

// src/utils/get-mpvpaper-image.ts
import Gio6 from "gi://Gio";
import GLib6 from "gi://GLib";
function extractFrame(videoPath, outputPath) {
  return new Promise((resolve, reject) => {
    const cmd = [
      "ffmpeg",
      "-y",
      // overwrite output
      "-i",
      videoPath,
      "-frames:v",
      "1",
      "-q:v",
      "2",
      outputPath
    ];
    const proc = Gio6.Subprocess.new(
      cmd,
      Gio6.SubprocessFlags.STDOUT_SILENCE | Gio6.SubprocessFlags.STDERR_SILENCE
    );
    proc.wait_check_async(null, (procObj, res) => {
      try {
        const success = procObj?.wait_check_finish(res);
        if (success) resolve(true);
        else reject(new Error("ffmpeg failed"));
      } catch (err) {
        reject(err);
      }
    });
  });
}
async function listenMpvPathChanges(onFrameExtracted, retry = true) {
  const address = Gio6.UnixSocketAddress.new("/tmp/mpvsocket");
  const client = new Gio6.SocketClient();
  let conn;
  try {
    conn = await new Promise((resolve, reject) => {
      client.connect_async(address, null, (src, res) => {
        try {
          resolve(client.connect_finish(res));
        } catch (e) {
          reject(e);
        }
      });
    });
  } catch (err) {
    printerr("Connection failed:", err.message);
    if (retry) {
      GLib6.timeout_add_seconds(GLib6.PRIORITY_DEFAULT, 3, () => {
        listenMpvPathChanges(onFrameExtracted, true);
        return GLib6.SOURCE_REMOVE;
      });
    }
    return;
  }
  const input = conn.get_input_stream();
  const output = conn.get_output_stream();
  const subscribeCmd = JSON.stringify({
    command: ["observe_property", 1, "path"]
  }) + "\n";
  try {
    output.write_all(subscribeCmd, null);
  } catch (e) {
    printerr("Write failed:", e.message);
    if (retry) {
      GLib6.timeout_add_seconds(GLib6.PRIORITY_DEFAULT, 3, () => {
        listenMpvPathChanges(onFrameExtracted, true);
        return GLib6.SOURCE_REMOVE;
      });
    }
    return;
  }
  let buffer = "";
  function onRead(src, res) {
    if (!src) return;
    try {
      const bytes = src.read_bytes_finish(res);
      const data = bytes?.get_data();
      if (!data || data.length === 0) {
        printerr("Disconnected or EOF. Reconnecting...");
        conn.close(null);
        if (retry) {
          GLib6.timeout_add_seconds(GLib6.PRIORITY_DEFAULT, 3, () => {
            listenMpvPathChanges(onFrameExtracted, true);
            return GLib6.SOURCE_REMOVE;
          });
        }
        return;
      }
      buffer += new TextDecoder().decode(data);
      const lines = buffer.split("\n");
      buffer = lines.pop() || "";
      for (const line of lines) {
        if (!line.trim()) continue;
        try {
          const json = JSON.parse(line);
          if (json.event === "property-change" && json.name === "path" && json.data) {
            const outputPath = GLib6.build_filenamev([
              "/tmp",
              `mpv_current_frame-${Date.now()}.jpg`
            ]);
            extractFrame(json.data, outputPath).then(() => {
              onFrameExtracted(outputPath);
            }).catch((e) => {
              printerr("Frame extraction error:", e.message);
            });
          }
        } catch (e) {
          printerr("JSON parse error:", e.message);
        }
      }
      src.read_bytes_async(4096, GLib6.PRIORITY_DEFAULT, null, onRead);
    } catch (e) {
      printerr("Stream read error:", e.message);
    }
  }
  input.read_bytes_async(4096, GLib6.PRIORITY_DEFAULT, null, onRead);
}
function startMpvImageListener(onFrameExtracted) {
  listenMpvPathChanges(onFrameExtracted);
}

// src/utils/change-mpvpaper-image.ts
import Gio7 from "gi://Gio";
import GLib7 from "gi://GLib";
function sendMpvCommand(command) {
  return new Promise((resolve, reject) => {
    const address = Gio7.UnixSocketAddress.new("/tmp/mpvsocket");
    const client = new Gio7.SocketClient();
    client.connect_async(address, null, (client_, res) => {
      try {
        if (!client_) {
          printerr("No client_ for sendMpvCommand");
          return;
        }
        const conn = client_.connect_finish(res);
        const output = conn.get_output_stream();
        const cmdStr = JSON.stringify({ command }) + "\n";
        const byteArray = new TextEncoder().encode(cmdStr);
        output.write_bytes_async(
          byteArray,
          GLib7.PRIORITY_DEFAULT,
          null,
          (stream, result) => {
            try {
              stream?.write_bytes_finish(result);
              output.close(null);
              conn.close(null);
              resolve();
            } catch (e) {
              const error = e;
              reject(
                new Error("Failed to write to MPV socket: " + error.message)
              );
            }
          }
        );
      } catch (e) {
        const error = e;
        reject(new Error("Failed to connect to MPV socket: " + error.message));
      }
    });
  });
}
var changeMpvPaperImage = (action) => {
  if (action === "next") {
    sendMpvCommand(["playlist-next"]);
  } else {
    sendMpvCommand(["playlist-prev"]);
  }
};

// src/utils/cpu.ts
import GTop from "gi://GTop";
var cpu = new GTop.glibtop_cpu();
function getCpuUsage() {
  GTop.glibtop_get_cpu(cpu);
  const used = cpu.user + cpu.sys + cpu.nice + cpu.irq + cpu.softirq + cpu.iowait;
  const total = used + cpu.idle + cpu.iowait;
  return { used, total };
}
function calculateCpuLoad(prev, curr) {
  if (!prev || !curr) return null;
  const diffUsed = curr.used - prev.used;
  const diffTotal = curr.total - prev.total;
  const res = diffUsed / diffTotal;
  return res;
}

// src/hooks/useCpuUsage.ts
var useCpuUsage = () => {
  const [prev, setPrev] = createState(getCpuUsage());
  const data = createPoll(
    {
      cpuUsage: 0,
      cpuUsageInFraction: 0
    },
    1e3,
    () => {
      const curr = getCpuUsage();
      const load = calculateCpuLoad(prev.get(), curr);
      if (!load) return { cpuUsage: 0, cpuUsageInFraction: 0 };
      setPrev(curr);
      const cpuUsage = Number(load) * 100;
      return {
        cpuUsage,
        cpuUsageInFraction: cpuUsage / 100
      };
    }
  );
  return data;
};

// src/utils/memory-ram.ts
import GTop2 from "gi://GTop";
var mem = new GTop2.glibtop_mem();
function getMemoryUsage() {
  GTop2.glibtop_get_mem(mem);
  const total = mem.total;
  const available = mem.free + mem.buffer + mem.cached;
  const used = total - available;
  const percentUsed = used / total;
  return {
    totalKB: total,
    availableKB: available,
    usedKB: used,
    percentUsed: percentUsed.toFixed(2)
  };
}

// src/hooks/useMemoryRamUsage.ts
var useMemoryRamUsage = () => {
  const data = createPoll(
    {
      memoryUsage: 0,
      memoryUsageInFraction: 0
    },
    1e3,
    () => {
      const load = getMemoryUsage();
      if (!load) return { memoryUsage: 0, memoryUsageInFraction: 0 };
      const used = Number(load.percentUsed) * 100;
      return {
        memoryUsage: used,
        memoryUsageInFraction: used / 100
      };
    }
  );
  return data;
};

// src/hooks/useFormattedTime.ts
import GLib8 from "gi://GLib";
var useFormattedTime = (format) => {
  const timeString = createPoll("", 500, () => {
    let now = GLib8.DateTime.new_now_local();
    const formatToUse = format === "time" ? "%I:%M" : "%I:%M %p";
    return now.format(formatToUse) ?? "";
  });
  return timeString;
};

// src/widget/Workspaces.tsx
import Hyprland2 from "gi://AstalHyprland";

// src/utils/is-current-monitor.ts
var getIsCurrentMonitor = (hMonitor, gMonitor) => {
  return hMonitor?.get_model() === gMonitor?.get_model();
};

// src/objects/EmptyHyprlandWorkspace.ts
var _id_dec, _a3, _EmptyHyprlandWorkspace_decorators, _init2;
_EmptyHyprlandWorkspace_decorators = [register({ GTypeName: "EmptyHyprlandWorkspace" })];
var EmptyHyprlandWorkspace = class extends (_a3 = GObject5.Object, _id_dec = [property(Number)], _a3) {
  constructor({ id }) {
    super();
    this.id = __runInitializers(_init2, 8, this, 0), __runInitializers(_init2, 11, this);
    this.id = id;
  }
  get_id() {
    return this.id;
  }
  get_clients() {
    return [];
  }
  get clients() {
    return this.get_clients();
  }
};
_init2 = __decoratorStart(_a3);
__decorateElement(_init2, 5, "id", _id_dec, EmptyHyprlandWorkspace);
EmptyHyprlandWorkspace = __decorateElement(_init2, 0, "EmptyHyprlandWorkspace", _EmptyHyprlandWorkspace_decorators, EmptyHyprlandWorkspace);
__runInitializers(_init2, 1, EmptyHyprlandWorkspace);

// src/utils/workspaces.ts
var workspacesLimit = 5;
var getWorkspacesOfCurrentMonitor = (hyprland, gdkmonitor, monitorIndex) => {
  const workspaces = hyprland.get_workspaces();
  const existing = workspaces.filter((w) => {
    return getIsCurrentMonitor(w.get_monitor(), gdkmonitor);
  });
  const byId = new Map(existing.map((w) => [w.get_id(), w]));
  const result = [];
  for (let i = 1; i <= workspacesLimit; i++) {
    const id = i + workspacesLimit * monitorIndex;
    const ws = byId.get(id);
    if (ws) {
      result.push(ws);
    } else {
      const fake = new EmptyHyprlandWorkspace({
        id
      });
      result.push(fake);
    }
  }
  return result;
};

// src/widget/Workspaces.tsx
var ClientItem = ({
  client,
  focusedClient,
  hasMoreClients
}) => {
  const found = getAppIcon(client.get_class());
  const isIcon = getIsIconFile({ icon: found }) === false;
  const title = createBinding(client, "title");
  const isFocused = focusedClient(
    (c) => c?.get_address() === client?.get_address()
  );
  const className = createComputed(
    [isFocused, hasMoreClients],
    (isFocused2, hasMoreClients2) => {
      let res = "WorkspaceClientItem circular";
      if (isFocused2 === true) {
        res += " focused";
      } else if (hasMoreClients2 === true) {
        res += " flat";
      }
      return res;
    }
  );
  return /* @__PURE__ */ jsx(
    "button",
    {
      visible: title((v) => !!v),
      class: className,
      tooltipText: title,
      onClicked: () => {
        const isCurrentlyFocused = isFocused.get();
        if (isCurrentlyFocused === true) return;
        client.focus();
      },
      focusable: false,
      children: /* @__PURE__ */ jsx(
        "image",
        {
          iconName: isIcon ? found : void 0,
          visible: !!found,
          pixelSize: 20,
          file: isIcon ? void 0 : found
        }
      )
    }
  );
};
var WorkspaceItem = ({
  workspace,
  focusedClient,
  focusedWorkspaceId,
  hyprland,
  index
}) => {
  const clients = createBinding(workspace, "clients");
  const hasNoClients = clients((c) => c.length > 0 === false);
  const className = clients((clients2) => {
    let res = "WorkspaceItem";
    if (clients2.length > 1) {
      res += " group";
    }
    return res;
  });
  const isFocusedEmpty = focusedWorkspaceId((v) => {
    return workspace.get_id() === v;
  });
  return /* @__PURE__ */ jsxs("box", { class: className, children: [
    /* @__PURE__ */ jsx(For, { each: clients, children: (client) => {
      return /* @__PURE__ */ jsx(
        ClientItem,
        {
          client,
          focusedClient,
          hasMoreClients: clients((c) => c.length > 1)
        }
      );
    } }),
    /* @__PURE__ */ jsx(
      "button",
      {
        visible: hasNoClients,
        class: isFocusedEmpty(
          (v) => v === true ? "WorkspaceClientItem focused" : "WorkspaceClientItem"
        ),
        onClicked: () => {
          hyprland.dispatch("split-workspace", (index.get() + 1).toString());
        },
        tooltipText: "Vacio",
        children: /* @__PURE__ */ jsx("label", { label: "\u2022" })
      }
    )
  ] });
};
var Workspaces = ({
  gdkmonitor,
  index
}) => {
  const hyprland = Hyprland2.get_default();
  const focusedWorkspace = createBinding(hyprland, "focusedWorkspace");
  const focusedWorkspaceId = focusedWorkspace((v) => v?.get_id());
  const [workspaces, setWorkspaces] = createState(
    getWorkspacesOfCurrentMonitor(hyprland, gdkmonitor, index)
  );
  const focusedClient = createBinding(hyprland, "focused_client");
  hyprland.connect("notify::workspaces", () => {
    const newWorkspaces = getWorkspacesOfCurrentMonitor(
      hyprland,
      gdkmonitor,
      index
    );
    setWorkspaces(newWorkspaces);
  });
  return /* @__PURE__ */ jsx("box", { class: "Workspaces", children: /* @__PURE__ */ jsx(For, { each: workspaces, children: (item, index2) => /* @__PURE__ */ jsx(
    WorkspaceItem,
    {
      index: index2,
      hyprland,
      focusedWorkspaceId,
      workspace: item,
      focusedClient
    }
  ) }) });
};
var Workspaces_default = Workspaces;

// src/widget/Tray.tsx
import AstalTray from "gi://AstalTray";
var getFinalTooltipMarkup = (item) => {
  return item.get_tooltip_markup() || item.get_title();
};
var TrayItem = ({ item }) => {
  const hasItems = !!item.get_menu_model()?.get_n_items();
  const [finalTooltipMarkup, setFinalTooltipMarkup] = createState(
    getFinalTooltipMarkup(item)
  );
  const gicon = createBinding(item, "gicon");
  const menuModel = createBinding(item, "menuModel");
  item.connect("notify::tooltip", (s) => {
    setFinalTooltipMarkup(getFinalTooltipMarkup(s));
  });
  item.connect("notify::title", (s) => {
    setFinalTooltipMarkup(getFinalTooltipMarkup(s));
  });
  if (hasItems)
    return /* @__PURE__ */ jsx(
      "menubutton",
      {
        class: "flat",
        $: (s) => {
          const actions = item.get_action_group();
          if (actions) s.insert_action_group("dbusmenu", actions);
        },
        tooltip_markup: finalTooltipMarkup,
        menuModel,
        children: /* @__PURE__ */ jsx("image", { gicon })
      }
    );
  return /* @__PURE__ */ jsx(
    "button",
    {
      css: "flat",
      onClicked: () => {
        item.activate(0, 0);
      },
      tooltip_markup: finalTooltipMarkup,
      children: /* @__PURE__ */ jsx("image", { gicon })
    }
  );
};
var Tray = () => {
  const tray = AstalTray.get_default();
  const items = createBinding(tray, "items");
  return /* @__PURE__ */ jsx(
    "box",
    {
      class: "TrayRow",
      spacing: spacing.small,
      visible: items((items2) => items2.length > 0),
      children: /* @__PURE__ */ jsx(For, { each: items, children: (item) => /* @__PURE__ */ jsx(TrayItem, { item }) })
    }
  );
};
var Tray_default = Tray;

// src/constants/windows.ts
var windowNames = {
  MainSearchWindow: "MainSearchWindow",
  Bar: "Bar",
  NotificationWindow: "NotificationWindow",
  LogoutPanelWindow: "LogoutPanelWindow"
};

// src/utils/keyboard.ts
var getKeyboard = () => {
  return exec([
    "bash",
    "-c",
    "hyprctl devices -j | jq -r '.keyboards[] | select(.main == true) | .active_keymap'"
  ]);
};
var formatKeyboard = (keyboard2) => {
  if (keyboard2 === "Spanish" || keyboard2 === "Espa\xF1ol") {
    return "ES";
  } else if (keyboard2?.includes("English")) {
    return "US";
  }
  return keyboard2;
};

// src/widget/ControlPanel/ControlPanel.tsx
import AstalBluetooth from "gi://AstalBluetooth";
import AstalNetwork from "gi://AstalNetwork";
import AstalWp2 from "gi://AstalWp";

// src/utils/network.ts
var getHasVpn = (activeConnections = []) => {
  return activeConnections.some((ac) => {
    if (ac.get_vpn()) {
      return true;
    }
    const type = ac.get_connection_type();
    if (["wireguard", "openvpn", "ipsec", "ikev2"].includes(type)) {
      return true;
    }
    return false;
  });
};

// src/hooks/useNotifications.ts
import Notifd from "gi://AstalNotifd";
import GLib9 from "gi://GLib";
var useNotifications = ({
  removeOnExpiration
}) => {
  const [notifications, setNotifications] = createState(
    []
  );
  const notifd = Notifd.get_default();
  const ignoreTimeout = createBinding(notifd, "ignoreTimeout");
  const dontDisturb = createBinding(notifd, "dontDisturb");
  const removeNotificationById = (id) => {
    setNotifications((prev) => {
      return prev.filter((n) => n.get_id() !== id);
    });
  };
  notifd.connect("notified", (_source, id, replaced) => {
    const instance = Notifd.get_default();
    const notif = instance.get_notification(id);
    if (!notif) return;
    setNotifications((prev) => {
      if (replaced) {
        return prev.map((item) => item.id === id ? notif : item);
      }
      return [notif, ...prev];
    });
    if (removeOnExpiration && notif.get_expire_timeout() === -1) {
      GLib9.timeout_add(GLib9.PRIORITY_DEFAULT, 3e4, () => {
        removeNotificationById(id);
        return GLib9.SOURCE_REMOVE;
      });
    }
  });
  notifd.connect("resolved", (_source, id, reason) => {
    if (removeOnExpiration === false && reason === Notifd.ClosedReason.EXPIRED)
      return;
    removeNotificationById(id);
  });
  return { notifications, dontDisturb, ignoreTimeout };
};

// src/widget/ControlPanel/VolumeMixer.tsx
import AstalWp from "gi://AstalWp";
import Pango2 from "gi://Pango?version=1.0";
var getStreams = (streams) => {
  const seen = /* @__PURE__ */ new Map();
  for (const s of streams) {
    const name = s.get_name() || "";
    const icon = s.get_icon() || "";
    const key = `${name}::${icon}`;
    if (!seen.has(key)) {
      seen.set(key, s);
    }
  }
  return Array.from(seen.values());
};
var AudioStreamItem = ({ stream }) => {
  const name = createBinding(stream, "name");
  const desc = createBinding(stream, "description");
  const found = getAppIcon(stream.get_description() || "");
  const isIcon = getIsIconFile({ icon: found }) === false;
  const volume = createBinding(stream, "volume");
  const [limit] = createState(1);
  const { adjustment, setup } = useControlledScale({
    limit,
    value: volume,
    updateValue: (v) => {
      console.log({ v });
      stream.set_volume(v);
    },
    incrementer: 0.1,
    variant: "instant"
  });
  return /* @__PURE__ */ jsxs("box", { orientation: Gtk2.Orientation.VERTICAL, children: [
    /* @__PURE__ */ jsxs("box", { spacing: spacing.normal, children: [
      /* @__PURE__ */ jsx("label", { label: name }),
      /* @__PURE__ */ jsxs("box", { visible: desc((v) => !!v), spacing: spacing.normal, children: [
        /* @__PURE__ */ jsx("label", { label: "\u2022" }),
        /* @__PURE__ */ jsx(
          "label",
          {
            label: desc,
            ellipsize: Pango2.EllipsizeMode.END,
            maxWidthChars: 30
          }
        )
      ] })
    ] }),
    /* @__PURE__ */ jsxs("box", { children: [
      /* @__PURE__ */ jsx(
        "image",
        {
          iconName: isIcon ? found : void 0,
          visible: !!found,
          pixelSize: 20,
          file: isIcon ? void 0 : found
        }
      ),
      /* @__PURE__ */ jsx(
        Gtk2.Scale,
        {
          adjustment,
          hexpand: true,
          $: (s) => {
            setup(s);
          }
        }
      )
    ] })
  ] });
};
var VolumeMixer = () => {
  const wp = AstalWp.get_default();
  const audio = createBinding(wp, "audio");
  const [audioStreams, setAudioStreams] = createState(
    getStreams(audio.get().streams)
  );
  audio.get().connect("notify::streams", (s) => {
    setAudioStreams(getStreams(s.streams));
  });
  return /* @__PURE__ */ jsx("box", { orientation: Gtk2.Orientation.VERTICAL, children: /* @__PURE__ */ jsx(For, { each: audioStreams, children: (stream) => {
    return /* @__PURE__ */ jsx(AudioStreamItem, { stream });
  } }) });
};
var VolumeMixer_default = VolumeMixer;

// src/widget/Notifications/NotificationListItem.tsx
import Pango3 from "gi://Pango?version=1.0";
var NotificationListItem = ({ item }) => {
  const appIcon = createBinding(item, "appIcon");
  const desktopEntry = createBinding(item, "desktopEntry");
  const summary = createBinding(item, "summary");
  const body = createBinding(item, "body");
  const actions = createBinding(item, "actions");
  const mainIcon = createComputed([appIcon, desktopEntry], (a, d) => a || d);
  const firstAction = actions((v) => v?.[0]);
  const otherActions = actions((v) => v?.splice(1));
  return /* @__PURE__ */ jsxs(
    "box",
    {
      spacing: spacing.normal,
      class: "NotificationWindowNotificationItem",
      hexpand: true,
      orientation: Gtk2.Orientation.VERTICAL,
      children: [
        /* @__PURE__ */ jsxs("box", { spacing: spacing.normal, children: [
          /* @__PURE__ */ jsx(
            CircularImage_default,
            {
              visible: mainIcon((a) => {
                return !!a;
              }),
              img: mainIcon,
              iconFallback: "notification-active",
              size: 300,
              heightRequest: 60,
              widthRequest: 60
            }
          ),
          /* @__PURE__ */ jsxs(
            "box",
            {
              orientation: Gtk2.Orientation.VERTICAL,
              valign: Gtk2.Align.START,
              hexpand: true,
              children: [
                /* @__PURE__ */ jsxs("box", { spacing: spacing.small, children: [
                  /* @__PURE__ */ jsx(
                    "label",
                    {
                      hexpand: true,
                      visible: summary((s) => !!s),
                      label: summary,
                      class: "NotificationWindowNotificationItemSummary",
                      wrap: true,
                      ellipsize: Pango3.EllipsizeMode.END,
                      widthChars: 30,
                      xalign: 0,
                      maxWidthChars: 30,
                      lines: 1,
                      halign: Gtk2.Align.START
                    }
                  ),
                  /* @__PURE__ */ jsx(
                    "button",
                    {
                      iconName: "dialog-close",
                      class: "circular",
                      onClicked: () => {
                        item.dismiss();
                      }
                    }
                  )
                ] }),
                /* @__PURE__ */ jsx(
                  "label",
                  {
                    label: item.body,
                    visible: body((s) => !!s),
                    wrap: true,
                    ellipsize: Pango3.EllipsizeMode.END,
                    widthChars: 30,
                    maxWidthChars: 30,
                    halign: Gtk2.Align.START,
                    xalign: 0,
                    lines: 2
                  }
                )
              ]
            }
          )
        ] }),
        /* @__PURE__ */ jsx("box", { visible: otherActions((a) => a.length > 0), spacing: spacing.normal, children: /* @__PURE__ */ jsx(For, { each: otherActions, children: (action) => {
          return /* @__PURE__ */ jsx("button", { hexpand: true, onClicked: () => item.invoke(action.id), children: /* @__PURE__ */ jsx("label", { label: action.label, halign: Gtk2.Align.CENTER, hexpand: true }) });
        } }) })
      ]
    }
  );
};
var NotificationListItem_default = NotificationListItem;

// src/widget/ControlPanel/ControlPanelPopover.tsx
var NotificationsTab = ({
  notifications
}) => {
  return /* @__PURE__ */ jsx("box", { orientation: Gtk2.Orientation.VERTICAL, children: /* @__PURE__ */ jsx(Gtk2.ScrolledWindow, { maxContentHeight: 600, minContentHeight: 600, children: /* @__PURE__ */ jsx(Gtk2.Viewport, { children: /* @__PURE__ */ jsxs("box", { orientation: Gtk2.Orientation.VERTICAL, children: [
    /* @__PURE__ */ jsx(For, { each: notifications, children: (item) => /* @__PURE__ */ jsx(NotificationListItem_default, { item }) }),
    /* @__PURE__ */ jsx(
      "box",
      {
        hexpand: true,
        halign: Gtk2.Align.CENTER,
        valign: Gtk2.Align.CENTER,
        vexpand: true,
        visible: notifications((n) => n.length === 0),
        children: /* @__PURE__ */ jsx("label", { label: "Sin Notificaciones" })
      }
    )
  ] }) }) }) });
};
var VolumeMixerTab = () => {
  return /* @__PURE__ */ jsx(VolumeMixer_default, {});
};
var AllTabs = () => {
  let switcher;
  let stack;
  const { notifications } = useNotifications({ removeOnExpiration: false });
  return /* @__PURE__ */ jsxs("box", { orientation: Gtk2.Orientation.VERTICAL, heightRequest: 600, children: [
    /* @__PURE__ */ jsx(
      Gtk2.StackSwitcher,
      {
        $: (s) => {
          switcher = s;
        },
        stack
      }
    ),
    /* @__PURE__ */ jsxs(
      Gtk2.Stack,
      {
        transitionType: Gtk2.StackTransitionType.SLIDE_LEFT_RIGHT,
        $: (s) => {
          stack = s;
          if (switcher) switcher.set_stack(s);
        },
        children: [
          /* @__PURE__ */ jsx(
            Gtk2.StackPage,
            {
              name: "child1",
              title: "Notifications",
              iconName: "bell-outline-symbolic",
              needsAttention: notifications((n) => n.length > 0),
              child: /* @__PURE__ */ jsx(NotificationsTab, { notifications })
            }
          ),
          /* @__PURE__ */ jsx(
            Gtk2.StackPage,
            {
              name: "child2",
              iconName: "speaker-3-symbolic",
              title: "Volume mixer",
              child: /* @__PURE__ */ jsx(VolumeMixerTab, {})
            }
          )
        ]
      }
    )
  ] });
};
var ControlPanelPopover = () => {
  return /* @__PURE__ */ jsx("popover", { widthRequest: 400, children: /* @__PURE__ */ jsx(AllTabs, {}) });
};
var ControlPanelPopover_default = ControlPanelPopover;

// src/widget/ControlPanel/ControlPanel.tsx
var activeClass = "ControlPanelActiveIcon";
var getVolume = (device) => {
  return Math.round((device.volume ?? 1) * 100);
};
var getWpName = (device) => {
  return device.get_description();
};
var handleVolumeScroll = (instance, _dx, dy) => {
  const currentVolume = getVolume(instance);
  if (dy > 0) {
    instance.set_volume((currentVolume - 1) / 100);
  } else if (currentVolume < 100 || currentVolume > 100) {
    instance.set_volume((currentVolume + 1) / 100);
  }
};
var BluetoothIcon = () => {
  const bluetooth = AstalBluetooth.get_default();
  const isConnected = createBinding(bluetooth, "is_connected");
  const isPowered = createBinding(bluetooth, "is_powered");
  const adapter = createBinding(bluetooth, "adapter");
  const iconName = createComputed(
    [isConnected, isPowered, adapter],
    (_isConnectedBluetooth, isPoweredBluetooth, bluetoothAdapter) => {
      if (bluetoothAdapter === null || bluetoothAdapter === void 0) {
        return "bluetooth-x-symbolic";
      }
      if (isPoweredBluetooth === false) {
        return "bluetooth-none-symbolic";
      }
      return "bluetooth-symbolic";
    }
  );
  const tooltipText = createComputed(
    [isConnected, isPowered, adapter],
    (isConn, isPwr, adapter2) => {
      if (!adapter2) return "Adaptador Bluetooth no encontrado";
      if (!isPwr) return "Bluetooth est\xE1 apagado";
      return isConn ? "Bluetooth conectado" : "Bluetooth activado";
    }
  );
  return /* @__PURE__ */ jsx(
    "image",
    {
      iconName,
      class: isConnected((v) => v ? activeClass : ""),
      tooltipText
    }
  );
};
var NetworkIcon = () => {
  const network = AstalNetwork.get_default();
  const client = createBinding(network, "client");
  const primary = createBinding(network, "primary");
  const connectivity = createBinding(network, "connectivity");
  const state = createBinding(network, "state");
  const wifi = createBinding(network, "wifi");
  const [wifiStrength, setWifiStrength] = createState(
    wifi.get().get_strength() ?? 0
  );
  const [hasVpn, setHasVpn] = createState(
    getHasVpn(client.get().get_active_connections())
  );
  wifi.get().connect("notify::strength", () => {
    setWifiStrength(wifi.get()?.get_strength() ?? 0);
  });
  client.get().connect("notify::active-connections", (s) => {
    setHasVpn(getHasVpn(s.get_active_connections()));
  });
  const iconName = createComputed(
    [primary, connectivity, state, wifiStrength],
    (primary2, connectivity2, state2, wifiStrength2) => {
      if (state2 === AstalNetwork.State.CONNECTING) {
        return "radiowaves-dots-symbolic";
      }
      if (primary2 === AstalNetwork.Primary.WIFI && connectivity2 === AstalNetwork.Connectivity.FULL) {
        if (wifiStrength2 <= 0) {
          return "radiowaves-4-symbolic";
        } else if (wifiStrength2 <= 50) {
          return "radiowaves-3-symbolic";
        } else if (wifiStrength2 <= 75) {
          return "radiowaves-2-symbolic";
        }
        return "radiowaves-1-symbolic";
      }
      if (primary2 === AstalNetwork.Primary.WIRED && connectivity2 === AstalNetwork.Connectivity.FULL) {
        return "lan-symbolic";
      }
      if (connectivity2 === AstalNetwork.Connectivity.LIMITED || primary2 === AstalNetwork.Primary.UNKNOWN) {
        return "radiowaves-5-symbolic";
      }
      return "test";
    }
  );
  const tooltipText = createComputed(
    [primary, connectivity, state, hasVpn],
    (primary2, connectivity2, state2, hasVpn2) => {
      if (state2 === AstalNetwork.State.CONNECTING) {
        return "Conectando...";
      }
      if (primary2 === AstalNetwork.Primary.WIFI && connectivity2 === AstalNetwork.Connectivity.FULL) {
        return hasVpn2 ? "Wi-Fi conectada (VPN activa)" : "Wi-Fi conectada";
      }
      if (primary2 === AstalNetwork.Primary.WIRED && connectivity2 === AstalNetwork.Connectivity.FULL) {
        return hasVpn2 ? "Red cableada conectada (VPN activa)" : "Red cableada conectada";
      }
      if (connectivity2 === AstalNetwork.Connectivity.LIMITED) {
        return "Conectividad limitada";
      }
      return "Sin conexi\xF3n";
    }
  );
  return /* @__PURE__ */ jsxs("box", { spacing: spacing.small, tooltipText, children: [
    /* @__PURE__ */ jsx("image", { iconName }),
    /* @__PURE__ */ jsx("image", { iconName: "vpn-caps-symbolic", visible: hasVpn })
  ] });
};
var SoundIcon = () => {
  const wp = AstalWp2.get_default();
  const defaultMicrophone = createBinding(wp, "defaultMicrophone");
  const defaultSpeaker = createBinding(wp, "defaultSpeaker");
  const [speakerName, setSpeakerName] = createState(
    getWpName(defaultSpeaker.get())
  );
  const [microName, setMicroName] = createState(
    getWpName(defaultMicrophone.get())
  );
  const [speakerVolume, setSpeakerVolume] = createState(
    getVolume(defaultSpeaker.get())
  );
  const [microphoneVolume, setMicrophoneVolume] = createState(
    getVolume(defaultMicrophone.get())
  );
  const [speakerMuted, setSpeakerMuted] = createState(
    defaultSpeaker.get().mute
  );
  const [microMuted, setMicroMuted] = createState(defaultMicrophone.get().mute);
  const [microState, setMicroState] = createState(
    defaultMicrophone.get().state
  );
  const speakerIcon = createComputed(
    [speakerVolume, speakerMuted],
    (v, speakerMuted2) => {
      if (v <= 0 || speakerMuted2 === true) {
        return "speaker-0-symbolic";
      } else if (v <= 30) {
        return "speaker-1-symbolic";
      } else if (v <= 65) {
        return "speaker-2-symbolic";
      }
      return "speaker-3-symbolic";
    }
  );
  const microIcon = createComputed(
    [microphoneVolume, microMuted, microState],
    (v, microMuted2) => {
      if (microMuted2 === true) {
        return "mic-none-symbolic";
      } else if (v <= 0) {
        return "mic-4-symbolic";
      } else if (v <= 30) {
        return "mic-3-symbolic";
      } else if (v <= 65) {
        return "mic-2-symbolic";
      }
      return "mic-1-symbolic";
    }
  );
  defaultSpeaker.get().connect("notify::volume", (s) => {
    setSpeakerVolume(getVolume(s));
  });
  defaultMicrophone.get().connect("notify::volume", (s) => {
    setMicrophoneVolume(getVolume(s));
  });
  defaultSpeaker.get().connect("notify::mute", (s) => {
    setSpeakerMuted(s.mute);
  });
  defaultMicrophone.get().connect("notify::mute", (s) => {
    setMicroMuted(s.mute);
  });
  defaultMicrophone.get().connect("notify::state", (s) => {
    setMicroState(s.state);
  });
  defaultSpeaker.get().connect("notify::name", (s) => {
    setSpeakerName(getWpName(s));
  });
  defaultMicrophone.get().connect("notify::name", (s) => {
    setMicroName(getWpName(s));
  });
  wp.connect("ready", (s) => {
    setSpeakerName(getWpName(s.get_default_speaker()));
    setMicroName(getWpName(s.get_default_microphone()));
  });
  return /* @__PURE__ */ jsxs("box", { spacing: spacing.normal, children: [
    /* @__PURE__ */ jsxs(
      "box",
      {
        spacing: spacing.normal,
        $: (s) => {
          const gesture = Gtk2.EventControllerScroll.new(
            Gtk2.EventControllerScrollFlags.VERTICAL
          );
          gesture.connect("scroll", (_s, dx, dy) => {
            const instance = defaultSpeaker.get();
            handleVolumeScroll(instance, dx, dy);
          });
          s.add_controller(gesture);
        },
        tooltipText: speakerName((s) => {
          return s ?? "";
        }),
        children: [
          /* @__PURE__ */ jsx(
            "label",
            {
              label: speakerVolume((s) => s.toString() + "%"),
              visible: speakerMuted((v) => v === false)
            }
          ),
          /* @__PURE__ */ jsx("image", { iconName: speakerIcon })
        ]
      }
    ),
    /* @__PURE__ */ jsxs(
      "box",
      {
        spacing: spacing.normal,
        visible: microState((s) => {
          if (s === AstalWp2.NodeState.SUSPENDED || s === AstalWp2.NodeState.ERROR) {
            return false;
          }
          return true;
        }),
        children: [
          /* @__PURE__ */ jsx(Gtk2.Separator, { orientation: Gtk2.Orientation.VERTICAL }),
          /* @__PURE__ */ jsxs(
            "box",
            {
              tooltipText: microName((s) => {
                return s ?? "";
              }),
              spacing: spacing.normal,
              $: (s) => {
                const gesture = Gtk2.EventControllerScroll.new(
                  Gtk2.EventControllerScrollFlags.VERTICAL
                );
                gesture.connect("scroll", (_s, dx, dy) => {
                  const instance = defaultMicrophone.get();
                  handleVolumeScroll(instance, dx, dy);
                });
                s.add_controller(gesture);
              },
              children: [
                /* @__PURE__ */ jsx(
                  "label",
                  {
                    label: microphoneVolume((s) => s.toString() + "%"),
                    visible: microMuted((v) => v === false)
                  }
                ),
                /* @__PURE__ */ jsx("image", { iconName: microIcon })
              ]
            }
          )
        ]
      }
    )
  ] });
};
var NotificationsIcon = ({ isOpened }) => {
  const { notifications, dontDisturb } = useNotifications({
    removeOnExpiration: false
  });
  const hasNotifications = notifications((v) => {
    return v.length > 0;
  });
  const imgClass = createComputed(
    [hasNotifications, isOpened],
    (hasNotifications2, isOpened2) => {
      if (isOpened2 === true) return "";
      return hasNotifications2 === true ? activeClass : "";
    }
  );
  return /* @__PURE__ */ jsx("box", { spacing: spacing.normal, children: /* @__PURE__ */ jsx(
    "image",
    {
      iconName: dontDisturb(
        (v) => v === true ? "bell-outline-none-symbolic" : "bell-outline-symbolic"
      ),
      class: imgClass
    }
  ) });
};
var ControlPanel = () => {
  const [isOpened, setIsOpened] = createState(false);
  return /* @__PURE__ */ jsxs(
    "menubutton",
    {
      class: "ControlPanelMenuButton",
      active: isOpened,
      onNotifyActive: () => {
        setIsOpened((p) => !p);
      },
      children: [
        /* @__PURE__ */ jsxs("box", { spacing: spacing.normal, children: [
          /* @__PURE__ */ jsx(NotificationsIcon, { isOpened }),
          /* @__PURE__ */ jsx(Gtk2.Separator, { orientation: Gtk2.Orientation.VERTICAL }),
          /* @__PURE__ */ jsx(SoundIcon, {}),
          /* @__PURE__ */ jsx(Gtk2.Separator, { orientation: Gtk2.Orientation.VERTICAL }),
          /* @__PURE__ */ jsx(NetworkIcon, {}),
          /* @__PURE__ */ jsx(Gtk2.Separator, { orientation: Gtk2.Orientation.VERTICAL }),
          /* @__PURE__ */ jsx(BluetoothIcon, {})
        ] }),
        /* @__PURE__ */ jsx(ControlPanelPopover_default, {})
      ]
    }
  );
};
var ControlPanel_default = ControlPanel;

// src/context/LogoutPanelWindowContext.ts
var LogoutPanelWindowContext = createContext({ setVisible: void 0, visible: void 0 });

// src/widget/Bar.tsx
var dashboardBoxSpacing = spacing.normal;
var getDistro = () => {
  try {
    const [ok, content] = GLib10.file_get_contents("/etc/os-release");
    if (!ok) return "Unknown";
    const text = new TextDecoder().decode(content);
    const match = text.match(/^PRETTY_NAME="(.+)"$/m);
    return match ? match[1] : "Unknown";
  } catch {
    return "Unknown";
  }
};
var WallpaperImg = () => {
  const [wallpaperImg, setWallpaperImg] = createState("");
  startMpvImageListener((frame) => {
    setWallpaperImg(frame);
  });
  return /* @__PURE__ */ jsxs("overlay", { children: [
    /* @__PURE__ */ jsx(
      "box",
      {
        class: "WallpaperImgButtonContainer",
        $type: "overlay",
        widthRequest: 102,
        heightRequest: 100,
        children: /* @__PURE__ */ jsx(
          "button",
          {
            class: "circular flat WallpaperImgButton",
            hexpand: true,
            vexpand: true,
            iconName: "view-refresh",
            onClicked: () => {
              changeMpvPaperImage("next");
            },
            $: (s) => {
              const gesture = Gtk2.GestureClick.new();
              gesture.set_button(3);
              gesture.connect("released", () => {
                changeMpvPaperImage("prev");
              });
              s.add_controller(gesture);
            }
          }
        )
      }
    ),
    /* @__PURE__ */ jsx(
      CircularImage_default,
      {
        img: wallpaperImg,
        size: 300,
        widthRequest: 100,
        heightRequest: 100,
        iconFallback: "user-identity"
      }
    )
  ] });
};
var SystemProgressBarStat = ({
  iconName,
  fraction
}) => {
  return /* @__PURE__ */ jsxs("box", { orientation: Gtk2.Orientation.VERTICAL, spacing: spacing.normal, children: [
    /* @__PURE__ */ jsx(
      Gtk2.LevelBar,
      {
        orientation: Gtk2.Orientation.VERTICAL,
        vexpand: true,
        value: fraction,
        maxValue: 1,
        minValue: 0,
        inverted: true
      }
    ),
    /* @__PURE__ */ jsx("image", { iconName })
  ] });
};
var DashboardTab = () => {
  const wm = GLib10.getenv("XDG_SESSION_DESKTOP") ?? GLib10.getenv("XDG_CURRENT_DESKTOP") ?? "Unknown";
  const timeString = useFormattedTime("time");
  const separatedTime = timeString((v) => {
    const [hour, minute] = v.split(":");
    return { hour: hour || "", minute: minute || "" };
  });
  const dateString = createPoll("", 1e3, () => {
    const now = GLib10.DateTime.new_now_local();
    const dayString = now.format("%a, %e");
    if (!dayString) return "";
    const capitalized = dayString?.charAt(0).toUpperCase() + dayString?.slice(1);
    return capitalized;
  });
  const distro = getDistro();
  const upTime = createPoll("time", 6e4, "uptime -p");
  const cpuUsage = useCpuUsage();
  const memoryUsage = useMemoryRamUsage();
  return /* @__PURE__ */ jsxs(
    "box",
    {
      orientation: Gtk2.Orientation.HORIZONTAL,
      spacing: dashboardBoxSpacing,
      class: "DashboardTab",
      children: [
        /* @__PURE__ */ jsxs(
          "box",
          {
            orientation: Gtk2.Orientation.VERTICAL,
            spacing: dashboardBoxSpacing,
            hexpand: true,
            children: [
              /* @__PURE__ */ jsxs("box", { spacing: spacing.normal, hexpand: true, class: "DashboardBox extraPadding", children: [
                /* @__PURE__ */ jsx(WallpaperImg, {}),
                /* @__PURE__ */ jsxs(
                  "box",
                  {
                    orientation: Gtk2.Orientation.VERTICAL,
                    valign: Gtk2.Align.CENTER,
                    spacing: spacing.small,
                    children: [
                      /* @__PURE__ */ jsxs("box", { spacing: spacing.normal, children: [
                        /* @__PURE__ */ jsx("image", { iconName: "hyprland-symbolic", class: "HyprLandIcon" }),
                        /* @__PURE__ */ jsx("label", { label: wm, class: "DashboardTabSysInfoLabel" })
                      ] }),
                      /* @__PURE__ */ jsxs("box", { spacing: spacing.normal, children: [
                        /* @__PURE__ */ jsx("image", { iconName: "endeavouros-symbolic", class: "EndeavourOsIcon" }),
                        /* @__PURE__ */ jsx("label", { label: distro, class: "DashboardTabSysInfoLabel" })
                      ] }),
                      /* @__PURE__ */ jsxs("box", { spacing: spacing.normal, children: [
                        /* @__PURE__ */ jsx("image", { iconName: "clock-alt-symbolic", class: "UptimeIcon" }),
                        /* @__PURE__ */ jsx("label", { label: upTime, class: "DashboardTabSysInfoLabel" })
                      ] })
                    ]
                  }
                )
              ] }),
              /* @__PURE__ */ jsxs("box", { spacing: dashboardBoxSpacing, hexpand: true, children: [
                /* @__PURE__ */ jsx("box", { class: "DashboardBox extraPadding", vexpand: true, hexpand: true, children: /* @__PURE__ */ jsxs(
                  "box",
                  {
                    halign: Gtk2.Align.CENTER,
                    valign: Gtk2.Align.CENTER,
                    orientation: Gtk2.Orientation.VERTICAL,
                    hexpand: true,
                    children: [
                      /* @__PURE__ */ jsxs("box", { orientation: Gtk2.Orientation.VERTICAL, children: [
                        /* @__PURE__ */ jsx(
                          "label",
                          {
                            label: separatedTime((s) => s.hour),
                            class: "DashboardTabHourAndMinute"
                          }
                        ),
                        /* @__PURE__ */ jsx(Gtk2.Separator, {}),
                        /* @__PURE__ */ jsx(
                          "label",
                          {
                            label: separatedTime((s) => s.minute),
                            class: "DashboardTabHourAndMinute"
                          }
                        )
                      ] }),
                      /* @__PURE__ */ jsx("label", { label: dateString, class: "DashboardTabDate" })
                    ]
                  }
                ) }),
                /* @__PURE__ */ jsx("box", { class: "DashboardBox", children: /* @__PURE__ */ jsx(Gtk2.Calendar, { show_heading: false }) }),
                /* @__PURE__ */ jsxs("box", { class: "DashboardBox", spacing: spacing.large, children: [
                  /* @__PURE__ */ jsx(
                    SystemProgressBarStat,
                    {
                      iconName: "processor-symbolic",
                      fraction: cpuUsage((c) => c.cpuUsageInFraction)
                    }
                  ),
                  /* @__PURE__ */ jsx(
                    SystemProgressBarStat,
                    {
                      iconName: "memory-symbolic",
                      fraction: memoryUsage((c) => c.memoryUsageInFraction)
                    }
                  )
                ] })
              ] })
            ]
          }
        ),
        /* @__PURE__ */ jsx("box", { class: "DashboardBox", widthRequest: 300, children: /* @__PURE__ */ jsx("box", { valign: Gtk2.Align.CENTER, hexpand: true, vexpand: true, children: /* @__PURE__ */ jsx(MediaPlayer_default, { variant: "minimal" }) }) })
      ]
    }
  );
};
var MediaTab = () => {
  return /* @__PURE__ */ jsx("box", { class: "DashboardTab", children: /* @__PURE__ */ jsx(MediaPlayer_default, { variant: "complete" }) });
};
var DashboardPopover = () => {
  let switcher;
  let stack;
  return /* @__PURE__ */ jsx("popover", { children: /* @__PURE__ */ jsxs("box", { orientation: Gtk2.Orientation.VERTICAL, children: [
    /* @__PURE__ */ jsx(
      Gtk2.StackSwitcher,
      {
        $: (s) => {
          switcher = s;
        },
        stack
      }
    ),
    /* @__PURE__ */ jsxs(
      Gtk2.Stack,
      {
        transitionType: Gtk2.StackTransitionType.SLIDE_LEFT_RIGHT,
        $: (s) => {
          stack = s;
          if (switcher) switcher.set_stack(s);
        },
        children: [
          /* @__PURE__ */ jsx(
            Gtk2.StackPage,
            {
              name: "child1",
              title: "Dashboard",
              child: /* @__PURE__ */ jsx(DashboardTab, {})
            }
          ),
          /* @__PURE__ */ jsx(
            Gtk2.StackPage,
            {
              name: "child2",
              title: "Media",
              child: /* @__PURE__ */ jsx(MediaTab, {})
            }
          )
        ]
      }
    )
  ] }) });
};
var DashboardButton = () => {
  const isAnyPlaying = useIsAnyPlayerPlaying();
  return /* @__PURE__ */ jsxs("menubutton", { children: [
    /* @__PURE__ */ jsxs("box", { spacing: spacing.normal, children: [
      /* @__PURE__ */ jsx("label", { label: "Dashboard" }),
      /* @__PURE__ */ jsx(
        "image",
        {
          iconName: isAnyPlaying(
            (playing) => playing ? "audio-on" : "user-home"
          )
        }
      )
    ] }),
    /* @__PURE__ */ jsx(DashboardPopover, {})
  ] });
};
var TimeRow = () => {
  const timeString = useFormattedTime("time-with-pm");
  return /* @__PURE__ */ jsxs("menubutton", { halign: Gtk2.Align.CENTER, children: [
    /* @__PURE__ */ jsxs("box", { spacing: spacing.normal, children: [
      /* @__PURE__ */ jsx("image", { iconName: "month-symbolic" }),
      /* @__PURE__ */ jsx("label", { label: timeString })
    ] }),
    /* @__PURE__ */ jsx("popover", { children: /* @__PURE__ */ jsx(Gtk2.Calendar, {}) })
  ] });
};
function Bar({
  gdkmonitor,
  index,
  keyboard: keyboard2,
  setKeyboard: setKeyboard2
}) {
  const { TOP, LEFT, RIGHT } = Astal2.WindowAnchor;
  const [visible, setVisible] = createState(false);
  const { setVisible: setVisibleLogout } = LogoutPanelWindowContext.use();
  timeout(0, () => {
    setVisible(true);
  });
  return /* @__PURE__ */ jsx(
    "window",
    {
      visible,
      name: windowNames.Bar,
      class: "Bar",
      gdkmonitor,
      exclusivity: Astal2.Exclusivity.EXCLUSIVE,
      layer: Astal2.Layer.BOTTOM,
      anchor: TOP | LEFT | RIGHT,
      application: app_default,
      children: /* @__PURE__ */ jsx(Gtk2.Overlay, { children: /* @__PURE__ */ jsx("box", { children: /* @__PURE__ */ jsxs("centerbox", { cssName: "centerbox", hexpand: true, children: [
        /* @__PURE__ */ jsx("box", { $type: "start", children: /* @__PURE__ */ jsx(Workspaces_default, { gdkmonitor, index }) }),
        /* @__PURE__ */ jsx("box", { $type: "center", children: /* @__PURE__ */ jsx(DashboardButton, {}) }),
        /* @__PURE__ */ jsxs("box", { $type: "end", spacing: spacing.large, children: [
          /* @__PURE__ */ jsx(Tray_default, {}),
          /* @__PURE__ */ jsxs("box", { spacing: spacing.small, children: [
            /* @__PURE__ */ jsx(
              "button",
              {
                class: "flat",
                onClicked: async () => {
                  try {
                    await execAsync("hyprctl switchxkblayout current next");
                    setKeyboard2(getKeyboard());
                  } catch (error) {
                    printerr(error);
                  }
                },
                tooltipText: "Cambiar Teclado",
                children: /* @__PURE__ */ jsx("label", { label: keyboard2((v) => formatKeyboard(v)) })
              }
            ),
            /* @__PURE__ */ jsx(
              "button",
              {
                iconName: "image-round-symbolic",
                class: "flat",
                onClicked: () => {
                  changeMpvPaperImage("next");
                },
                $: (s) => {
                  const gesture = Gtk2.GestureClick.new();
                  gesture.set_button(3);
                  gesture.connect("released", () => {
                    changeMpvPaperImage("prev");
                  });
                  s.add_controller(gesture);
                },
                tooltipText: "Cambiar fondo de pantalla"
              }
            ),
            /* @__PURE__ */ jsx(
              "button",
              {
                iconName: "color-picker-symbolic",
                class: "flat",
                onClicked: () => {
                  execAsync(
                    "hyprpicker -a"
                    // -a para copiar al portapapeles automáticamente
                  );
                },
                tooltipText: "Haz clic para elegir un color"
              }
            ),
            /* @__PURE__ */ jsx(
              "button",
              {
                iconName: "clipboard-symbolic",
                class: "flat",
                onClicked: () => {
                  const terminal = findAvailableTerminal();
                  if (!terminal) {
                    printerr("NO terminal");
                    return;
                  }
                  exec([terminal, "--class", "clipse", "-e", "clipse"]);
                },
                tooltipText: "Clipboard"
              }
            )
          ] }),
          /* @__PURE__ */ jsx(TimeRow, {}),
          /* @__PURE__ */ jsx(ControlPanel_default, {}),
          /* @__PURE__ */ jsx(
            "button",
            {
              iconName: "system-shutdown",
              class: "destructive-action circular",
              onClicked: () => {
                setVisibleLogout?.(true);
              }
            }
          )
        ] })
      ] }) }) })
    }
  );
}

// src/widget/MainSearch/MainSearchWindow.tsx
import Hyprland3 from "gi://AstalHyprland";
import Gio8 from "gi://Gio?version=2.0";

// src/objects/MainSearchListItemObject.ts
var _desktopIcon_dec2, _desc_dec, _text_dec2, _a4, _MainSearchListItemObject_decorators, _init3;
_MainSearchListItemObject_decorators = [register({ GTypeName: "MainSearchListItem" })];
var MainSearchListItemObject = class extends (_a4 = GObject5.Object, _text_dec2 = [property(String)], _desc_dec = [property(String)], _desktopIcon_dec2 = [property(String)], _a4) {
  constructor({
    desktopIcon,
    text,
    onSelect,
    desc
  }) {
    super();
    this.text = __runInitializers(_init3, 8, this, ""), __runInitializers(_init3, 11, this);
    this.desc = __runInitializers(_init3, 12, this, ""), __runInitializers(_init3, 15, this);
    this.desktopIcon = __runInitializers(_init3, 16, this, ""), __runInitializers(_init3, 19, this);
    this._onSelect = void 0;
    this.text = text;
    this.desktopIcon = desktopIcon;
    this.desc = desc;
    this._onSelect = onSelect;
  }
  onSelect() {
    this._onSelect?.(this);
  }
};
_init3 = __decoratorStart(_a4);
__decorateElement(_init3, 5, "text", _text_dec2, MainSearchListItemObject);
__decorateElement(_init3, 5, "desc", _desc_dec, MainSearchListItemObject);
__decorateElement(_init3, 5, "desktopIcon", _desktopIcon_dec2, MainSearchListItemObject);
MainSearchListItemObject = __decorateElement(_init3, 0, "MainSearchListItemObject", _MainSearchListItemObject_decorators, MainSearchListItemObject);
__runInitializers(_init3, 1, MainSearchListItemObject);

// src/context/MainSearchWindowContext.ts
var MainSearchWindowContext = createContext({ setVisible: void 0, visible: void 0 });

// src/widget/MainSearch/MainSearchWindow.tsx
var transitionDuration = 500;
var MyListItem = class extends Gtk2.ListItem {
};
var filterCommands = (commands, query) => {
  const lowerQuery = query.toLowerCase();
  return commands.filter((cmd) => {
    const name = cmd;
    return name.includes(lowerQuery);
  });
};
var addAppsToListStore = (listStore, results) => {
  listStore.remove_all();
  results.forEach((r) => {
    const item = new MainSearchListItemObject({
      desktopIcon: r.get_icon_name(),
      text: r.get_name(),
      onSelect: () => r.launch(),
      desc: r.get_description()
    });
    listStore.append(item);
  });
};
var addCommandsToListStore = (listStore, results) => {
  listStore.remove_all();
  results.forEach((r) => {
    const item = new MainSearchListItemObject({
      desktopIcon: "",
      text: r,
      onSelect: () => {
        runAppCommand(r);
      },
      desc: ""
    });
    listStore.append(item);
  });
};
var getAllAppsForList = (apps2) => {
  return apps2.get_list().sort((a, b) => a.get_name().localeCompare(b.get_name()));
};
var MainSearch = ({
  listView,
  setListView,
  setSearchEntry,
  handleClose,
  apps: apps2
}) => {
  const listStore = new Gio8.ListStore();
  const model = new Gtk2.SingleSelection({ model: listStore });
  const commands = getAllCommands();
  addAppsToListStore(listStore, getAllAppsForList(apps2));
  const handleSelect = async () => {
    const selectedItem = model.get_selected_item();
    await handleClose(true);
    selectedItem.onSelect();
  };
  return /* @__PURE__ */ jsxs(
    "box",
    {
      orientation: Gtk2.Orientation.VERTICAL,
      valign: Gtk2.Align.END,
      vexpand: true,
      hexpand: true,
      children: [
        /* @__PURE__ */ jsx(Gtk2.ScrolledWindow, { maxContentHeight: 600, propagateNaturalHeight: true, children: /* @__PURE__ */ jsx(
          Gtk2.ListView,
          {
            vexpand: true,
            $: (s) => {
              setListView(s);
            },
            onActivate: () => {
              handleSelect();
            },
            focusable: false,
            can_focus: false,
            model,
            factory: /* @__PURE__ */ jsx(
              Gtk2.SignalListItemFactory,
              {
                onSetup: (_, l) => {
                  const listItem = l;
                  const mainBox = new Gtk2.Box({
                    spacing: spacing.normal
                  });
                  const rightBox = new Gtk2.Box({
                    spacing: spacing.small,
                    orientation: Gtk2.Orientation.VERTICAL,
                    valign: Gtk2.Align.CENTER
                  });
                  const textLabel = new Gtk2.Label({
                    xalign: 0
                  });
                  const descLabel = new Gtk2.Label({
                    xalign: 0,
                    wrap: true,
                    maxWidthChars: 40
                  });
                  const image = new Gtk2.Image({
                    pixelSize: 40
                  });
                  listItem._textLabel = textLabel;
                  listItem._descLabel = descLabel;
                  listItem._image = image;
                  listItem._mainBox = mainBox;
                  rightBox.append(textLabel);
                  rightBox.append(descLabel);
                  mainBox.append(image);
                  mainBox.append(rightBox);
                  listItem.set_child(mainBox);
                },
                onBind: (_, l) => {
                  const listItem = l;
                  const textLabel = listItem._textLabel;
                  const descLabel = listItem._descLabel;
                  const image = listItem._image;
                  const item = listItem.get_item();
                  const icon = item.desktopIcon;
                  if (icon) {
                    if (getIsIconFile({ icon })) {
                      image.set_from_file(icon);
                    } else {
                      image.set_from_icon_name(icon);
                    }
                  } else {
                    image.set_visible(false);
                  }
                  textLabel?.set_text(item.text);
                  if (item.desc) {
                    descLabel?.set_text(item.desc);
                  } else {
                    descLabel.set_visible(false);
                  }
                }
              }
            )
          }
        ) }),
        /* @__PURE__ */ jsx(
          Gtk2.SearchEntry,
          {
            valign: Gtk2.Align.END,
            onSearchChanged: (s) => {
              const text = s.get_text();
              if (text.startsWith(">")) {
                const [_, ...rest] = text.split(">");
                const query = rest.join(">");
                if (query.length) {
                  addCommandsToListStore(
                    listStore,
                    filterCommands(commands, query)
                  );
                } else {
                  addCommandsToListStore(listStore, commands);
                }
              } else {
                if (text.length) {
                  const results = apps2.fuzzy_query(s.get_text());
                  addAppsToListStore(listStore, results);
                } else {
                  addAppsToListStore(listStore, getAllAppsForList(apps2));
                }
              }
            },
            onActivate: () => {
              handleSelect();
            },
            onStopSearch: () => {
              handleClose(false);
            },
            $: (s) => {
              const keyController = Gtk2.EventControllerKey.new();
              keyController.connect("key-pressed", (_, keyval) => {
                if (keyval !== Gdk.KEY_Up && keyval !== Gdk.KEY_Down) {
                  return false;
                }
                const index = model.get_selected();
                let newIndex = index;
                if (keyval == Gdk.KEY_Up && index > 0) {
                  newIndex = index - 1;
                } else if (keyval == Gdk.KEY_Down && index < listStore.get_n_items() - 1) {
                  newIndex = index + 1;
                }
                model.select_item(newIndex, true);
                listView.get()?.scroll_to(newIndex, null, null);
                return true;
              });
              s.add_controller(keyController);
              setSearchEntry(s);
            }
          }
        )
      ]
    }
  );
};
var MainSearchWindow = ({ gdkmonitor }) => {
  const { BOTTOM } = Astal2.WindowAnchor;
  const apps2 = createAppsInstance({ variant: "appSearch" });
  const { visible, setVisible } = MainSearchWindowContext.use();
  const hyprland = Hyprland3.get_default();
  const focusedMonitor = createBinding(hyprland, "focusedMonitor");
  const [searchEntry, setSearchEntry] = createState(void 0);
  const [listView, setListView] = createState(
    void 0
  );
  const [windowInstance, setWindowInstance] = createState(void 0);
  const [revealChild, setRevealChild] = createState(false);
  const isVisible = createComputed(
    [visible, focusedMonitor],
    (visible2, focusedMonitor2) => {
      return getIsCurrentMonitor(focusedMonitor2, gdkmonitor) && visible2 === true;
    }
  );
  const handleClose = async (immediate) => {
    setRevealChild(false);
    const close = () => {
      setVisible?.(false);
      searchEntry.get()?.set_text("");
    };
    if (immediate) {
      close();
    } else {
      await new Promise((res) => {
        setTimeout(() => {
          close();
          res(true);
        }, transitionDuration - 100);
      });
    }
  };
  return /* @__PURE__ */ jsx(
    "window",
    {
      visible: isVisible,
      name: windowNames.NotificationWindow,
      class: "MainSearchWindow",
      resizable: false,
      gdkmonitor,
      anchor: BOTTOM,
      exclusivity: Astal2.Exclusivity.NORMAL,
      application: app_default,
      keymode: Astal2.Keymode.EXCLUSIVE,
      onNotifyVisible: (win) => {
        const visible2 = win.is_visible();
        if (visible2) {
          searchEntry.get()?.grab_focus();
          apps2.reload();
        }
        if (visible2) {
          setRevealChild(visible2);
        }
      },
      $: (s) => {
        const clickHandler = Gtk2.GestureClick.new();
        clickHandler.set_button(0);
        clickHandler.connect("released", (_gesture, _n_press, x, y) => {
          let wx = x, wy = y;
          const result = windowInstance.get()?.translate_coordinates(windowInstance.get(), x, y);
          if (Array.isArray(result) && result[0]) {
            wx = result[1];
            wy = result[2];
          }
          const isInside = (widget) => {
            if (!widget) return false;
            const alloc = widget.get_allocation();
            return wx >= alloc.x && wy >= alloc.y && wx <= alloc.x + alloc.width && wy <= alloc.y + alloc.height;
          };
          if (!isInside(searchEntry.get()) && !isInside(listView.get())) {
            handleClose(false);
          }
        });
        s.add_controller(clickHandler);
        setWindowInstance(s);
      },
      children: /* @__PURE__ */ jsx(
        Gtk2.Revealer,
        {
          revealChild,
          transition_type: Gtk2.RevealerTransitionType.SLIDE_UP,
          transitionDuration,
          widthRequest: 800,
          heightRequest: 800,
          children: /* @__PURE__ */ jsx(
            "box",
            {
              class: revealChild((v) => v ? "MainSearch" : "MainSearch hide"),
              valign: Gtk2.Align.END,
              children: /* @__PURE__ */ jsx(
                MainSearch,
                {
                  listView,
                  setListView,
                  setSearchEntry,
                  handleClose,
                  apps: apps2
                }
              )
            }
          )
        }
      )
    }
  );
};
var MainSearchWindow_default = MainSearchWindow;

// src/widget/LogoutPanel/LogoutPanelWindow.tsx
import AstalHyprland from "gi://AstalHyprland?version=0.1";
var LogoutBtn = ({
  onConfirm,
  iconName,
  label
}) => {
  return /* @__PURE__ */ jsx(
    Gtk2.FlowBoxChild,
    {
      onActivate: () => {
        onConfirm();
      },
      children: /* @__PURE__ */ jsxs("box", { children: [
        /* @__PURE__ */ jsx("image", { iconName, pixelSize: 100 }),
        /* @__PURE__ */ jsx("label", { label, visible: false })
      ] })
    }
  );
};
var LogoutPanelWindow = ({ gdkmonitor }) => {
  const { BOTTOM, LEFT, RIGHT, TOP } = Astal2.WindowAnchor;
  const { setVisible, visible } = LogoutPanelWindowContext.use();
  const [selectedLabel, setSelectedLabel] = createState(null);
  const hyprland = AstalHyprland.get_default();
  const focusedMonitor = createBinding(hyprland, "focusedMonitor");
  const isCurrentMonitor = createComputed([focusedMonitor], (m) => {
    return getIsCurrentMonitor(m, gdkmonitor);
  });
  const onClose = () => setVisible?.(false);
  const onConfirm = async (command) => {
    await execAsync(command);
    onClose();
  };
  return /* @__PURE__ */ jsx(
    "window",
    {
      visible,
      gdkmonitor,
      name: windowNames.LogoutPanelWindow,
      class: "LogoutPanelWindow",
      $: (s) => {
        const keyController = Gtk2.EventControllerKey.new();
        keyController.connect("key-released", (_, keyval) => {
          if (keyval !== Gdk.KEY_Escape) {
            return false;
          }
          onClose();
          return true;
        });
        s.add_controller(keyController);
      },
      exclusivity: Astal2.Exclusivity.IGNORE,
      anchor: BOTTOM | LEFT | RIGHT | TOP,
      keymode: isCurrentMonitor(
        (v) => v ? Astal2.Keymode.EXCLUSIVE : Astal2.Keymode.NONE
      ),
      application: app_default,
      children: /* @__PURE__ */ jsx("box", { hexpand: true, vexpand: true, visible: isCurrentMonitor, children: /* @__PURE__ */ jsxs(
        "box",
        {
          orientation: Gtk2.Orientation.VERTICAL,
          halign: Gtk2.Align.CENTER,
          valign: Gtk2.Align.CENTER,
          spacing: spacing.xLarge,
          children: [
            /* @__PURE__ */ jsx(
              Gtk2.FlowBox,
              {
                class: "LogoutFlowBox",
                valign: Gtk2.Align.CENTER,
                halign: Gtk2.Align.CENTER,
                hexpand: true,
                vexpand: true,
                columnSpacing: 40,
                rowSpacing: 40,
                max_children_per_line: 3,
                activateOnSingleClick: false,
                onChildActivated: (_s, selected) => {
                  selected.activate();
                },
                onSelectedChildrenChanged: (s) => {
                  const selected = s.get_selected_children()?.[0];
                  if (!selected) {
                    return setSelectedLabel(null);
                  }
                  const label = selected.get_child()?.get_last_child();
                  if (!label) {
                    return setSelectedLabel(null);
                  }
                  const text = label.get_label();
                  setSelectedLabel(text);
                },
                $: (s) => {
                  const first = /* @__PURE__ */ jsx(
                    LogoutBtn,
                    {
                      iconName: "padlock2-symbolic",
                      onConfirm: () => {
                        onConfirm("loginctl lock-session");
                      },
                      label: "Lock"
                    }
                  );
                  s.append(first);
                  s.append(
                    /* @__PURE__ */ jsx(
                      LogoutBtn,
                      {
                        iconName: "log-out-symbolic",
                        onConfirm: () => {
                          onConfirm("hyprctl dispatch exit");
                        },
                        label: "Logout"
                      }
                    )
                  );
                  s.append(
                    /* @__PURE__ */ jsx(
                      LogoutBtn,
                      {
                        iconName: "moon-outline-symbolic",
                        onConfirm: () => {
                          onConfirm("systemctl suspend");
                        },
                        label: "Suspend"
                      }
                    )
                  );
                  s.append(
                    /* @__PURE__ */ jsx(
                      LogoutBtn,
                      {
                        iconName: "snow-symbolic",
                        onConfirm: () => {
                          onConfirm("systemctl hibernate");
                        },
                        label: "Hibernate"
                      }
                    )
                  );
                  s.append(
                    /* @__PURE__ */ jsx(
                      LogoutBtn,
                      {
                        iconName: "turn-off-symbolic",
                        onConfirm: () => {
                          onConfirm("systemctl poweroff");
                        },
                        label: "Shutdown"
                      }
                    )
                  );
                  s.append(
                    /* @__PURE__ */ jsx(
                      LogoutBtn,
                      {
                        iconName: "arrow-circular-bottom-right-symbolic",
                        onConfirm: () => {
                          onConfirm("systemctl reboot");
                        },
                        label: "Restart"
                      }
                    )
                  );
                  s.grab_focus();
                  s.select_child(first);
                }
              }
            ),
            /* @__PURE__ */ jsx(
              "label",
              {
                label: selectedLabel((v) => v || ""),
                class: "LogoutPanelwindowLabel"
              }
            )
          ]
        }
      ) })
    }
  );
};
var LogoutPanelWindow_default = LogoutPanelWindow;

// src/widget/Notifications/NotificationWindow.tsx
import Hyprland4 from "gi://AstalHyprland";
var wantedWidth = 400;
var NotificationWindow = ({ gdkmonitor }) => {
  const { TOP, RIGHT } = Astal2.WindowAnchor;
  const { notifications } = useNotifications({ removeOnExpiration: true });
  const hyprland = Hyprland4.get_default();
  const focusedMonitor = createBinding(hyprland, "focusedMonitor");
  const isVisible = createComputed(
    [focusedMonitor, notifications],
    (m, notifications2) => {
      return getIsCurrentMonitor(m, gdkmonitor) && notifications2.length > 0;
    }
  );
  return /* @__PURE__ */ jsx(
    "window",
    {
      visible: isVisible,
      name: windowNames.NotificationWindow,
      class: "NotificationWindow",
      gdkmonitor,
      exclusivity: Astal2.Exclusivity.NORMAL,
      anchor: TOP | RIGHT,
      application: app_default,
      children: /* @__PURE__ */ jsx(
        "box",
        {
          orientation: Gtk2.Orientation.VERTICAL,
          spacing: spacing.normal,
          widthRequest: wantedWidth,
          children: /* @__PURE__ */ jsx(For, { each: notifications, children: (item) => /* @__PURE__ */ jsx(NotificationListItem_default, { item }) })
        }
      )
    }
  );
};
var NotificationWindow_default = NotificationWindow;

// src/utils/notifications.ts
import Gio9 from "gi://Gio";
import GLib11 from "gi://GLib";
var removeNotificationsFileList = () => {
  let path = GLib11.build_filenamev([
    GLib11.get_user_state_dir(),
    "astal",
    "notifd",
    "notifications.json"
  ]);
  let file = Gio9.File.new_for_path(path);
  try {
    if (file.query_exists(null)) {
      file.delete(null);
      print("Notifications state file deleted successfully.");
    } else {
      print("Notifications state file does not exist.");
    }
  } catch (e) {
    print(`Error deleting file: ${e.message}`);
  }
};

// app.tsx
var [isVisibleMainSearch, setIsVisibleMainSearch] = createState(false);
var [isVisibleLogoutWindow, setIsVisibleLogoutWindow] = createState(false);
var [keyboard, setKeyboard] = createState(getKeyboard());
app_default.start({
  css: style_default,
  icons: "/home/jose/.config/my-ags/icons",
  requestHandler: (request, res) => {
    if (request === windowNames.MainSearchWindow) {
      setIsVisibleMainSearch(true);
      res(`opened window`);
      return;
    } else if (request === "keyboard-changed") {
      setKeyboard(getKeyboard());
      res("keyboard changed");
      return;
    }
    res("unknown command");
  },
  main() {
    removeNotificationsFileList();
    app_default.get_monitors().map((monitor, i) => {
      return /* @__PURE__ */ jsx(
        MainSearchWindowContext,
        {
          value: {
            visible: isVisibleMainSearch,
            setVisible: setIsVisibleMainSearch
          },
          children: () => /* @__PURE__ */ jsx(
            LogoutPanelWindowContext,
            {
              value: {
                visible: isVisibleLogoutWindow,
                setVisible: setIsVisibleLogoutWindow
              },
              children: () => {
                return /* @__PURE__ */ jsxs(Fragment, { children: [
                  /* @__PURE__ */ jsx(
                    Bar,
                    {
                      gdkmonitor: monitor,
                      index: i,
                      keyboard,
                      setKeyboard
                    }
                  ),
                  /* @__PURE__ */ jsx(MainSearchWindow_default, { gdkmonitor: monitor }),
                  /* @__PURE__ */ jsx(LogoutPanelWindow_default, { gdkmonitor: monitor }),
                  /* @__PURE__ */ jsx(NotificationWindow_default, { gdkmonitor: monitor })
                ] });
              }
            }
          )
        }
      );
    });
  }
});
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vLi4vdXNyL3NoYXJlL2Fncy9qcy9zcmMvZ3RrNC9hcHAudHMiLCAiLi4vLi4vLi4vLi4vdXNyL3NoYXJlL2Fncy9qcy9zcmMvb3ZlcnJpZGVzLnRzIiwgIi4uLy4uLy4uLy4uL3Vzci9zaGFyZS9hZ3MvanMvc3JjL19hcHAudHMiLCAiLi4vLi4vLi4vLi4vdXNyL3NoYXJlL2Fncy9qcy9nbmltL3NyYy9qc3gvc2NvcGUudHMiLCAic2FzczovaG9tZS9qb3NlLy5jb25maWcvbXktYWdzL3N0eWxlLnNjc3MiLCAiLi4vLi4vLi4vLi4vdXNyL3NoYXJlL2Fncy9qcy9nbmltL3NyYy9qc3gvanN4LnRzIiwgIi4uLy4uLy4uLy4uL3Vzci9zaGFyZS9hZ3MvanMvZ25pbS9zcmMvanN4L3N0YXRlLnRzIiwgIi4uLy4uLy4uLy4uL3Vzci9zaGFyZS9hZ3MvanMvZ25pbS9zcmMvdXRpbC50cyIsICIuLi8uLi8uLi8uLi91c3Ivc2hhcmUvYWdzL2pzL2duaW0vc3JjL2pzeC9lbnYudHMiLCAiLi4vLi4vLi4vLi4vdXNyL3NoYXJlL2Fncy9qcy9nbmltL3NyYy9qc3gvRnJhZ21lbnQudHMiLCAiLi4vLi4vLi4vLi4vdXNyL3NoYXJlL2Fncy9qcy9nbmltL3NyYy9nbm9tZS9zaWduYWxUcmFja2VyLnRzIiwgIi4uLy4uLy4uLy4uL3Vzci9zaGFyZS9hZ3MvanMvZ25pbS9zcmMvanN4L0Zvci50cyIsICIuLi8uLi8uLi8uLi91c3Ivc2hhcmUvYWdzL2pzL3NyYy9ndGs0L2luZGV4LnRzIiwgIi4uLy4uLy4uLy4uL3Vzci9zaGFyZS9hZ3MvanMvc3JjL3Byb2Nlc3MudHMiLCAiLi4vLi4vLi4vLi4vdXNyL3NoYXJlL2Fncy9qcy9zcmMvdGltZS50cyIsICJzcmMvd2lkZ2V0L0Jhci50c3giLCAic3JjL3dpZGdldC9NZWRpYVBsYXllci50c3giLCAic3JjL3V0aWxzL3RpbWUudHMiLCAic3JjL2hvb2tzL3VzZVBsYXllckluZm8udHMiLCAic3JjL3V0aWxzL21wcmlzL2dldC1sYXN0LXBsYXllci50cyIsICIuLi8uLi8uLi8uLi91c3Ivc2hhcmUvYWdzL2pzL2duaW0vc3JjL2dvYmplY3QudHMiLCAic3JjL29iamVjdHMvUGxheWVyTGlzdEl0ZW1PYmplY3QudHMiLCAic3JjL3V0aWxzL2FwcHMudHMiLCAic3JjL3dpZGdldC9DaXJjdWxhckltYWdlLnRzeCIsICJzcmMvdXRpbHMvaWNvbnMudHMiLCAiLi4vLi4vLi4vLi4vdXNyL3NoYXJlL2Fncy9qcy9zcmMvZ3RrNC9qc3gtcnVudGltZS50cyIsICIuLi8uLi8uLi8uLi91c3Ivc2hhcmUvYWdzL2pzL2duaW0vc3JjL2d0azQvanN4LXJ1bnRpbWUudHMiLCAic3JjL2NvbnN0YW50cy90aGVtZS9zcGFjaW5nLnRzIiwgInNyYy9ob29rcy91c2VDb250cm9sbGVkU2NhbGUudHMiLCAic3JjL2hvb2tzL3VzZUlzQW55UGxheWVyUGxheWluZy50cyIsICJzcmMvdXRpbHMvZ2V0LW1wdnBhcGVyLWltYWdlLnRzIiwgInNyYy91dGlscy9jaGFuZ2UtbXB2cGFwZXItaW1hZ2UudHMiLCAic3JjL3V0aWxzL2NwdS50cyIsICJzcmMvaG9va3MvdXNlQ3B1VXNhZ2UudHMiLCAic3JjL3V0aWxzL21lbW9yeS1yYW0udHMiLCAic3JjL2hvb2tzL3VzZU1lbW9yeVJhbVVzYWdlLnRzIiwgInNyYy9ob29rcy91c2VGb3JtYXR0ZWRUaW1lLnRzIiwgInNyYy93aWRnZXQvV29ya3NwYWNlcy50c3giLCAic3JjL3V0aWxzL2lzLWN1cnJlbnQtbW9uaXRvci50cyIsICJzcmMvb2JqZWN0cy9FbXB0eUh5cHJsYW5kV29ya3NwYWNlLnRzIiwgInNyYy91dGlscy93b3Jrc3BhY2VzLnRzIiwgInNyYy93aWRnZXQvVHJheS50c3giLCAic3JjL2NvbnN0YW50cy93aW5kb3dzLnRzIiwgInNyYy91dGlscy9rZXlib2FyZC50cyIsICJzcmMvd2lkZ2V0L0NvbnRyb2xQYW5lbC9Db250cm9sUGFuZWwudHN4IiwgInNyYy91dGlscy9uZXR3b3JrLnRzIiwgInNyYy9ob29rcy91c2VOb3RpZmljYXRpb25zLnRzIiwgInNyYy93aWRnZXQvQ29udHJvbFBhbmVsL1ZvbHVtZU1peGVyLnRzeCIsICJzcmMvd2lkZ2V0L05vdGlmaWNhdGlvbnMvTm90aWZpY2F0aW9uTGlzdEl0ZW0udHN4IiwgInNyYy93aWRnZXQvQ29udHJvbFBhbmVsL0NvbnRyb2xQYW5lbFBvcG92ZXIudHN4IiwgInNyYy9jb250ZXh0L0xvZ291dFBhbmVsV2luZG93Q29udGV4dC50cyIsICJzcmMvd2lkZ2V0L01haW5TZWFyY2gvTWFpblNlYXJjaFdpbmRvdy50c3giLCAic3JjL29iamVjdHMvTWFpblNlYXJjaExpc3RJdGVtT2JqZWN0LnRzIiwgInNyYy9jb250ZXh0L01haW5TZWFyY2hXaW5kb3dDb250ZXh0LnRzIiwgInNyYy93aWRnZXQvTG9nb3V0UGFuZWwvTG9nb3V0UGFuZWxXaW5kb3cudHN4IiwgInNyYy93aWRnZXQvTm90aWZpY2F0aW9ucy9Ob3RpZmljYXRpb25XaW5kb3cudHN4IiwgInNyYy91dGlscy9ub3RpZmljYXRpb25zLnRzIiwgImFwcC50c3giXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCBHTGliIGZyb20gXCJnaTovL0dMaWI/dmVyc2lvbj0yLjBcIlxuaW1wb3J0IEd0ayBmcm9tIFwiZ2k6Ly9HdGs/dmVyc2lvbj00LjBcIlxuaW1wb3J0IEFzdGFsIGZyb20gXCJnaTovL0FzdGFsP3ZlcnNpb249NC4wXCJcbmltcG9ydCB7IG1rQXBwIH0gZnJvbSBcIi4uL19hcHAuanNcIlxuXG5HdGsuaW5pdCgpXG5cbi8vIHN0b3AgdGhpcyBmcm9tIGxlYWtpbmcgaW50byBzdWJwcm9jZXNzZXNcbi8vIGFuZCBnaW8gbGF1bmNoIGludm9jYXRpb25zXG5HTGliLnVuc2V0ZW52KFwiTERfUFJFTE9BRFwiKVxuXG4vLyB1c2VycyBtaWdodCB3YW50IHRvIHVzZSBBZHdhaXRhIGluIHdoaWNoIGNhc2UgaXQgaGFzIHRvIGJlIGluaXRpYWxpemVkXG4vLyBpdCBtaWdodCBiZSBjb21tb24gcGl0ZmFsbCB0byBmb3JnZXQgaXQgYmVjYXVzZSBgQXBwYCBpcyBub3QgYEFkdy5BcHBsaWNhdGlvbmBcbmF3YWl0IGltcG9ydChcImdpOi8vQWR3P3ZlcnNpb249MVwiKS50aGVuKCh7IGRlZmF1bHQ6IEFkdyB9KSA9PiBBZHcuaW5pdCgpKS5jYXRjaCgoKSA9PiB2b2lkIDApXG5cbmV4cG9ydCBkZWZhdWx0IG1rQXBwKEFzdGFsLkFwcGxpY2F0aW9uKVxuIiwgIi8qKlxuICogV29ya2Fyb3VuZCBmb3IgXCJDYW4ndCBjb252ZXJ0IG5vbi1udWxsIHBvaW50ZXIgdG8gSlMgdmFsdWUgXCJcbiAqL1xuXG5leHBvcnQge31cblxuZnVuY3Rpb24gc25ha2VpZnkoc3RyOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyXG4gICAgICAgIC5yZXBsYWNlKC8oW2Etel0pKFtBLVpdKS9nLCBcIiQxXyQyXCIpXG4gICAgICAgIC5yZXBsYWNlQWxsKFwiLVwiLCBcIl9cIilcbiAgICAgICAgLnRvTG93ZXJDYXNlKClcbn1cblxuYXN5bmMgZnVuY3Rpb24gc3VwcHJlc3M8VD4obW9kOiBQcm9taXNlPHsgZGVmYXVsdDogVCB9PiwgcGF0Y2g6IChtOiBUKSA9PiB2b2lkKSB7XG4gICAgcmV0dXJuIG1vZC50aGVuKChtKSA9PiBwYXRjaChtLmRlZmF1bHQpKS5jYXRjaCgoKSA9PiB2b2lkIDApXG59XG5cbmZ1bmN0aW9uIHBhdGNoPFAgZXh0ZW5kcyBvYmplY3Q+KHByb3RvOiBQLCBwcm9wOiBFeHRyYWN0PGtleW9mIFAsIHN0cmluZz4pIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvdG8sIHByb3AsIHtcbiAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXNbYGdldF8ke3NuYWtlaWZ5KHByb3ApfWBdKClcbiAgICAgICAgfSxcbiAgICB9KVxufVxuXG5hd2FpdCBzdXBwcmVzcyhpbXBvcnQoXCJnaTovL0FzdGFsQXBwc1wiKSwgKHsgQXBwcywgQXBwbGljYXRpb24gfSkgPT4ge1xuICAgIHBhdGNoKEFwcHMucHJvdG90eXBlLCBcImxpc3RcIilcbiAgICBwYXRjaChBcHBsaWNhdGlvbi5wcm90b3R5cGUsIFwia2V5d29yZHNcIilcbiAgICBwYXRjaChBcHBsaWNhdGlvbi5wcm90b3R5cGUsIFwiY2F0ZWdvcmllc1wiKVxufSlcblxuYXdhaXQgc3VwcHJlc3MoaW1wb3J0KFwiZ2k6Ly9Bc3RhbEJhdHRlcnlcIiksICh7IFVQb3dlciB9KSA9PiB7XG4gICAgcGF0Y2goVVBvd2VyLnByb3RvdHlwZSwgXCJkZXZpY2VzXCIpXG59KVxuXG5hd2FpdCBzdXBwcmVzcyhpbXBvcnQoXCJnaTovL0FzdGFsQmx1ZXRvb3RoXCIpLCAoeyBBZGFwdGVyLCBCbHVldG9vdGgsIERldmljZSB9KSA9PiB7XG4gICAgcGF0Y2goQWRhcHRlci5wcm90b3R5cGUsIFwidXVpZHNcIilcbiAgICBwYXRjaChCbHVldG9vdGgucHJvdG90eXBlLCBcImFkYXB0ZXJzXCIpXG4gICAgcGF0Y2goQmx1ZXRvb3RoLnByb3RvdHlwZSwgXCJkZXZpY2VzXCIpXG4gICAgcGF0Y2goRGV2aWNlLnByb3RvdHlwZSwgXCJ1dWlkc1wiKVxufSlcblxuYXdhaXQgc3VwcHJlc3MoaW1wb3J0KFwiZ2k6Ly9Bc3RhbEh5cHJsYW5kXCIpLCAoeyBIeXBybGFuZCwgTW9uaXRvciwgV29ya3NwYWNlIH0pID0+IHtcbiAgICBwYXRjaChIeXBybGFuZC5wcm90b3R5cGUsIFwiYmluZHNcIilcbiAgICBwYXRjaChIeXBybGFuZC5wcm90b3R5cGUsIFwibW9uaXRvcnNcIilcbiAgICBwYXRjaChIeXBybGFuZC5wcm90b3R5cGUsIFwid29ya3NwYWNlc1wiKVxuICAgIHBhdGNoKEh5cHJsYW5kLnByb3RvdHlwZSwgXCJjbGllbnRzXCIpXG4gICAgcGF0Y2goTW9uaXRvci5wcm90b3R5cGUsIFwiYXZhaWxhYmxlTW9kZXNcIilcbiAgICBwYXRjaChNb25pdG9yLnByb3RvdHlwZSwgXCJhdmFpbGFibGVfbW9kZXNcIilcbiAgICBwYXRjaChXb3Jrc3BhY2UucHJvdG90eXBlLCBcImNsaWVudHNcIilcbn0pXG5cbmF3YWl0IHN1cHByZXNzKGltcG9ydChcImdpOi8vQXN0YWxNcHJpc1wiKSwgKHsgTXByaXMsIFBsYXllciB9KSA9PiB7XG4gICAgcGF0Y2goTXByaXMucHJvdG90eXBlLCBcInBsYXllcnNcIilcbiAgICBwYXRjaChQbGF5ZXIucHJvdG90eXBlLCBcInN1cHBvcnRlZF91cmlfc2NoZW1lc1wiKVxuICAgIHBhdGNoKFBsYXllci5wcm90b3R5cGUsIFwic3VwcG9ydGVkVXJpU2NoZW1lc1wiKVxuICAgIHBhdGNoKFBsYXllci5wcm90b3R5cGUsIFwic3VwcG9ydGVkX21pbWVfdHlwZXNcIilcbiAgICBwYXRjaChQbGF5ZXIucHJvdG90eXBlLCBcInN1cHBvcnRlZE1pbWVUeXBlc1wiKVxuICAgIHBhdGNoKFBsYXllci5wcm90b3R5cGUsIFwiY29tbWVudHNcIilcbn0pXG5cbmF3YWl0IHN1cHByZXNzKGltcG9ydChcImdpOi8vQXN0YWxOZXR3b3JrXCIpLCAoeyBXaWZpIH0pID0+IHtcbiAgICBwYXRjaChXaWZpLnByb3RvdHlwZSwgXCJhY2Nlc3NfcG9pbnRzXCIpXG4gICAgcGF0Y2goV2lmaS5wcm90b3R5cGUsIFwiYWNjZXNzUG9pbnRzXCIpXG59KVxuXG5hd2FpdCBzdXBwcmVzcyhpbXBvcnQoXCJnaTovL0FzdGFsTm90aWZkXCIpLCAoeyBOb3RpZmQsIE5vdGlmaWNhdGlvbiB9KSA9PiB7XG4gICAgcGF0Y2goTm90aWZkLnByb3RvdHlwZSwgXCJub3RpZmljYXRpb25zXCIpXG4gICAgcGF0Y2goTm90aWZpY2F0aW9uLnByb3RvdHlwZSwgXCJhY3Rpb25zXCIpXG59KVxuXG5hd2FpdCBzdXBwcmVzcyhpbXBvcnQoXCJnaTovL0FzdGFsUG93ZXJQcm9maWxlc1wiKSwgKHsgUG93ZXJQcm9maWxlcyB9KSA9PiB7XG4gICAgcGF0Y2goUG93ZXJQcm9maWxlcy5wcm90b3R5cGUsIFwiYWN0aW9uc1wiKVxufSlcblxuYXdhaXQgc3VwcHJlc3MoaW1wb3J0KFwiZ2k6Ly9Bc3RhbFdwXCIpLCAoeyBXcCwgQXVkaW8sIFZpZGVvIH0pID0+IHtcbiAgICBwYXRjaChXcC5wcm90b3R5cGUsIFwiZW5kcG9pbnRzXCIpXG4gICAgcGF0Y2goV3AucHJvdG90eXBlLCBcImRldmljZXNcIilcbiAgICBwYXRjaChBdWRpby5wcm90b3R5cGUsIFwic3RyZWFtc1wiKVxuICAgIHBhdGNoKEF1ZGlvLnByb3RvdHlwZSwgXCJyZWNvcmRlcnNcIilcbiAgICBwYXRjaChBdWRpby5wcm90b3R5cGUsIFwibWljcm9waG9uZXNcIilcbiAgICBwYXRjaChBdWRpby5wcm90b3R5cGUsIFwic3BlYWtlcnNcIilcbiAgICBwYXRjaChBdWRpby5wcm90b3R5cGUsIFwiZGV2aWNlc1wiKVxuICAgIHBhdGNoKFZpZGVvLnByb3RvdHlwZSwgXCJzdHJlYW1zXCIpXG4gICAgcGF0Y2goVmlkZW8ucHJvdG90eXBlLCBcInJlY29yZGVyc1wiKVxuICAgIHBhdGNoKFZpZGVvLnByb3RvdHlwZSwgXCJzaW5rc1wiKVxuICAgIHBhdGNoKFZpZGVvLnByb3RvdHlwZSwgXCJzb3VyY2VzXCIpXG4gICAgcGF0Y2goVmlkZW8ucHJvdG90eXBlLCBcImRldmljZXNcIilcbn0pXG5cbmF3YWl0IHN1cHByZXNzKGltcG9ydChcImdpOi8vQXN0YWxUcmF5XCIpLCAoeyBUcmF5IH0pID0+IHtcbiAgICBwYXRjaChUcmF5LnByb3RvdHlwZSwgXCJpdGVtc1wiKVxufSlcbiIsICJpbXBvcnQgXCIuL292ZXJyaWRlcy5qc1wiXG5pbXBvcnQgeyBzZXRDb25zb2xlTG9nRG9tYWluIH0gZnJvbSBcImNvbnNvbGVcIlxuaW1wb3J0IHsgZXhpdCwgcHJvZ3JhbUFyZ3MgfSBmcm9tIFwic3lzdGVtXCJcbmltcG9ydCB7IGNyZWF0ZVJvb3QgfSBmcm9tIFwiLi4vZ25pbS9zcmMvanN4L3Njb3BlLmpzXCJcbmltcG9ydCBJTyBmcm9tIFwiZ2k6Ly9Bc3RhbElPXCJcbmltcG9ydCBHT2JqZWN0IGZyb20gXCJnaTovL0dPYmplY3RcIlxuaW1wb3J0IEdpbyBmcm9tIFwiZ2k6Ly9HaW8/dmVyc2lvbj0yLjBcIlxuaW1wb3J0IHR5cGUgQXN0YWwzIGZyb20gXCJnaTovL0FzdGFsP3ZlcnNpb249My4wXCJcbmltcG9ydCB0eXBlIEFzdGFsNCBmcm9tIFwiZ2k6Ly9Bc3RhbD92ZXJzaW9uPTQuMFwiXG5cbnR5cGUgQ29uZmlnID0gUGFydGlhbDx7XG4gICAgaW5zdGFuY2VOYW1lOiBzdHJpbmdcbiAgICBjc3M6IHN0cmluZ1xuICAgIGljb25zOiBzdHJpbmdcbiAgICBndGtUaGVtZTogc3RyaW5nXG4gICAgaWNvblRoZW1lOiBzdHJpbmdcbiAgICBjdXJzb3JUaGVtZTogc3RyaW5nXG4gICAgaG9sZDogYm9vbGVhblxuICAgIHJlcXVlc3RIYW5kbGVyKHJlcXVlc3Q6IHN0cmluZywgcmVzOiAocmVzcG9uc2U6IGFueSkgPT4gdm9pZCk6IHZvaWRcbiAgICBtYWluKC4uLmFyZ3M6IHN0cmluZ1tdKTogdm9pZFxuICAgIGNsaWVudChtZXNzYWdlOiAobXNnOiBzdHJpbmcpID0+IHN0cmluZywgLi4uYXJnczogc3RyaW5nW10pOiB2b2lkXG59PlxuXG5pbnRlcmZhY2UgQXN0YWwzSlMgZXh0ZW5kcyBBc3RhbDMuQXBwbGljYXRpb24ge1xuICAgIGV2YWwoYm9keTogc3RyaW5nKTogUHJvbWlzZTxhbnk+XG4gICAgcmVxdWVzdEhhbmRsZXI6IENvbmZpZ1tcInJlcXVlc3RIYW5kbGVyXCJdXG4gICAgYXBwbHlfY3NzKHN0eWxlOiBzdHJpbmcsIHJlc2V0PzogYm9vbGVhbik6IHZvaWRcbiAgICBxdWl0KGNvZGU/OiBudW1iZXIpOiB2b2lkXG4gICAgc3RhcnQoY29uZmlnPzogQ29uZmlnKTogdm9pZFxufVxuXG5pbnRlcmZhY2UgQXN0YWw0SlMgZXh0ZW5kcyBBc3RhbDQuQXBwbGljYXRpb24ge1xuICAgIGV2YWwoYm9keTogc3RyaW5nKTogUHJvbWlzZTxhbnk+XG4gICAgcmVxdWVzdEhhbmRsZXI/OiBDb25maWdbXCJyZXF1ZXN0SGFuZGxlclwiXVxuICAgIGFwcGx5X2NzcyhzdHlsZTogc3RyaW5nLCByZXNldD86IGJvb2xlYW4pOiB2b2lkXG4gICAgcXVpdChjb2RlPzogbnVtYmVyKTogdm9pZFxuICAgIHN0YXJ0KGNvbmZpZz86IENvbmZpZyk6IHZvaWRcbn1cblxudHlwZSBBcHAzID0gdHlwZW9mIEFzdGFsMy5BcHBsaWNhdGlvblxudHlwZSBBcHA0ID0gdHlwZW9mIEFzdGFsNC5BcHBsaWNhdGlvblxuXG5leHBvcnQgZnVuY3Rpb24gbWtBcHA8QXBwIGV4dGVuZHMgQXBwMz4oQXBwOiBBcHApOiBBc3RhbDNKU1xuZXhwb3J0IGZ1bmN0aW9uIG1rQXBwPEFwcCBleHRlbmRzIEFwcDQ+KEFwcDogQXBwKTogQXN0YWw0SlNcblxuZXhwb3J0IGZ1bmN0aW9uIG1rQXBwKEFwcDogQXBwMyB8IEFwcDQpIHtcbiAgICByZXR1cm4gbmV3IChjbGFzcyBBc3RhbEpTIGV4dGVuZHMgQXBwIHtcbiAgICAgICAgcHJpdmF0ZSBkaXNwb3NlUm9vdD86ICgpID0+IHZvaWRcblxuICAgICAgICBzdGF0aWMge1xuICAgICAgICAgICAgR09iamVjdC5yZWdpc3RlckNsYXNzKHsgR1R5cGVOYW1lOiBcIkFzdGFsSlNcIiB9LCB0aGlzIGFzIGFueSlcbiAgICAgICAgfVxuXG4gICAgICAgIGV2YWwoYm9keTogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzLCByZWopID0+IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBmbiA9IEZ1bmN0aW9uKGByZXR1cm4gKGFzeW5jIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJHtib2R5LmluY2x1ZGVzKFwiO1wiKSA/IGJvZHkgOiBgcmV0dXJuICR7Ym9keX07YH1cbiAgICAgICAgICAgICAgICAgICAgfSlgKVxuICAgICAgICAgICAgICAgICAgICBmbigpKCkudGhlbihyZXMpLmNhdGNoKHJlailcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICByZWooZXJyb3IpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIHJlcXVlc3RIYW5kbGVyPzogQ29uZmlnW1wicmVxdWVzdEhhbmRsZXJcIl1cblxuICAgICAgICB2ZnVuY19zaHV0ZG93bigpOiB2b2lkIHtcbiAgICAgICAgICAgIHN1cGVyLnZmdW5jX3NodXRkb3duKClcbiAgICAgICAgICAgIHRoaXMuZGlzcG9zZVJvb3Q/LigpXG4gICAgICAgIH1cblxuICAgICAgICB2ZnVuY19yZXF1ZXN0KG1zZzogc3RyaW5nLCBjb25uOiBHaW8uU29ja2V0Q29ubmVjdGlvbik6IHZvaWQge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnJlcXVlc3RIYW5kbGVyID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlcXVlc3RIYW5kbGVyKG1zZywgKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIElPLndyaXRlX3NvY2soY29ubiwgU3RyaW5nKHJlc3BvbnNlKSwgKF8sIHJlcykgPT4gSU8ud3JpdGVfc29ja19maW5pc2gocmVzKSlcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdXBlci52ZnVuY19yZXF1ZXN0KG1zZywgY29ubilcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGFwcGx5X2NzcyhzdHlsZTogc3RyaW5nLCByZXNldCA9IGZhbHNlKSB7XG4gICAgICAgICAgICBzdXBlci5hcHBseV9jc3Moc3R5bGUsIHJlc2V0KVxuICAgICAgICB9XG5cbiAgICAgICAgcXVpdChjb2RlPzogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgICAgICBzdXBlci5xdWl0KClcbiAgICAgICAgICAgIGV4aXQoY29kZSA/PyAwKVxuICAgICAgICB9XG5cbiAgICAgICAgc3RhcnQoeyByZXF1ZXN0SGFuZGxlciwgY3NzLCBob2xkLCBtYWluLCBjbGllbnQsIGljb25zLCAuLi5jZmcgfTogQ29uZmlnID0ge30pIHtcbiAgICAgICAgICAgIGNvbnN0IGFwcCA9IHRoaXMgYXMgdW5rbm93biBhcyBJbnN0YW5jZVR5cGU8QXBwMyB8IEFwcDQ+XG5cbiAgICAgICAgICAgIGNsaWVudCA/Pz0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIHByaW50KGBBc3RhbCBpbnN0YW5jZSBcIiR7YXBwLmluc3RhbmNlTmFtZX1cIiBhbHJlYWR5IHJ1bm5pbmdgKVxuICAgICAgICAgICAgICAgIGV4aXQoMSlcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCBjZmcpXG4gICAgICAgICAgICBzZXRDb25zb2xlTG9nRG9tYWluKGFwcC5pbnN0YW5jZU5hbWUpXG5cbiAgICAgICAgICAgIHRoaXMucmVxdWVzdEhhbmRsZXIgPSByZXF1ZXN0SGFuZGxlclxuICAgICAgICAgICAgYXBwLmNvbm5lY3QoXCJhY3RpdmF0ZVwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY3JlYXRlUm9vdCgoZGlzcG9zZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3Bvc2VSb290ID0gZGlzcG9zZVxuICAgICAgICAgICAgICAgICAgICBtYWluPy4oLi4ucHJvZ3JhbUFyZ3MpXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgYXBwLmFjcXVpcmVfc29ja2V0KClcbiAgICAgICAgICAgIH0gY2F0Y2gge1xuICAgICAgICAgICAgICAgIHJldHVybiBjbGllbnQoKG1zZykgPT4gSU8uc2VuZF9yZXF1ZXN0KGFwcC5pbnN0YW5jZU5hbWUsIG1zZykhLCAuLi5wcm9ncmFtQXJncylcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGNzcykgdGhpcy5hcHBseV9jc3MoY3NzLCBmYWxzZSlcblxuICAgICAgICAgICAgaWYgKGljb25zKSBhcHAuYWRkX2ljb25zKGljb25zKVxuXG4gICAgICAgICAgICBob2xkID8/PSB0cnVlXG4gICAgICAgICAgICBpZiAoaG9sZCkgYXBwLmhvbGQoKVxuXG4gICAgICAgICAgICBhcHAucnVuQXN5bmMoW10pXG4gICAgICAgIH1cbiAgICB9KSgpXG59XG4iLCAiZXhwb3J0IGNsYXNzIFNjb3BlIHtcbiAgICBzdGF0aWMgY3VycmVudD86IFNjb3BlIHwgbnVsbFxuXG4gICAgcGFyZW50PzogU2NvcGUgfCBudWxsXG4gICAgY29udGV4dHMgPSBuZXcgTWFwPENvbnRleHQsIHVua25vd24+KClcblxuICAgIHByaXZhdGUgY2xlYW51cHMgPSBuZXcgU2V0PCgpID0+IHZvaWQ+KClcbiAgICBwcml2YXRlIG1vdW50cyA9IG5ldyBTZXQ8KCkgPT4gdm9pZD4oKVxuICAgIHByaXZhdGUgbW91bnRlZCA9IGZhbHNlXG5cbiAgICBjb25zdHJ1Y3RvcihwYXJlbnQ/OiBTY29wZSB8IG51bGwpIHtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnRcbiAgICB9XG5cbiAgICBvbkNsZWFudXAoY2FsbGJhY2s6ICgpID0+IHZvaWQpIHtcbiAgICAgICAgdGhpcy5jbGVhbnVwcz8uYWRkKGNhbGxiYWNrKVxuICAgIH1cblxuICAgIG9uTW91bnQoY2FsbGJhY2s6ICgpID0+IHZvaWQpIHtcbiAgICAgICAgaWYgKHRoaXMucGFyZW50ICYmICF0aGlzLnBhcmVudC5tb3VudGVkKSB7XG4gICAgICAgICAgICB0aGlzLnBhcmVudC5vbk1vdW50KGNhbGxiYWNrKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5tb3VudHMuYWRkKGNhbGxiYWNrKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcnVuPFQ+KGZuOiAoKSA9PiBUKSB7XG4gICAgICAgIGNvbnN0IHByZXYgPSBTY29wZS5jdXJyZW50XG4gICAgICAgIFNjb3BlLmN1cnJlbnQgPSB0aGlzXG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBmbigpXG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICB0aGlzLm1vdW50cy5mb3JFYWNoKChjYikgPT4gY2IoKSlcbiAgICAgICAgICAgIHRoaXMubW91bnRzLmNsZWFyKClcbiAgICAgICAgICAgIHRoaXMubW91bnRlZCA9IHRydWVcbiAgICAgICAgICAgIFNjb3BlLmN1cnJlbnQgPSBwcmV2XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkaXNwb3NlKCkge1xuICAgICAgICB0aGlzLmNsZWFudXBzLmZvckVhY2goKGNiKSA9PiBjYigpKVxuICAgICAgICB0aGlzLmNsZWFudXBzLmNsZWFyKClcbiAgICAgICAgdGhpcy5jb250ZXh0cy5jbGVhcigpXG4gICAgICAgIGRlbGV0ZSB0aGlzLnBhcmVudFxuICAgIH1cbn1cblxuZXhwb3J0IHR5cGUgQ29udGV4dDxUID0gYW55PiA9IHtcbiAgICB1c2UoKTogVFxuICAgIHByb3ZpZGU8Uj4odmFsdWU6IFQsIGZuOiAoKSA9PiBSKTogUlxuICAgIChwcm9wczogeyB2YWx1ZTogVDsgY2hpbGRyZW46ICgpID0+IEpTWC5FbGVtZW50IH0pOiBKU1guRWxlbWVudFxufVxuXG4vKipcbiAqIEV4YW1wbGUgVXNhZ2U6XG4gKiBgYGB0c3hcbiAqIGNvbnN0IE15Q29udGV4dCA9IGNyZWF0ZUNvbnRleHQoXCJmYWxsYmFjay12YWx1ZVwiKVxuICpcbiAqIGZ1bmN0aW9uIENvbnN1bWVyQ29tcG9uZW50KCkge1xuICogICBjb25zdCB2YWx1ZSA9IE15Q29udGV4dC51c2UoKVxuICpcbiAqICAgcmV0dXJuIDxHdGsuTGFiZWwgbGFiZWw9e3ZhbHVlfSAvPlxuICogfVxuICpcbiAqIGZ1bmN0aW9uIFByb3ZpZGVyQ29tcG9uZW50KCkge1xuICogICByZXR1cm4gKFxuICogICAgIDxHdGsuQm94PlxuICogICAgICAgPE15Q29udGV4dCB2YWx1ZT1cIm15LXZhbHVlXCI+XG4gKiAgICAgICAgIHsoKSA9PiA8Q29uc3VtZXJDb21wb25lbnQgLz59XG4gKiAgICAgICA8L015Q29udGV4dD5cbiAqICAgICA8L0d0ay5Cb3g+XG4gKiAgIClcbiAqIH1cbiAqIGBgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ29udGV4dDxUPihkZWZhdWx0VmFsdWU6IFQpOiBDb250ZXh0PFQ+IHtcbiAgICBsZXQgY3R4OiBDb250ZXh0PFQ+XG5cbiAgICBmdW5jdGlvbiBwcm92aWRlPFI+KHZhbHVlOiBULCBmbjogKCkgPT4gUik6IFIge1xuICAgICAgICBjb25zdCBzY29wZSA9IGdldFNjb3BlKClcbiAgICAgICAgc2NvcGUuY29udGV4dHMuc2V0KGN0eCwgdmFsdWUpXG4gICAgICAgIHJldHVybiBzY29wZS5ydW4oZm4pXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdXNlKCk6IFQge1xuICAgICAgICBsZXQgc2NvcGUgPSBTY29wZS5jdXJyZW50XG4gICAgICAgIHdoaWxlIChzY29wZSkge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBzY29wZS5jb250ZXh0cy5nZXQoY3R4KVxuICAgICAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHJldHVybiB2YWx1ZSBhcyBUXG4gICAgICAgICAgICBzY29wZSA9IHNjb3BlLnBhcmVudFxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWVcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb250ZXh0KHsgdmFsdWUsIGNoaWxkcmVuIH06IHsgdmFsdWU6IFQ7IGNoaWxkcmVuOiAoKSA9PiBKU1guRWxlbWVudCB9KSB7XG4gICAgICAgIHJldHVybiBwcm92aWRlKHZhbHVlLCBjaGlsZHJlbilcbiAgICB9XG5cbiAgICByZXR1cm4gKGN0eCA9IE9iamVjdC5hc3NpZ24oY29udGV4dCwge1xuICAgICAgICBwcm92aWRlLFxuICAgICAgICB1c2UsXG4gICAgfSkpXG59XG5cbi8qKlxuICogR2V0cyB0aGUgc2NvcGUgdGhhdCBvd25zIHRoZSBjdXJyZW50bHkgcnVubmluZyBjb2RlLlxuICpcbiAqIEV4YW1wbGU6XG4gKiBgYGB0c1xuICogY29uc3Qgc2NvcGUgPSBnZXRTY29wZSgpXG4gKiBzZXRUaW1lb3V0KCgpID0+IHtcbiAqICAgLy8gVGhpcyBjYWxsYmFjayBnZXRzIHJ1biB3aXRob3V0IGFuIG93bmVyIHNjb3BlLlxuICogICAvLyBSZXN0b3JlIG93bmVyIHZpYSBzY29wZS5ydW46XG4gKiAgIHNjb3BlLnJ1bigoKSA9PiB7XG4gKiAgICAgY29uc3QgZm9vID0gRm9vQ29udGV4dC51c2UoKVxuICogICAgIG9uQ2xlYW51cCgoKSA9PiB7XG4gKiAgICAgICBwcmludChcInNvbWUgY2xlYW51cFwiKVxuICogICAgIH0pXG4gKiAgIH0pXG4gKiB9LCAxMDAwKVxuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRTY29wZSgpOiBTY29wZSB7XG4gICAgY29uc3Qgc2NvcGUgPSBTY29wZS5jdXJyZW50XG4gICAgaWYgKCFzY29wZSkge1xuICAgICAgICB0aHJvdyBFcnJvcihcImNhbm5vdCBnZXQgc2NvcGU6IG91dCBvZiB0cmFja2luZyBjb250ZXh0XCIpXG4gICAgfVxuXG4gICAgcmV0dXJuIHNjb3BlXG59XG5cbi8qKlxuICogQXR0YWNoIGEgY2xlYW51cCBjYWxsYmFjayB0byB0aGUgY3VycmVudCB7QGxpbmsgU2NvcGV9LlxuICovXG5leHBvcnQgZnVuY3Rpb24gb25DbGVhbnVwKGNsZWFudXA6ICgpID0+IHZvaWQpIHtcbiAgICBpZiAoIVNjb3BlLmN1cnJlbnQpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihFcnJvcihcIm91dCBvZiB0cmFja2luZyBjb250ZXh0OiB3aWxsIG5vdCBiZSBhYmxlIHRvIGNsZWFudXBcIikpXG4gICAgfVxuXG4gICAgU2NvcGUuY3VycmVudD8ub25DbGVhbnVwKGNsZWFudXApXG59XG5cbi8qKlxuICogQXR0YWNoIGEgY2FsbGJhY2sgdG8gcnVuIHdoZW4gdGhlIGN1cnJlbnRseSBydW5uaW5nIHtAbGluayBTY29wZX0gcmV0dXJucy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG9uTW91bnQoY2xlYW51cDogKCkgPT4gdm9pZCkge1xuICAgIGlmICghU2NvcGUuY3VycmVudCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKEVycm9yKFwiY2Fubm90IGF0dGFjaCBvbk1vdW50OiBvdXQgb2YgdHJhY2tpbmcgY29udGV4dFwiKSlcbiAgICB9XG5cbiAgICBTY29wZS5jdXJyZW50Py5vbk1vdW50KGNsZWFudXApXG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHJvb3Qge0BsaW5rIFNjb3BlfSB0aGF0IHdoZW4gZGlzcG9zZWQgd2lsbCByZW1vdmVcbiAqIGFueSBjaGlsZCBzaWduYWwgaGFuZGxlciBvciBzdGF0ZSBzdWJzY3JpYmVyLlxuICpcbiAqIEV4YW1wbGU6XG4gKiBgYGB0c3hcbiAqIGNyZWF0ZVJvb3QoKGRpc3Bvc2UpID0+IHtcbiAqICAgbGV0IHJvb3Q6IEd0ay5XaW5kb3dcbiAqXG4gKiAgIGNvbnN0IFtzdGF0ZV0gPSBjcmVhdGVTdGF0ZShcInZhbHVlXCIpXG4gKlxuICogICBjb25zdCByZW1vdmUgPSAoKSA9PiB7XG4gKiAgICAgcm9vdC5kZXN0cm95KClcbiAqICAgICBkaXNwb3NlKClcbiAqICAgfVxuICpcbiAqICAgcmV0dXJuIChcbiAqICAgICA8R3RrLldpbmRvdyAkPXsoc2VsZikgPT4gKHJvb3QgPSBzZWxmKX0+XG4gKiAgICAgICA8R3RrLkJveD5cbiAqICAgICAgICAgPEd0ay5MYWJlbCBsYWJlbD17c3RhdGV9IC8+XG4gKiAgICAgICAgIDxHdGsuQnV0dG9uICRjbGlja2VkPXtyZW1vdmV9IC8+XG4gKiAgICAgICA8L0d0ay5Cb3g+XG4gKiAgICAgPC9HdGsuV2luZG93PlxuICogICApXG4gKiB9KVxuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVSb290PFQ+KGZuOiAoZGlzcG9zZTogKCkgPT4gdm9pZCkgPT4gVCkge1xuICAgIGNvbnN0IHNjb3BlID0gbmV3IFNjb3BlKG51bGwpXG4gICAgcmV0dXJuIHNjb3BlLnJ1bigoKSA9PiBmbigoKSA9PiBzY29wZS5kaXNwb3NlKCkpKVxufVxuIiwgImJ1dHRvbiB7XG4gIHRyYW5zaXRpb24tZHVyYXRpb246IDIwMG1zO1xufVxuYnV0dG9uLmNpcmN1bGFyIHtcbiAgYm9yZGVyLXJhZGl1czogOTk5cHg7XG59XG5idXR0b24gbGFiZWwge1xuICBjb2xvcjogQHRoZW1lX2ZnX2NvbG9yO1xufVxuXG5jYWxlbmRhci52aWV3IC5kYXktbmFtZSB7XG4gIHRleHQtdHJhbnNmb3JtOiBjYXBpdGFsaXplO1xufVxuXG53aW5kb3cuQmFyIHtcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG4gIGNvbG9yOiBAdGhlbWVfZmdfY29sb3I7XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xufVxud2luZG93LkJhciBjZW50ZXJib3gge1xuICBiYWNrZ3JvdW5kOiBAdGhlbWVfYmdfY29sb3I7XG4gIHBhZGRpbmctdG9wOiA4cHg7XG4gIHBhZGRpbmctYm90dG9tOiA4cHg7XG4gIHBhZGRpbmctbGVmdDogMTZweDtcbiAgcGFkZGluZy1yaWdodDogMTZweDtcbn1cbndpbmRvdy5CYXIgYnV0dG9uIHtcbiAgYm9yZGVyOiBub25lO1xufVxuXG4uVGVzdFJhZGl1c0xlZnQge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogMjVweDtcbiAgYm94LXNoYWRvdzogLTEwcHggLTVweCAwIDAgcmVkO1xuICBib3JkZXI6IG5vbmU7XG4gIG1hcmdpbi1sZWZ0OiAxMHB4O1xufVxuXG4uVGVzdFJhZGl1c1JpZ2h0IHtcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAyNXB4O1xuICBib3gtc2hhZG93OiAxMHB4IC01cHggMCAwIEB0aGVtZV9iZ19jb2xvcjtcbiAgYm9yZGVyOiBub25lO1xufVxuXG4uRGFzaGJvYXJkVGFiIHtcbiAgcGFkZGluZzogOHB4O1xufVxuXG4uRGFzaGJvYXJkVGFiSG91ckFuZE1pbnV0ZSB7XG4gIGZvbnQtc2l6ZTogNDBweDtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG59XG5cbi5EYXNoYm9hcmRUYWJEYXRlIHtcbiAgY29sb3I6IEB0aGVtZV9zZWxlY3RlZF9iZ19jb2xvcjtcbiAgZm9udC13ZWlnaHQ6IGJvbGRlcjtcbn1cblxuLkRhc2hib2FyZEJveCB7XG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXBvcG92ZXItc2hhZGUtY29sb3IpO1xuICBwYWRkaW5nOiA4cHg7XG4gIGJvcmRlci1yYWRpdXM6IDhweDtcbiAgY29sb3I6IEB0aGVtZV9zZWxlY3RlZF9mZ19jb2xvcjtcbn1cbi5EYXNoYm9hcmRCb3guZXh0cmFQYWRkaW5nIHtcbiAgcGFkZGluZy1sZWZ0OiAxNnB4O1xuICBwYWRkaW5nLXJpZ2h0OiAxNnB4O1xufVxuLkRhc2hib2FyZEJveCBjYWxlbmRhci52aWV3IHtcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gIGJvcmRlcjogbm9uZTtcbn1cblxuLkRhc2hib2FyZFRhYlN5c0luZm9MYWJlbCB7XG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG4gIHRleHQtdHJhbnNmb3JtOiBjYXBpdGFsaXplO1xufVxuXG4uV2FsbHBhcGVySW1nQnV0dG9uQ29udGFpbmVyIHtcbiAgb3BhY2l0eTogMDtcbiAgdHJhbnNpdGlvbjogb3BhY2l0eSAyMDBtcyBlYXNlLWluLW91dDtcbiAgYm9yZGVyLXJhZGl1czogOTk5cHg7XG59XG5cbi5XYWxscGFwZXJJbWdCdXR0b25Db250YWluZXI6aG92ZXIge1xuICBvcGFjaXR5OiAxO1xufVxuXG4uTm90aWZpY2F0aW9uV2luZG93IHtcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG4gIG1hcmdpbi1yaWdodDogMThweDtcbiAgbWFyZ2luLXRvcDogMjBweDtcbn1cblxuLk5vdGlmaWNhdGlvbldpbmRvd05vdGlmaWNhdGlvbkl0ZW0ge1xuICBiYWNrZ3JvdW5kOiBAdGhlbWVfYmdfY29sb3I7XG4gIHBhZGRpbmc6IDhweCA0cHggOHB4IDhweDtcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xufVxuXG4uTm90aWZpY2F0aW9uV2luZG93Tm90aWZpY2F0aW9uSXRlbVN1bW1hcnkge1xuICBmb250LXdlaWdodDogYm9sZDtcbiAgZm9udC1zaXplOiAyMDtcbn1cblxuLk1lZGlhUGxheWVyQmFycyB7XG4gIGNvbG9yOiBAdGhlbWVfc2VsZWN0ZWRfYmdfY29sb3I7XG59XG5cbi5NZWRpYVBsYXllclNvbmdMYWJlbCB7XG4gIGNvbG9yOiBAdGhlbWVfc2VsZWN0ZWRfYmdfY29sb3I7XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xufVxuXG4uRW5kZWF2b3VyT3NJY29uIHtcbiAgY29sb3I6ICM3ZTNlYmU7XG59XG5cbi5IeXByTGFuZEljb24ge1xuICBjb2xvcjogIzAwZTJkMTtcbn1cblxuLlVwdGltZUljb24ge1xuICBjb2xvcjogQHRoZW1lX3NlbGVjdGVkX2JnX2NvbG9yO1xufVxuXG4uVHJheVJvdyB7XG4gIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXBvcG92ZXItc2hhZGUtY29sb3IpO1xuICBib3JkZXItcmFkaXVzOiA4cHg7XG59XG5cbi5Xb3Jrc3BhY2VzIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogQHRoZW1lX2JnX2NvbG9yO1xuICBib3JkZXItcmFkaXVzOiA4cHg7XG59XG5cbi5Xb3Jrc3BhY2VJdGVtLmdyb3VwIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tcG9wb3Zlci1zaGFkZS1jb2xvcik7XG4gIGJvcmRlci1yYWRpdXM6IDk5OXB4O1xufVxuXG4uV29ya3NwYWNlQ2xpZW50SXRlbSB7XG4gIGJvcmRlci1yYWRpdXM6IDk5OXB4O1xufVxuLldvcmtzcGFjZUNsaWVudEl0ZW0uZm9jdXNlZCB7XG4gIGJhY2tncm91bmQtY29sb3I6IEB0aGVtZV9zZWxlY3RlZF9iZ19jb2xvcjtcbiAgYm9yZGVyLXJhZGl1czogOTk5cHg7XG59XG5cbi5NYWluU2VhcmNoV2luZG93IHtcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG59XG5cbi5NYWluU2VhcmNoIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogQHRoZW1lX2JnX2NvbG9yO1xuICBwYWRkaW5nOiA4cHg7XG4gIGJvcmRlci1yYWRpdXM6IDhweDtcbiAgbWFyZ2luLWJvdHRvbTogMjBweDtcbiAgYm94LXNoYWRvdzogcmdiYSgwLCAwLCAwLCAwLjEpIDBweCAxcHggM3B4IDBweCwgcmdiYSgwLCAwLCAwLCAwLjA2KSAwcHggMXB4IDJweCAwcHg7XG4gIGJvcmRlcjogMnB4IHNvbGlkIHZhcigtLXBvcG92ZXItc2hhZGUtY29sb3IpO1xufVxuLk1haW5TZWFyY2guaGlkZSB7XG4gIG1hcmdpbi1ib3R0b206IDA7XG59XG4uTWFpblNlYXJjaCBzY3JvbGxlZHdpbmRvdyB7XG4gIGJhY2tncm91bmQtY29sb3I6IEB0aGVtZV9iZ19jb2xvcjtcbn1cbi5NYWluU2VhcmNoIGVudHJ5IHtcbiAgbWFyZ2luLXRvcDogOHB4O1xufVxuLk1haW5TZWFyY2ggbGlzdHZpZXcge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiBAdGhlbWVfYmdfY29sb3I7XG4gIGJvcmRlci1yYWRpdXM6IDhweDtcbn1cbi5NYWluU2VhcmNoIGxpc3R2aWV3IHJvdyB7XG4gIGJvcmRlci1yYWRpdXM6IDk5OXB4O1xuICBwYWRkaW5nLWxlZnQ6IDEycHg7XG4gIHBhZGRpbmctdG9wOiA4cHg7XG4gIHBhZGRpbmctYm90dG9tOiA4cHg7XG59XG5cbi51bnN0eWxlZE1lbnVCdXR0b24gYnV0dG9uIHtcbiAgYWxsOiB1bnNldDtcbn1cblxuLkxvZ291dFBhbmVsV2luZG93IHtcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tcG9wb3Zlci1zaGFkZS1jb2xvcik7XG59XG5cbi5Mb2dvdXRGbG93Qm94IGZsb3dib3hjaGlsZCB7XG4gIGJhY2tncm91bmQtY29sb3I6IEB0aGVtZV9iZ19jb2xvcjtcbiAgcGFkZGluZzogMzJweDtcbiAgdHJhbnNpdGlvbjogYm9yZGVyLXJhZGl1cyAyMDBtcyBlYXNlLWluLW91dDtcbn1cbi5Mb2dvdXRGbG93Qm94IGZsb3dib3hjaGlsZDpzZWxlY3RlZCB7XG4gIGJhY2tncm91bmQtY29sb3I6IEB0aGVtZV9zZWxlY3RlZF9iZ19jb2xvcjtcbiAgY29sb3I6IEB0aGVtZV9zZWxlY3RlZF9mZ19jb2xvcjtcbiAgYm9yZGVyLXJhZGl1czogOTk5cHg7XG59XG5cbi5Mb2dvdXRQYW5lbHdpbmRvd0xhYmVsIHtcbiAgZm9udC1zaXplOiAxNnB4O1xuICBmb250LXdlaWdodDogYm9sZDtcbn1cblxuLkNvbnRyb2xQYW5lbEFjdGl2ZUljb24ge1xuICBjb2xvcjogQHRoZW1lX3NlbGVjdGVkX2JnX2NvbG9yO1xufSIsICJpbXBvcnQgR09iamVjdCBmcm9tIFwiZ2k6Ly9HT2JqZWN0XCJcbmltcG9ydCB7IEZyYWdtZW50IH0gZnJvbSBcIi4vRnJhZ21lbnQuanNcIlxuaW1wb3J0IHsgQWNjZXNzb3IgfSBmcm9tIFwiLi9zdGF0ZS5qc1wiXG5pbXBvcnQgeyBDQywgRkMsIGVudiB9IGZyb20gXCIuL2Vudi5qc1wiXG5pbXBvcnQgeyBrZWJhYmlmeSwgUGFzY2FsaWZ5LCBzZXQgfSBmcm9tIFwiLi4vdXRpbC5qc1wiXG5pbXBvcnQgeyBvbkNsZWFudXAgfSBmcm9tIFwiLi9zY29wZS5qc1wiXG5cbi8qKlxuICogUmVwcmVzZW50cyBhbGwgb2YgdGhlIHRoaW5ncyB0aGF0IGNhbiBiZSBwYXNzZWQgYXMgYSBjaGlsZCB0byBjbGFzcyBjb21wb25lbnRzLlxuICovXG5leHBvcnQgdHlwZSBOb2RlID1cbiAgICB8IEFycmF5PEdPYmplY3QuT2JqZWN0PlxuICAgIHwgR09iamVjdC5PYmplY3RcbiAgICB8IG51bWJlclxuICAgIHwgc3RyaW5nXG4gICAgfCBib29sZWFuXG4gICAgfCBudWxsXG4gICAgfCB1bmRlZmluZWRcblxuZXhwb3J0IGNvbnN0IGd0a1R5cGUgPSBTeW1ib2woXCJndGsgYnVpbGRlciB0eXBlXCIpXG5cbi8qKlxuICogR2V0IHRoZSB0eXBlIG9mIHRoZSBvYmplY3Qgc3BlY2lmaWVkIHRocm91Z2ggdGhlIGAkdHlwZWAgcHJvcGVydHlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFR5cGUob2JqZWN0OiBHT2JqZWN0Lk9iamVjdCkge1xuICAgIHJldHVybiBndGtUeXBlIGluIG9iamVjdCA/IChvYmplY3RbZ3RrVHlwZV0gYXMgc3RyaW5nKSA6IG51bGxcbn1cblxuLyoqXG4gKiBGdW5jdGlvbiBDb21wb25lbnQgUHJvcGVydGllc1xuICovXG5leHBvcnQgdHlwZSBGQ1Byb3BzPFNlbGYsIFByb3BzPiA9IFByb3BzICYge1xuICAgIC8qKlxuICAgICAqIEd0ay5CdWlsZGVyIHR5cGVcbiAgICAgKiBpdHMgY29uc3VtZWQgaW50ZXJuYWxseSBhbmQgbm90IGFjdHVhbGx5IHBhc3NlZCBhcyBhIHBhcmFtZXRlcnNcbiAgICAgKi9cbiAgICAkdHlwZT86IHN0cmluZ1xuICAgIC8qKlxuICAgICAqIHNldHVwIGZ1bmN0aW9uXG4gICAgICogaXRzIGNvbnN1bWVkIGludGVybmFsbHkgYW5kIG5vdCBhY3R1YWxseSBwYXNzZWQgYXMgYSBwYXJhbWV0ZXJzXG4gICAgICovXG4gICAgJD8oc2VsZjogU2VsZik6IHZvaWRcbn1cblxuLyoqXG4gKiBDbGFzcyBDb21wb25lbnQgUHJvcGVydGllc1xuICovXG5leHBvcnQgdHlwZSBDQ1Byb3BzPFNlbGYgZXh0ZW5kcyBHT2JqZWN0Lk9iamVjdCwgUHJvcHM+ID0ge1xuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbCBjaGlsZHJlbiBlbGVtZW50c1xuICAgICAqIGl0cyBjb25zdW1lZCBpbnRlcm5hbGx5IGFuZCBub3QgYWN0dWFsbHkgcGFzc2VkIHRvIGNsYXNzIGNvbXBvbmVudCBjb25zdHJ1Y3RvcnNcbiAgICAgKi9cbiAgICBjaGlsZHJlbj86IEFycmF5PE5vZGU+IHwgTm9kZVxuICAgIC8qKlxuICAgICAqIEd0ay5CdWlsZGVyIHR5cGVcbiAgICAgKiBpdHMgY29uc3VtZWQgaW50ZXJuYWxseSBhbmQgbm90IGFjdHVhbGx5IHBhc3NlZCB0byBjbGFzcyBjb21wb25lbnQgY29uc3RydWN0b3JzXG4gICAgICovXG4gICAgJHR5cGU/OiBzdHJpbmdcbiAgICAvKipcbiAgICAgKiBmdW5jdGlvbiB0byB1c2UgYXMgYSBjb25zdHJ1Y3RvcixcbiAgICAgKiBpdHMgY29uc3VtZWQgaW50ZXJuYWxseSBhbmQgbm90IGFjdHVhbGx5IHBhc3NlZCB0byBjbGFzcyBjb21wb25lbnQgY29uc3RydWN0b3JzXG4gICAgICovXG4gICAgJGNvbnN0cnVjdG9yPyhwcm9wczogUGFydGlhbDxQcm9wcz4pOiBTZWxmXG4gICAgLyoqXG4gICAgICogc2V0dXAgZnVuY3Rpb24sXG4gICAgICogaXRzIGNvbnN1bWVkIGludGVybmFsbHkgYW5kIG5vdCBhY3R1YWxseSBwYXNzZWQgdG8gY2xhc3MgY29tcG9uZW50IGNvbnN0cnVjdG9yc1xuICAgICAqL1xuICAgICQ/KHNlbGY6IFNlbGYpOiB2b2lkXG4gICAgLyoqXG4gICAgICogQ1NTIGNsYXNzIG5hbWVzXG4gICAgICovXG4gICAgY2xhc3M/OiBzdHJpbmcgfCBBY2Nlc3NvcjxzdHJpbmc+XG4gICAgLyoqXG4gICAgICogaW5saW5lIENTU1xuICAgICAqL1xuICAgIGNzcz86IHN0cmluZyB8IEFjY2Vzc29yPHN0cmluZz5cbn0gJiB7XG4gICAgW0sgaW4ga2V5b2YgUHJvcHNdOiBBY2Nlc3NvcjxOb25OdWxsYWJsZTxQcm9wc1tLXT4+IHwgUHJvcHNbS11cbn0gJiB7XG4gICAgW1MgaW4ga2V5b2YgU2VsZltcIiRzaWduYWxzXCJdIGFzIFMgZXh0ZW5kcyBgbm90aWZ5Ojoke2luZmVyIFB9YFxuICAgICAgICA/IGBvbk5vdGlmeSR7UGFzY2FsaWZ5PFA+fWBcbiAgICAgICAgOiBTIGV4dGVuZHMgc3RyaW5nXG4gICAgICAgICAgPyBgb24ke1Bhc2NhbGlmeTxTPn1gXG4gICAgICAgICAgOiBuZXZlcl0/OiBHT2JqZWN0LlNpZ25hbENhbGxiYWNrPFNlbGYsIFNlbGZbXCIkc2lnbmFsc1wiXVtTXT5cbn1cblxuLy8gcHJldHRpZXItaWdub3JlXG50eXBlIEpzeFByb3BzPEMsIFByb3BzPiA9XG4gICAgQyBleHRlbmRzIHR5cGVvZiBGcmFnbWVudCA/IChQcm9wcyAmIHt9KVxuICAgIC8vIGludHJpbnNpY0VsZW1lbnRzIGFsd2F5cyByZXNvbHZlIGFzIEZDXG4gICAgLy8gc28gd2UgY2FuJ3QgbmFycm93IGl0IGRvd24sIGFuZCBpbiBzb21lIGNhc2VzXG4gICAgLy8gdGhlIHNldHVwIGZ1bmN0aW9uIGlzIHR5cGVkIGFzIGEgdW5pb24gb2YgT2JqZWN0IGFuZCBhY3R1YWwgdHlwZVxuICAgIC8vIGFzIGEgZml4IHVzZXJzIGNhbiBhbmQgc2hvdWxkIHVzZSBGQ1Byb3BzXG4gICAgOiBDIGV4dGVuZHMgRkMgPyBQcm9wcyAmIE9taXQ8RkNQcm9wczxSZXR1cm5UeXBlPEM+LCBQcm9wcz4sIFwiJFwiPlxuICAgIDogQyBleHRlbmRzIENDID8gQ0NQcm9wczxJbnN0YW5jZVR5cGU8Qz4sIFByb3BzPlxuICAgIDogbmV2ZXJcblxuZnVuY3Rpb24gaXNHT2JqZWN0Q3RvcihjdG9yOiBhbnkpOiBjdG9yIGlzIENDIHtcbiAgICByZXR1cm4gY3Rvci5wcm90b3R5cGUgaW5zdGFuY2VvZiBHT2JqZWN0Lk9iamVjdFxufVxuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uQ3RvcihjdG9yOiBhbnkpOiBjdG9yIGlzIEZDIHtcbiAgICByZXR1cm4gdHlwZW9mIGN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiAhaXNHT2JqZWN0Q3RvcihjdG9yKVxufVxuXG4vKiogQGludGVybmFsICovXG5leHBvcnQgZnVuY3Rpb24gc2V0VHlwZShvYmplY3Q6IG9iamVjdCwgdHlwZTogc3RyaW5nKSB7XG4gICAgaWYgKGd0a1R5cGUgaW4gb2JqZWN0ICYmIG9iamVjdFtndGtUeXBlXSAhPT0gXCJcIikge1xuICAgICAgICBjb25zb2xlLndhcm4oYHR5cGUgb3ZlcnJpZGVuIGZyb20gJHtvYmplY3RbZ3RrVHlwZV19IHRvICR7dHlwZX0gb24gJHtvYmplY3R9YClcbiAgICB9XG5cbiAgICBPYmplY3QuYXNzaWduKG9iamVjdCwgeyBbZ3RrVHlwZV06IHR5cGUgfSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGpzeDxUIGV4dGVuZHMgKHByb3BzOiBhbnkpID0+IEdPYmplY3QuT2JqZWN0PihcbiAgICBjdG9yOiBULFxuICAgIHByb3BzOiBKc3hQcm9wczxULCBQYXJhbWV0ZXJzPFQ+WzBdPixcbik6IFJldHVyblR5cGU8VD5cblxuZXhwb3J0IGZ1bmN0aW9uIGpzeDxUIGV4dGVuZHMgbmV3IChwcm9wczogYW55KSA9PiBHT2JqZWN0Lk9iamVjdD4oXG4gICAgY3RvcjogVCxcbiAgICBwcm9wczogSnN4UHJvcHM8VCwgQ29uc3RydWN0b3JQYXJhbWV0ZXJzPFQ+WzBdPixcbik6IEluc3RhbmNlVHlwZTxUPlxuXG5leHBvcnQgZnVuY3Rpb24ganN4PFQgZXh0ZW5kcyBHT2JqZWN0Lk9iamVjdD4oXG4gICAgY3Rvcjoga2V5b2YgKHR5cGVvZiBlbnYpW1wiaW50cmluc2ljRWxlbWVudHNcIl0gfCAobmV3IChwcm9wczogYW55KSA9PiBUKSB8ICgocHJvcHM6IGFueSkgPT4gVCksXG4gICAgaW5wcm9wczogYW55LFxuICAgIC8vIGtleSBpcyBhIHNwZWNpYWwgcHJvcCBpbiBqc3ggd2hpY2ggaXMgcGFzc2VkIGFzIGEgdGhpcmQgYXJndW1lbnQgYW5kIG5vdCBpbiBwcm9wc1xuICAgIGtleT86IHN0cmluZyxcbik6IFQge1xuICAgIGNvbnN0IHsgJCwgJHR5cGUsICRjb25zdHJ1Y3RvciwgY2hpbGRyZW4gPSBbXSwgLi4ucmVzdCB9ID0gaW5wcm9wcyBhcyBDQ1Byb3BzPFQsIGFueT5cbiAgICBjb25zdCBwcm9wcyA9IHJlc3QgYXMgUmVjb3JkPHN0cmluZywgYW55PlxuXG4gICAgaWYgKGtleSkgT2JqZWN0LmFzc2lnbihwcm9wcywgeyBrZXkgfSlcbiAgICBlbnYuaW5pdFByb3BzKHByb3BzKVxuXG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMocHJvcHMpKSB7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSBkZWxldGUgcHJvcHNba2V5XVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgY3RvciA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBpZiAoY3RvciBpbiBlbnYuaW50cmluc2ljRWxlbWVudHMpIHtcbiAgICAgICAgICAgIGN0b3IgPSBlbnYuaW50cmluc2ljRWxlbWVudHNbY3Rvcl0gYXMgRkM8VD4gfCBDQzxUPlxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoYHVua25vd24gaW50cmluc2ljIGVsZW1lbnQgXCIke2N0b3J9XCJgKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGlzRnVuY3Rpb25DdG9yKGN0b3IpKSB7XG4gICAgICAgIGNvbnN0IG9iamVjdCA9IGN0b3IoeyBjaGlsZHJlbiwgLi4ucHJvcHMgfSlcbiAgICAgICAgaWYgKCR0eXBlKSBzZXRUeXBlKG9iamVjdCwgJHR5cGUpXG4gICAgICAgICQ/LihvYmplY3QpXG4gICAgICAgIHJldHVybiBvYmplY3RcbiAgICB9XG5cbiAgICAvLyBjb2xsZWN0IGNzcyBhbmQgY2xhc3NOYW1lXG4gICAgY29uc3QgeyBjc3MsIGNsYXNzOiBjbGFzc05hbWUgfSA9IHByb3BzXG4gICAgZGVsZXRlIHByb3BzLmNzc1xuICAgIGRlbGV0ZSBwcm9wcy5jbGFzc1xuXG4gICAgY29uc3Qgc2lnbmFsczogQXJyYXk8W3N0cmluZywgKC4uLnByb3BzOiB1bmtub3duW10pID0+IHVua25vd25dPiA9IFtdXG4gICAgY29uc3QgYmluZGluZ3M6IEFycmF5PFtzdHJpbmcsIEFjY2Vzc29yPHVua25vd24+XT4gPSBbXVxuXG4gICAgLy8gY29sbGVjdCBzaWduYWxzIGFuZCBiaW5kaW5nc1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHByb3BzKSkge1xuICAgICAgICBpZiAoa2V5LnN0YXJ0c1dpdGgoXCJvblwiKSkge1xuICAgICAgICAgICAgc2lnbmFscy5wdXNoKFtrZXkuc2xpY2UoMiksIHZhbHVlIGFzICgpID0+IHVua25vd25dKVxuICAgICAgICAgICAgZGVsZXRlIHByb3BzW2tleV1cbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBBY2Nlc3Nvcikge1xuICAgICAgICAgICAgYmluZGluZ3MucHVzaChba2V5LCB2YWx1ZV0pXG4gICAgICAgICAgICBwcm9wc1trZXldID0gdmFsdWUuZ2V0KClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGNvbnN0cnVjdFxuICAgIGNvbnN0IG9iamVjdCA9ICRjb25zdHJ1Y3RvciA/ICRjb25zdHJ1Y3Rvcihwcm9wcykgOiBuZXcgKGN0b3IgYXMgQ0M8VD4pKHByb3BzKVxuICAgIGlmICgkY29uc3RydWN0b3IpIE9iamVjdC5hc3NpZ24ob2JqZWN0LCBwcm9wcylcbiAgICBpZiAoJHR5cGUpIHNldFR5cGUob2JqZWN0LCAkdHlwZSlcblxuICAgIGlmIChjc3MpIGVudi5zZXRDc3Mob2JqZWN0LCBjc3MpXG4gICAgaWYgKGNsYXNzTmFtZSkgZW52LnNldENsYXNzKG9iamVjdCwgY2xhc3NOYW1lKVxuXG4gICAgLy8gYWRkIGNoaWxkcmVuXG4gICAgZm9yIChjb25zdCBjaGlsZCBvZiBBcnJheS5pc0FycmF5KGNoaWxkcmVuKSA/IGNoaWxkcmVuIDogW2NoaWxkcmVuXSkge1xuICAgICAgICBpZiAoY2hpbGQgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIlRyeWluZyB0byBhZGQgYm9vbGVhbiB2YWx1ZSBvZiBgdHJ1ZWAgYXMgYSBjaGlsZC5cIilcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZCkpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgY2ggb2YgY2hpbGQpIHtcbiAgICAgICAgICAgICAgICBlbnYuYWRkQ2hpbGQob2JqZWN0LCBjaCwgLTEpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoY2hpbGQpIHtcbiAgICAgICAgICAgIGVudi5hZGRDaGlsZChvYmplY3QsIGNoaWxkLCAtMSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGhhbmRsZSBzaWduYWxzXG4gICAgY29uc3QgZGlzcG9zZUhhbmRsZXJzID0gc2lnbmFscy5tYXAoKFtzaWcsIGhhbmRsZXJdKSA9PiB7XG4gICAgICAgIGNvbnN0IG5hbWUgPSBrZWJhYmlmeShzaWcpXG4gICAgICAgIGNvbnN0IGlkID0gbmFtZS5zdGFydHNXaXRoKFwibm90aWZ5LVwiKVxuICAgICAgICAgICAgPyBvYmplY3QuY29ubmVjdChgbm90aWZ5Ojoke25hbWUuc2xpY2UoNyl9YCwgaGFuZGxlcilcbiAgICAgICAgICAgIDogb2JqZWN0LmNvbm5lY3Qoa2ViYWJpZnkoc2lnKSwgaGFuZGxlcilcblxuICAgICAgICByZXR1cm4gKCkgPT4gb2JqZWN0LmRpc2Nvbm5lY3QoaWQpXG4gICAgfSlcblxuICAgIC8vIGhhbmRsZSBiaW5kaW5nc1xuICAgIGNvbnN0IGRpc3Bvc2VCaW5kaW5ncyA9IGJpbmRpbmdzLm1hcCgoW3Byb3AsIGJpbmRpbmddKSA9PiB7XG4gICAgICAgIGNvbnN0IGRpc3Bvc2UgPSBiaW5kaW5nLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICBzZXQob2JqZWN0LCBwcm9wLCBiaW5kaW5nLmdldCgpKVxuICAgICAgICB9KVxuICAgICAgICBzZXQob2JqZWN0LCBwcm9wLCBiaW5kaW5nLmdldCgpKVxuICAgICAgICByZXR1cm4gZGlzcG9zZVxuICAgIH0pXG5cbiAgICAvLyBjbGVhbnVwXG4gICAgaWYgKGRpc3Bvc2VCaW5kaW5ncy5sZW5ndGggPiAwIHx8IGRpc3Bvc2VIYW5kbGVycy5sZW5ndGggPiAwKSB7XG4gICAgICAgIG9uQ2xlYW51cCgoKSA9PiB7XG4gICAgICAgICAgICBkaXNwb3NlSGFuZGxlcnMuZm9yRWFjaCgoY2IpID0+IGNiKCkpXG4gICAgICAgICAgICBkaXNwb3NlQmluZGluZ3MuZm9yRWFjaCgoY2IpID0+IGNiKCkpXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgJD8uKG9iamVjdClcbiAgICByZXR1cm4gb2JqZWN0XG59XG5cbmV4cG9ydCBjb25zdCBqc3hzID0ganN4XG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZVxuICAgIG5hbWVzcGFjZSBKU1gge1xuICAgICAgICB0eXBlIEVsZW1lbnRUeXBlID0ga2V5b2YgSW50cmluc2ljRWxlbWVudHMgfCBGQyB8IENDXG4gICAgICAgIHR5cGUgRWxlbWVudCA9IEdPYmplY3QuT2JqZWN0XG4gICAgICAgIHR5cGUgRWxlbWVudENsYXNzID0gR09iamVjdC5PYmplY3RcblxuICAgICAgICB0eXBlIExpYnJhcnlNYW5hZ2VkQXR0cmlidXRlczxDLCBQcm9wcz4gPSBKc3hQcm9wczxDLCBQcm9wcz4gJiB7XG4gICAgICAgICAgICAvLyBGSVhNRTogd2h5IGRvZXMgYW4gaW50cmluc2ljIGVsZW1lbnQgYWx3YXlzIHJlc29sdmUgYXMgRkM/XG4gICAgICAgICAgICAvLyBfX3R5cGU/OiBDIGV4dGVuZHMgQ0MgPyBcIkNDXCIgOiBDIGV4dGVuZHMgRkMgPyBcIkZDXCIgOiBuZXZlclxuICAgICAgICB9XG5cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1lbXB0eS1vYmplY3QtdHlwZVxuICAgICAgICBpbnRlcmZhY2UgSW50cmluc2ljRWxlbWVudHMge1xuICAgICAgICAgICAgLy8gY2M6IENDUHJvcHM8R3RrLkJveCwgR3RrLkJveC5Db25zdHJ1Y3RvclByb3BzLCBHdGsuQm94LlNpZ25hbFNpZ25hdHVyZXM+XG4gICAgICAgICAgICAvLyBmYzogRkNQcm9wczxHdGsuV2lkZ2V0LCBGblByb3BzPlxuICAgICAgICB9XG5cbiAgICAgICAgaW50ZXJmYWNlIEVsZW1lbnRDaGlsZHJlbkF0dHJpYnV0ZSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWVtcHR5LW9iamVjdC10eXBlXG4gICAgICAgICAgICBjaGlsZHJlbjoge31cbiAgICAgICAgfVxuICAgIH1cbn1cbiIsICJpbXBvcnQgR09iamVjdCBmcm9tIFwiZ2k6Ly9HT2JqZWN0XCJcbmltcG9ydCBHaW8gZnJvbSBcImdpOi8vR2lvXCJcbmltcG9ydCBHTGliIGZyb20gXCJnaTovL0dMaWJcIlxuaW1wb3J0IHsgdHlwZSBQYXNjYWxpZnksIGNhbWVsaWZ5LCBrZWJhYmlmeSB9IGZyb20gXCIuLi91dGlsLmpzXCJcblxudHlwZSBTdWJzY3JpYmVDYWxsYmFjayA9ICgpID0+IHZvaWRcbnR5cGUgRGlzcG9zZUZ1bmN0aW9uID0gKCkgPT4gdm9pZFxudHlwZSBTdWJzY3JpYmVGdW5jdGlvbiA9IChjYWxsYmFjazogU3Vic2NyaWJlQ2FsbGJhY2spID0+IERpc3Bvc2VGdW5jdGlvblxuXG5leHBvcnQgdHlwZSBBY2Nlc3NlZDxUPiA9IFQgZXh0ZW5kcyBBY2Nlc3NvcjxpbmZlciBWPiA/IFYgOiBuZXZlclxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1kZWNsYXJhdGlvbi1tZXJnaW5nXG5leHBvcnQgY2xhc3MgQWNjZXNzb3I8VCA9IHVua25vd24+IGV4dGVuZHMgRnVuY3Rpb24ge1xuICAgIHN0YXRpYyAkZ3R5cGUgPSBHT2JqZWN0LlRZUEVfSlNPQkpFQ1QgYXMgdW5rbm93biBhcyBHT2JqZWN0LkdUeXBlPEFjY2Vzc29yPlxuXG4gICAgLyoqIEBleHBlcmltZW50YWwgKi9cbiAgICBzdGF0aWMgZXZhbHVhdGluZz86IFNldDxBY2Nlc3Nvcjx1bmtub3duPj5cblxuICAgICNnZXQ6ICgpID0+IFRcbiAgICAjc3Vic2NyaWJlOiBTdWJzY3JpYmVGdW5jdGlvblxuXG4gICAgY29uc3RydWN0b3IoZ2V0OiAoKSA9PiBULCBzdWJzY3JpYmU/OiBTdWJzY3JpYmVGdW5jdGlvbikge1xuICAgICAgICBzdXBlcihcInJldHVybiBhcmd1bWVudHMuY2FsbGVlLl9jYWxsLmFwcGx5KGFyZ3VtZW50cy5jYWxsZWUsIGFyZ3VtZW50cylcIilcbiAgICAgICAgdGhpcy4jc3Vic2NyaWJlID0gc3Vic2NyaWJlID8/ICgoKSA9PiAoKSA9PiB2b2lkIDApXG4gICAgICAgIHRoaXMuI2dldCA9IGdldFxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFN1YnNjcmliZSBmb3IgdmFsdWUgY2hhbmdlcy5cbiAgICAgKiBAcGFyYW0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRvIHJ1biB3aGVuIHRoZSBjdXJyZW50IHZhbHVlIGNoYW5nZXMuXG4gICAgICogQHJldHVybnMgVW5zdWJzY3JpYmUgZnVuY3Rpb24uXG4gICAgICovXG4gICAgc3Vic2NyaWJlKGNhbGxiYWNrOiBTdWJzY3JpYmVDYWxsYmFjayk6IERpc3Bvc2VGdW5jdGlvbiB7XG4gICAgICAgIC8vIFRPRE86IGF1dG8gdW5zdWIgd2hlbiBhIHNjb3BlIGlzIGF2YWlsYWJsZT9cbiAgICAgICAgcmV0dXJuIHRoaXMuI3N1YnNjcmliZShjYWxsYmFjaylcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyBUaGUgY3VycmVudCB2YWx1ZS5cbiAgICAgKi9cbiAgICBnZXQoKTogVCB7XG4gICAgICAgIEFjY2Vzc29yLmV2YWx1YXRpbmc/LmFkZCh0aGlzKVxuICAgICAgICByZXR1cm4gdGhpcy4jZ2V0KClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgYEFjY2Vzc29yYCB0aGF0IGFwcGxpZXMgYSB0cmFuc2Zvcm1hdGlvbiBvbiBpdHMgdmFsdWUuXG4gICAgICogQHBhcmFtIHRyYW5zZm9ybSBUaGUgdHJhbnNmb3JtYXRpb24gdG8gYXBwbHkuIFNob3VsZCBiZSBhIHB1cmUgZnVuY3Rpb24uXG4gICAgICovXG4gICAgYXM8UiA9IFQ+KHRyYW5zZm9ybTogKHZhbHVlOiBUKSA9PiBSKTogQWNjZXNzb3I8Uj4ge1xuICAgICAgICByZXR1cm4gbmV3IEFjY2Vzc29yKCgpID0+IHRyYW5zZm9ybSh0aGlzLiNnZXQoKSksIHRoaXMuI3N1YnNjcmliZSlcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2NhbGw8UiA9IFQ+KHRyYW5zZm9ybTogKHZhbHVlOiBUKSA9PiBSKTogQWNjZXNzb3I8Uj4ge1xuICAgICAgICByZXR1cm4gdGhpcy5hcyh0cmFuc2Zvcm0pXG4gICAgfVxuXG4gICAgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGBBY2Nlc3Nvcjwke3RoaXMuZ2V0KCl9PmBcbiAgICB9XG5cbiAgICBbU3ltYm9sLnRvUHJpbWl0aXZlXSgpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFwiQWNjZXNzb3IgaW1wbGljaXRseSBjb252ZXJ0ZWQgdG8gYSBwcmltaXRpdmUgdmFsdWUuXCIpXG4gICAgICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKClcbiAgICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQWNjZXNzb3I8VD4ge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBgQWNjZXNzb3JgIHRoYXQgYXBwbGllcyBhIHRyYW5zZm9ybWF0aW9uIG9uIGl0cyB2YWx1ZS5cbiAgICAgKiBAcGFyYW0gdHJhbnNmb3JtIFRoZSB0cmFuc2Zvcm1hdGlvbiB0byBhcHBseS4gU2hvdWxkIGJlIGEgcHVyZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICA8UiA9IFQ+KHRyYW5zZm9ybTogKHZhbHVlOiBUKSA9PiBSKTogQWNjZXNzb3I8Uj5cbn1cblxuZXhwb3J0IHR5cGUgU2V0dGVyPFQ+ID0ge1xuICAgICh2YWx1ZTogVCk6IHZvaWRcbiAgICAodmFsdWU6IChwcmV2OiBUKSA9PiBUKTogdm9pZFxufVxuXG5leHBvcnQgdHlwZSBTdGF0ZTxUPiA9IFtBY2Nlc3NvcjxUPiwgU2V0dGVyPFQ+XVxuXG4vKipcbiAqIENyZWF0ZSBhIHdyaXRhYmxlIHNpZ25hbC5cbiAqXG4gKiBAcGFyYW0gaW5pdCBUaGUgaW50aWFsIHZhbHVlIG9mIHRoZSBzaWduYWxcbiAqIEByZXR1cm5zIEFuIGBBY2Nlc3NvcmAgYW5kIGEgc2V0dGVyIGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTdGF0ZTxUPihpbml0OiBUKTogU3RhdGU8VD4ge1xuICAgIGxldCBjdXJyZW50VmFsdWUgPSBpbml0XG4gICAgY29uc3Qgc3Vic2NyaWJlcnMgPSBuZXcgU2V0PFN1YnNjcmliZUNhbGxiYWNrPigpXG5cbiAgICBjb25zdCBzdWJzY3JpYmU6IFN1YnNjcmliZUZ1bmN0aW9uID0gKGNhbGxiYWNrKSA9PiB7XG4gICAgICAgIHN1YnNjcmliZXJzLmFkZChjYWxsYmFjaylcbiAgICAgICAgcmV0dXJuICgpID0+IHN1YnNjcmliZXJzLmRlbGV0ZShjYWxsYmFjaylcbiAgICB9XG5cbiAgICBjb25zdCBzZXQgPSAobmV3VmFsdWU6IHVua25vd24pID0+IHtcbiAgICAgICAgY29uc3QgdmFsdWU6IFQgPSB0eXBlb2YgbmV3VmFsdWUgPT09IFwiZnVuY3Rpb25cIiA/IG5ld1ZhbHVlKGN1cnJlbnRWYWx1ZSkgOiBuZXdWYWx1ZVxuICAgICAgICBpZiAoY3VycmVudFZhbHVlICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgY3VycmVudFZhbHVlID0gdmFsdWVcbiAgICAgICAgICAgIHN1YnNjcmliZXJzLmZvckVhY2goKGNiKSA9PiBjYigpKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFtuZXcgQWNjZXNzb3IoKCkgPT4gY3VycmVudFZhbHVlLCBzdWJzY3JpYmUpLCBzZXQgYXMgU2V0dGVyPFQ+XVxufVxuXG4vKipcbiAqIENyZWF0ZSBhbiBgQWNjZXNzb3JgIHdoaWNoIGlzIGNvbXB1dGVkIGZyb20gYSBsaXN0IG9mIGBBY2Nlc3NvcmBzLlxuICpcbiAqIGBgYHRzIEV4YW1wbGVcbiAqIGxldCBhOiBBY2Nlc3NvcjxudW1iZXI+XG4gKiBsZXQgYjogQWNjZXNzb3I8c3RyaW5nPlxuICogY29uc3QgYzogQWNjZXNzb3I8W251bWJlciwgc3RyaW5nXT4gPSBjcmVhdGVDb21wdXRlZChbYSwgYl0pXG4gKiBjb25zdCBkOiBBY2Nlc3NvcjxzdHJpbmc+ID0gY3JlYXRlQ29tcHV0ZWQoW2EsIGJdLCAoYTogbnVtYmVyLCBiOiBzdHJpbmcpID0+IGAke2F9ICR7Yn1gKVxuICogYGBgXG4gKlxuICogQHBhcmFtIGRlcHMgTGlzdCBvZiBgQWNjZXNzb3JzYC5cbiAqIEBwYXJhbSB0cmFuc2Zvcm0gQW4gb3B0aW9uYWwgdHJhbnNmb3JtIGZ1bmN0aW9uLlxuICogQHJldHVybnMgVGhlIGNvbXB1dGVkIGBBY2Nlc3NvcmAuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDb21wdXRlZDxcbiAgICBjb25zdCBEZXBzIGV4dGVuZHMgQXJyYXk8QWNjZXNzb3I8YW55Pj4sXG4gICAgQXJncyBleHRlbmRzIHsgW0sgaW4ga2V5b2YgRGVwc106IEFjY2Vzc2VkPERlcHNbS10+IH0sXG4gICAgViA9IEFyZ3MsXG4+KGRlcHM6IERlcHMsIHRyYW5zZm9ybT86ICguLi5hcmdzOiBBcmdzKSA9PiBWKTogQWNjZXNzb3I8Vj4ge1xuICAgIGxldCBkaXNwb3NlOiBBcnJheTxEaXNwb3NlRnVuY3Rpb24+XG4gICAgY29uc3Qgc3Vic2NyaWJlcnMgPSBuZXcgU2V0PFN1YnNjcmliZUNhbGxiYWNrPigpXG4gICAgY29uc3QgY2FjaGUgPSBuZXcgQXJyYXk8dW5rbm93bj4oZGVwcy5sZW5ndGgpXG5cbiAgICBjb25zdCBzdWJzY3JpYmU6IFN1YnNjcmliZUZ1bmN0aW9uID0gKGNhbGxiYWNrKSA9PiB7XG4gICAgICAgIGlmIChzdWJzY3JpYmVycy5zaXplID09PSAwKSB7XG4gICAgICAgICAgICBkaXNwb3NlID0gZGVwcy5tYXAoKGRlcCwgaSkgPT5cbiAgICAgICAgICAgICAgICBkZXAuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBkZXAuZ2V0KClcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhY2hlW2ldICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGVbaV0gPSBkZXAuZ2V0KClcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXJzLmZvckVhY2goKGNiKSA9PiBjYigpKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICApXG4gICAgICAgIH1cblxuICAgICAgICBzdWJzY3JpYmVycy5hZGQoY2FsbGJhY2spXG5cbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIHN1YnNjcmliZXJzLmRlbGV0ZShjYWxsYmFjaylcbiAgICAgICAgICAgIGlmIChzdWJzY3JpYmVycy5zaXplID09PSAwKSB7XG4gICAgICAgICAgICAgICAgZGlzcG9zZS5tYXAoKGNiKSA9PiBjYigpKVxuICAgICAgICAgICAgICAgIGRpc3Bvc2UubGVuZ3RoID0gMFxuICAgICAgICAgICAgICAgIGNhY2hlLmxlbmd0aCA9IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGdldCA9ICgpOiBWID0+IHtcbiAgICAgICAgY29uc3QgYXJncyA9IGRlcHMubWFwKChkZXAsIGkpID0+IHtcbiAgICAgICAgICAgIGlmICghY2FjaGVbaV0pIHtcbiAgICAgICAgICAgICAgICBjYWNoZVtpXSA9IGRlcC5nZXQoKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVbaV1cbiAgICAgICAgfSlcblxuICAgICAgICByZXR1cm4gdHJhbnNmb3JtID8gdHJhbnNmb3JtKC4uLihhcmdzIGFzIEFyZ3MpKSA6IChhcmdzIGFzIFYpXG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBBY2Nlc3NvcihnZXQsIHN1YnNjcmliZSlcbn1cblxuLyoqXG4gKiBDcmVhdGUgYW4gYEFjY2Vzc29yYCBvbiBhIGBHT2JqZWN0Lk9iamVjdGAncyBgcHJvcGVydHlgLlxuICpcbiAqIEBwYXJhbSBvYmplY3QgVGhlIGBHT2JqZWN0Lk9iamVjdGAgdG8gY3JlYXRlIHRoZSBgQWNjZXNzb3JgIG9uLlxuICogQHBhcmFtIHByb3BlcnR5IE9uZSBvZiBpdHMgcmVnaXN0ZXJlZCBwcm9wZXJ0aWVzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQmluZGluZzxUIGV4dGVuZHMgR09iamVjdC5PYmplY3QsIFAgZXh0ZW5kcyBrZXlvZiBUPihcbiAgICBvYmplY3Q6IFQsXG4gICAgcHJvcGVydHk6IEV4dHJhY3Q8UCwgc3RyaW5nPixcbik6IEFjY2Vzc29yPFRbUF0+XG5cbi8vIFRPRE86IHN1cHBvcnQgbmVzdGVkIGJpbmRpbmdzXG4vLyBleHBvcnQgZnVuY3Rpb24gY3JlYXRlQmluZGluZzxcbi8vICAgICBUIGV4dGVuZHMgR09iamVjdC5PYmplY3QsXG4vLyAgICAgUDEgZXh0ZW5kcyBrZXlvZiBULFxuLy8gICAgIFAyIGV4dGVuZHMga2V5b2YgTm9uTnVsbGFibGU8VFtQMV0+LFxuLy8gPihcbi8vICAgICBvYmplY3Q6IFQsXG4vLyAgICAgcHJvcGVydHkxOiBFeHRyYWN0PFAxLCBzdHJpbmc+LFxuLy8gICAgIHByb3BlcnR5MjogRXh0cmFjdDxQMiwgc3RyaW5nPixcbi8vICk6IEFjY2Vzc29yPE5vbk51bGxhYmxlPFRbUDFdPltQMl0+XG5cbi8qKlxuICogQ3JlYXRlIGFuIGBBY2Nlc3NvcmAgb24gYSBgR2lvLlNldHRpbmdzYCdzIGBrZXlgLlxuICogVmFsdWVzIGFyZSByZWN1cnNpdmVseSB1bnBhY2tlZC5cbiAqXG4gKiBAcGFyYW0gb2JqZWN0IFRoZSBgR2lvLlNldHRpbmdzYCB0byBjcmVhdGUgdGhlIGBBY2Nlc3NvcmAgb24uXG4gKiBAcGFyYW0ga2V5IFRoZSBzZXR0aW5ncyBrZXlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUJpbmRpbmc8VD4oc2V0dGluZ3M6IEdpby5TZXR0aW5ncywga2V5OiBzdHJpbmcpOiBBY2Nlc3NvcjxUPlxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQmluZGluZzxUPihvYmplY3Q6IEdPYmplY3QuT2JqZWN0IHwgR2lvLlNldHRpbmdzLCBrZXk6IHN0cmluZyk6IEFjY2Vzc29yPFQ+IHtcbiAgICBjb25zdCBwcm9wID0ga2ViYWJpZnkoa2V5KSBhcyBrZXlvZiB0eXBlb2Ygb2JqZWN0XG5cbiAgICBjb25zdCBzdWJzY3JpYmU6IFN1YnNjcmliZUZ1bmN0aW9uID0gKGNhbGxiYWNrKSA9PiB7XG4gICAgICAgIGNvbnN0IHNpZyA9IG9iamVjdCBpbnN0YW5jZW9mIEdpby5TZXR0aW5ncyA/IFwiY2hhbmdlZFwiIDogXCJub3RpZnlcIlxuICAgICAgICBjb25zdCBpZCA9IG9iamVjdC5jb25uZWN0KGAke3NpZ306OiR7cHJvcH1gLCAoKSA9PiBjYWxsYmFjaygpKVxuICAgICAgICByZXR1cm4gKCkgPT4gb2JqZWN0LmRpc2Nvbm5lY3QoaWQpXG4gICAgfVxuXG4gICAgY29uc3QgZ2V0ID0gKCk6IFQgPT4ge1xuICAgICAgICBpZiAob2JqZWN0IGluc3RhbmNlb2YgR2lvLlNldHRpbmdzKSB7XG4gICAgICAgICAgICByZXR1cm4gb2JqZWN0LmdldF92YWx1ZShrZXkpLnJlY3Vyc2l2ZVVucGFjaygpIGFzIFRcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGdldHRlciA9IGBnZXRfJHtwcm9wLnJlcGxhY2VBbGwoXCItXCIsIFwiX1wiKX1gIGFzIGtleW9mIHR5cGVvZiBvYmplY3RcblxuICAgICAgICAgICAgaWYgKGdldHRlciBpbiBvYmplY3QgJiYgdHlwZW9mIG9iamVjdFtnZXR0ZXJdID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKG9iamVjdFtnZXR0ZXJdIGFzICgpID0+IHVua25vd24pKCkgYXMgVFxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocHJvcCBpbiBvYmplY3QpIHJldHVybiBvYmplY3RbcHJvcF0gYXMgVFxuICAgICAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHJldHVybiBvYmplY3Rba2V5IGFzIGtleW9mIHR5cGVvZiBvYmplY3RdIGFzIFRcblxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoYGNhbm5vdCBnZXQgcHJvcGVydHkgJHtrZXl9YClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBuZXcgQWNjZXNzb3IoZ2V0LCBzdWJzY3JpYmUpXG59XG5cbnR5cGUgQ29ubmVjdGlvbkhhbmRsZXI8XG4gICAgTyBleHRlbmRzIEdPYmplY3QuT2JqZWN0LFxuICAgIFMgZXh0ZW5kcyBrZXlvZiBPW1wiJHNpZ25hbHNcIl0sXG4gICAgVCxcbj4gPSBPW1wiJHNpZ25hbHNcIl1bU10gZXh0ZW5kcyAoLi4uYXJnczogYW55W10pID0+IGluZmVyIFJcbiAgICA/IHZvaWQgZXh0ZW5kcyBSXG4gICAgICAgID8gKC4uLmFyZ3M6IFsuLi5QYXJhbWV0ZXJzPE9bXCIkc2lnbmFsc1wiXVtTXT4sIGN1cnJlbnRWYWx1ZTogVF0pID0+IFRcbiAgICAgICAgOiBuZXZlclxuICAgIDogbmV2ZXJcblxuLyoqXG4gKiBDcmVhdGUgYW4gYEFjY2Vzc29yYCB3aGljaCBzZXRzIHVwIGEgbGlzdCBvZiBgR09iamVjdC5PYmplY3RgIHNpZ25hbCBjb25uZWN0aW9ucy5cbiAqXG4gKiBgYGB0cyBFeGFtcGxlXG4gKiBjb25zdCB2YWx1ZTogQWNjZXNzb3I8c3RyaW5nPiA9IGNyZWF0ZUNvbm5lY3Rpb24oXG4gKiAgIFwiaW5pdGlhbCB2YWx1ZVwiLFxuICogICBbb2JqMSwgXCJzaWctbmFtZVwiLCAoLi4uYXJncykgPT4gXCJzdHJcIl0sXG4gKiAgIFtvYmoyLCBcInNpZy1uYW1lXCIsICguLi5hcmdzKSA9PiBcInN0clwiXVxuICogKVxuICogYGBgXG4gKlxuICogQHBhcmFtIGluaXQgVGhlIGluaXRpYWwgdmFsdWVcbiAqIEBwYXJhbSBzaWduYWxzIEEgbGlzdCBvZiBgR09iamVjdC5PYmplY3RgLCBzaWduYWwgbmFtZSBhbmQgY2FsbGJhY2sgcGFpcnMgdG8gY29ubmVjdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNvbm5lY3Rpb248XG4gICAgVCxcbiAgICBPMSBleHRlbmRzIEdPYmplY3QuT2JqZWN0LFxuICAgIFMxIGV4dGVuZHMga2V5b2YgTzFbXCIkc2lnbmFsc1wiXSxcbiAgICBPMiBleHRlbmRzIEdPYmplY3QuT2JqZWN0LFxuICAgIFMyIGV4dGVuZHMga2V5b2YgTzJbXCIkc2lnbmFsc1wiXSxcbiAgICBPMyBleHRlbmRzIEdPYmplY3QuT2JqZWN0LFxuICAgIFMzIGV4dGVuZHMga2V5b2YgTzNbXCIkc2lnbmFsc1wiXSxcbiAgICBPNCBleHRlbmRzIEdPYmplY3QuT2JqZWN0LFxuICAgIFM0IGV4dGVuZHMga2V5b2YgTzRbXCIkc2lnbmFsc1wiXSxcbiAgICBPNSBleHRlbmRzIEdPYmplY3QuT2JqZWN0LFxuICAgIFM1IGV4dGVuZHMga2V5b2YgTzVbXCIkc2lnbmFsc1wiXSxcbiAgICBPNiBleHRlbmRzIEdPYmplY3QuT2JqZWN0LFxuICAgIFM2IGV4dGVuZHMga2V5b2YgTzZbXCIkc2lnbmFsc1wiXSxcbiAgICBPNyBleHRlbmRzIEdPYmplY3QuT2JqZWN0LFxuICAgIFM3IGV4dGVuZHMga2V5b2YgTzdbXCIkc2lnbmFsc1wiXSxcbiAgICBPOCBleHRlbmRzIEdPYmplY3QuT2JqZWN0LFxuICAgIFM4IGV4dGVuZHMga2V5b2YgTzhbXCIkc2lnbmFsc1wiXSxcbiAgICBPOSBleHRlbmRzIEdPYmplY3QuT2JqZWN0LFxuICAgIFM5IGV4dGVuZHMga2V5b2YgTzlbXCIkc2lnbmFsc1wiXSxcbj4oXG4gICAgaW5pdDogVCxcbiAgICBoMTogW08xLCBTMSwgQ29ubmVjdGlvbkhhbmRsZXI8TzEsIFMxLCBUPl0sXG4gICAgaDI/OiBbTzIsIFMyLCBDb25uZWN0aW9uSGFuZGxlcjxPMiwgUzIsIFQ+XSxcbiAgICBoMz86IFtPMywgUzMsIENvbm5lY3Rpb25IYW5kbGVyPE8zLCBTMywgVD5dLFxuICAgIGg0PzogW080LCBTNCwgQ29ubmVjdGlvbkhhbmRsZXI8TzQsIFM0LCBUPl0sXG4gICAgaDU/OiBbTzUsIFM1LCBDb25uZWN0aW9uSGFuZGxlcjxPNSwgUzUsIFQ+XSxcbiAgICBoNj86IFtPNiwgUzYsIENvbm5lY3Rpb25IYW5kbGVyPE82LCBTNiwgVD5dLFxuICAgIGg3PzogW083LCBTNywgQ29ubmVjdGlvbkhhbmRsZXI8TzcsIFM3LCBUPl0sXG4gICAgaDg/OiBbTzgsIFM4LCBDb25uZWN0aW9uSGFuZGxlcjxPOCwgUzgsIFQ+XSxcbiAgICBoOT86IFtPOSwgUzksIENvbm5lY3Rpb25IYW5kbGVyPE85LCBTOSwgVD5dLFxuKSB7XG4gICAgbGV0IHZhbHVlID0gaW5pdFxuICAgIGxldCBkaXNwb3NlOiBBcnJheTxEaXNwb3NlRnVuY3Rpb24+XG4gICAgY29uc3Qgc3Vic2NyaWJlcnMgPSBuZXcgU2V0PFN1YnNjcmliZUNhbGxiYWNrPigpXG4gICAgY29uc3Qgc2lnbmFscyA9IFtoMSwgaDIsIGgzLCBoNCwgaDUsIGg2LCBoNywgaDgsIGg5XS5maWx0ZXIoKGgpID0+IGggIT09IHVuZGVmaW5lZClcblxuICAgIGNvbnN0IHN1YnNjcmliZTogU3Vic2NyaWJlRnVuY3Rpb24gPSAoY2FsbGJhY2spID0+IHtcbiAgICAgICAgaWYgKHN1YnNjcmliZXJzLnNpemUgPT09IDApIHtcbiAgICAgICAgICAgIGRpc3Bvc2UgPSBzaWduYWxzLm1hcCgoW29iamVjdCwgc2lnbmFsLCBjYWxsYmFja10pID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBpZCA9IEdPYmplY3QuT2JqZWN0LnByb3RvdHlwZS5jb25uZWN0LmNhbGwoXG4gICAgICAgICAgICAgICAgICAgIG9iamVjdCxcbiAgICAgICAgICAgICAgICAgICAgc2lnbmFsIGFzIHN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgKF8sIC4uLmFyZ3MpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld1ZhbHVlID0gY2FsbGJhY2soLi4uYXJncywgdmFsdWUpXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgIT09IG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBuZXdWYWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXJzLmZvckVhY2goKGNiKSA9PiBjYigpKVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIClcblxuICAgICAgICAgICAgICAgIHJldHVybiAoKSA9PiBHT2JqZWN0Lk9iamVjdC5wcm90b3R5cGUuZGlzY29ubmVjdC5jYWxsKG9iamVjdCwgaWQpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG5cbiAgICAgICAgc3Vic2NyaWJlcnMuYWRkKGNhbGxiYWNrKVxuXG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICBzdWJzY3JpYmVycy5kZWxldGUoY2FsbGJhY2spXG4gICAgICAgICAgICBpZiAoc3Vic2NyaWJlcnMuc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGRpc3Bvc2UubWFwKChjYikgPT4gY2IoKSlcbiAgICAgICAgICAgICAgICBkaXNwb3NlLmxlbmd0aCA9IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBuZXcgQWNjZXNzb3IoKCkgPT4gdmFsdWUsIHN1YnNjcmliZSlcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBzaWduYWwgZnJvbSBhIHByb3ZpZXIgZnVuY3Rpb24uXG4gKiBUaGUgcHJvdmlkZXIgaXMgY2FsbGVkIHdoZW4gdGhlIGZpcnN0IHN1YnNjcmliZXIgYXBwZWFycyBhbmQgdGhlIHJldHVybmVkIGRpc3Bvc2VcbiAqIGZ1bmN0aW9uIGZyb20gdGhlIHByb3ZpZGVyIHdpbGwgYmUgY2FsbGVkIHdoZW4gdGhlIG51bWJlciBvZiBzdWJzY3JpYmVycyBkcm9wIHRvIHplcm8uXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGB0c1xuICogY29uc3QgdmFsdWUgPSBjcmVhdGVFeHRlcm5hbCgwLCAoc2V0KSA9PiB7XG4gKiAgIGNvbnN0IGludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4gc2V0KCh2KSA9PiB2ICsgMSkpXG4gKiAgIHJldHVybiAoKSA9PiBjbGVhckludGVydmFsKGludGVydmFsKVxuICogfSlcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBpbml0IFRoZSBpbml0aWFsIHZhbHVlXG4gKiBAcGFyYW0gcHJvZHVjZXIgVGhlIHByb2R1Y2VyIGZ1bmN0aW9uIHdoaWNoIHNob3VsZCByZXR1cm4gYSBjbGVhbnVwIGZ1bmN0aW9uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFeHRlcm5hbDxUPihcbiAgICBpbml0OiBULFxuICAgIHByb2R1Y2VyOiAoc2V0OiBTZXR0ZXI8VD4pID0+IERpc3Bvc2VGdW5jdGlvbixcbik6IEFjY2Vzc29yPFQ+IHtcbiAgICBsZXQgY3VycmVudFZhbHVlID0gaW5pdFxuICAgIGxldCBkaXNwb3NlOiBEaXNwb3NlRnVuY3Rpb25cbiAgICBjb25zdCBzdWJzY3JpYmVycyA9IG5ldyBTZXQ8U3Vic2NyaWJlQ2FsbGJhY2s+KClcblxuICAgIGNvbnN0IHN1YnNjcmliZTogU3Vic2NyaWJlRnVuY3Rpb24gPSAoY2FsbGJhY2spID0+IHtcbiAgICAgICAgaWYgKHN1YnNjcmliZXJzLnNpemUgPT09IDApIHtcbiAgICAgICAgICAgIGRpc3Bvc2UgPSBwcm9kdWNlcigodjogdW5rbm93bikgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld1ZhbHVlOiBUID0gdHlwZW9mIHYgPT09IFwiZnVuY3Rpb25cIiA/IHYoY3VycmVudFZhbHVlKSA6IHZcbiAgICAgICAgICAgICAgICBpZiAobmV3VmFsdWUgIT09IGN1cnJlbnRWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50VmFsdWUgPSBuZXdWYWx1ZVxuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVycy5mb3JFYWNoKChjYikgPT4gY2IoKSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG5cbiAgICAgICAgc3Vic2NyaWJlcnMuYWRkKGNhbGxiYWNrKVxuXG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICBzdWJzY3JpYmVycy5kZWxldGUoY2FsbGJhY2spXG4gICAgICAgICAgICBpZiAoc3Vic2NyaWJlcnMuc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGRpc3Bvc2UoKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBBY2Nlc3NvcigoKSA9PiBjdXJyZW50VmFsdWUsIHN1YnNjcmliZSlcbn1cblxudHlwZSBEZWVwSW5mZXI8VCBleHRlbmRzIHN0cmluZz4gPSBSZXR1cm5UeXBlPEdMaWIuVmFyaWFudDxUPltcImRlZXBVbnBhY2tcIl0+XG50eXBlIFJlY3Vyc2l2ZUluZmVyPFQgZXh0ZW5kcyBzdHJpbmc+ID0gUmV0dXJuVHlwZTxHTGliLlZhcmlhbnQ8VD5bXCJyZWN1cnNpdmVVbnBhY2tcIl0+XG5cbi8qKiBAZXhwZXJpbWVudGFsICovXG50eXBlIFNldHRpbmdzPFQgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+PiA9IHtcbiAgICBbSyBpbiBrZXlvZiBUIGFzIFVuY2FwaXRhbGl6ZTxQYXNjYWxpZnk8Sz4+XTogQWNjZXNzb3I8UmVjdXJzaXZlSW5mZXI8VFtLXT4+XG59ICYge1xuICAgIFtLIGluIGtleW9mIFQgYXMgYHNldCR7UGFzY2FsaWZ5PEs+fWBdOiBTZXR0ZXI8RGVlcEluZmVyPFRbS10+PlxufVxuXG4vKipcbiAqIEBleHBlcmltZW50YWxcbiAqXG4gKiBXcmFwIGEge0BsaW5rIEdpby5TZXR0aW5nc30gaW50byBhIGNvbGxlY3Rpb24gb2Ygc2V0dGVycyBhbmQgYWNjZXNzb3JzLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBgdHNcbiAqIGNvbnN0IHMgPSBjcmVhdGVTZXR0aW5ncyhzZXR0aW5ncywge1xuICogICBcImNvbXBsZXgta2V5XCI6IFwiYXtzYXtzc319XCIsXG4gKiAgIFwic2ltcGxlLWtleVwiOiBcInNcIixcbiAqIH0pXG4gKlxuICogcy5jb21wbGV4S2V5LnN1YnNjcmliZSgoKSA9PiB7XG4gKiAgIHByaW50KHMuY29tcGxleEtleS5nZXQoKSlcbiAqIH0pXG4gKlxuICogcy5zZXRDb21wbGV4S2V5KChwcmV2KSA9PiAoe1xuICogICAuLi5wcmV2LFxuICogICBrZXk6IHsgbmVzdGVkOiBcIlwiIH0sXG4gKiB9KSlcbiAqIGBgYFxuICovXG4vLyBUT0RPOiBjb21lIHVwIHdpdGggYW4gQVBJXG4vLyAtIHRvIG1hbnVhbGx5IGFubm90YXRlIFZhcmlhbnQgdHlwZWQgc2V0dGVycy9nZXR0ZXJzXG4vLyAtIHRvIHNldCByZWN1cnNpdmUgdnMgZGVlcCB1bnBhY2sgcGVyIGtleVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNldHRpbmdzPGNvbnN0IFQgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+PihcbiAgICBzZXR0aW5nczogR2lvLlNldHRpbmdzLFxuICAgIGtleXM6IFQsXG4pOiBTZXR0aW5nczxUPiB7XG4gICAgcmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhcbiAgICAgICAgT2JqZWN0LmVudHJpZXMoa2V5cykuZmxhdE1hcCgoW2tleSwgdHlwZV0pID0+IFtcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICBjYW1lbGlmeShrZXkpLFxuICAgICAgICAgICAgICAgIG5ldyBBY2Nlc3NvcihcbiAgICAgICAgICAgICAgICAgICAgKCkgPT4gc2V0dGluZ3MuZ2V0X3ZhbHVlKGtleSkucmVjdXJzaXZlVW5wYWNrKCksXG4gICAgICAgICAgICAgICAgICAgIChjYWxsYmFjaykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaWQgPSBzZXR0aW5ncy5jb25uZWN0KGBjaGFuZ2VkOjoke2tleX1gLCBjYWxsYmFjaylcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoKSA9PiBzZXR0aW5ncy5kaXNjb25uZWN0KGlkKVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgIGBzZXQke2tleVswXS50b1VwcGVyQ2FzZSgpICsgY2FtZWxpZnkoa2V5KS5zbGljZSgxKX1gLFxuICAgICAgICAgICAgICAgICh2OiB1bmtub3duKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHNldHRpbmdzLnNldF92YWx1ZShcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBHTGliLlZhcmlhbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgdiA9PT0gXCJmdW5jdGlvblwiID8gdihzZXR0aW5ncy5nZXRfdmFsdWUoa2V5KS5kZWVwVW5wYWNrKCkpIDogdixcbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgXSksXG4gICAgKVxufVxuIiwgImltcG9ydCB0eXBlIEdPYmplY3QgZnJvbSBcImdpOi8vR09iamVjdFwiXG5cbmV4cG9ydCBmdW5jdGlvbiBrZWJhYmlmeShzdHI6IHN0cmluZykge1xuICAgIHJldHVybiBzdHJcbiAgICAgICAgLnJlcGxhY2UoLyhbYS16XSkoW0EtWl0pL2csIFwiJDEtJDJcIilcbiAgICAgICAgLnJlcGxhY2VBbGwoXCJfXCIsIFwiLVwiKVxuICAgICAgICAudG9Mb3dlckNhc2UoKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc25ha2VpZnkoc3RyOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyXG4gICAgICAgIC5yZXBsYWNlKC8oW2Etel0pKFtBLVpdKS9nLCBcIiQxLSQyXCIpXG4gICAgICAgIC5yZXBsYWNlQWxsKFwiLVwiLCBcIl9cIilcbiAgICAgICAgLnRvTG93ZXJDYXNlKClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhbWVsaWZ5KHN0cjogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKC9bLV9dKC4pL2csIChfLCBjaGFyKSA9PiBjaGFyLnRvVXBwZXJDYXNlKCkpXG59XG5cbmV4cG9ydCB0eXBlIFBhc2NhbGlmeTxTPiA9IFMgZXh0ZW5kcyBgJHtpbmZlciBIZWFkfSR7XCItXCIgfCBcIl9cIn0ke2luZmVyIFRhaWx9YFxuICAgID8gYCR7Q2FwaXRhbGl6ZTxIZWFkPn0ke1Bhc2NhbGlmeTxUYWlsPn1gXG4gICAgOiBTIGV4dGVuZHMgc3RyaW5nXG4gICAgICA/IENhcGl0YWxpemU8Uz5cbiAgICAgIDogbmV2ZXJcblxuZXhwb3J0IHR5cGUgWG1sTm9kZSA9IHtcbiAgICBuYW1lOiBzdHJpbmdcbiAgICBhdHRyaWJ1dGVzPzogUmVjb3JkPHN0cmluZywgc3RyaW5nPlxuICAgIGNoaWxkcmVuPzogQXJyYXk8WG1sTm9kZT5cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHhtbCh7IG5hbWUsIGF0dHJpYnV0ZXMsIGNoaWxkcmVuIH06IFhtbE5vZGUpIHtcbiAgICBsZXQgYnVpbGRlciA9IGA8JHtuYW1lfWBcblxuICAgIGNvbnN0IGF0dHJzID0gT2JqZWN0LmVudHJpZXMoYXR0cmlidXRlcyA/PyBbXSlcblxuICAgIGlmIChhdHRycy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIGF0dHJzKSB7XG4gICAgICAgICAgICBidWlsZGVyICs9IGAgJHtrZXl9PVwiJHt2YWx1ZX1cImBcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjaGlsZHJlbiAmJiBjaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICAgIGJ1aWxkZXIgKz0gXCI+XCJcbiAgICAgICAgZm9yIChjb25zdCBub2RlIG9mIGNoaWxkcmVuKSB7XG4gICAgICAgICAgICBidWlsZGVyICs9IHhtbChub2RlKVxuICAgICAgICB9XG4gICAgICAgIGJ1aWxkZXIgKz0gYDwvJHtuYW1lfT5gXG4gICAgfSBlbHNlIHtcbiAgICAgICAgYnVpbGRlciArPSBcIiAvPlwiXG4gICAgfVxuXG4gICAgcmV0dXJuIGJ1aWxkZXJcbn1cblxuLy8gQmluZGluZ3Mgd29yayBvdmVyIHByb3BlcnRpZXMgaW4ga2ViYWItY2FzZSBiZWNhdXNlIHRoYXRzIHRoZSBjb252ZW50aW9uIG9mIGdvYmplY3Rcbi8vIGhvd2V2ZXIgaW4ganMgaXRzIGVpdGhlciBzbmFrZV9jYXNlIG9yIGNhbWVsQ2FzZVxuLy8gYWxzbyBvbiBEQnVzIGludGVyZmFjZXMgaXRzIFBhc2NhbENhc2UgYnkgY29udmVudGlvblxuLy8gc28gYXMgYSB3b3JrYXJvdW5kIHdlIHVzZSBnZXRfcHJvcGVydHlfbmFtZSBhbmQgb25seSB1c2UgdGhlIHByb3BlcnR5IGZpZWxkIGFzIGEgZmFsbGJhY2tcbmV4cG9ydCBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eUdldHRlcjxUIGV4dGVuZHMgb2JqZWN0PihvYmplY3Q6IFQsIHByb3A6IEV4dHJhY3Q8a2V5b2YgVCwgc3RyaW5nPikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmplY3QsIGBnZXRfJHtrZWJhYmlmeShwcm9wKS5yZXBsYWNlQWxsKFwiLVwiLCBcIl9cIil9YCwge1xuICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogKCkgPT4gb2JqZWN0W3Byb3BdLFxuICAgIH0pXG59XG5cbi8vIGF0dGVtcHQgc2V0dGluZyBhIHByb3BlcnR5IG9mIEdPYmplY3QuT2JqZWN0XG5leHBvcnQgZnVuY3Rpb24gc2V0KG9iajogR09iamVjdC5PYmplY3QsIHByb3A6IHN0cmluZywgdmFsdWU6IGFueSkge1xuICAgIGNvbnN0IGtleSA9IHNuYWtlaWZ5KHByb3ApXG4gICAgY29uc3QgZ2V0dGVyID0gYGdldF8ke2tleX1gIGFzIGtleW9mIHR5cGVvZiBvYmpcbiAgICBjb25zdCBzZXR0ZXIgPSBgc2V0XyR7a2V5fWAgYXMga2V5b2YgdHlwZW9mIG9ialxuXG4gICAgbGV0IGN1cnJlbnQ6IHVua25vd25cblxuICAgIGlmIChnZXR0ZXIgaW4gb2JqICYmIHR5cGVvZiBvYmpbZ2V0dGVyXSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGN1cnJlbnQgPSAob2JqW2dldHRlcl0gYXMgKCkgPT4gdW5rbm93bikoKVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGN1cnJlbnQgPSBvYmpbcHJvcCBhcyBrZXlvZiB0eXBlb2Ygb2JqXVxuICAgIH1cblxuICAgIGlmIChjdXJyZW50ICE9PSB2YWx1ZSkge1xuICAgICAgICBpZiAoc2V0dGVyIGluIG9iaiAmJiB0eXBlb2Ygb2JqW3NldHRlcl0gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgOyhvYmpbc2V0dGVyXSBhcyAodjogYW55KSA9PiB2b2lkKSh2YWx1ZSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ob2JqLCB7IFtwcm9wXTogdmFsdWUgfSlcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsICJpbXBvcnQgdHlwZSBHT2JqZWN0IGZyb20gXCJnaTovL0dPYmplY3RcIlxuaW1wb3J0IHsgdHlwZSBBY2Nlc3NvciB9IGZyb20gXCIuL3N0YXRlLmpzXCJcblxudHlwZSBHT2JqID0gR09iamVjdC5PYmplY3RcbmV4cG9ydCB0eXBlIENDPFQgZXh0ZW5kcyBHT2JqID0gR09iaj4gPSB7IG5ldyAocHJvcHM6IGFueSk6IFQgfVxuZXhwb3J0IHR5cGUgRkM8VCBleHRlbmRzIEdPYmogPSBHT2JqPiA9IChwcm9wczogYW55KSA9PiBUXG5cbnR5cGUgQ3NzU2V0dGVyID0gKG9iamVjdDogR09iaiwgY3NzOiBzdHJpbmcgfCBBY2Nlc3NvcjxzdHJpbmc+KSA9PiB2b2lkXG50eXBlIENoaWxkRm4gPSAocGFyZW50OiBHT2JqLCBjaGlsZDogR09iaiB8IG51bWJlciB8IHN0cmluZywgaW5kZXg/OiBudW1iZXIpID0+IHZvaWRcblxuZXhwb3J0IGZ1bmN0aW9uIGNvbmZpZ3VlKGNvbmY6IFBhcnRpYWw8SnN4RW52Pikge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKGVudiwgY29uZilcbn1cblxudHlwZSBKc3hFbnYgPSB7XG4gICAgaW50cmluc2ljRWxlbWVudHM6IFJlY29yZDxzdHJpbmcsIENDIHwgRkM+XG4gICAgYWRkQ2hpbGQ6IENoaWxkRm5cbiAgICBzZXRDc3M6IENzc1NldHRlclxuICAgIHNldENsYXNzOiBDc3NTZXR0ZXJcbiAgICBpbml0UHJvcHM6IChwcm9wczogYW55KSA9PiB2b2lkXG4gICAgZGVmYXVsdENsZWFudXA6IChvYmplY3Q6IEdPYmopID0+IHZvaWRcbn1cblxuZnVuY3Rpb24gbWlzc2luZ0ltcGwoKSB7XG4gICAgdGhyb3cgRXJyb3IoXCJtaXNzaW5nIGltcGxcIilcbn1cblxuZXhwb3J0IGNvbnN0IGVudjogSnN4RW52ID0ge1xuICAgIGludHJpbnNpY0VsZW1lbnRzOiB7fSxcbiAgICBhZGRDaGlsZDogbWlzc2luZ0ltcGwsXG4gICAgc2V0Q3NzOiBtaXNzaW5nSW1wbCxcbiAgICBzZXRDbGFzczogbWlzc2luZ0ltcGwsXG4gICAgaW5pdFByb3BzOiAoKSA9PiB2b2lkIDAsXG4gICAgZGVmYXVsdENsZWFudXA6ICgpID0+IHZvaWQgMCxcbn1cbiIsICJpbXBvcnQgR09iamVjdCBmcm9tIFwiZ2k6Ly9HT2JqZWN0XCJcbmltcG9ydCB7IHJlZ2lzdGVyRGVzdHJveWFibGVUeXBlIH0gZnJvbSBcIi4uL2dub21lL3NpZ25hbFRyYWNrZXIuanNcIlxuXG4vLyBUT0RPOiBGcmFnbWVudCBzaG91bGQgaW1wbGVtZW50IEdpby5MaXN0TW9kZWxcblxuZXhwb3J0IGNsYXNzIEZyYWdtZW50PFQgPSBhbnk+IGV4dGVuZHMgR09iamVjdC5PYmplY3Qge1xuICAgIHN0YXRpYyBbR09iamVjdC5zaWduYWxzXSA9IHtcbiAgICAgICAgXCJkZXN0cm95XCI6IHt9LFxuXG4gICAgICAgIFwiY2hpbGQtYWRkZWRcIjoge1xuICAgICAgICAgICAgcGFyYW1fdHlwZXM6IFtHT2JqZWN0LlRZUEVfT0JKRUNULCBHT2JqZWN0LlRZUEVfVUlOVF0sXG4gICAgICAgIH0sXG4gICAgICAgIFwiY2hpbGQtcmVtb3ZlZFwiOiB7XG4gICAgICAgICAgICBwYXJhbV90eXBlczogW0dPYmplY3QuVFlQRV9PQkpFQ1QsIEdPYmplY3QuVFlQRV9VSU5UXSxcbiAgICAgICAgfSxcbiAgICB9XG5cbiAgICBzdGF0aWMgW0dPYmplY3QucHJvcGVydGllc10gPSB7XG4gICAgICAgIGNoaWxkcmVuOiBHT2JqZWN0LlBhcmFtU3BlYy5qc29iamVjdChcImNoaWxkcmVuXCIsIFwiXCIsIFwiXCIsIEdPYmplY3QuUGFyYW1GbGFncy5SRUFEQUJMRSksXG4gICAgfVxuXG4gICAgc3RhdGljIHtcbiAgICAgICAgR09iamVjdC5yZWdpc3RlckNsYXNzKHRoaXMpXG4gICAgICAgIHJlZ2lzdGVyRGVzdHJveWFibGVUeXBlKHRoaXMpXG4gICAgfVxuXG4gICAgc3RhdGljIG5ldzxUPihjaGlsZHJlbjogQXJyYXk8VD4gPSBbXSkge1xuICAgICAgICByZXR1cm4gbmV3IEZyYWdtZW50KHsgY2hpbGRyZW4gfSlcbiAgICB9XG5cbiAgICBwcml2YXRlIGNvbm5lY3Rpb25JZHMgPSBuZXcgU2V0PG51bWJlcj4oKVxuICAgIHByaXZhdGUgX2NoaWxkcmVuOiBBcnJheTxUPlxuXG4gICAgZ2V0IGNoaWxkcmVuKCkge1xuICAgICAgICByZXR1cm4gWy4uLnRoaXMuX2NoaWxkcmVuXVxuICAgIH1cblxuICAgIGFkZENoaWxkKGNoaWxkOiBULCBpbmRleDogbnVtYmVyID0gLTEpOiB2b2lkIHtcbiAgICAgICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgRnJhZ21lbnQpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKGBuZXN0aW5nIEZyYWdtZW50cyBhcmUgbm90IHlldCBzdXBwb3J0ZWRgKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGluZGV4ID4gMCkge1xuICAgICAgICAgICAgdGhpcy5fY2hpbGRyZW4gPSBbXG4gICAgICAgICAgICAgICAgLi4udGhpcy5fY2hpbGRyZW4uc2xpY2UoMCwgaW5kZXgpLFxuICAgICAgICAgICAgICAgIGNoaWxkLFxuICAgICAgICAgICAgICAgIC4uLnRoaXMuX2NoaWxkcmVuLnNsaWNlKGluZGV4KSxcbiAgICAgICAgICAgIF1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2NoaWxkcmVuLnB1c2goY2hpbGQpXG4gICAgICAgICAgICBpbmRleCA9IHRoaXMuX2NoaWxkcmVuLmxlbmd0aCAtIDFcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZW1pdChcImNoaWxkLWFkZGVkXCIsIGNoaWxkLCBpbmRleClcbiAgICAgICAgdGhpcy5ub3RpZnkoXCJjaGlsZHJlblwiKVxuICAgIH1cblxuICAgIGhhc0NoaWxkKGNoaWxkOiBUKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jaGlsZHJlbi5maW5kSW5kZXgoKGNoKSA9PiBjaCA9PT0gY2hpbGQpID4gLTFcbiAgICB9XG5cbiAgICByZW1vdmVDaGlsZChjaGlsZDogVCk6IHZvaWQge1xuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuX2NoaWxkcmVuLmZpbmRJbmRleCgoaSkgPT4gaSA9PT0gY2hpbGQpXG4gICAgICAgIHRoaXMuX2NoaWxkcmVuLnNwbGljZShpbmRleCwgMSlcblxuICAgICAgICB0aGlzLmVtaXQoXCJjaGlsZC1yZW1vdmVkXCIsIGNoaWxkLCBpbmRleClcbiAgICAgICAgdGhpcy5ub3RpZnkoXCJjaGlsZHJlblwiKVxuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKHsgY2hpbGRyZW4gPSBbXSB9OiBQYXJ0aWFsPHsgY2hpbGRyZW46IEFycmF5PFQ+IHwgVCB9PiA9IHt9KSB7XG4gICAgICAgIHN1cGVyKClcbiAgICAgICAgdGhpcy5fY2hpbGRyZW4gPSBBcnJheS5pc0FycmF5KGNoaWxkcmVuKSA/IGNoaWxkcmVuIDogW2NoaWxkcmVuXVxuICAgIH1cblxuICAgIGNvbm5lY3Qoc2lnbmFsOiBzdHJpbmcsIGNhbGxiYWNrOiAoXzogdGhpcywgLi4uYXJnczogYW55W10pID0+IHZvaWQpOiBudW1iZXIge1xuICAgICAgICBjb25zdCBpZCA9IHN1cGVyLmNvbm5lY3Qoc2lnbmFsLCBjYWxsYmFjaylcbiAgICAgICAgdGhpcy5jb25uZWN0aW9uSWRzLmFkZChpZClcbiAgICAgICAgcmV0dXJuIGlkXG4gICAgfVxuXG4gICAgZGlzY29ubmVjdChpZDogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIHN1cGVyLmRpc2Nvbm5lY3QoaWQpXG4gICAgICAgIHRoaXMuY29ubmVjdGlvbklkcy5kZWxldGUoaWQpXG4gICAgfVxuXG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5lbWl0KFwiZGVzdHJveVwiKVxuICAgICAgICBmb3IgKGNvbnN0IGlkIG9mIHRoaXMuY29ubmVjdGlvbklkcy52YWx1ZXMoKSkge1xuICAgICAgICAgICAgc3VwZXIuZGlzY29ubmVjdChpZClcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsICJpbXBvcnQgdHlwZSBHT2JqZWN0IGZyb20gXCJnaTovL0dPYmplY3RcIlxuXG50eXBlIFR5cGUgPSB7IG5ldyAoLi4uYXJnczogYW55W10pOiBHT2JqZWN0Lk9iamVjdCB9XG5cbi8vIEB0cy1leHBlY3QtZXJyb3IgbWlzc2luZyB0eXBlc1xuY29uc3QgbW9kID0gaW1wb3J0KFwicmVzb3VyY2U6Ly8vb3JnL2dub21lL3NoZWxsL21pc2Mvc2lnbmFsVHJhY2tlci5qc1wiKVxuXG5leHBvcnQgY29uc3QgcmVnaXN0ZXJEZXN0cm95YWJsZVR5cGU6ICh0eXBlOiBUeXBlKSA9PiB2b2lkID0gYXdhaXQgbW9kXG4gICAgLnRoZW4oKG1vZCkgPT4gbW9kLnJlZ2lzdGVyRGVzdHJveWFibGVUeXBlKVxuICAgIC5jYXRjaCgoKSA9PiAoKSA9PiB2b2lkIDApXG4iLCAiaW1wb3J0IHsgRnJhZ21lbnQgfSBmcm9tIFwiLi9GcmFnbWVudC5qc1wiXG5pbXBvcnQgeyBBY2Nlc3NvciwgU3RhdGUsIGNyZWF0ZVN0YXRlIH0gZnJvbSBcIi4vc3RhdGUuanNcIlxuaW1wb3J0IHsgZW52IH0gZnJvbSBcIi4vZW52LmpzXCJcbmltcG9ydCB7IGdldFNjb3BlLCBvbkNsZWFudXAsIFNjb3BlIH0gZnJvbSBcIi4vc2NvcGUuanNcIlxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG5pbXBvcnQgdHlwZSBDbHV0dGVyIGZyb20gXCJnaTovL0NsdXR0ZXJcIlxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuaW1wb3J0IHR5cGUgR3RrIGZyb20gXCJnaTovL0d0az92ZXJzaW9uPTMuMFwiXG5cbmludGVyZmFjZSBGb3JQcm9wczxJdGVtLCBFbCBleHRlbmRzIEpTWC5FbGVtZW50LCBLZXk+IHtcbiAgICBlYWNoOiBBY2Nlc3NvcjxJdGVyYWJsZTxJdGVtPj5cbiAgICBjaGlsZHJlbjogKGl0ZW06IEl0ZW0sIGluZGV4OiBBY2Nlc3NvcjxudW1iZXI+KSA9PiBFbFxuXG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gdG8gcnVuIGZvciBlYWNoIHJlbW92ZWQgZWxlbWVudC5cbiAgICAgKiBUaGUgZGVmYXVsdCB2YWx1ZSBkZXBlbmRzIG9uIHRoZSBlbnZpcm9ubWVudDpcbiAgICAgKlxuICAgICAqIC0gKipHdGs0Kio6IG51bGxcbiAgICAgKiAtICoqR3RrMyoqOiB7QGxpbmsgR3RrLldpZGdldC5wcm90b3R5cGUuZGVzdHJveX1cbiAgICAgKiAtICoqR25vbWUqKjoge0BsaW5rIENsdXR0ZXIuQWN0b3IucHJvdG90eXBlLmRlc3Ryb3l9XG4gICAgICovXG4gICAgY2xlYW51cD86IG51bGwgfCAoKGVsZW1lbnQ6IEVsLCBpdGVtOiBJdGVtLCBpbmRleDogbnVtYmVyKSA9PiB2b2lkKVxuXG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gdGhhdCBnZW5lcmF0ZXMgdGhlIGtleSBmb3IgZWFjaCBpdGVtLlxuICAgICAqXG4gICAgICogQnkgZGVmYXVsdCBpdGVtcyBhcmUgbWFwcGVkIGJ5OlxuICAgICAqIC0gdmFsdWUgaW4gY2FzZSBvZiBwcmltaXRpdmUgdmFsdWVzXG4gICAgICogLSByZWZlcmVuY2Ugb3RoZXJ3aXNlXG4gICAgICovXG4gICAgaWQ/OiAoaXRlbTogSXRlbSkgPT4gS2V5IHwgSXRlbVxufVxuXG4vLyBUT0RPOiBzdXBwb3J0IEdpby5MaXN0TW9kZWxcblxuZXhwb3J0IGZ1bmN0aW9uIEZvcjxJdGVtLCBFbCBleHRlbmRzIEpTWC5FbGVtZW50LCBLZXk+KHtcbiAgICBlYWNoLFxuICAgIGNoaWxkcmVuOiBta0NoaWxkLFxuICAgIGNsZWFudXAsXG4gICAgaWQgPSAoaXRlbTogSXRlbSkgPT4gaXRlbSxcbn06IEZvclByb3BzPEl0ZW0sIEVsLCBLZXk+KTogRnJhZ21lbnQ8RWw+IHtcbiAgICB0eXBlIE1hcEl0ZW0gPSB7IGl0ZW06IEl0ZW07IGNoaWxkOiBFbDsgaW5kZXg6IFN0YXRlPG51bWJlcj47IHNjb3BlOiBTY29wZSB9XG5cbiAgICBjb25zdCBjdXJyZW50U2NvcGUgPSBnZXRTY29wZSgpXG4gICAgY29uc3QgbWFwID0gbmV3IE1hcDxJdGVtIHwgS2V5LCBNYXBJdGVtPigpXG4gICAgY29uc3QgZnJhZ21lbnQgPSBuZXcgRnJhZ21lbnQ8RWw+KClcblxuICAgIGZ1bmN0aW9uIHJlbW92ZSh7IGl0ZW0sIGNoaWxkLCBpbmRleDogW2luZGV4XSwgc2NvcGUgfTogTWFwSXRlbSkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFudXAgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgY2xlYW51cChjaGlsZCwgaXRlbSwgaW5kZXguZ2V0KCkpXG4gICAgICAgIH0gZWxzZSBpZiAoY2xlYW51cCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgZW52LmRlZmF1bHRDbGVhbnVwKGNoaWxkKVxuICAgICAgICB9XG4gICAgICAgIHNjb3BlLmRpc3Bvc2UoKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhbGxiYWNrKGl0YXJlYWJsZTogSXRlcmFibGU8SXRlbT4pIHtcbiAgICAgICAgY29uc3QgaXRlbXMgPSBbLi4uaXRhcmVhYmxlXVxuICAgICAgICBjb25zdCBpZHMgPSBpdGVtcy5tYXAoaWQpXG4gICAgICAgIGNvbnN0IGlkU2V0ID0gbmV3IFNldChpZHMpXG5cbiAgICAgICAgLy8gY2xlYW51cCBjaGlsZHJlbiBtaXNzaW5nIGZyb20gYXJyXG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIG1hcC5lbnRyaWVzKCkpIHtcbiAgICAgICAgICAgIC8vIHRoZXJlIGlzIG5vIGdlbmVyaWMgd2F5IHRvIGluc2VydCBjaGlsZCBhdCBpbmRleFxuICAgICAgICAgICAgLy8gc28gd2Ugc29ydCBieSByZW1vdmluZyBldmVyeSBjaGlsZCBhbmQgcmVhcHBlbmRpbmcgaW4gb3JkZXJcbiAgICAgICAgICAgIGZyYWdtZW50LnJlbW92ZUNoaWxkKHZhbHVlLmNoaWxkKVxuXG4gICAgICAgICAgICBpZiAoIWlkU2V0LmhhcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlKHZhbHVlKVxuICAgICAgICAgICAgICAgIG1hcC5kZWxldGUoa2V5KVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gdXBkYXRlIGluZGV4IGFuZCBhZGQgbmV3IGl0ZW1zXG4gICAgICAgIGl0ZW1zLm1hcCgoaXRlbSwgaSkgPT4ge1xuICAgICAgICAgICAgY29uc3Qga2V5ID0gaWRzW2ldXG4gICAgICAgICAgICBpZiAobWFwLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgICAgICAgICBpbmRleDogWywgc2V0SW5kZXhdLFxuICAgICAgICAgICAgICAgICAgICBjaGlsZCxcbiAgICAgICAgICAgICAgICB9ID0gbWFwLmdldChrZXkpIVxuICAgICAgICAgICAgICAgIHNldEluZGV4KGkpXG4gICAgICAgICAgICAgICAgaWYgKGZyYWdtZW50Lmhhc0NoaWxkKGNoaWxkKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYGR1cGxpY2F0ZSBrZXlzIGZvdW5kOiAke2tleX1gKVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGZyYWdtZW50LmFkZENoaWxkKGNoaWxkKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgW2luZGV4LCBzZXRJbmRleF0gPSBjcmVhdGVTdGF0ZShpKVxuICAgICAgICAgICAgICAgIGNvbnN0IHNjb3BlID0gbmV3IFNjb3BlKGN1cnJlbnRTY29wZSlcbiAgICAgICAgICAgICAgICBjb25zdCBjaGlsZCA9IHNjb3BlLnJ1bigoKSA9PiBta0NoaWxkKGl0ZW0sIGluZGV4KSlcbiAgICAgICAgICAgICAgICBtYXAuc2V0KGtleSwgeyBpdGVtLCBjaGlsZCwgaW5kZXg6IFtpbmRleCwgc2V0SW5kZXhdLCBzY29wZSB9KVxuICAgICAgICAgICAgICAgIGZyYWdtZW50LmFkZENoaWxkKGNoaWxkKVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIGNvbnN0IGRpc3Bvc2UgPSBlYWNoLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgIGNhbGxiYWNrKGVhY2guZ2V0KCkpXG4gICAgfSlcbiAgICBjYWxsYmFjayhlYWNoLmdldCgpKVxuXG4gICAgb25DbGVhbnVwKCgpID0+IHtcbiAgICAgICAgZGlzcG9zZSgpXG5cbiAgICAgICAgZm9yIChjb25zdCB2YWx1ZSBvZiBtYXAudmFsdWVzKCkpIHtcbiAgICAgICAgICAgIHJlbW92ZSh2YWx1ZSlcbiAgICAgICAgfVxuXG4gICAgICAgIG1hcC5jbGVhcigpXG4gICAgfSlcblxuICAgIHJldHVybiBmcmFnbWVudFxufVxuIiwgImltcG9ydCBBc3RhbCBmcm9tIFwiZ2k6Ly9Bc3RhbD92ZXJzaW9uPTQuMFwiXG5pbXBvcnQgR3RrIGZyb20gXCJnaTovL0d0az92ZXJzaW9uPTQuMFwiXG5pbXBvcnQgR2RrIGZyb20gXCJnaTovL0dkaz92ZXJzaW9uPTQuMFwiXG5leHBvcnQgeyBBc3RhbCwgR3RrLCBHZGsgfVxuIiwgImltcG9ydCBBc3RhbElPIGZyb20gXCJnaTovL0FzdGFsSU9cIlxuaW1wb3J0IHsgQWNjZXNzb3IgfSBmcm9tIFwiLi4vZ25pbS9zcmMvanN4L2luZGV4LmpzXCJcblxudHlwZSBBcmdzID0ge1xuICAgIGNtZDogc3RyaW5nIHwgc3RyaW5nW11cbiAgICBvdXQ/OiAoc3Rkb3V0OiBzdHJpbmcpID0+IHZvaWRcbiAgICBlcnI/OiAoc3RkZXJyOiBzdHJpbmcpID0+IHZvaWRcbn1cblxuZXhwb3J0IHR5cGUgUHJvY2VzcyA9IEFzdGFsSU8uUHJvY2Vzc1xuZXhwb3J0IGNvbnN0IFByb2Nlc3MgPSBBc3RhbElPLlByb2Nlc3NcblxuZXhwb3J0IGZ1bmN0aW9uIHN1YnByb2Nlc3MoYXJnczogQXJncyk6IEFzdGFsSU8uUHJvY2Vzc1xuXG5leHBvcnQgZnVuY3Rpb24gc3VicHJvY2VzcyhcbiAgICBjbWQ6IHN0cmluZyB8IHN0cmluZ1tdLFxuICAgIG9uT3V0PzogKHN0ZG91dDogc3RyaW5nKSA9PiB2b2lkLFxuICAgIG9uRXJyPzogKHN0ZGVycjogc3RyaW5nKSA9PiB2b2lkLFxuKTogQXN0YWxJTy5Qcm9jZXNzXG5cbmV4cG9ydCBmdW5jdGlvbiBzdWJwcm9jZXNzKFxuICAgIGFyZ3NPckNtZDogQXJncyB8IHN0cmluZyB8IHN0cmluZ1tdLFxuICAgIG9uT3V0OiAoc3Rkb3V0OiBzdHJpbmcpID0+IHZvaWQgPSBwcmludCxcbiAgICBvbkVycjogKHN0ZGVycjogc3RyaW5nKSA9PiB2b2lkID0gcHJpbnRlcnIsXG4pIHtcbiAgICBjb25zdCBhcmdzID0gQXJyYXkuaXNBcnJheShhcmdzT3JDbWQpIHx8IHR5cGVvZiBhcmdzT3JDbWQgPT09IFwic3RyaW5nXCJcbiAgICBjb25zdCB7IGNtZCwgZXJyLCBvdXQgfSA9IHtcbiAgICAgICAgY21kOiBhcmdzID8gYXJnc09yQ21kIDogYXJnc09yQ21kLmNtZCxcbiAgICAgICAgZXJyOiBhcmdzID8gb25FcnIgOiBhcmdzT3JDbWQuZXJyIHx8IG9uRXJyLFxuICAgICAgICBvdXQ6IGFyZ3MgPyBvbk91dCA6IGFyZ3NPckNtZC5vdXQgfHwgb25PdXQsXG4gICAgfVxuXG4gICAgY29uc3QgcHJvYyA9IEFycmF5LmlzQXJyYXkoY21kKVxuICAgICAgICA/IEFzdGFsSU8uUHJvY2Vzcy5zdWJwcm9jZXNzdihjbWQpXG4gICAgICAgIDogQXN0YWxJTy5Qcm9jZXNzLnN1YnByb2Nlc3MoY21kKVxuXG4gICAgcHJvYy5jb25uZWN0KFwic3Rkb3V0XCIsIChfLCBzdGRvdXQ6IHN0cmluZykgPT4gb3V0KHN0ZG91dCkpXG4gICAgcHJvYy5jb25uZWN0KFwic3RkZXJyXCIsIChfLCBzdGRlcnI6IHN0cmluZykgPT4gZXJyKHN0ZGVycikpXG4gICAgcmV0dXJuIHByb2Ncbn1cblxuLyoqIEB0aHJvd3Mge0dMaWIuRXJyb3J9IFRocm93cyBzdGRlcnIgKi9cbmV4cG9ydCBmdW5jdGlvbiBleGVjKGNtZDogc3RyaW5nIHwgc3RyaW5nW10pIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShjbWQpID8gQXN0YWxJTy5Qcm9jZXNzLmV4ZWN2KGNtZCkgOiBBc3RhbElPLlByb2Nlc3MuZXhlYyhjbWQpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleGVjQXN5bmMoY21kOiBzdHJpbmcgfCBzdHJpbmdbXSk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY21kKSkge1xuICAgICAgICAgICAgQXN0YWxJTy5Qcm9jZXNzLmV4ZWNfYXN5bmN2KGNtZCwgKF8sIHJlcykgPT4ge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoQXN0YWxJTy5Qcm9jZXNzLmV4ZWNfYXN5bmN2X2ZpbmlzaChyZXMpKVxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcilcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgQXN0YWxJTy5Qcm9jZXNzLmV4ZWNfYXN5bmMoY21kLCAoXywgcmVzKSA9PiB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShBc3RhbElPLlByb2Nlc3MuZXhlY19maW5pc2gocmVzKSlcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH0pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTdWJwcm9jZXNzKGluaXQ6IHN0cmluZywgZXhlYzogc3RyaW5nIHwgc3RyaW5nW10pOiBBY2Nlc3NvcjxzdHJpbmc+XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTdWJwcm9jZXNzPFQ+KFxuICAgIGluaXQ6IFQsXG4gICAgZXhlYzogc3RyaW5nIHwgc3RyaW5nW10sXG4gICAgdHJhbnNmb3JtOiAoc3Rkb3V0OiBzdHJpbmcsIHByZXY6IFQpID0+IFQsXG4pOiBBY2Nlc3NvcjxUPlxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU3VicHJvY2VzczxUPihcbiAgICBpbml0OiBULFxuICAgIGV4ZWM6IHN0cmluZyB8IHN0cmluZ1tdLFxuICAgIHRyYW5zZm9ybT86IChzdGRvdXQ6IHN0cmluZywgcHJldjogVCkgPT4gVCxcbik6IEFjY2Vzc29yPFQ+IHtcbiAgICBsZXQgY3VycmVudFZhbHVlID0gaW5pdFxuICAgIGxldCBwcm9jOiBBc3RhbElPLlByb2Nlc3MgfCBudWxsID0gbnVsbFxuICAgIGNvbnN0IHN1YnNjcmliZXJzID0gbmV3IFNldDwoKSA9PiB2b2lkPigpXG5cbiAgICBmdW5jdGlvbiBzdWJzY3JpYmUoY2FsbGJhY2s6ICgpID0+IHZvaWQpOiAoKSA9PiB2b2lkIHtcbiAgICAgICAgaWYgKHN1YnNjcmliZXJzLnNpemUgPT09IDApIHtcbiAgICAgICAgICAgIHByb2MgPSBzdWJwcm9jZXNzKGV4ZWMsIChzdGRvdXQpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHRyYW5zZm9ybSA/IHRyYW5zZm9ybShzdGRvdXQsIGN1cnJlbnRWYWx1ZSkgOiAoc3Rkb3V0IGFzIFQpXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRWYWx1ZSAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFZhbHVlID0gdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlcnMuZm9yRWFjaCgoY2IpID0+IGNiKCkpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIHN1YnNjcmliZXJzLmFkZChjYWxsYmFjaylcblxuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgc3Vic2NyaWJlcnMuZGVsZXRlKGNhbGxiYWNrKVxuICAgICAgICAgICAgaWYgKHN1YnNjcmliZXJzLnNpemUgPT09IDApIHtcbiAgICAgICAgICAgICAgICBwcm9jPy5raWxsKClcbiAgICAgICAgICAgICAgICBwcm9jID0gbnVsbFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBBY2Nlc3NvcigoKSA9PiBjdXJyZW50VmFsdWUsIHN1YnNjcmliZSlcbn1cbiIsICJpbXBvcnQgQXN0YWxJTyBmcm9tIFwiZ2k6Ly9Bc3RhbElPXCJcbmltcG9ydCB7IEFjY2Vzc29yIH0gZnJvbSBcIi4uL2duaW0vc3JjL2pzeC9pbmRleC5qc1wiXG5pbXBvcnQgeyBleGVjQXN5bmMgfSBmcm9tIFwiLi9wcm9jZXNzLmpzXCJcblxuZXhwb3J0IHR5cGUgVGltZSA9IEFzdGFsSU8uVGltZVxuZXhwb3J0IGNvbnN0IFRpbWUgPSBBc3RhbElPLlRpbWVcblxuZXhwb3J0IGZ1bmN0aW9uIGludGVydmFsKGludGVydmFsOiBudW1iZXIsIGNhbGxiYWNrPzogKCkgPT4gdm9pZCkge1xuICAgIHJldHVybiBBc3RhbElPLlRpbWUuaW50ZXJ2YWwoaW50ZXJ2YWwsICgpID0+IHZvaWQgY2FsbGJhY2s/LigpKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdGltZW91dCh0aW1lb3V0OiBudW1iZXIsIGNhbGxiYWNrPzogKCkgPT4gdm9pZCkge1xuICAgIHJldHVybiBBc3RhbElPLlRpbWUudGltZW91dCh0aW1lb3V0LCAoKSA9PiB2b2lkIGNhbGxiYWNrPy4oKSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlkbGUoY2FsbGJhY2s/OiAoKSA9PiB2b2lkKSB7XG4gICAgcmV0dXJuIEFzdGFsSU8uVGltZS5pZGxlKCgpID0+IHZvaWQgY2FsbGJhY2s/LigpKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUG9sbChcbiAgICBpbml0OiBzdHJpbmcsXG4gICAgaW50ZXJ2YWw6IG51bWJlcixcbiAgICBleGVjOiBzdHJpbmcgfCBzdHJpbmdbXSxcbik6IEFjY2Vzc29yPHN0cmluZz5cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVBvbGw8VD4oXG4gICAgaW5pdDogVCxcbiAgICBpbnRlcnZhbDogbnVtYmVyLFxuICAgIGV4ZWM6IHN0cmluZyB8IHN0cmluZ1tdLFxuICAgIHRyYW5zZm9ybTogKHN0ZG91dDogc3RyaW5nLCBwcmV2OiBUKSA9PiBULFxuKTogQWNjZXNzb3I8VD5cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVBvbGw8VD4oXG4gICAgaW5pdDogVCxcbiAgICBpbnRlcnZhbDogbnVtYmVyLFxuICAgIGZuOiAocHJldjogVCkgPT4gVCB8IFByb21pc2U8VD4sXG4pOiBBY2Nlc3NvcjxUPlxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUG9sbDxUPihcbiAgICBpbml0OiBULFxuICAgIGl2YWw6IG51bWJlcixcbiAgICBleGVjT3JGbjogc3RyaW5nIHwgc3RyaW5nW10gfCAoKHByZXY6IFQpID0+IFQgfCBQcm9taXNlPFQ+KSxcbiAgICB0cmFuc2Zvcm0/OiAoc3Rkb3V0OiBzdHJpbmcsIHByZXY6IFQpID0+IFQsXG4pOiBBY2Nlc3NvcjxUPiB7XG4gICAgbGV0IGN1cnJlbnRWYWx1ZSA9IGluaXRcbiAgICBsZXQgdGltZXI6IEFzdGFsSU8uVGltZSB8IG51bGwgPSBudWxsXG4gICAgY29uc3Qgc3Vic2NyaWJlcnMgPSBuZXcgU2V0PCgpID0+IHZvaWQ+KClcblxuICAgIGZ1bmN0aW9uIHN1YnNjcmliZShjYWxsYmFjazogKCkgPT4gdm9pZCk6ICgpID0+IHZvaWQge1xuICAgICAgICBmdW5jdGlvbiBzZXQodmFsdWU6IFQpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gY3VycmVudFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFZhbHVlID0gdmFsdWVcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVycy5mb3JFYWNoKChjYikgPT4gY2IoKSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdWJzY3JpYmVycy5zaXplID09PSAwKSB7XG4gICAgICAgICAgICB0aW1lciA9IGludGVydmFsKGl2YWwsICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGV4ZWNPckZuID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBleGVjT3JGbihjdXJyZW50VmFsdWUpXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLnRoZW4oc2V0KVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0KHZhbHVlKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZXhlY0FzeW5jKGV4ZWNPckZuKS50aGVuKChzdGRvdXQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldCh0cmFuc2Zvcm0gPyB0cmFuc2Zvcm0oc3Rkb3V0LCBjdXJyZW50VmFsdWUpIDogKHN0ZG91dCBhcyBUKSlcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG5cbiAgICAgICAgc3Vic2NyaWJlcnMuYWRkKGNhbGxiYWNrKVxuXG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICBzdWJzY3JpYmVycy5kZWxldGUoY2FsbGJhY2spXG4gICAgICAgICAgICBpZiAoc3Vic2NyaWJlcnMuc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHRpbWVyPy5jYW5jZWwoKVxuICAgICAgICAgICAgICAgIHRpbWVyID0gbnVsbFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBBY2Nlc3NvcigoKSA9PiBjdXJyZW50VmFsdWUsIHN1YnNjcmliZSlcbn1cbiIsICJpbXBvcnQgYXBwIGZyb20gXCJhZ3MvZ3RrNC9hcHBcIjtcbmltcG9ydCB7IGNyZWF0ZVN0YXRlLCBBY2Nlc3NvciwgU2V0dGVyIH0gZnJvbSBcImFnc1wiO1xuaW1wb3J0IHsgQXN0YWwsIEd0aywgR2RrIH0gZnJvbSBcImFncy9ndGs0XCI7XG5pbXBvcnQgeyBleGVjLCBleGVjQXN5bmMgfSBmcm9tIFwiYWdzL3Byb2Nlc3NcIjtcbmltcG9ydCB7IGNyZWF0ZVBvbGwsIHRpbWVvdXQgfSBmcm9tIFwiYWdzL3RpbWVcIjtcbmltcG9ydCBHTGliIGZyb20gXCJnaTovL0dMaWJcIjtcbmltcG9ydCBNZWRpYVBsYXllciBmcm9tIFwiLi9NZWRpYVBsYXllclwiO1xuaW1wb3J0IHsgdXNlSXNBbnlQbGF5ZXJQbGF5aW5nIH0gZnJvbSBcIi4uL2hvb2tzL3VzZUlzQW55UGxheWVyUGxheWluZ1wiO1xuaW1wb3J0IHsgc3RhcnRNcHZJbWFnZUxpc3RlbmVyIH0gZnJvbSBcIi4uL3V0aWxzL2dldC1tcHZwYXBlci1pbWFnZVwiO1xuaW1wb3J0IENpcmN1bGFySW1hZ2UgZnJvbSBcIi4vQ2lyY3VsYXJJbWFnZVwiO1xuaW1wb3J0IHsgY2hhbmdlTXB2UGFwZXJJbWFnZSB9IGZyb20gXCIuLi91dGlscy9jaGFuZ2UtbXB2cGFwZXItaW1hZ2VcIjtcbmltcG9ydCB7IHNwYWNpbmcgfSBmcm9tIFwiLi4vY29uc3RhbnRzL3RoZW1lL3NwYWNpbmdcIjtcbmltcG9ydCB7IHVzZUNwdVVzYWdlIH0gZnJvbSBcIi4uL2hvb2tzL3VzZUNwdVVzYWdlXCI7XG5pbXBvcnQgeyB1c2VNZW1vcnlSYW1Vc2FnZSB9IGZyb20gXCIuLi9ob29rcy91c2VNZW1vcnlSYW1Vc2FnZVwiO1xuaW1wb3J0IHsgdXNlRm9ybWF0dGVkVGltZSB9IGZyb20gXCIuLi9ob29rcy91c2VGb3JtYXR0ZWRUaW1lXCI7XG5pbXBvcnQgV29ya3NwYWNlcyBmcm9tIFwiLi9Xb3Jrc3BhY2VzXCI7XG5pbXBvcnQgVHJheSBmcm9tIFwiLi9UcmF5XCI7XG5pbXBvcnQgeyB3aW5kb3dOYW1lcyB9IGZyb20gXCIuLi9jb25zdGFudHMvd2luZG93c1wiO1xuaW1wb3J0IHsgZm9ybWF0S2V5Ym9hcmQsIGdldEtleWJvYXJkIH0gZnJvbSBcIi4uL3V0aWxzL2tleWJvYXJkXCI7XG5pbXBvcnQgeyBmaW5kQXZhaWxhYmxlVGVybWluYWwgfSBmcm9tIFwiLi4vdXRpbHMvYXBwc1wiO1xuaW1wb3J0IENvbnRyb2xQYW5lbCBmcm9tIFwiLi9Db250cm9sUGFuZWwvQ29udHJvbFBhbmVsXCI7XG5pbXBvcnQgeyBMb2dvdXRQYW5lbFdpbmRvd0NvbnRleHQgfSBmcm9tIFwiLi4vY29udGV4dC9Mb2dvdXRQYW5lbFdpbmRvd0NvbnRleHRcIjtcblxuY29uc3QgZGFzaGJvYXJkQm94U3BhY2luZyA9IHNwYWNpbmcubm9ybWFsO1xuXG5jb25zdCBnZXREaXN0cm8gPSAoKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgW29rLCBjb250ZW50XSA9IEdMaWIuZmlsZV9nZXRfY29udGVudHMoXCIvZXRjL29zLXJlbGVhc2VcIik7XG4gICAgaWYgKCFvaykgcmV0dXJuIFwiVW5rbm93blwiO1xuXG4gICAgY29uc3QgdGV4dCA9IG5ldyBUZXh0RGVjb2RlcigpLmRlY29kZShjb250ZW50KTtcbiAgICBjb25zdCBtYXRjaCA9IHRleHQubWF0Y2goL15QUkVUVFlfTkFNRT1cIiguKylcIiQvbSk7XG4gICAgcmV0dXJuIG1hdGNoID8gbWF0Y2hbMV0gOiBcIlVua25vd25cIjtcbiAgfSBjYXRjaCB7XG4gICAgcmV0dXJuIFwiVW5rbm93blwiO1xuICB9XG59O1xuXG5jb25zdCBXYWxscGFwZXJJbWcgPSAoKSA9PiB7XG4gIGNvbnN0IFt3YWxscGFwZXJJbWcsIHNldFdhbGxwYXBlckltZ10gPSBjcmVhdGVTdGF0ZShcIlwiKTtcblxuICBzdGFydE1wdkltYWdlTGlzdGVuZXIoKGZyYW1lKSA9PiB7XG4gICAgc2V0V2FsbHBhcGVySW1nKGZyYW1lKTtcbiAgfSk7XG5cbiAgcmV0dXJuIChcbiAgICA8b3ZlcmxheT5cbiAgICAgIDxib3hcbiAgICAgICAgY2xhc3M9XCJXYWxscGFwZXJJbWdCdXR0b25Db250YWluZXJcIlxuICAgICAgICAkdHlwZT1cIm92ZXJsYXlcIlxuICAgICAgICB3aWR0aFJlcXVlc3Q9ezEwMn1cbiAgICAgICAgaGVpZ2h0UmVxdWVzdD17MTAwfVxuICAgICAgPlxuICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgY2xhc3M9XCJjaXJjdWxhciBmbGF0IFdhbGxwYXBlckltZ0J1dHRvblwiXG4gICAgICAgICAgaGV4cGFuZFxuICAgICAgICAgIHZleHBhbmRcbiAgICAgICAgICBpY29uTmFtZT1cInZpZXctcmVmcmVzaFwiXG4gICAgICAgICAgb25DbGlja2VkPXsoKSA9PiB7XG4gICAgICAgICAgICBjaGFuZ2VNcHZQYXBlckltYWdlKFwibmV4dFwiKTtcbiAgICAgICAgICB9fVxuICAgICAgICAgICQ9eyhzKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBnZXN0dXJlID0gR3RrLkdlc3R1cmVDbGljay5uZXcoKTtcblxuICAgICAgICAgICAgZ2VzdHVyZS5zZXRfYnV0dG9uKDMpO1xuXG4gICAgICAgICAgICBnZXN0dXJlLmNvbm5lY3QoXCJyZWxlYXNlZFwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgIGNoYW5nZU1wdlBhcGVySW1hZ2UoXCJwcmV2XCIpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHMuYWRkX2NvbnRyb2xsZXIoZ2VzdHVyZSk7XG4gICAgICAgICAgfX1cbiAgICAgICAgLz5cbiAgICAgIDwvYm94PlxuXG4gICAgICA8Q2lyY3VsYXJJbWFnZVxuICAgICAgICBpbWc9e3dhbGxwYXBlckltZ31cbiAgICAgICAgc2l6ZT17MzAwfVxuICAgICAgICB3aWR0aFJlcXVlc3Q9ezEwMH1cbiAgICAgICAgaGVpZ2h0UmVxdWVzdD17MTAwfVxuICAgICAgICBpY29uRmFsbGJhY2s9XCJ1c2VyLWlkZW50aXR5XCJcbiAgICAgIC8+XG4gICAgPC9vdmVybGF5PlxuICApO1xufTtcblxuY29uc3QgU3lzdGVtUHJvZ3Jlc3NCYXJTdGF0ID0gKHtcbiAgaWNvbk5hbWUsXG4gIGZyYWN0aW9uLFxufToge1xuICBpY29uTmFtZTogc3RyaW5nO1xuICBmcmFjdGlvbjogQWNjZXNzb3I8bnVtYmVyPjtcbn0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8Ym94IG9yaWVudGF0aW9uPXtHdGsuT3JpZW50YXRpb24uVkVSVElDQUx9IHNwYWNpbmc9e3NwYWNpbmcubm9ybWFsfT5cbiAgICAgIDxHdGsuTGV2ZWxCYXJcbiAgICAgICAgb3JpZW50YXRpb249e0d0ay5PcmllbnRhdGlvbi5WRVJUSUNBTH1cbiAgICAgICAgdmV4cGFuZFxuICAgICAgICB2YWx1ZT17ZnJhY3Rpb259XG4gICAgICAgIG1heFZhbHVlPXsxfVxuICAgICAgICBtaW5WYWx1ZT17MH1cbiAgICAgICAgaW52ZXJ0ZWRcbiAgICAgIC8+XG4gICAgICA8aW1hZ2UgaWNvbk5hbWU9e2ljb25OYW1lfSAvPlxuICAgIDwvYm94PlxuICApO1xufTtcblxuY29uc3QgRGFzaGJvYXJkVGFiID0gKCkgPT4ge1xuICBjb25zdCB3bSA9XG4gICAgR0xpYi5nZXRlbnYoXCJYREdfU0VTU0lPTl9ERVNLVE9QXCIpID8/XG4gICAgR0xpYi5nZXRlbnYoXCJYREdfQ1VSUkVOVF9ERVNLVE9QXCIpID8/XG4gICAgXCJVbmtub3duXCI7XG5cbiAgY29uc3QgdGltZVN0cmluZyA9IHVzZUZvcm1hdHRlZFRpbWUoXCJ0aW1lXCIpO1xuXG4gIGNvbnN0IHNlcGFyYXRlZFRpbWUgPSB0aW1lU3RyaW5nKCh2KSA9PiB7XG4gICAgY29uc3QgW2hvdXIsIG1pbnV0ZV0gPSB2LnNwbGl0KFwiOlwiKTtcbiAgICByZXR1cm4geyBob3VyOiBob3VyIHx8IFwiXCIsIG1pbnV0ZTogbWludXRlIHx8IFwiXCIgfTtcbiAgfSk7XG5cbiAgY29uc3QgZGF0ZVN0cmluZyA9IGNyZWF0ZVBvbGwoXCJcIiwgMTAwMCwgKCkgPT4ge1xuICAgIGNvbnN0IG5vdyA9IEdMaWIuRGF0ZVRpbWUubmV3X25vd19sb2NhbCgpO1xuICAgIGNvbnN0IGRheVN0cmluZyA9IG5vdy5mb3JtYXQoXCIlYSwgJWVcIik7XG5cbiAgICBpZiAoIWRheVN0cmluZykgcmV0dXJuIFwiXCI7XG5cbiAgICAvLyBDYXBpdGFsaXplIGZpcnN0IGxldHRlclxuICAgIGNvbnN0IGNhcGl0YWxpemVkID1cbiAgICAgIGRheVN0cmluZz8uY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBkYXlTdHJpbmc/LnNsaWNlKDEpO1xuICAgIHJldHVybiBjYXBpdGFsaXplZDtcbiAgfSk7XG5cbiAgY29uc3QgZGlzdHJvID0gZ2V0RGlzdHJvKCk7XG4gIGNvbnN0IHVwVGltZSA9IGNyZWF0ZVBvbGwoXCJ0aW1lXCIsIDYwMDAwLCBcInVwdGltZSAtcFwiKTtcblxuICBjb25zdCBjcHVVc2FnZSA9IHVzZUNwdVVzYWdlKCk7XG4gIGNvbnN0IG1lbW9yeVVzYWdlID0gdXNlTWVtb3J5UmFtVXNhZ2UoKTtcblxuICByZXR1cm4gKFxuICAgIDxib3hcbiAgICAgIG9yaWVudGF0aW9uPXtHdGsuT3JpZW50YXRpb24uSE9SSVpPTlRBTH1cbiAgICAgIHNwYWNpbmc9e2Rhc2hib2FyZEJveFNwYWNpbmd9XG4gICAgICBjbGFzcz1cIkRhc2hib2FyZFRhYlwiXG4gICAgPlxuICAgICAgPGJveFxuICAgICAgICBvcmllbnRhdGlvbj17R3RrLk9yaWVudGF0aW9uLlZFUlRJQ0FMfVxuICAgICAgICBzcGFjaW5nPXtkYXNoYm9hcmRCb3hTcGFjaW5nfVxuICAgICAgICBoZXhwYW5kXG4gICAgICA+XG4gICAgICAgIDxib3ggc3BhY2luZz17c3BhY2luZy5ub3JtYWx9IGhleHBhbmQgY2xhc3M9XCJEYXNoYm9hcmRCb3ggZXh0cmFQYWRkaW5nXCI+XG4gICAgICAgICAgPFdhbGxwYXBlckltZyAvPlxuXG4gICAgICAgICAgPGJveFxuICAgICAgICAgICAgb3JpZW50YXRpb249e0d0ay5PcmllbnRhdGlvbi5WRVJUSUNBTH1cbiAgICAgICAgICAgIHZhbGlnbj17R3RrLkFsaWduLkNFTlRFUn1cbiAgICAgICAgICAgIHNwYWNpbmc9e3NwYWNpbmcuc21hbGx9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGJveCBzcGFjaW5nPXtzcGFjaW5nLm5vcm1hbH0+XG4gICAgICAgICAgICAgIDxpbWFnZSBpY29uTmFtZT1cImh5cHJsYW5kLXN5bWJvbGljXCIgY2xhc3M9XCJIeXByTGFuZEljb25cIiAvPlxuICAgICAgICAgICAgICA8bGFiZWwgbGFiZWw9e3dtfSBjbGFzcz1cIkRhc2hib2FyZFRhYlN5c0luZm9MYWJlbFwiIC8+XG4gICAgICAgICAgICA8L2JveD5cbiAgICAgICAgICAgIDxib3ggc3BhY2luZz17c3BhY2luZy5ub3JtYWx9PlxuICAgICAgICAgICAgICA8aW1hZ2UgaWNvbk5hbWU9XCJlbmRlYXZvdXJvcy1zeW1ib2xpY1wiIGNsYXNzPVwiRW5kZWF2b3VyT3NJY29uXCIgLz5cbiAgICAgICAgICAgICAgPGxhYmVsIGxhYmVsPXtkaXN0cm99IGNsYXNzPVwiRGFzaGJvYXJkVGFiU3lzSW5mb0xhYmVsXCIgLz5cbiAgICAgICAgICAgIDwvYm94PlxuXG4gICAgICAgICAgICA8Ym94IHNwYWNpbmc9e3NwYWNpbmcubm9ybWFsfT5cbiAgICAgICAgICAgICAgPGltYWdlIGljb25OYW1lPVwiY2xvY2stYWx0LXN5bWJvbGljXCIgY2xhc3M9XCJVcHRpbWVJY29uXCIgLz5cbiAgICAgICAgICAgICAgPGxhYmVsIGxhYmVsPXt1cFRpbWV9IGNsYXNzPVwiRGFzaGJvYXJkVGFiU3lzSW5mb0xhYmVsXCIgLz5cbiAgICAgICAgICAgIDwvYm94PlxuICAgICAgICAgIDwvYm94PlxuICAgICAgICA8L2JveD5cblxuICAgICAgICA8Ym94IHNwYWNpbmc9e2Rhc2hib2FyZEJveFNwYWNpbmd9IGhleHBhbmQ+XG4gICAgICAgICAgPGJveCBjbGFzcz1cIkRhc2hib2FyZEJveCBleHRyYVBhZGRpbmdcIiB2ZXhwYW5kIGhleHBhbmQ+XG4gICAgICAgICAgICA8Ym94XG4gICAgICAgICAgICAgIGhhbGlnbj17R3RrLkFsaWduLkNFTlRFUn1cbiAgICAgICAgICAgICAgdmFsaWduPXtHdGsuQWxpZ24uQ0VOVEVSfVxuICAgICAgICAgICAgICBvcmllbnRhdGlvbj17R3RrLk9yaWVudGF0aW9uLlZFUlRJQ0FMfVxuICAgICAgICAgICAgICBoZXhwYW5kXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxib3ggb3JpZW50YXRpb249e0d0ay5PcmllbnRhdGlvbi5WRVJUSUNBTH0+XG4gICAgICAgICAgICAgICAgPGxhYmVsXG4gICAgICAgICAgICAgICAgICBsYWJlbD17c2VwYXJhdGVkVGltZSgocykgPT4gcy5ob3VyKX1cbiAgICAgICAgICAgICAgICAgIGNsYXNzPVwiRGFzaGJvYXJkVGFiSG91ckFuZE1pbnV0ZVwiXG4gICAgICAgICAgICAgICAgLz5cblxuICAgICAgICAgICAgICAgIDxHdGsuU2VwYXJhdG9yIC8+XG5cbiAgICAgICAgICAgICAgICA8bGFiZWxcbiAgICAgICAgICAgICAgICAgIGxhYmVsPXtzZXBhcmF0ZWRUaW1lKChzKSA9PiBzLm1pbnV0ZSl9XG4gICAgICAgICAgICAgICAgICBjbGFzcz1cIkRhc2hib2FyZFRhYkhvdXJBbmRNaW51dGVcIlxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvYm94PlxuXG4gICAgICAgICAgICAgIDxsYWJlbCBsYWJlbD17ZGF0ZVN0cmluZ30gY2xhc3M9XCJEYXNoYm9hcmRUYWJEYXRlXCIgLz5cbiAgICAgICAgICAgIDwvYm94PlxuICAgICAgICAgIDwvYm94PlxuICAgICAgICAgIDxib3ggY2xhc3M9XCJEYXNoYm9hcmRCb3hcIj5cbiAgICAgICAgICAgIDxHdGsuQ2FsZW5kYXIgc2hvd19oZWFkaW5nPXtmYWxzZX0gLz5cbiAgICAgICAgICA8L2JveD5cblxuICAgICAgICAgIDxib3ggY2xhc3M9XCJEYXNoYm9hcmRCb3hcIiBzcGFjaW5nPXtzcGFjaW5nLmxhcmdlfT5cbiAgICAgICAgICAgIDxTeXN0ZW1Qcm9ncmVzc0JhclN0YXRcbiAgICAgICAgICAgICAgaWNvbk5hbWU9XCJwcm9jZXNzb3Itc3ltYm9saWNcIlxuICAgICAgICAgICAgICBmcmFjdGlvbj17Y3B1VXNhZ2UoKGMpID0+IGMuY3B1VXNhZ2VJbkZyYWN0aW9uKX1cbiAgICAgICAgICAgIC8+XG5cbiAgICAgICAgICAgIDxTeXN0ZW1Qcm9ncmVzc0JhclN0YXRcbiAgICAgICAgICAgICAgaWNvbk5hbWU9XCJtZW1vcnktc3ltYm9saWNcIlxuICAgICAgICAgICAgICBmcmFjdGlvbj17bWVtb3J5VXNhZ2UoKGMpID0+IGMubWVtb3J5VXNhZ2VJbkZyYWN0aW9uKX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9ib3g+XG4gICAgICAgIDwvYm94PlxuICAgICAgPC9ib3g+XG5cbiAgICAgIDxib3ggY2xhc3M9XCJEYXNoYm9hcmRCb3hcIiB3aWR0aFJlcXVlc3Q9ezMwMH0+XG4gICAgICAgIDxib3ggdmFsaWduPXtHdGsuQWxpZ24uQ0VOVEVSfSBoZXhwYW5kIHZleHBhbmQ+XG4gICAgICAgICAgPE1lZGlhUGxheWVyIHZhcmlhbnQ9XCJtaW5pbWFsXCIgLz5cbiAgICAgICAgPC9ib3g+XG4gICAgICA8L2JveD5cbiAgICA8L2JveD5cbiAgKTtcbn07XG5cbmNvbnN0IE1lZGlhVGFiID0gKCkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxib3ggY2xhc3M9XCJEYXNoYm9hcmRUYWJcIj5cbiAgICAgIDxNZWRpYVBsYXllciB2YXJpYW50PXtcImNvbXBsZXRlXCJ9IC8+XG4gICAgPC9ib3g+XG4gICk7XG59O1xuXG5jb25zdCBEYXNoYm9hcmRQb3BvdmVyID0gKCkgPT4ge1xuICBsZXQgc3dpdGNoZXI6IEd0ay5TdGFja1N3aXRjaGVyIHwgdW5kZWZpbmVkO1xuICBsZXQgc3RhY2s6IEd0ay5TdGFjayB8IHVuZGVmaW5lZDtcblxuICByZXR1cm4gKFxuICAgIDxwb3BvdmVyPlxuICAgICAgPGJveCBvcmllbnRhdGlvbj17R3RrLk9yaWVudGF0aW9uLlZFUlRJQ0FMfT5cbiAgICAgICAgPEd0ay5TdGFja1N3aXRjaGVyXG4gICAgICAgICAgJD17KHMpID0+IHtcbiAgICAgICAgICAgIHN3aXRjaGVyID0gcztcbiAgICAgICAgICB9fVxuICAgICAgICAgIHN0YWNrPXtzdGFja31cbiAgICAgICAgLz5cbiAgICAgICAgPEd0ay5TdGFja1xuICAgICAgICAgIHRyYW5zaXRpb25UeXBlPXtHdGsuU3RhY2tUcmFuc2l0aW9uVHlwZS5TTElERV9MRUZUX1JJR0hUfVxuICAgICAgICAgICQ9eyhzKSA9PiB7XG4gICAgICAgICAgICBzdGFjayA9IHM7XG4gICAgICAgICAgICBpZiAoc3dpdGNoZXIpIHN3aXRjaGVyLnNldF9zdGFjayhzKTtcbiAgICAgICAgICB9fVxuICAgICAgICA+XG4gICAgICAgICAgPEd0ay5TdGFja1BhZ2VcbiAgICAgICAgICAgIG5hbWU9XCJjaGlsZDFcIlxuICAgICAgICAgICAgdGl0bGU9XCJEYXNoYm9hcmRcIlxuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBpdCB3b3JrcyBhbnl3YXlzXG4gICAgICAgICAgICBjaGlsZD17PERhc2hib2FyZFRhYiAvPn1cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxHdGsuU3RhY2tQYWdlXG4gICAgICAgICAgICBuYW1lPVwiY2hpbGQyXCJcbiAgICAgICAgICAgIHRpdGxlPVwiTWVkaWFcIlxuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBpdCB3b3JrcyBhbnl3YXlzXG4gICAgICAgICAgICBjaGlsZD17PE1lZGlhVGFiIC8+fVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvR3RrLlN0YWNrPlxuICAgICAgPC9ib3g+XG4gICAgPC9wb3BvdmVyPlxuICApO1xufTtcblxuY29uc3QgRGFzaGJvYXJkQnV0dG9uID0gKCkgPT4ge1xuICBjb25zdCBpc0FueVBsYXlpbmcgPSB1c2VJc0FueVBsYXllclBsYXlpbmcoKTtcbiAgcmV0dXJuIChcbiAgICA8bWVudWJ1dHRvbj5cbiAgICAgIDxib3ggc3BhY2luZz17c3BhY2luZy5ub3JtYWx9PlxuICAgICAgICA8bGFiZWwgbGFiZWw9XCJEYXNoYm9hcmRcIiAvPlxuICAgICAgICA8aW1hZ2VcbiAgICAgICAgICBpY29uTmFtZT17aXNBbnlQbGF5aW5nKChwbGF5aW5nKSA9PlxuICAgICAgICAgICAgcGxheWluZyA/IFwiYXVkaW8tb25cIiA6IFwidXNlci1ob21lXCIsXG4gICAgICAgICAgKX1cbiAgICAgICAgLz5cbiAgICAgIDwvYm94PlxuXG4gICAgICA8RGFzaGJvYXJkUG9wb3ZlciAvPlxuICAgIDwvbWVudWJ1dHRvbj5cbiAgKTtcbn07XG5cbmNvbnN0IFRpbWVSb3cgPSAoKSA9PiB7XG4gIGNvbnN0IHRpbWVTdHJpbmcgPSB1c2VGb3JtYXR0ZWRUaW1lKFwidGltZS13aXRoLXBtXCIpO1xuXG4gIHJldHVybiAoXG4gICAgPG1lbnVidXR0b24gaGFsaWduPXtHdGsuQWxpZ24uQ0VOVEVSfT5cbiAgICAgIDxib3ggc3BhY2luZz17c3BhY2luZy5ub3JtYWx9PlxuICAgICAgICA8aW1hZ2UgaWNvbk5hbWU9XCJtb250aC1zeW1ib2xpY1wiIC8+XG4gICAgICAgIDxsYWJlbCBsYWJlbD17dGltZVN0cmluZ30gLz5cbiAgICAgIDwvYm94PlxuICAgICAgPHBvcG92ZXI+XG4gICAgICAgIDxHdGsuQ2FsZW5kYXIgLz5cbiAgICAgIDwvcG9wb3Zlcj5cbiAgICA8L21lbnVidXR0b24+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBCYXIoe1xuICBnZGttb25pdG9yLFxuICBpbmRleCxcbiAga2V5Ym9hcmQsXG4gIHNldEtleWJvYXJkLFxufToge1xuICBnZGttb25pdG9yOiBHZGsuTW9uaXRvcjtcbiAgaW5kZXg6IG51bWJlcjtcbiAga2V5Ym9hcmQ6IEFjY2Vzc29yPHN0cmluZz47XG4gIHNldEtleWJvYXJkOiBTZXR0ZXI8c3RyaW5nPjtcbn0pIHtcbiAgY29uc3QgeyBUT1AsIExFRlQsIFJJR0hUIH0gPSBBc3RhbC5XaW5kb3dBbmNob3I7XG4gIC8vIHdlIG5lZWQgdGhlIHRpbWVvdXQgdG8gc2V0IHZpc2libGUgYmVjYXVzZSBkb2luZyBpdCB0cnVlIGJ5IGRlZmF1bHQgY2F1c2VzXG4gIC8vIHRoZSB3aW5kb3cgdG8gaWdub3JlIHRoZSBsYXllciBCT1RUT01cbiAgY29uc3QgW3Zpc2libGUsIHNldFZpc2libGVdID0gY3JlYXRlU3RhdGUoZmFsc2UpO1xuXG4gIGNvbnN0IHsgc2V0VmlzaWJsZTogc2V0VmlzaWJsZUxvZ291dCB9ID0gTG9nb3V0UGFuZWxXaW5kb3dDb250ZXh0LnVzZSgpO1xuXG4gIHRpbWVvdXQoMCwgKCkgPT4ge1xuICAgIHNldFZpc2libGUodHJ1ZSk7XG4gIH0pO1xuXG4gIHJldHVybiAoXG4gICAgPHdpbmRvd1xuICAgICAgdmlzaWJsZT17dmlzaWJsZX1cbiAgICAgIG5hbWU9e3dpbmRvd05hbWVzLkJhcn1cbiAgICAgIGNsYXNzPVwiQmFyXCJcbiAgICAgIGdka21vbml0b3I9e2dka21vbml0b3J9XG4gICAgICBleGNsdXNpdml0eT17QXN0YWwuRXhjbHVzaXZpdHkuRVhDTFVTSVZFfVxuICAgICAgbGF5ZXI9e0FzdGFsLkxheWVyLkJPVFRPTX1cbiAgICAgIGFuY2hvcj17VE9QIHwgTEVGVCB8IFJJR0hUfVxuICAgICAgYXBwbGljYXRpb249e2FwcH1cbiAgICA+XG4gICAgICA8R3RrLk92ZXJsYXk+XG4gICAgICAgIHsvKiA8Ym94ICovfVxuICAgICAgICB7LyogICAkdHlwZT1cIm92ZXJsYXlcIiAqL31cbiAgICAgICAgey8qICAgY2xhc3M9XCJUZXN0UmFkaXVzTGVmdFwiICovfVxuICAgICAgICB7LyogICBoZWlnaHRSZXF1ZXN0PXs1MH0gKi99XG4gICAgICAgIHsvKiAgIHdpZHRoUmVxdWVzdD17NDB9ICovfVxuICAgICAgICB7LyogICBoYWxpZ249e0d0ay5BbGlnbi5TVEFSVH0gKi99XG4gICAgICAgIHsvKiAgIHZhbGlnbj17R3RrLkFsaWduLkVORH0gKi99XG4gICAgICAgIHsvKiA+PC9ib3g+ICovfVxuICAgICAgICB7LyoqL31cbiAgICAgICAgey8qIDxib3ggKi99XG4gICAgICAgIHsvKiAgICR0eXBlPVwib3ZlcmxheVwiICovfVxuICAgICAgICB7LyogICBjbGFzcz1cIlRlc3RSYWRpdXNSaWdodFwiICovfVxuICAgICAgICB7LyogICBoZWlnaHRSZXF1ZXN0PXs1MH0gKi99XG4gICAgICAgIHsvKiAgIHdpZHRoUmVxdWVzdD17NDB9ICovfVxuICAgICAgICB7LyogICBoYWxpZ249e0d0ay5BbGlnbi5FTkR9ICovfVxuICAgICAgICB7LyogICB2YWxpZ249e0d0ay5BbGlnbi5FTkR9ICovfVxuICAgICAgICB7LyogPjwvYm94PiAqL31cblxuICAgICAgICA8Ym94IC8qIGNzcz1cInBhZGRpbmctYm90dG9tOjUwcHg7XCIgKi8+XG4gICAgICAgICAgPGNlbnRlcmJveCBjc3NOYW1lPVwiY2VudGVyYm94XCIgaGV4cGFuZD5cbiAgICAgICAgICAgIDxib3ggJHR5cGU9XCJzdGFydFwiPlxuICAgICAgICAgICAgICA8V29ya3NwYWNlcyBnZGttb25pdG9yPXtnZGttb25pdG9yfSBpbmRleD17aW5kZXh9IC8+XG4gICAgICAgICAgICA8L2JveD5cblxuICAgICAgICAgICAgPGJveCAkdHlwZT1cImNlbnRlclwiPlxuICAgICAgICAgICAgICA8RGFzaGJvYXJkQnV0dG9uIC8+XG4gICAgICAgICAgICA8L2JveD5cblxuICAgICAgICAgICAgPGJveCAkdHlwZT1cImVuZFwiIHNwYWNpbmc9e3NwYWNpbmcubGFyZ2V9PlxuICAgICAgICAgICAgICA8VHJheSAvPlxuXG4gICAgICAgICAgICAgIDxib3ggc3BhY2luZz17c3BhY2luZy5zbWFsbH0+XG4gICAgICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICAgICAgY2xhc3M9XCJmbGF0XCJcbiAgICAgICAgICAgICAgICAgIG9uQ2xpY2tlZD17YXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IGV4ZWNBc3luYyhcImh5cHJjdGwgc3dpdGNoeGtibGF5b3V0IGN1cnJlbnQgbmV4dFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICBzZXRLZXlib2FyZChnZXRLZXlib2FyZCgpKTtcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICBwcmludGVycihlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICB0b29sdGlwVGV4dD1cIkNhbWJpYXIgVGVjbGFkb1wiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgPGxhYmVsIGxhYmVsPXtrZXlib2FyZCgodikgPT4gZm9ybWF0S2V5Ym9hcmQodikpfSAvPlxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuXG4gICAgICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICAgICAgaWNvbk5hbWU9XCJpbWFnZS1yb3VuZC1zeW1ib2xpY1wiXG4gICAgICAgICAgICAgICAgICBjbGFzcz1cImZsYXRcIlxuICAgICAgICAgICAgICAgICAgb25DbGlja2VkPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZU1wdlBhcGVySW1hZ2UoXCJuZXh0XCIpO1xuICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICQ9eyhzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGdlc3R1cmUgPSBHdGsuR2VzdHVyZUNsaWNrLm5ldygpO1xuXG4gICAgICAgICAgICAgICAgICAgIGdlc3R1cmUuc2V0X2J1dHRvbigzKTtcblxuICAgICAgICAgICAgICAgICAgICBnZXN0dXJlLmNvbm5lY3QoXCJyZWxlYXNlZFwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgY2hhbmdlTXB2UGFwZXJJbWFnZShcInByZXZcIik7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIHMuYWRkX2NvbnRyb2xsZXIoZ2VzdHVyZSk7XG4gICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgdG9vbHRpcFRleHQ9XCJDYW1iaWFyIGZvbmRvIGRlIHBhbnRhbGxhXCJcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICAgIGljb25OYW1lPVwiY29sb3ItcGlja2VyLXN5bWJvbGljXCJcbiAgICAgICAgICAgICAgICAgIGNsYXNzPVwiZmxhdFwiXG4gICAgICAgICAgICAgICAgICBvbkNsaWNrZWQ9eygpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZXhlY0FzeW5jKFxuICAgICAgICAgICAgICAgICAgICAgIFwiaHlwcnBpY2tlciAtYVwiLCAvLyAtYSBwYXJhIGNvcGlhciBhbCBwb3J0YXBhcGVsZXMgYXV0b21cdTAwRTF0aWNhbWVudGVcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICB0b29sdGlwVGV4dD1cIkhheiBjbGljIHBhcmEgZWxlZ2lyIHVuIGNvbG9yXCJcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICAgIGljb25OYW1lPVwiY2xpcGJvYXJkLXN5bWJvbGljXCJcbiAgICAgICAgICAgICAgICAgIGNsYXNzPVwiZmxhdFwiXG4gICAgICAgICAgICAgICAgICBvbkNsaWNrZWQ9eygpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGVybWluYWwgPSBmaW5kQXZhaWxhYmxlVGVybWluYWwoKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRlcm1pbmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcHJpbnRlcnIoXCJOTyB0ZXJtaW5hbFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBleGVjKFt0ZXJtaW5hbCwgXCItLWNsYXNzXCIsIFwiY2xpcHNlXCIsIFwiLWVcIiwgXCJjbGlwc2VcIl0pO1xuICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgIHRvb2x0aXBUZXh0PVwiQ2xpcGJvYXJkXCJcbiAgICAgICAgICAgICAgICAvPlxuXG4gICAgICAgICAgICAgICAgey8qIDxOb3RpZmljYXRpb25zUG9wb3ZlciAvPiAqL31cbiAgICAgICAgICAgICAgPC9ib3g+XG5cbiAgICAgICAgICAgICAgPFRpbWVSb3cgLz5cblxuICAgICAgICAgICAgICA8Q29udHJvbFBhbmVsIC8+XG5cbiAgICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICAgIGljb25OYW1lPVwic3lzdGVtLXNodXRkb3duXCJcbiAgICAgICAgICAgICAgICBjbGFzcz1cImRlc3RydWN0aXZlLWFjdGlvbiBjaXJjdWxhclwiXG4gICAgICAgICAgICAgICAgb25DbGlja2VkPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgICBzZXRWaXNpYmxlTG9nb3V0Py4odHJ1ZSk7XG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvYm94PlxuICAgICAgICAgIDwvY2VudGVyYm94PlxuICAgICAgICA8L2JveD5cbiAgICAgIDwvR3RrLk92ZXJsYXk+XG4gICAgPC93aW5kb3c+XG4gICk7XG59XG4iLCAiaW1wb3J0IHsgY3JlYXRlU3RhdGUsIGNyZWF0ZUNvbXB1dGVkLCBvbkNsZWFudXAsIEFjY2Vzc29yLCBTZXR0ZXIgfSBmcm9tIFwiYWdzXCI7XG5pbXBvcnQgeyBHZGssIEd0ayB9IGZyb20gXCJhZ3MvZ3RrNFwiO1xuaW1wb3J0IE1wcmlzIGZyb20gXCJnaTovL0FzdGFsTXByaXNcIjtcbmltcG9ydCBDYXZhIGZyb20gXCJnaTovL0FzdGFsQ2F2YVwiO1xuaW1wb3J0IEh5cHJsYW5kIGZyb20gXCJnaTovL0FzdGFsSHlwcmxhbmRcIjtcbmltcG9ydCBDYWlybyBmcm9tIFwiY2Fpcm9cIjtcbmltcG9ydCB7IGZvcm1hdFNlY29uZHMgfSBmcm9tIFwiLi4vdXRpbHMvdGltZVwiO1xuaW1wb3J0IFBhbmdvIGZyb20gXCJnaTovL1BhbmdvXCI7XG5pbXBvcnQgeyB1c2VQbGF5ZXJJbmZvIH0gZnJvbSBcIi4uL2hvb2tzL3VzZVBsYXllckluZm9cIjtcbmltcG9ydCB7IFBsYXllckxpc3RJdGVtT2JqZWN0IH0gZnJvbSBcIi4uL29iamVjdHMvUGxheWVyTGlzdEl0ZW1PYmplY3RcIjtcbmltcG9ydCBDaXJjdWxhckltYWdlIGZyb20gXCIuL0NpcmN1bGFySW1hZ2VcIjtcbmltcG9ydCB7IHNwYWNpbmcgfSBmcm9tIFwiLi4vY29uc3RhbnRzL3RoZW1lL3NwYWNpbmdcIjtcbmltcG9ydCB7IGdldElzSWNvbiB9IGZyb20gXCIuLi91dGlscy9pY29uc1wiO1xuaW1wb3J0IHsgdXNlQ29udHJvbGxlZFNjYWxlIH0gZnJvbSBcIi4uL2hvb2tzL3VzZUNvbnRyb2xsZWRTY2FsZVwiO1xuXG4vLyBUT0RPOiBBZGQgc29tZSB3YXkgdG8gdXBkYXRlIHRoZSB2b2x1bWUgYnkgc2Nyb2xsaW5nXG5cbmNsYXNzIExpc3RJdGVtV2l0aEltYWdlIGV4dGVuZHMgR3RrLkxpc3RJdGVtIHtcbiAgX2ltYWdlITogR3RrLkltYWdlO1xuICBfbGFiZWwhOiBHdGsuTGFiZWw7XG59XG5cbmZ1bmN0aW9uIG1hdGNoQ2xpZW50VG9QbGF5ZXIoXG4gIHBsYXllcjogTXByaXMuUGxheWVyLFxuKTogSHlwcmxhbmQuQ2xpZW50IHwgdW5kZWZpbmVkIHtcbiAgY29uc3QgaHlwciA9IEh5cHJsYW5kLmdldF9kZWZhdWx0KCk7XG4gIGNvbnN0IGVudHJ5ID0gcGxheWVyLmdldF9lbnRyeSgpPy50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoLy0vZywgXCJfXCIpOyAvLyBub3JtYWxpemVcbiAgY29uc3QgaWRlbnRpdHkgPSBwbGF5ZXIuZ2V0X2lkZW50aXR5KCkudG9Mb3dlckNhc2UoKTtcblxuICBjb25zdCBjbGllbnRzID0gaHlwci5nZXRfY2xpZW50cygpO1xuXG4gIHJldHVybiAoXG4gICAgY2xpZW50cy5maW5kKChjKSA9PlxuICAgICAgY1xuICAgICAgICAuZ2V0X2NsYXNzKClcbiAgICAgICAgLnRvTG93ZXJDYXNlKClcbiAgICAgICAgLmluY2x1ZGVzKGVudHJ5IHx8IGlkZW50aXR5KSxcbiAgICApID8/IGNsaWVudHMuZmluZCgoYykgPT4gYy5nZXRfdGl0bGUoKS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKGlkZW50aXR5KSlcbiAgKTtcbn1cblxuY29uc3QgU2VsZWN0ID0gKHtcbiAgYWxsUGxheWVycyxcbiAgc2V0U2VsZWN0ZWRQbGF5ZXIsXG4gIHNlbGVjdGVkSW5kZXgsXG4gIHNlbGVjdGlvbk1vZGVsLFxufToge1xuICBhbGxQbGF5ZXJzOiBBY2Nlc3NvcjxNcHJpcy5QbGF5ZXJbXT47XG4gIHNldFNlbGVjdGVkUGxheWVyOiBTZXR0ZXI8TXByaXMuUGxheWVyPjtcbiAgc2VsZWN0ZWRJbmRleDogQWNjZXNzb3I8bnVtYmVyPjtcbiAgc2VsZWN0aW9uTW9kZWw6IEd0ay5TaW5nbGVTZWxlY3Rpb247XG59KSA9PiB7XG4gIGNvbnN0IFtoYXNJdGVtcywgc2V0SGFzSXRlbXNdID0gY3JlYXRlU3RhdGUoc2VsZWN0aW9uTW9kZWwuZ2V0X25faXRlbXMoKSA+IDApO1xuXG4gIHNlbGVjdGlvbk1vZGVsLmNvbm5lY3QoXCJub3RpZnk6Om4taXRlbXNcIiwgKCkgPT4ge1xuICAgIGNvbnN0IGl0ZW1zQ291bnQgPSBzZWxlY3Rpb25Nb2RlbC5nZXRfbl9pdGVtcygpO1xuICAgIHNldEhhc0l0ZW1zKGl0ZW1zQ291bnQgPiAwKTtcbiAgfSk7XG4gIHJldHVybiAoXG4gICAgPEd0ay5Ecm9wRG93blxuICAgICAgbW9kZWw9e3NlbGVjdGlvbk1vZGVsfVxuICAgICAgc2VsZWN0ZWQ9e3NlbGVjdGVkSW5kZXh9XG4gICAgICBzZW5zaXRpdmU9e2hhc0l0ZW1zfVxuICAgICAgb25Ob3RpZnlTZWxlY3RlZEl0ZW09eyhzKSA9PiB7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSBzLmdldF9zZWxlY3RlZF9pdGVtKCkgYXMgUGxheWVyTGlzdEl0ZW1PYmplY3Q7XG5cbiAgICAgICAgY29uc3QgcGxheWVyID0gYWxsUGxheWVyc1xuICAgICAgICAgIC5nZXQoKVxuICAgICAgICAgIC5maW5kKChwKSA9PiBwLmdldF9idXNfbmFtZSgpID09PSBpdGVtPy5idXNOYW1lKTtcblxuICAgICAgICBpZiAocGxheWVyKSB7XG4gICAgICAgICAgc2V0U2VsZWN0ZWRQbGF5ZXIocGxheWVyKTtcbiAgICAgICAgfVxuICAgICAgfX1cbiAgICAgIGZhY3Rvcnk9e1xuICAgICAgICA8R3RrLlNpZ25hbExpc3RJdGVtRmFjdG9yeVxuICAgICAgICAgIG9uU2V0dXA9eyhfZmFjdG9ydSwgbCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbGlzdEl0ZW0gPSBsIGFzIExpc3RJdGVtV2l0aEltYWdlO1xuICAgICAgICAgICAgY29uc3QgYm94ID0gbmV3IEd0ay5Cb3goe1xuICAgICAgICAgICAgICBzcGFjaW5nOiBzcGFjaW5nLm5vcm1hbCxcbiAgICAgICAgICAgICAgb3JpZW50YXRpb246IEd0ay5PcmllbnRhdGlvbi5IT1JJWk9OVEFMLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zdCBpbWFnZSA9IG5ldyBHdGsuSW1hZ2Uoe1xuICAgICAgICAgICAgICBpY29uTmFtZTogXCJtZWRpYS1vcHRpY2FsLXN5bWJvbGljXCIsIC8vIHlvdSBjYW4gY2hhbmdlIHRvIGFueSBpY29uIG5hbWVcbiAgICAgICAgICAgICAgcGl4ZWxTaXplOiAxNixcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBjb25zdCBsYWJlbCA9IG5ldyBHdGsuTGFiZWwoeyB4YWxpZ246IDAgfSk7XG5cbiAgICAgICAgICAgIC8vIFN0b3JlIHJlZmVyZW5jZXMgZm9yIHVzZSBpbiBgb25CaW5kYFxuICAgICAgICAgICAgbGlzdEl0ZW0uX2ltYWdlID0gaW1hZ2U7XG4gICAgICAgICAgICBsaXN0SXRlbS5fbGFiZWwgPSBsYWJlbDtcblxuICAgICAgICAgICAgYm94LmFwcGVuZChpbWFnZSk7XG4gICAgICAgICAgICBib3guYXBwZW5kKGxhYmVsKTtcblxuICAgICAgICAgICAgbGlzdEl0ZW0uc2V0X2NoaWxkKGJveCk7XG4gICAgICAgICAgfX1cbiAgICAgICAgICBvbkJpbmQ9eyhfZmFjdG9yeSwgbCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbGlzdEl0ZW0gPSBsIGFzIExpc3RJdGVtV2l0aEltYWdlO1xuXG4gICAgICAgICAgICBjb25zdCBsYWJlbCA9IGxpc3RJdGVtLl9sYWJlbCBhcyBHdGsuTGFiZWw7XG4gICAgICAgICAgICBjb25zdCBpbWFnZSA9IGxpc3RJdGVtLl9pbWFnZSBhcyBHdGsuSW1hZ2U7XG5cbiAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSBsaXN0SXRlbS5nZXRfaXRlbTxQbGF5ZXJMaXN0SXRlbU9iamVjdD4oKTtcblxuICAgICAgICAgICAgbGFiZWw/LnNldF90ZXh0KGl0ZW0udGV4dCk7XG5cbiAgICAgICAgICAgIGNvbnN0IGRpc3BsYXkgPSBHZGsuRGlzcGxheS5nZXRfZGVmYXVsdCgpO1xuICAgICAgICAgICAgaWYgKGRpc3BsYXkpIHtcbiAgICAgICAgICAgICAgY29uc3QgaWNvblRoZW1lID0gR3RrLkljb25UaGVtZS5nZXRfZm9yX2Rpc3BsYXkoZGlzcGxheSk7XG5cbiAgICAgICAgICAgICAgY29uc3QgaWNvbiA9IGl0ZW0uZGVza3RvcEljb247XG5cbiAgICAgICAgICAgICAgaWYgKGdldElzSWNvbih7IGljb24sIGljb25UaGVtZSB9KSkge1xuICAgICAgICAgICAgICAgIGltYWdlLnNldF9mcm9tX2ljb25fbmFtZShpY29uKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpbWFnZS5zZXRfZnJvbV9pY29uX25hbWUoXCJtdWx0aW1lZGlhLXBsYXllci1zeW1ib2xpY1wiKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH19XG4gICAgICAgIC8+XG4gICAgICB9XG4gICAgPjwvR3RrLkRyb3BEb3duPlxuICApO1xufTtcblxuY29uc3QgTWVkaWFQbGF5ZXIgPSAoeyB2YXJpYW50IH06IHsgdmFyaWFudDogXCJjb21wbGV0ZVwiIHwgXCJtaW5pbWFsXCIgfSkgPT4ge1xuICBjb25zdCB7XG4gICAgcGxheWVySW5mbzoge1xuICAgICAgY2FuTG9vcCxcbiAgICAgIGNvdmVyQXJ0LFxuICAgICAgcGxheWJhY2tTdGF0dXMsXG4gICAgICBjYW5QbGF5T3JQYXVzZSxcbiAgICAgIGNhbk5leHQsXG4gICAgICBjYW5CYWNrLFxuICAgICAgcG9zaXRpb24sXG4gICAgICBsZW5ndGgsXG4gICAgICBhbGJ1bSxcbiAgICAgIGxvb3BTdGF0dXMsXG4gICAgICBjYW5TaHVmZmxlLFxuICAgICAgc2h1ZmZsZVN0YXR1cyxcbiAgICAgIGFydGlzdCxcbiAgICAgIHRpdGxlLFxuICAgIH0sXG4gICAgc2VsZWN0ZWRQbGF5ZXIsXG4gICAgc2V0U2VsZWN0ZWRQbGF5ZXIsXG4gICAgYWxsUGxheWVycyxcbiAgICBzZWxlY3RlZEluZGV4LFxuICAgIHNlbGVjdGlvbk1vZGVsLFxuICB9ID0gdXNlUGxheWVySW5mbygpO1xuXG4gIGNvbnN0IHBsYXlCdG5JY29uID0gcGxheWJhY2tTdGF0dXMoKHBsYXliYWNrU3RhdHVzKSA9PiB7XG4gICAgcmV0dXJuIHBsYXliYWNrU3RhdHVzID09PSBNcHJpcy5QbGF5YmFja1N0YXR1cy5QTEFZSU5HXG4gICAgICA/IFwibWVkaWEtcGxheWJhY2stcGF1c2VcIlxuICAgICAgOiBwbGF5YmFja1N0YXR1cyA9PT0gTXByaXMuUGxheWJhY2tTdGF0dXMuUEFVU0VEXG4gICAgICAgID8gXCJtZWRpYS1wbGF5YmFjay1zdGFydFwiXG4gICAgICAgIDogXCJtZWRpYS1wbGF5YmFjay1zdG9wXCI7XG4gIH0pO1xuXG4gIGNvbnN0IHNvbmdMYWJlbCA9IGNyZWF0ZUNvbXB1dGVkKFt0aXRsZSwgYXJ0aXN0XSwgKC4uLmFyZ3MpID0+IHtcbiAgICByZXR1cm4gYXJncy5maWx0ZXIoQm9vbGVhbikuam9pbihcIiAtIFwiKSB8fCBcIk5vdGhpbmcgUGxheWluZ1wiO1xuICB9KTtcblxuICBjb25zdCBpc1NlbnNpdGl2ZVBsYXlPclBhdXNlID0gY2FuUGxheU9yUGF1c2U7XG4gIGNvbnN0IGlzU2Vuc2l0aXZlTmV4dCA9IGNhbk5leHQ7XG4gIGNvbnN0IGlzU2Vuc2l0aXZlUHJldiA9IGNhbkJhY2s7XG5cbiAgY29uc3Qge1xuICAgIHJlc3RhcnRBZGp1c3RtZW50LFxuICAgIHNldHVwLFxuICAgIHN0YXRlOiB7IHNldElzU2Vla2luZyB9LFxuICAgIGFkanVzdG1lbnQsXG4gIH0gPSB1c2VDb250cm9sbGVkU2NhbGUoe1xuICAgIHZhbHVlOiBwb3NpdGlvbixcbiAgICBsaW1pdDogbGVuZ3RoLFxuICAgIGluY3JlbWVudGVyOiAxLFxuICAgIHVwZGF0ZVZhbHVlOiAodikgPT4ge1xuICAgICAgc2VsZWN0ZWRQbGF5ZXIuZ2V0KCk/LnNldF9wb3NpdGlvbih2KTtcbiAgICB9LFxuICAgIHZhcmlhbnQ6IFwic2Vla1wiLFxuICB9KTtcblxuICBjb25zdCBjYXZhID0gQ2F2YS5nZXRfZGVmYXVsdCgpO1xuICBjYXZhPy5zZXRfYmFycyg0OCk7XG4gIGxldCBjYXZhRHJhd2luZ0FyZWE6IEd0ay5EcmF3aW5nQXJlYSB8IHVuZGVmaW5lZDtcbiAgbGV0IGltZ0RyYXdpbmdBcmVhOiBHdGsuRHJhd2luZ0FyZWEgfCB1bmRlZmluZWQ7XG5cbiAgY29uc3QgW2NhdmFCYXJzLCBzZXRDYXZhQmFyc10gPSBjcmVhdGVTdGF0ZTxudW1iZXJbXT4oXG4gICAgbmV3IEFycmF5KGNhdmE/LmdldF9iYXJzKCkpLmZpbGwoMCksXG4gICk7XG5cbiAgY29uc3QgY29udmVydFVuc3Vic2NyaWJlID0gY292ZXJBcnQuc3Vic2NyaWJlKCgpID0+IHtcbiAgICBpbWdEcmF3aW5nQXJlYT8ucXVldWVfZHJhdygpO1xuICB9KTtcblxuICBjb25zdCBzZWxlY3RlZFBsYXllclVuc3Vic2NyaWJlID0gc2VsZWN0ZWRQbGF5ZXIuc3Vic2NyaWJlKCgpID0+IHtcbiAgICBjb25zdCBsZW5ndGggPSBzZWxlY3RlZFBsYXllci5nZXQoKS5nZXRfbGVuZ3RoKCkgPz8gMDtcbiAgICBjb25zdCBwb3NpdGlvbiA9IHNlbGVjdGVkUGxheWVyLmdldCgpLmdldF9wb3NpdGlvbigpID8/IDA7XG4gICAgLy8gd2UgbmVlZCB0byByZXN0YXJ0IHRoZSB3aG9sZSBwb3NpdGlvbkFkanVzdG1lbnQgdG8gdXBkYXRlIHRoZSBtYXggbGVuZ3RoIGNvcnJlY3RseSB3aGVuIGNoYW5naW5nIHBsYXllcnNcbiAgICAvLyB3aXRob3V0IHRoaXMgdGhlIHVwcGVyIG9yIG1heCB2YWx1ZSBpcyBub3QgdXBkYXRlZFxuICAgIHJlc3RhcnRBZGp1c3RtZW50KHtcbiAgICAgIHZhbHVlOiBwb3NpdGlvbixcbiAgICAgIGxpbWl0OiBsZW5ndGgsXG4gICAgfSk7XG4gIH0pO1xuXG4gIGNhdmE/LmNvbm5lY3QoXCJub3RpZnk6OnZhbHVlc1wiLCAoKSA9PiB7XG4gICAgY29uc3QgbGVycCA9IChhOiBudW1iZXIsIGI6IG51bWJlciwgdDogbnVtYmVyKSA9PiBhICsgKGIgLSBhKSAqIHQ7XG4gICAgY29uc3QgaXNQbGF5aW5nID0gcGxheWJhY2tTdGF0dXMuZ2V0KCkgPT09IE1wcmlzLlBsYXliYWNrU3RhdHVzLlBMQVlJTkc7XG5cbiAgICBjb25zdCBteUJhcnM6IG51bWJlcltdID0gWy4uLmNhdmFCYXJzLmdldCgpXTtcbiAgICBjb25zdCB2YWx1ZXMgPSBjYXZhLmdldF92YWx1ZXMoKTtcbiAgICBjb25zdCBiYXJzID0gY2F2YS5nZXRfYmFycygpO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBiYXJzOyBpKyspIHtcbiAgICAgIGNvbnN0IG5ld1ZhbCA9IHZhbHVlc1tpXSA/PyAxO1xuXG4gICAgICBpZiAoaXNQbGF5aW5nKSB7XG4gICAgICAgIG15QmFyc1tpXSA9IGxlcnAobXlCYXJzW2ldLCBuZXdWYWwsIDAuMyk7IC8vIHNtb290aCB0cmFuc2l0aW9uXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBteUJhcnNbaV0gPSBsZXJwKG15QmFyc1tpXSwgMCwgMC4xKTsgLy8gc21vb3RoIHRyYW5zaXRpb25cbiAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRDYXZhQmFycyhteUJhcnMpO1xuICAgIGNhdmFEcmF3aW5nQXJlYT8ucXVldWVfZHJhdygpO1xuICB9KTtcblxuICBvbkNsZWFudXAoKCkgPT4ge1xuICAgIGNvbnZlcnRVbnN1YnNjcmliZSgpO1xuICAgIHNlbGVjdGVkUGxheWVyVW5zdWJzY3JpYmUoKTtcbiAgfSk7XG5cbiAgcmV0dXJuIChcbiAgICA8Ym94XG4gICAgICBvcmllbnRhdGlvbj17XG4gICAgICAgIHZhcmlhbnQgPT09IFwiY29tcGxldGVcIlxuICAgICAgICAgID8gR3RrLk9yaWVudGF0aW9uLkhPUklaT05UQUxcbiAgICAgICAgICA6IEd0ay5PcmllbnRhdGlvbi5WRVJUSUNBTFxuICAgICAgfVxuICAgICAgaGV4cGFuZFxuICAgICAgc3BhY2luZz17c3BhY2luZy5zbWFsbH1cbiAgICA+XG4gICAgICA8b3ZlcmxheT5cbiAgICAgICAgPGJveFxuICAgICAgICAgIGhlaWdodFJlcXVlc3Q9e3ZhcmlhbnQgPT09IFwiY29tcGxldGVcIiA/IDMwMCA6IDEwMH1cbiAgICAgICAgICB3aWR0aFJlcXVlc3Q9e3ZhcmlhbnQgPT09IFwiY29tcGxldGVcIiA/IDMwMCA6IDE1MH1cbiAgICAgICAgLz5cbiAgICAgICAgPENpcmN1bGFySW1hZ2VcbiAgICAgICAgICAkdHlwZT1cIm92ZXJsYXlcIlxuICAgICAgICAgIGltZz17Y292ZXJBcnR9XG4gICAgICAgICAgc2l6ZT17dmFyaWFudCA9PT0gXCJjb21wbGV0ZVwiID8gMTgwIDogOTB9XG4gICAgICAgICAgaWNvbkZhbGxiYWNrPVwibWVkaWEtYWxidW0tdHJhY2tcIlxuICAgICAgICAvPlxuICAgICAgICA8R3RrLkRyYXdpbmdBcmVhXG4gICAgICAgICAgJHR5cGU9XCJvdmVybGF5XCJcbiAgICAgICAgICBjb250ZW50V2lkdGg9ezI4MH1cbiAgICAgICAgICBjb250ZW50SGVpZ2h0PXsyODB9XG4gICAgICAgICAgdmlzaWJsZT17dmFyaWFudCA9PT0gXCJjb21wbGV0ZVwifVxuICAgICAgICAgIGNsYXNzPVwiTWVkaWFQbGF5ZXJCYXJzXCJcbiAgICAgICAgICBoZXhwYW5kPXt0cnVlfVxuICAgICAgICAgIHZleHBhbmQ9e3RydWV9XG4gICAgICAgICAgJD17KHMpID0+IHtcbiAgICAgICAgICAgIHMuc2V0X2RyYXdfZnVuYygod2lkZ2V0LCBjciwgd2lkdGgsIGhlaWdodCkgPT4ge1xuICAgICAgICAgICAgICBjb25zdCBiYXJzID0gY2F2YUJhcnMuZ2V0KCk7IC8vIFlvdXIgY2F2YSBiYXJzIGRhdGFcblxuICAgICAgICAgICAgICBjb25zdCBjeCA9IHdpZHRoIC8gMjtcbiAgICAgICAgICAgICAgY29uc3QgY3kgPSBoZWlnaHQgLyAyO1xuICAgICAgICAgICAgICBjb25zdCByYWRpdXMgPSAxMDA7XG4gICAgICAgICAgICAgIGNvbnN0IG1heEJhckxlbmd0aCA9IDgwO1xuICAgICAgICAgICAgICBjb25zdCBjb3VudCA9IGJhcnMubGVuZ3RoO1xuXG4gICAgICAgICAgICAgIGNvbnN0IGNvbG9yID0gd2lkZ2V0LmdldF9jb2xvcigpO1xuXG4gICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGFuZ2xlID0gKGkgLyBjb3VudCkgKiBNYXRoLlBJICogMjtcbiAgICAgICAgICAgICAgICBjb25zdCBiYXJMZW5ndGggPSBNYXRoLnBvdyhiYXJzW2ldLCAxLjUpICogbWF4QmFyTGVuZ3RoO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgeDEgPSBjeCArIE1hdGguY29zKGFuZ2xlKSAqIHJhZGl1cztcbiAgICAgICAgICAgICAgICBjb25zdCB5MSA9IGN5ICsgTWF0aC5zaW4oYW5nbGUpICogcmFkaXVzO1xuICAgICAgICAgICAgICAgIGNvbnN0IHgyID0gY3ggKyBNYXRoLmNvcyhhbmdsZSkgKiAocmFkaXVzICsgYmFyTGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBjb25zdCB5MiA9IGN5ICsgTWF0aC5zaW4oYW5nbGUpICogKHJhZGl1cyArIGJhckxlbmd0aCk7XG5cbiAgICAgICAgICAgICAgICBjci5zZXRTb3VyY2VSR0JBKFxuICAgICAgICAgICAgICAgICAgY29sb3IucmVkLFxuICAgICAgICAgICAgICAgICAgY29sb3IuZ3JlZW4sXG4gICAgICAgICAgICAgICAgICBjb2xvci5ibHVlLFxuICAgICAgICAgICAgICAgICAgY29sb3IuYWxwaGEsXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBjci5zZXRMaW5lV2lkdGgoNCk7XG4gICAgICAgICAgICAgICAgY3Iuc2V0TGluZUNhcChDYWlyby5MaW5lQ2FwLlJPVU5EKTsgLy8gdGhpcyByb3VuZHMgdGhlIGxpbmUgZW5kc1xuICAgICAgICAgICAgICAgIGNyLm1vdmVUbyh4MSwgeTEpO1xuICAgICAgICAgICAgICAgIGNyLmxpbmVUbyh4MiwgeTIpO1xuICAgICAgICAgICAgICAgIGNyLnN0cm9rZSgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNhdmFEcmF3aW5nQXJlYSA9IHM7XG4gICAgICAgICAgfX1cbiAgICAgICAgLz5cbiAgICAgIDwvb3ZlcmxheT5cblxuICAgICAgPGJveFxuICAgICAgICBvcmllbnRhdGlvbj17R3RrLk9yaWVudGF0aW9uLlZFUlRJQ0FMfVxuICAgICAgICBzcGFjaW5nPXtzcGFjaW5nLnhTbWFsbH1cbiAgICAgICAgdmFsaWduPXtHdGsuQWxpZ24uQ0VOVEVSfVxuICAgICAgPlxuICAgICAgICA8Ym94XG4gICAgICAgICAgaGFsaWduPXtHdGsuQWxpZ24uQ0VOVEVSfVxuICAgICAgICAgIHZhbGlnbj17R3RrLkFsaWduLkNFTlRFUn1cbiAgICAgICAgICBvcmllbnRhdGlvbj17R3RrLk9yaWVudGF0aW9uLlZFUlRJQ0FMfVxuICAgICAgICA+XG4gICAgICAgICAgPGJveFxuICAgICAgICAgICAgd2lkdGhSZXF1ZXN0PXsxMDB9XG4gICAgICAgICAgICBoYWxpZ249e0d0ay5BbGlnbi5DRU5URVJ9XG4gICAgICAgICAgICB2YWxpZ249e0d0ay5BbGlnbi5DRU5URVJ9XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGxhYmVsXG4gICAgICAgICAgICAgIGxhYmVsPXtzb25nTGFiZWx9XG4gICAgICAgICAgICAgIGNsYXNzPVwiTWVkaWFQbGF5ZXJTb25nTGFiZWxcIlxuICAgICAgICAgICAgICBlbGxpcHNpemU9e1BhbmdvLkVsbGlwc2l6ZU1vZGUuRU5EfVxuICAgICAgICAgICAgICBtYXhXaWR0aENoYXJzPXt2YXJpYW50ID09PSBcImNvbXBsZXRlXCIgPyA1MCA6IDMwfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L2JveD5cbiAgICAgICAgICA8Ym94XG4gICAgICAgICAgICBoYWxpZ249e0d0ay5BbGlnbi5DRU5URVJ9XG4gICAgICAgICAgICB2YWxpZ249e0d0ay5BbGlnbi5DRU5URVJ9XG4gICAgICAgICAgICB2aXNpYmxlPXthbGJ1bSgodikgPT4gISF2KX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8bGFiZWxcbiAgICAgICAgICAgICAgbGFiZWw9e2FsYnVtfVxuICAgICAgICAgICAgICBlbGxpcHNpemU9e1BhbmdvLkVsbGlwc2l6ZU1vZGUuRU5EfVxuICAgICAgICAgICAgICBtYXhXaWR0aENoYXJzPXt2YXJpYW50ID09PSBcImNvbXBsZXRlXCIgPyA1MCA6IDMwfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L2JveD5cbiAgICAgICAgPC9ib3g+XG5cbiAgICAgICAgPEd0ay5TY2FsZVxuICAgICAgICAgIG1hcmdpblN0YXJ0PXsxNn1cbiAgICAgICAgICBtYXJnaW5FbmQ9ezE2fVxuICAgICAgICAgIHNlbnNpdGl2ZT17aXNTZW5zaXRpdmVQbGF5T3JQYXVzZX1cbiAgICAgICAgICBhZGp1c3RtZW50PXthZGp1c3RtZW50fVxuICAgICAgICAgIGRyYXdfdmFsdWU9e2ZhbHNlfVxuICAgICAgICAgIC8vIHZhbHVlIGNoYW5nZWRcbiAgICAgICAgICBvblZhbHVlQ2hhbmdlZD17KHMpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGFkanVzdG1lbnQgPSBzLmdldF9hZGp1c3RtZW50KCk7XG4gICAgICAgICAgICBjb25zdCBtYXggPSBhZGp1c3RtZW50LmdldF91cHBlcigpO1xuICAgICAgICAgICAgY29uc3QgdmFsdWU6IG51bWJlciA9IGFkanVzdG1lbnQuZ2V0X3ZhbHVlKCk7XG5cbiAgICAgICAgICAgIHMuY2xlYXJfbWFya3MoKTtcblxuICAgICAgICAgICAgcy5hZGRfbWFyaygwLCBHdGsuUG9zaXRpb25UeXBlLkJPVFRPTSwgZm9ybWF0U2Vjb25kcyh2YWx1ZSkpO1xuICAgICAgICAgICAgcy5hZGRfbWFyayhtYXgsIEd0ay5Qb3NpdGlvblR5cGUuUklHSFQsIGZvcm1hdFNlY29uZHMobWF4KSk7XG4gICAgICAgICAgfX1cbiAgICAgICAgICAkPXsocykgPT4ge1xuICAgICAgICAgICAgc2V0dXAocyk7XG4gICAgICAgICAgfX1cbiAgICAgICAgLz5cblxuICAgICAgICA8Y2VudGVyYm94IGhleHBhbmQ+XG4gICAgICAgICAge3ZhcmlhbnQgPT09IFwiY29tcGxldGVcIiA/IChcbiAgICAgICAgICAgIDxib3ggJHR5cGU9XCJzdGFydFwiIHNwYWNpbmc9e3NwYWNpbmcuc21hbGx9PlxuICAgICAgICAgICAgICA8R3RrLlRvZ2dsZUJ1dHRvblxuICAgICAgICAgICAgICAgIHNlbnNpdGl2ZT17Y2FuTG9vcH1cbiAgICAgICAgICAgICAgICBhY3RpdmU9e2xvb3BTdGF0dXMoXG4gICAgICAgICAgICAgICAgICAocykgPT4gcyA9PT0gTXByaXMuTG9vcC5QTEFZTElTVCB8fCBzID09PSBNcHJpcy5Mb29wLlRSQUNLLFxuICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgb25DbGlja2VkPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgICBzZWxlY3RlZFBsYXllci5nZXQoKS5sb29wKCk7XG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxpbWFnZVxuICAgICAgICAgICAgICAgICAgaWNvbk5hbWU9e2xvb3BTdGF0dXMoKHN0YXR1cykgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdHVzID09PSBNcHJpcy5Mb29wLlRSQUNLKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwibWVkaWEtcGxheWxpc3QtcmVwZWF0LXNvbmdcIjtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJtZWRpYS1wbGF5bGlzdC1yZXBlYXRcIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9HdGsuVG9nZ2xlQnV0dG9uPlxuXG4gICAgICAgICAgICAgIDxHdGsuVG9nZ2xlQnV0dG9uXG4gICAgICAgICAgICAgICAgc2Vuc2l0aXZlPXtjYW5TaHVmZmxlfVxuICAgICAgICAgICAgICAgIGFjdGl2ZT17c2h1ZmZsZVN0YXR1cygocykgPT4gcyA9PT0gTXByaXMuU2h1ZmZsZS5PTil9XG4gICAgICAgICAgICAgICAgb25DbGlja2VkPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAvLyBpdCB0b2dnbGVzIGNvcnJlY3RseSBzZXR0aW5nIGFsd2F5cyBPTiwgY3JhenlcbiAgICAgICAgICAgICAgICAgIHNlbGVjdGVkUGxheWVyLmdldCgpLnNldF9zaHVmZmxlX3N0YXR1cyhNcHJpcy5TaHVmZmxlLk9OKTtcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPGltYWdlXG4gICAgICAgICAgICAgICAgICBpY29uTmFtZT17c2h1ZmZsZVN0YXR1cygoc3RhdHVzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGF0dXMgPT09IE1wcmlzLlNodWZmbGUuT0ZGKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwibWVkaWEtcGxheWxpc3Qtbm8tc2h1ZmZsZVwiO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIm1lZGlhLXBsYXlsaXN0LXNodWZmbGVcIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9HdGsuVG9nZ2xlQnV0dG9uPlxuICAgICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgICAgaWNvbk5hbWU9XCJlZGl0LWZpbmRcIlxuICAgICAgICAgICAgICAgIG9uQ2xpY2tlZD17KCkgPT4ge1xuICAgICAgICAgICAgICAgICAgY29uc3QgcGxheWVyID0gc2VsZWN0ZWRQbGF5ZXIuZ2V0KCk7XG4gICAgICAgICAgICAgICAgICBjb25zdCBjbGllbnQgPSBwbGF5ZXIgJiYgbWF0Y2hDbGllbnRUb1BsYXllcihwbGF5ZXIpO1xuICAgICAgICAgICAgICAgICAgY2xpZW50Py5mb2N1cygpO1xuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L2JveD5cbiAgICAgICAgICApIDogbnVsbH1cbiAgICAgICAgICA8Ym94XG4gICAgICAgICAgICAkdHlwZT1cImNlbnRlclwiXG4gICAgICAgICAgICBvcmllbnRhdGlvbj17R3RrLk9yaWVudGF0aW9uLkhPUklaT05UQUx9XG4gICAgICAgICAgICBzcGFjaW5nPXtzcGFjaW5nLnNtYWxsfVxuICAgICAgICAgICAgaGFsaWduPXtHdGsuQWxpZ24uQ0VOVEVSfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgc2Vuc2l0aXZlPXtpc1NlbnNpdGl2ZVByZXZ9XG4gICAgICAgICAgICAgIG9uQ2xpY2tlZD17KCkgPT4ge1xuICAgICAgICAgICAgICAgIHNldElzU2Vla2luZyhmYWxzZSk7XG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRQbGF5ZXIuZ2V0KCk/LnByZXZpb3VzKCk7XG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgIGNsYXNzPXt2YXJpYW50ID09PSBcImNvbXBsZXRlXCIgPyBcIlwiIDogXCJmbGF0XCJ9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxpbWFnZSBpY29uTmFtZT17XCJtZWRpYS1za2lwLWJhY2t3YXJkXCJ9IC8+XG4gICAgICAgICAgICA8L2J1dHRvbj5cblxuICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICBzZW5zaXRpdmU9e2lzU2Vuc2l0aXZlUGxheU9yUGF1c2V9XG4gICAgICAgICAgICAgIGNsYXNzPVwiY2lyY3VsYXJcIlxuICAgICAgICAgICAgICBvbkNsaWNrZWQ9eygpID0+IHtcbiAgICAgICAgICAgICAgICBzZXRJc1NlZWtpbmcoZmFsc2UpO1xuICAgICAgICAgICAgICAgIHNlbGVjdGVkUGxheWVyLmdldCgpPy5wbGF5X3BhdXNlKCk7XG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxpbWFnZSBpY29uTmFtZT17cGxheUJ0bkljb259IC8+XG4gICAgICAgICAgICA8L2J1dHRvbj5cblxuICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICBzZW5zaXRpdmU9e2lzU2Vuc2l0aXZlTmV4dH1cbiAgICAgICAgICAgICAgb25DbGlja2VkPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRQbGF5ZXIuZ2V0KCk/Lm5leHQoKTtcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgY2xhc3M9e3ZhcmlhbnQgPT09IFwiY29tcGxldGVcIiA/IFwiXCIgOiBcImZsYXRcIn1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPGltYWdlIGljb25OYW1lPXtcIm1lZGlhLXNraXAtZm9yd2FyZFwifSAvPlxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgPC9ib3g+XG5cbiAgICAgICAgICB7LyogV2UgbmVlZCB0byBmaXggaXQgYmVjYXVzZSBjaGFuZ2luZyB0aGUgdm9sdW1lIGluIHRoZSBhcHAgY2F1c2VzIHRoZSBvblZhbHVlQ2hhbmdlZCB0byB0cmlnZ2VyIGNhdXNpbmcgKi99XG4gICAgICAgICAgey8qIGFuIGluZmluaXRlIGNoYW5nZSBvZiB2b2x1bWUgKi99XG4gICAgICAgICAgey8qIDxib3ggJHR5cGU9XCJlbmRcIj4gKi99XG4gICAgICAgICAgey8qICAgPEd0ay5Wb2x1bWVCdXR0b24gKi99XG4gICAgICAgICAgey8qICAgICBhZGp1c3RtZW50PXt2b2x1bWVBZGp1c3RtZW50fSAqL31cbiAgICAgICAgICB7LyogICAgIG9uVmFsdWVDaGFuZ2VkPXsocykgPT4geyAqL31cbiAgICAgICAgICB7LyogICAgICAgc2VsZWN0ZWRQbGF5ZXI/LmdldCgpPy5zZXRfdm9sdW1lKHMuZ2V0X3ZhbHVlKCkpOyAqL31cbiAgICAgICAgICB7LyogICAgIH19ICovfVxuICAgICAgICAgIHsvKiAgICAgb3JpZW50YXRpb249e0d0ay5PcmllbnRhdGlvbi5IT1JJWk9OVEFMfSAqL31cbiAgICAgICAgICB7LyogICAvPiAqL31cbiAgICAgICAgICB7LyogPC9ib3g+ICovfVxuICAgICAgICAgIHt2YXJpYW50ID09PSBcImNvbXBsZXRlXCIgPyAoXG4gICAgICAgICAgICA8Ym94ICR0eXBlPVwiZW5kXCIgY3NzPVwibWFyZ2luLWxlZnQ6OHB4O1wiPlxuICAgICAgICAgICAgICA8U2VsZWN0XG4gICAgICAgICAgICAgICAgYWxsUGxheWVycz17YWxsUGxheWVyc31cbiAgICAgICAgICAgICAgICBzZWxlY3RlZEluZGV4PXtzZWxlY3RlZEluZGV4fVxuICAgICAgICAgICAgICAgIHNldFNlbGVjdGVkUGxheWVyPXtzZXRTZWxlY3RlZFBsYXllcn1cbiAgICAgICAgICAgICAgICBzZWxlY3Rpb25Nb2RlbD17c2VsZWN0aW9uTW9kZWx9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L2JveD5cbiAgICAgICAgICApIDogbnVsbH1cbiAgICAgICAgPC9jZW50ZXJib3g+XG4gICAgICA8L2JveD5cbiAgICA8L2JveD5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IE1lZGlhUGxheWVyO1xuIiwgImV4cG9ydCBjb25zdCBmb3JtYXRTZWNvbmRzID0gKHNlY29uZHM6IG51bWJlcikgPT4ge1xuICBjb25zdCB0b3RhbFNlY29uZHMgPSBNYXRoLmZsb29yKHNlY29uZHMpO1xuICBjb25zdCBob3VycyA9IE1hdGguZmxvb3IodG90YWxTZWNvbmRzIC8gMzYwMCk7XG4gIGNvbnN0IG1pbnV0ZXMgPSBNYXRoLmZsb29yKCh0b3RhbFNlY29uZHMgJSAzNjAwKSAvIDYwKTtcbiAgY29uc3Qgc2VjcyA9IHRvdGFsU2Vjb25kcyAlIDYwO1xuXG4gIGlmIChob3VycyA+IDApIHtcbiAgICByZXR1cm4gYCR7aG91cnN9OiR7bWludXRlcy50b1N0cmluZygpLnBhZFN0YXJ0KDIsIFwiMFwiKX06JHtzZWNzLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwgXCIwXCIpfWA7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGAke21pbnV0ZXN9OiR7c2Vjcy50b1N0cmluZygpLnBhZFN0YXJ0KDIsIFwiMFwiKX1gO1xuICB9XG59O1xuIiwgImltcG9ydCB7IGNyZWF0ZVN0YXRlLCBvbkNsZWFudXAsIGNyZWF0ZUJpbmRpbmcsIEFjY2Vzc29yIH0gZnJvbSBcImFnc1wiO1xuaW1wb3J0IE1wcmlzIGZyb20gXCJnaTovL0FzdGFsTXByaXNcIjtcbmltcG9ydCB7IGdldElzTGFzdFBsYXllciwgZ2V0TGFzdFBsYXllciB9IGZyb20gXCIuLi91dGlscy9tcHJpcy9nZXQtbGFzdC1wbGF5ZXJcIjtcbmltcG9ydCBHaW8gZnJvbSBcImdpOi8vR2lvXCI7XG5pbXBvcnQgQXBwcyBmcm9tIFwiZ2k6Ly9Bc3RhbEFwcHNcIjtcbmltcG9ydCB7IEd0ayB9IGZyb20gXCJhZ3MvZ3RrNFwiO1xuaW1wb3J0IHsgUGxheWVyTGlzdEl0ZW1PYmplY3QgfSBmcm9tIFwiLi4vb2JqZWN0cy9QbGF5ZXJMaXN0SXRlbU9iamVjdFwiO1xuaW1wb3J0IHsgY3JlYXRlQXBwc0luc3RhbmNlLCBzZWFyY2hBcHBGcm9tTmFtZSB9IGZyb20gXCIuLi91dGlscy9hcHBzXCI7XG5cbi8vIEZJWDogSXQgYWx3YXlzIGFzc2lnbiB0aGUgZmlyc3QgcGxheWVyIGFzIHNlbGVjdGVkIHdoZW4gY2hhbmdpbmcgb2Ygc29uZyBiZWNhdXNlIGl0J3MgZGVsZXRpbmcgdGhlIHdob2xlIGxpc3RTdG9yZSBhbmQgcmVjcmVhdGluZyBpdFxuLy8gY2F1c2luZyBpdCB0byBzZWxlY3QgdGhlIGZpcnN0IGl0ZW0gb2YgdGhlIGxpc3QgZHVlIHRvIG9uTm90aWZ5U2VsZWN0ZWRJdGVtXG4vLyBzbyB3ZSBuZWVkIHRvIHVzZSBcInBsYXllci1zZWxlY3RlZFwiIGFuZCBcInBsYXllci1jbG9zZWRcIiBldmVudHMgZnJvbSBtcHJpcyB0byB1cGRhdGUgdGhlIGxpc3QgY29ycmVjdGx5XG5cbmNvbnN0IGNhbGxiYWNrSWZDdXJyZW50ID0gKFxuICBjYWxsYmFjazogKGNoYW5nZWQ6IE1wcmlzLlBsYXllcikgPT4gdm9pZCxcbiAgZ2V0SXNXYW50ZWRQbGF5ZXI6IChwbGF5ZXI6IE1wcmlzLlBsYXllcikgPT4gYm9vbGVhbixcbikgPT4ge1xuICByZXR1cm4gKGNoYW5nZWQ6IE1wcmlzLlBsYXllcikgPT4ge1xuICAgIGlmIChnZXRJc1dhbnRlZFBsYXllcihjaGFuZ2VkKSkgY2FsbGJhY2soY2hhbmdlZCk7XG4gIH07XG59O1xuXG5jb25zdCBiaW5kUHJvcGVydHkgPSA8SyBleHRlbmRzIGtleW9mIE1wcmlzLlBsYXllcj4oXG4gIHBsYXllcjogTXByaXMuUGxheWVyLFxuICBfcHJvcGVydHk6IEssXG4gIHNpZ25hbDogc3RyaW5nLFxuICBnZXRWYWx1ZTogKHA6IE1wcmlzLlBsYXllcikgPT4gTXByaXMuUGxheWVyW0tdLFxuICBzZXRTdGF0ZTogKHZhbDogTXByaXMuUGxheWVyW0tdKSA9PiB2b2lkLFxuICBnZXRJc1dhbnRlZFBsYXllcjogKHBsYXllcjogTXByaXMuUGxheWVyKSA9PiBib29sZWFuLFxuKSA9PiB7XG4gIHBsYXllci5jb25uZWN0KFxuICAgIHNpZ25hbCxcbiAgICBjYWxsYmFja0lmQ3VycmVudCgoY2hhbmdlZCkgPT4ge1xuICAgICAgc2V0U3RhdGUoZ2V0VmFsdWUoY2hhbmdlZCkpO1xuICAgIH0sIGdldElzV2FudGVkUGxheWVyKSxcbiAgKTtcbn07XG5cbmNvbnN0IGdldHRlcnMgPSB7XG4gIGdldENhblBsYXlPclBhdXNlKHBsYXllcjogTXByaXMuUGxheWVyIHwgdW5kZWZpbmVkKSB7XG4gICAgaWYgKCFwbGF5ZXIpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gcGxheWVyLmdldF9jYW5fY29udHJvbCgpICYmIHBsYXllci5nZXRfcGxheWJhY2tfc3RhdHVzKCkgIT09IDI7XG4gIH0sXG4gIGdldENhbkxvb3AocGxheWVyOiBNcHJpcy5QbGF5ZXIgfCB1bmRlZmluZWQpIHtcbiAgICBpZiAoIXBsYXllcikgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiBwbGF5ZXIuZ2V0X2xvb3Bfc3RhdHVzKCkgIT09IE1wcmlzLkxvb3AuVU5TVVBQT1JURUQ7XG4gIH0sXG4gIGdldENhblNodWZmbGUocGxheWVyOiBNcHJpcy5QbGF5ZXIgfCB1bmRlZmluZWQpIHtcbiAgICBpZiAoIXBsYXllcikgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiBwbGF5ZXIuZ2V0X3NodWZmbGVfc3RhdHVzKCkgIT09IE1wcmlzLlNodWZmbGUuVU5TVVBQT1JURUQ7XG4gIH0sXG4gIGdldFRpdGxlKHBsYXllcjogTXByaXMuUGxheWVyIHwgdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHBsYXllcj8uZ2V0X3RpdGxlKCkgPz8gXCJcIjtcbiAgfSxcbiAgZ2V0QXJ0aXN0KHBsYXllcjogTXByaXMuUGxheWVyIHwgdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHBsYXllcj8uZ2V0X2FydGlzdCgpID8/IFwiXCI7XG4gIH0sXG4gIGdldEFsYnVtKHBsYXllcjogTXByaXMuUGxheWVyIHwgdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHBsYXllcj8uZ2V0X2FsYnVtKCkgPz8gXCJcIjtcbiAgfSxcblxuICBnZXRDb3ZlckFydChwbGF5ZXI6IE1wcmlzLlBsYXllciB8IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBwbGF5ZXI/LmdldF9jb3Zlcl9hcnQoKSA/PyBcIlwiO1xuICB9LFxuICBnZXRQb3NpdGlvbihwbGF5ZXI6IE1wcmlzLlBsYXllciB8IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBwbGF5ZXI/LmdldF9wb3NpdGlvbigpID8/IDA7XG4gIH0sXG4gIGdldExlbmd0aChwbGF5ZXI6IE1wcmlzLlBsYXllciB8IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBwbGF5ZXI/LmdldF9sZW5ndGgoKSA/PyAwO1xuICB9LFxuICBnZXRWb2x1bWUocGxheWVyOiBNcHJpcy5QbGF5ZXIgfCB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gcGxheWVyPy5nZXRfdm9sdW1lKCkgPz8gMTAwO1xuICB9LFxuICBnZXRMb29wU3RhdHVzKHBsYXllcjogTXByaXMuUGxheWVyIHwgdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHBsYXllcj8uZ2V0X2xvb3Bfc3RhdHVzKCkgPz8gTXByaXMuTG9vcC5VTlNVUFBPUlRFRDtcbiAgfSxcbiAgZ2V0U2h1ZmZsZVN0YXR1cyhwbGF5ZXI6IE1wcmlzLlBsYXllciB8IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBwbGF5ZXI/LmdldF9zaHVmZmxlX3N0YXR1cygpID8/IE1wcmlzLlNodWZmbGUuVU5TVVBQT1JURUQ7XG4gIH0sXG4gIGdldENhblJhaXNlKHBsYXllcjogTXByaXMuUGxheWVyIHwgdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHBsYXllcj8uZ2V0X2Nhbl9yYWlzZSgpID8/IGZhbHNlO1xuICB9LFxuICBnZXRDYW5OZXh0KHBsYXllcjogTXByaXMuUGxheWVyIHwgdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHBsYXllcj8uZ2V0X2Nhbl9nb19uZXh0KCkgPz8gZmFsc2U7XG4gIH0sXG4gIGdldENhbkJhY2socGxheWVyOiBNcHJpcy5QbGF5ZXIgfCB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gcGxheWVyPy5nZXRfY2FuX2dvX3ByZXZpb3VzKCkgPz8gZmFsc2U7XG4gIH0sXG4gIGdldFBsYXliYWNrU3RhdHVzKHBsYXllcjogTXByaXMuUGxheWVyIHwgdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHBsYXllcj8uZ2V0X3BsYXliYWNrX3N0YXR1cygpID8/IE1wcmlzLlBsYXliYWNrU3RhdHVzLlNUT1BQRUQ7XG4gIH0sXG59O1xuXG5jb25zdCBhZGRQbGF5ZXJUb0xpc3RTdG9yZSA9IChcbiAgbGlzdFN0b3JlOiBHaW8uTGlzdFN0b3JlLFxuICBhcHBzOiBBcHBzLkFwcHMsXG4gIHA6IE1wcmlzLlBsYXllcixcbikgPT4ge1xuICBjb25zdCBpZGVudGl0eSA9IHAuZ2V0X2lkZW50aXR5KCk7XG5cbiAgaWYgKCFpZGVudGl0eSkgcmV0dXJuO1xuXG4gIGNvbnN0IGFwcCA9IHNlYXJjaEFwcEZyb21OYW1lKGFwcHMsIGlkZW50aXR5KTtcbiAgY29uc3QgaWNvbiA9IGFwcD8uWzBdPy5nZXRfaWNvbl9uYW1lKCk7XG5cbiAgY29uc3QgaXRlbSA9IG5ldyBQbGF5ZXJMaXN0SXRlbU9iamVjdCh7XG4gICAgdGV4dDogaWRlbnRpdHksXG4gICAgZGVza3RvcEljb246IGljb24sXG4gICAgYnVzTmFtZTogcC5nZXRfYnVzX25hbWUoKSxcbiAgfSk7XG4gIGxpc3RTdG9yZS5hcHBlbmQoaXRlbSk7XG59O1xuXG5jb25zdCBhZGRQbGF5ZXJzVG9MaXN0U3RvcmUgPSAoXG4gIGxpc3RTdG9yZTogR2lvLkxpc3RTdG9yZSxcbiAgYWxsUGxheWVyczogQWNjZXNzb3I8TXByaXMuUGxheWVyW10+LFxuICBhcHBzOiBBcHBzLkFwcHMsXG4pID0+IHtcbiAgbGlzdFN0b3JlLnJlbW92ZV9hbGwoKTtcblxuICBsZXQgc2VlbjogUmVjb3JkPHN0cmluZywgYm9vbGVhbj4gPSB7fTtcblxuICBhbGxQbGF5ZXJzLmdldCgpLmZvckVhY2goKHApID0+IHtcbiAgICBjb25zdCB0cmFja0lkID0gcC5nZXRfdHJhY2tpZCgpO1xuICAgIGNvbnN0IGtleSA9IHRyYWNrSWQ7XG4gICAgaWYgKHNlZW5ba2V5XSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHNlZW5ba2V5XSA9IHRydWU7XG4gICAgYWRkUGxheWVyVG9MaXN0U3RvcmUobGlzdFN0b3JlLCBhcHBzLCBwKTtcbiAgfSk7XG59O1xuXG5jb25zdCBmaW5kU2VsZWN0ZWRJdGVtSW5kZXggPSAoXG4gIGFsbFBsYXllcnM6IEFjY2Vzc29yPE1wcmlzLlBsYXllcltdPixcbiAgc2VsZWN0ZWRQbGF5ZXI6IEFjY2Vzc29yPE1wcmlzLlBsYXllcj4sXG4pOiBudW1iZXIgPT4ge1xuICBjb25zdCBmb3VuZEluZGV4OiBudW1iZXIgPSBhbGxQbGF5ZXJzXG4gICAgLmdldCgpXG4gICAgLmZpbmRJbmRleCgocCkgPT4gcC5nZXRfYnVzX25hbWUoKSA9PT0gc2VsZWN0ZWRQbGF5ZXIuZ2V0KCkuZ2V0X2J1c19uYW1lKCkpO1xuICByZXR1cm4gZm91bmRJbmRleCA+IC0xID8gZm91bmRJbmRleCA6IDA7XG59O1xuXG5leHBvcnQgY29uc3QgdXNlUGxheWVySW5mbyA9ICgpID0+IHtcbiAgY29uc3QgbXByaXMgPSBNcHJpcy5nZXRfZGVmYXVsdCgpO1xuICBjb25zdCBwbGF5ZXJzID0gY3JlYXRlQmluZGluZyhtcHJpcywgXCJwbGF5ZXJzXCIpO1xuICBjb25zdCBbc2VsZWN0ZWRQbGF5ZXIsIHNldFNlbGVjdGVkUGxheWVyXSA9IGNyZWF0ZVN0YXRlKFxuICAgIGdldExhc3RQbGF5ZXIocGxheWVycy5nZXQoKSkgPz8gcGxheWVycy5nZXQoKT8uWzBdLFxuICApO1xuXG4gIGNvbnN0IFtzZWxlY3RlZEluZGV4LCBzZXRTZWxlY3RlZEluZGV4XSA9IGNyZWF0ZVN0YXRlKFxuICAgIGZpbmRTZWxlY3RlZEl0ZW1JbmRleChwbGF5ZXJzLCBzZWxlY3RlZFBsYXllciksXG4gICk7XG5cbiAgY29uc3QgYXBwcyA9IGNyZWF0ZUFwcHNJbnN0YW5jZSh7IHZhcmlhbnQ6IFwib3RoZXJcIiB9KTtcbiAgY29uc3QgbGlzdHN0b3JlID0gbmV3IEdpby5MaXN0U3RvcmUoKTtcbiAgYWRkUGxheWVyc1RvTGlzdFN0b3JlKGxpc3RzdG9yZSwgcGxheWVycywgYXBwcyk7XG5cbiAgY29uc3Qgc2VsZWN0aW9uTW9kZWwgPSBuZXcgR3RrLlNpbmdsZVNlbGVjdGlvbih7IG1vZGVsOiBsaXN0c3RvcmUgfSk7XG5cbiAgY29uc3QgZ2V0SXNXYW50ZWRQbGF5ZXIgPSAocGxheWVyOiBNcHJpcy5QbGF5ZXIpID0+XG4gICAgcGxheWVyLmdldF9idXNfbmFtZSgpID09PSBzZWxlY3RlZFBsYXllci5nZXQoKT8uZ2V0X2J1c19uYW1lKCk7XG5cbiAgY29uc3QgcCA9IHNlbGVjdGVkUGxheWVyLmdldCgpO1xuXG4gIGNvbnN0IFt0aXRsZSwgc2V0VGl0bGVdID0gY3JlYXRlU3RhdGUoZ2V0dGVycy5nZXRUaXRsZShwKSk7XG4gIGNvbnN0IFthcnRpc3QsIHNldEFydGlzdF0gPSBjcmVhdGVTdGF0ZShnZXR0ZXJzLmdldEFydGlzdChwKSk7XG4gIGNvbnN0IFthbGJ1bSwgc2V0QWxidW1dID0gY3JlYXRlU3RhdGUoZ2V0dGVycy5nZXRBbGJ1bShwKSk7XG4gIGNvbnN0IFtjb3ZlckFydCwgc2V0Q292ZXJBcnRdID0gY3JlYXRlU3RhdGUoZ2V0dGVycy5nZXRDb3ZlckFydChwKSk7XG4gIGNvbnN0IFtwbGF5YmFja1N0YXR1cywgc2V0UGxheWJhY2tTdGF0dXNdID0gY3JlYXRlU3RhdGUoXG4gICAgcD8uZ2V0X3BsYXliYWNrX3N0YXR1cygpLFxuICApO1xuICBjb25zdCBbcG9zaXRpb24sIHNldFBvc2l0aW9uXSA9IGNyZWF0ZVN0YXRlKGdldHRlcnMuZ2V0UG9zaXRpb24ocCkpO1xuICBjb25zdCBbbGVuZ3RoLCBzZXRMZW5ndGhdID0gY3JlYXRlU3RhdGUoZ2V0dGVycy5nZXRMZW5ndGgocCkpO1xuICBjb25zdCBbdm9sdW1lLCBzZXRWb2x1bWVdID0gY3JlYXRlU3RhdGUoZ2V0dGVycy5nZXRWb2x1bWUocCkpO1xuICBjb25zdCBbbG9vcFN0YXR1cywgc2V0TG9vcFN0YXR1c10gPSBjcmVhdGVTdGF0ZShnZXR0ZXJzLmdldExvb3BTdGF0dXMocCkpO1xuICBjb25zdCBbc2h1ZmZsZVN0YXR1cywgc2V0U2h1ZmZsZVN0YXR1c10gPSBjcmVhdGVTdGF0ZShcbiAgICBnZXR0ZXJzLmdldFNodWZmbGVTdGF0dXMocCksXG4gICk7XG4gIGNvbnN0IFtjYW5SYWlzZSwgc2V0Q2FuUmFpc2VdID0gY3JlYXRlU3RhdGUoZ2V0dGVycy5nZXRDYW5SYWlzZShwKSk7XG4gIGNvbnN0IFtjYW5OZXh0LCBzZXRDYW5OZXh0XSA9IGNyZWF0ZVN0YXRlKGdldHRlcnMuZ2V0Q2FuTmV4dChwKSk7XG4gIGNvbnN0IFtjYW5CYWNrLCBzZXRDYW5CYWNrXSA9IGNyZWF0ZVN0YXRlKGdldHRlcnMuZ2V0Q2FuQmFjayhwKSk7XG4gIGNvbnN0IFtjYW5QbGF5T3JQYXVzZSwgc2V0Q2FuUGxheU9yUGF1c2VdID0gY3JlYXRlU3RhdGUoXG4gICAgZ2V0dGVycy5nZXRDYW5QbGF5T3JQYXVzZShwKSxcbiAgKTtcbiAgY29uc3QgW2Nhbkxvb3AsIHNldENhbkxvb3BdID0gY3JlYXRlU3RhdGUoZ2V0dGVycy5nZXRDYW5Mb29wKHApKTtcbiAgY29uc3QgW2NhblNodWZmbGUsIHNldENhblNodWZmbGVdID0gY3JlYXRlU3RhdGUoZ2V0dGVycy5nZXRDYW5TaHVmZmxlKHApKTtcblxuICBjb25zdCB1bnN1YnNjcmliZVNlbGVjdGVkUGxheWVyID0gc2VsZWN0ZWRQbGF5ZXIuc3Vic2NyaWJlKCgpID0+IHtcbiAgICBjb25zdCBwID0gc2VsZWN0ZWRQbGF5ZXIuZ2V0KCk7XG4gICAgc2V0VGl0bGUoZ2V0dGVycy5nZXRUaXRsZShwKSk7XG4gICAgc2V0QXJ0aXN0KGdldHRlcnMuZ2V0QXJ0aXN0KHApKTtcbiAgICBzZXRQbGF5YmFja1N0YXR1cyhnZXR0ZXJzLmdldFBsYXliYWNrU3RhdHVzKHApKTtcbiAgICBzZXRDb3ZlckFydChnZXR0ZXJzLmdldENvdmVyQXJ0KHApKTtcbiAgICBzZXRBbGJ1bShnZXR0ZXJzLmdldEFsYnVtKHApKTtcbiAgICBzZXRQb3NpdGlvbihnZXR0ZXJzLmdldFBvc2l0aW9uKHApKTtcbiAgICBzZXRMZW5ndGgoZ2V0dGVycy5nZXRMZW5ndGgocCkpO1xuICAgIHNldFZvbHVtZShnZXR0ZXJzLmdldFZvbHVtZShwKSk7XG4gICAgc2V0TG9vcFN0YXR1cyhnZXR0ZXJzLmdldExvb3BTdGF0dXMocCkpO1xuICAgIHNldFNodWZmbGVTdGF0dXMoZ2V0dGVycy5nZXRTaHVmZmxlU3RhdHVzKHApKTtcbiAgICBzZXRDYW5SYWlzZShnZXR0ZXJzLmdldENhblJhaXNlKHApKTtcbiAgICBzZXRDYW5OZXh0KGdldHRlcnMuZ2V0Q2FuTmV4dChwKSk7XG4gICAgc2V0Q2FuQmFjayhnZXR0ZXJzLmdldENhbkJhY2socCkpO1xuICAgIHNldENhblBsYXlPclBhdXNlKGdldHRlcnMuZ2V0Q2FuUGxheU9yUGF1c2UocCkpO1xuICAgIHNldENhbkxvb3AoZ2V0dGVycy5nZXRDYW5Mb29wKHApKTtcbiAgICBzZXRDYW5TaHVmZmxlKGdldHRlcnMuZ2V0Q2FuU2h1ZmZsZShwKSk7XG5cbiAgICBjb25zdCBpbmRleCA9IGZpbmRTZWxlY3RlZEl0ZW1JbmRleChwbGF5ZXJzLCBzZWxlY3RlZFBsYXllcik7XG4gICAgc2V0U2VsZWN0ZWRJbmRleChpbmRleCk7XG4gIH0pO1xuXG4gIHBsYXllcnMuZ2V0KCkuZm9yRWFjaCgocGxheWVyKSA9PiB7XG4gICAgYmluZFByb3BlcnR5KFxuICAgICAgcGxheWVyLFxuICAgICAgXCJ0aXRsZVwiLFxuICAgICAgXCJub3RpZnk6OnRpdGxlXCIsXG4gICAgICBnZXR0ZXJzLmdldFRpdGxlLFxuICAgICAgc2V0VGl0bGUsXG4gICAgICBnZXRJc1dhbnRlZFBsYXllcixcbiAgICApO1xuICAgIGJpbmRQcm9wZXJ0eShcbiAgICAgIHBsYXllcixcbiAgICAgIFwiYXJ0aXN0XCIsXG4gICAgICBcIm5vdGlmeTo6YXJ0aXN0XCIsXG4gICAgICBnZXR0ZXJzLmdldEFydGlzdCxcbiAgICAgIHNldEFydGlzdCxcbiAgICAgIGdldElzV2FudGVkUGxheWVyLFxuICAgICk7XG4gICAgYmluZFByb3BlcnR5KFxuICAgICAgcGxheWVyLFxuICAgICAgXCJhbGJ1bVwiLFxuICAgICAgXCJub3RpZnk6OmFsYnVtXCIsXG4gICAgICBnZXR0ZXJzLmdldEFsYnVtLFxuICAgICAgc2V0QWxidW0sXG4gICAgICBnZXRJc1dhbnRlZFBsYXllcixcbiAgICApO1xuICAgIGJpbmRQcm9wZXJ0eShcbiAgICAgIHBsYXllcixcbiAgICAgIFwiY292ZXJfYXJ0XCIsXG4gICAgICBcIm5vdGlmeTo6Y292ZXItYXJ0XCIsXG4gICAgICBnZXR0ZXJzLmdldENvdmVyQXJ0LFxuICAgICAgc2V0Q292ZXJBcnQsXG4gICAgICBnZXRJc1dhbnRlZFBsYXllcixcbiAgICApO1xuICAgIGJpbmRQcm9wZXJ0eShcbiAgICAgIHBsYXllcixcbiAgICAgIFwicGxheWJhY2tfc3RhdHVzXCIsXG4gICAgICBcIm5vdGlmeTo6cGxheWJhY2stc3RhdHVzXCIsXG4gICAgICBnZXR0ZXJzLmdldFBsYXliYWNrU3RhdHVzLFxuICAgICAgc2V0UGxheWJhY2tTdGF0dXMsXG4gICAgICBnZXRJc1dhbnRlZFBsYXllcixcbiAgICApO1xuICAgIGJpbmRQcm9wZXJ0eShcbiAgICAgIHBsYXllcixcbiAgICAgIFwicG9zaXRpb25cIixcbiAgICAgIFwibm90aWZ5Ojpwb3NpdGlvblwiLFxuICAgICAgZ2V0dGVycy5nZXRQb3NpdGlvbixcbiAgICAgIHNldFBvc2l0aW9uLFxuICAgICAgZ2V0SXNXYW50ZWRQbGF5ZXIsXG4gICAgKTtcbiAgICBiaW5kUHJvcGVydHkoXG4gICAgICBwbGF5ZXIsXG4gICAgICBcImxlbmd0aFwiLFxuICAgICAgXCJub3RpZnk6Omxlbmd0aFwiLFxuICAgICAgZ2V0dGVycy5nZXRMZW5ndGgsXG4gICAgICBzZXRMZW5ndGgsXG4gICAgICBnZXRJc1dhbnRlZFBsYXllcixcbiAgICApO1xuICAgIGJpbmRQcm9wZXJ0eShcbiAgICAgIHBsYXllcixcbiAgICAgIFwidm9sdW1lXCIsXG4gICAgICBcIm5vdGlmeTo6dm9sdW1lXCIsXG4gICAgICBnZXR0ZXJzLmdldFZvbHVtZSxcbiAgICAgIHNldFZvbHVtZSxcbiAgICAgIGdldElzV2FudGVkUGxheWVyLFxuICAgICk7XG4gICAgYmluZFByb3BlcnR5KFxuICAgICAgcGxheWVyLFxuICAgICAgXCJsb29wX3N0YXR1c1wiLFxuICAgICAgXCJub3RpZnk6Omxvb3Atc3RhdHVzXCIsXG4gICAgICBnZXR0ZXJzLmdldExvb3BTdGF0dXMsXG4gICAgICBzZXRMb29wU3RhdHVzLFxuICAgICAgZ2V0SXNXYW50ZWRQbGF5ZXIsXG4gICAgKTtcbiAgICBiaW5kUHJvcGVydHkoXG4gICAgICBwbGF5ZXIsXG4gICAgICBcInNodWZmbGVfc3RhdHVzXCIsXG4gICAgICBcIm5vdGlmeTo6c2h1ZmZsZS1zdGF0dXNcIixcbiAgICAgIGdldHRlcnMuZ2V0U2h1ZmZsZVN0YXR1cyxcbiAgICAgIHNldFNodWZmbGVTdGF0dXMsXG4gICAgICBnZXRJc1dhbnRlZFBsYXllcixcbiAgICApO1xuICAgIGJpbmRQcm9wZXJ0eShcbiAgICAgIHBsYXllcixcbiAgICAgIFwiY2FuX3JhaXNlXCIsXG4gICAgICBcIm5vdGlmeTo6Y2FuLXJhaXNlXCIsXG4gICAgICBnZXR0ZXJzLmdldENhblJhaXNlLFxuICAgICAgc2V0Q2FuUmFpc2UsXG4gICAgICBnZXRJc1dhbnRlZFBsYXllcixcbiAgICApO1xuICAgIGJpbmRQcm9wZXJ0eShcbiAgICAgIHBsYXllcixcbiAgICAgIFwiY2FuX2dvX25leHRcIixcbiAgICAgIFwibm90aWZ5OjpjYW4tZ28tbmV4dFwiLFxuICAgICAgZ2V0dGVycy5nZXRDYW5OZXh0LFxuICAgICAgc2V0Q2FuTmV4dCxcbiAgICAgIGdldElzV2FudGVkUGxheWVyLFxuICAgICk7XG4gICAgYmluZFByb3BlcnR5KFxuICAgICAgcGxheWVyLFxuICAgICAgXCJjYW5fZ29fcHJldmlvdXNcIixcbiAgICAgIFwibm90aWZ5OjpjYW4tZ28tcHJldmlvdXNcIixcbiAgICAgIGdldHRlcnMuZ2V0Q2FuQmFjayxcbiAgICAgIHNldENhbkJhY2ssXG4gICAgICBnZXRJc1dhbnRlZFBsYXllcixcbiAgICApO1xuXG4gICAgcGxheWVyLmNvbm5lY3QoXG4gICAgICBcIm5vdGlmeVwiLFxuICAgICAgY2FsbGJhY2tJZkN1cnJlbnQoKHApID0+IHtcbiAgICAgICAgc2V0Q2FuUGxheU9yUGF1c2UoZ2V0dGVycy5nZXRDYW5QbGF5T3JQYXVzZShwKSk7XG4gICAgICAgIHNldENhbkxvb3AoZ2V0dGVycy5nZXRDYW5Mb29wKHApKTtcbiAgICAgICAgc2V0Q2FuU2h1ZmZsZShnZXR0ZXJzLmdldENhblNodWZmbGUocCkpO1xuICAgICAgfSwgZ2V0SXNXYW50ZWRQbGF5ZXIpLFxuICAgICk7XG5cbiAgICAvLyB3ZSB1cGRhdGUgdGhlIHNlbGVjdGVkIHBsYXllciB3aGVuIHRoZSBsYXN0IHBsYXllciBpcyBjaGFuZ2VkXG4gICAgcGxheWVyLmNvbm5lY3QoXCJub3RpZnk6OnRyYWNraWRcIiwgKHApID0+IHtcbiAgICAgIGNvbnN0IGlzTGFzdFBsYXllcjogYm9vbGVhbiA9IGdldElzTGFzdFBsYXllcihwKTtcbiAgICAgIGlmICghaXNMYXN0UGxheWVyKSByZXR1cm47XG5cbiAgICAgIHNldFNlbGVjdGVkUGxheWVyKHApO1xuICAgICAgYWRkUGxheWVyc1RvTGlzdFN0b3JlKGxpc3RzdG9yZSwgcGxheWVycywgYXBwcyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGNvbnN0IHVuc3Vic2NyaWJlQWxsUGxheWVycyA9IHBsYXllcnMuc3Vic2NyaWJlKCgpID0+IHtcbiAgICBhZGRQbGF5ZXJzVG9MaXN0U3RvcmUobGlzdHN0b3JlLCBwbGF5ZXJzLCBhcHBzKTtcbiAgfSk7XG5cbiAgb25DbGVhbnVwKCgpID0+IHtcbiAgICB1bnN1YnNjcmliZVNlbGVjdGVkUGxheWVyKCk7XG4gICAgdW5zdWJzY3JpYmVBbGxQbGF5ZXJzKCk7XG4gIH0pO1xuXG4gIHJldHVybiB7XG4gICAgcGxheWVySW5mbzoge1xuICAgICAgdGl0bGUsXG4gICAgICBhcnRpc3QsXG4gICAgICBhbGJ1bSxcbiAgICAgIGNvdmVyQXJ0LFxuICAgICAgcGxheWJhY2tTdGF0dXMsXG4gICAgICBwb3NpdGlvbixcbiAgICAgIGxlbmd0aCxcbiAgICAgIHZvbHVtZSxcbiAgICAgIGxvb3BTdGF0dXMsXG4gICAgICBzaHVmZmxlU3RhdHVzLFxuICAgICAgY2FuUmFpc2UsXG4gICAgICBjYW5OZXh0LFxuICAgICAgY2FuQmFjayxcbiAgICAgIGNhblBsYXlPclBhdXNlLFxuICAgICAgY2FuTG9vcCxcbiAgICAgIGNhblNodWZmbGUsXG4gICAgfSxcbiAgICBzZWxlY3RlZFBsYXllcixcbiAgICBzZXRTZWxlY3RlZFBsYXllcixcbiAgICBzZWxlY3Rpb25Nb2RlbCxcbiAgICBzZWxlY3RlZEluZGV4LFxuICAgIGFsbFBsYXllcnM6IHBsYXllcnMsXG4gIH07XG59O1xuIiwgImltcG9ydCBNcHJpcyBmcm9tIFwiZ2k6Ly9Bc3RhbE1wcmlzXCI7XG5cbmV4cG9ydCBjb25zdCBnZXRJc0xhc3RQbGF5ZXIgPSAocDogTXByaXMuUGxheWVyKSA9PiB7XG4gIHJldHVybiBwLmdldF9idXNfbmFtZSgpLmluY2x1ZGVzKFwicGxheWVyY3RsZFwiKTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRMYXN0UGxheWVyID0gKHBsYXllcnM6IE1wcmlzLlBsYXllcltdKSA9PiB7XG4gIHJldHVybiBwbGF5ZXJzLmZpbmQoKHApID0+IGdldElzTGFzdFBsYXllcihwKSk7XG59O1xuIiwgIi8qKlxuICogSW4gdGhlIGZ1dHVyZSBJIHdvdWxkIGxpa2UgdG8gbWFrZSB0eXBlIGRlY2xhcmF0aW9uIGluIGRlY29yYXRvcnMgb3B0aW9uYWxcbiAqIGFuZCBpbmZlciBpdCBmcm9tIHR5cGVzY3JpcHQgdHlwZXMgYXQgdHJhbnNwaWxlIHRpbWUuIEN1cnJlbnRseSwgd2UgY291bGRcbiAqIGVpdGhlciB1c2Ugc3RhZ2UgMiBkZWNvcmF0b3JzIHdpdGggdGhlIFwiZW1pdERlY29yYXRvck1ldGFkYXRhXCIgYW5kXG4gKiBcImV4cGVyaW1lbnRhbERlY29yYXRvcnNcIiB0c2NvbmZpZyBvcHRpb25zLiBIb3dldmVyLCBtZXRhZGF0YSBpcyBub3Qgc3VwcG9ydGVkXG4gKiBieSBlc2J1aWxkIHdoaWNoIGlzIHdoYXQgSSdtIG1vc3RseSB0YXJnZXRpbmcgYXMgdGhlIGJ1bmRsZXIgZm9yIHBlcmZvcm1hbmNlXG4gKiByZWFzb25zLiBodHRwczovL2dpdGh1Yi5jb20vZXZhbncvZXNidWlsZC9pc3N1ZXMvMjU3XG4gKiBIb3dldmVyLCBJIGJlbGlldmUgdGhhdCB3ZSBzaG91bGQgbm90IHVzZSBzdGFnZSAyIGFueW1vcmUsXG4gKiBzbyBJJ20gd2FpdGluZyBmb3IgYSBiZXR0ZXIgYWx0ZXJuYXRpdmUuXG4gKi9cblxuaW1wb3J0IEdPYmplY3QgZnJvbSBcImdpOi8vR09iamVjdFwiXG5pbXBvcnQgR0xpYiBmcm9tIFwiZ2k6Ly9HTGliXCJcbmltcG9ydCB7IGRlZmluZVByb3BlcnR5R2V0dGVyLCBrZWJhYmlmeSB9IGZyb20gXCIuL3V0aWwuanNcIlxuXG5jb25zdCBwcml2ID0gU3ltYm9sKFwiZ29iamVjdCBwcml2YXRlXCIpXG5jb25zdCB7IGRlZmluZVByb3BlcnR5LCBmcm9tRW50cmllcywgZW50cmllcyB9ID0gT2JqZWN0XG5jb25zdCB7IE9iamVjdDogR09iaiwgcmVnaXN0ZXJDbGFzcyB9ID0gR09iamVjdFxuXG5leHBvcnQgeyBHT2JqZWN0IGFzIGRlZmF1bHQgfVxuZXhwb3J0IHsgR09iaiBhcyBPYmplY3QgfVxuXG5leHBvcnQgY29uc3QgU2lnbmFsRmxhZ3MgPSBHT2JqZWN0LlNpZ25hbEZsYWdzXG5leHBvcnQgdHlwZSBTaWduYWxGbGFncyA9IEdPYmplY3QuU2lnbmFsRmxhZ3NcblxuZXhwb3J0IGNvbnN0IEFjY3VtdWxhdG9yVHlwZSA9IEdPYmplY3QuQWNjdW11bGF0b3JUeXBlXG5leHBvcnQgdHlwZSBBY2N1bXVsYXRvclR5cGUgPSBHT2JqZWN0LkFjY3VtdWxhdG9yVHlwZVxuXG5leHBvcnQgdHlwZSBQYXJhbVNwZWM8VCA9IHVua25vd24+ID0gR09iamVjdC5QYXJhbVNwZWM8VD5cbmV4cG9ydCBjb25zdCBQYXJhbVNwZWMgPSBHT2JqZWN0LlBhcmFtU3BlY1xuXG5leHBvcnQgdHlwZSBQYXJhbUZsYWdzID0gR09iamVjdC5QYXJhbUZsYWdzXG5leHBvcnQgY29uc3QgUGFyYW1GbGFncyA9IEdPYmplY3QuUGFyYW1GbGFnc1xuXG5leHBvcnQgdHlwZSBHVHlwZTxUID0gdW5rbm93bj4gPSBHT2JqZWN0LkdUeXBlPFQ+XG5cbnR5cGUgR09iaiA9IEdPYmplY3QuT2JqZWN0XG5cbmludGVyZmFjZSBHT2JqUHJpdmF0ZSBleHRlbmRzIEdPYmoge1xuICAgIFtwcml2XTogUmVjb3JkPHN0cmluZywgYW55PlxufVxuXG50eXBlIE1ldGEgPSB7XG4gICAgcHJvcGVydGllcz86IHtcbiAgICAgICAgW2ZpZWxkTmFtZTogc3RyaW5nXToge1xuICAgICAgICAgICAgZmxhZ3M6IFBhcmFtRmxhZ3NcbiAgICAgICAgICAgIHR5cGU6IFByb3BlcnR5VHlwZURlY2xhcmF0aW9uPHVua25vd24+XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2lnbmFscz86IHtcbiAgICAgICAgW2tleTogc3RyaW5nXToge1xuICAgICAgICAgICAgZGVmYXVsdD86IGJvb2xlYW5cbiAgICAgICAgICAgIGZsYWdzPzogU2lnbmFsRmxhZ3NcbiAgICAgICAgICAgIGFjY3VtdWxhdG9yPzogQWNjdW11bGF0b3JUeXBlXG4gICAgICAgICAgICByZXR1cm5fdHlwZT86IEdUeXBlXG4gICAgICAgICAgICBwYXJhbV90eXBlcz86IEFycmF5PEdUeXBlPlxuICAgICAgICAgICAgbWV0aG9kOiAoLi4uYXJnOiBhbnlbXSkgPT4gdW5rbm93blxuICAgICAgICB9XG4gICAgfVxufVxuXG50eXBlIENvbnRleHQgPSB7IHByaXZhdGU6IGZhbHNlOyBzdGF0aWM6IGZhbHNlOyBuYW1lOiBzdHJpbmcgfVxudHlwZSBQcm9wZXJ0eUNvbnRleHQ8VD4gPSBDbGFzc0ZpZWxkRGVjb3JhdG9yQ29udGV4dDxHT2JqLCBUPiAmIENvbnRleHRcbnR5cGUgR2V0dGVyQ29udGV4dDxUPiA9IENsYXNzR2V0dGVyRGVjb3JhdG9yQ29udGV4dDxHT2JqLCBUPiAmIENvbnRleHRcbnR5cGUgU2V0dGVyQ29udGV4dDxUPiA9IENsYXNzU2V0dGVyRGVjb3JhdG9yQ29udGV4dDxHT2JqLCBUPiAmIENvbnRleHRcbnR5cGUgU2lnbmFsQ29udGV4dDxUIGV4dGVuZHMgKCkgPT4gYW55PiA9IENsYXNzTWV0aG9kRGVjb3JhdG9yQ29udGV4dDxHT2JqLCBUPiAmIENvbnRleHRcblxudHlwZSBTaWduYWxPcHRpb25zID0ge1xuICAgIGRlZmF1bHQ/OiBib29sZWFuXG4gICAgZmxhZ3M/OiBTaWduYWxGbGFnc1xuICAgIGFjY3VtdWxhdG9yPzogQWNjdW11bGF0b3JUeXBlXG59XG5cbnR5cGUgUHJvcGVydHlUeXBlRGVjbGFyYXRpb248VD4gPVxuICAgIHwgKChuYW1lOiBzdHJpbmcsIGZsYWdzOiBQYXJhbUZsYWdzKSA9PiBQYXJhbVNwZWM8VD4pXG4gICAgfCBQYXJhbVNwZWM8VD5cbiAgICB8IHsgJGd0eXBlOiBHVHlwZTxUPiB9XG5cbmZ1bmN0aW9uIGFzc2VydEZpZWxkKFxuICAgIGN0eDogQ2xhc3NGaWVsZERlY29yYXRvckNvbnRleHQgfCBDbGFzc0dldHRlckRlY29yYXRvckNvbnRleHQgfCBDbGFzc1NldHRlckRlY29yYXRvckNvbnRleHQsXG4pOiBzdHJpbmcge1xuICAgIGlmIChjdHgucHJpdmF0ZSkgdGhyb3cgRXJyb3IoXCJwcml2YXRlIGZpZWxkcyBhcmUgbm90IHN1cHBvcnRlZFwiKVxuICAgIGlmIChjdHguc3RhdGljKSB0aHJvdyBFcnJvcihcInN0YXRpYyBmaWVsZHMgYXJlIG5vdCBzdXBwb3J0ZWRcIilcblxuICAgIGlmICh0eXBlb2YgY3R4Lm5hbWUgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoXCJvbmx5IHN0cmluZ3MgY2FuIGJlIGdvYmplY3QgcHJvcGVydHkga2V5c1wiKVxuICAgIH1cblxuICAgIHJldHVybiBjdHgubmFtZVxufVxuXG4vKipcbiAqIERlZmluZXMgYSByZWFkYWJsZSAqYW5kKiB3cml0ZWFibGUgcHJvcGVydHkgdG8gYmUgcmVnaXN0ZXJlZCB3aGVuIHVzaW5nIHRoZSB7QGxpbmsgcmVnaXN0ZXJ9IGRlY29yYXRvci5cbiAqXG4gKiBFeGFtcGxlOlxuICogYGBgdHNcbiAqIGNsYXNzIHtcbiAqICAgICBcXEBwcm9wZXJ0eShTdHJpbmcpIG15UHJvcCA9IFwiXCJcbiAqIH1cbiAqIGBgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gcHJvcGVydHk8VD4odHlwZURlY2xhcmF0aW9uOiBQcm9wZXJ0eVR5cGVEZWNsYXJhdGlvbjxUPikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoXG4gICAgICAgIF86IHZvaWQsXG4gICAgICAgIGN0eDogUHJvcGVydHlDb250ZXh0PFQ+LFxuICAgICAgICBvcHRpb25zPzogeyBtZXRhT25seTogdHJ1ZSB9LFxuICAgICk6ICh0aGlzOiBHT2JqLCBpbml0OiBUKSA9PiBUIHtcbiAgICAgICAgY29uc3QgZmllbGROYW1lID0gYXNzZXJ0RmllbGQoY3R4KVxuICAgICAgICBjb25zdCBrZXkgPSBrZWJhYmlmeShmaWVsZE5hbWUpXG4gICAgICAgIGNvbnN0IG1ldGE6IFBhcnRpYWw8TWV0YT4gPSBjdHgubWV0YWRhdGEhXG5cbiAgICAgICAgbWV0YS5wcm9wZXJ0aWVzID8/PSB7fVxuICAgICAgICBtZXRhLnByb3BlcnRpZXNbZmllbGROYW1lXSA9IHsgZmxhZ3M6IFBhcmFtRmxhZ3MuUkVBRFdSSVRFLCB0eXBlOiB0eXBlRGVjbGFyYXRpb24gfVxuXG4gICAgICAgIGN0eC5hZGRJbml0aWFsaXplcihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBkZWZpbmVQcm9wZXJ0eUdldHRlcih0aGlzLCBmaWVsZE5hbWUgYXMgRXh0cmFjdDxrZXlvZiBHT2JqLCBzdHJpbmc+KVxuXG4gICAgICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLm1ldGFPbmx5KSByZXR1cm5cblxuICAgICAgICAgICAgZGVmaW5lUHJvcGVydHkodGhpcywgZmllbGROYW1lLCB7XG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNldCh2OiBUKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzW3ByaXZdW2tleV0gIT09IHYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNbcHJpdl1ba2V5XSA9IHZcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm90aWZ5KGtleSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZ2V0KCk6IFQge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1twcml2XVtrZXldXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0gc2F0aXNmaWVzIFRoaXNUeXBlPEdPYmpQcml2YXRlPilcbiAgICAgICAgfSlcblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGluaXQ6IFQpIHtcbiAgICAgICAgICAgIGNvbnN0IGRpY3QgPSAoKHRoaXMgYXMgR09ialByaXZhdGUpW3ByaXZdID8/PSB7fSlcbiAgICAgICAgICAgIGRpY3Rba2V5XSA9IGluaXRcbiAgICAgICAgICAgIHJldHVybiBpbml0XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qKlxuICogRGVmaW5lcyBhIHJlYWQtb25seSBwcm9wZXJ0eSB0byBiZSByZWdpc3RlcmVkIHdoZW4gdXNpbmcgdGhlIHtAbGluayByZWdpc3Rlcn0gZGVjb3JhdG9yLlxuICogSWYgdGhlIGdldHRlciBoYXMgYSBzZXR0ZXIgcGFpciBkZWNvcmF0ZWQgd2l0aCB0aGUge0BsaW5rIHNldHRlcn0gZGVjb3JhdG9yIHRoZSBwcm9wZXJ0eSB3aWxsIGJlIHJlYWRhYmxlICphbmQqIHdyaXRlYWJsZS5cbiAqXG4gKiBFeGFtcGxlOlxuICogYGBgdHNcbiAqIGNsYXNzIHtcbiAqICAgICBcXEBzZXR0ZXIoU3RyaW5nKVxuICogICAgIHNldCBteVByb3AodmFsdWU6IHN0cmluZykge1xuICogICAgICAgICAvL1xuICogICAgIH1cbiAqXG4gKiAgICAgXFxAZ2V0dGVyKFN0cmluZylcbiAqICAgICBnZXQgbXlQcm9wKCk6IHN0cmluZyB7XG4gKiAgICAgICAgIHJldHVybiBcIlwiXG4gKiAgICAgfVxuICogfVxuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXR0ZXI8VD4odHlwZURlY2xhcmF0aW9uOiBQcm9wZXJ0eVR5cGVEZWNsYXJhdGlvbjxUPikge1xuICAgIHJldHVybiBmdW5jdGlvbiBnZXR0ZXIoZ2V0dGVyOiAodGhpczogR09iaikgPT4gVCwgY3R4OiBHZXR0ZXJDb250ZXh0PFQ+KTogKHRoaXM6IEdPYmopID0+IFQge1xuICAgICAgICBjb25zdCBmaWVsZE5hbWUgPSBhc3NlcnRGaWVsZChjdHgpXG4gICAgICAgIGNvbnN0IG1ldGE6IFBhcnRpYWw8TWV0YT4gPSBjdHgubWV0YWRhdGEhXG4gICAgICAgIGNvbnN0IHByb3BzID0gKG1ldGEucHJvcGVydGllcyA/Pz0ge30pXG4gICAgICAgIGlmIChmaWVsZE5hbWUgaW4gcHJvcHMpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgZmxhZ3MsIHR5cGUgfSA9IHByb3BzW2ZpZWxkTmFtZV1cbiAgICAgICAgICAgIHByb3BzW2ZpZWxkTmFtZV0gPSB7IGZsYWdzOiBmbGFncyB8IFBhcmFtRmxhZ3MuUkVBREFCTEUsIHR5cGUgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJvcHNbZmllbGROYW1lXSA9IHsgZmxhZ3M6IFBhcmFtRmxhZ3MuUkVBREFCTEUsIHR5cGU6IHR5cGVEZWNsYXJhdGlvbiB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGdldHRlclxuICAgIH1cbn1cblxuLyoqXG4gKiBEZWZpbmVzIGEgd3JpdGUtb25seSBwcm9wZXJ0eSB0byBiZSByZWdpc3RlcmVkIHdoZW4gdXNpbmcgdGhlIHtAbGluayByZWdpc3Rlcn0gZGVjb3JhdG9yLlxuICogSWYgdGhlIHNldHRlciBoYXMgYSBnZXR0ZXIgcGFpciBkZWNvcmF0ZWQgd2l0aCB0aGUge0BsaW5rIGdldHRlcn0gZGVjb3JhdG9yIHRoZSBwcm9wZXJ0eSB3aWxsIGJlIHdyaXRlYWJsZSAqYW5kKiByZWFkYWJsZS5cbiAqXG4gKiBFeGFtcGxlOlxuICogYGBgdHNcbiAqIGNsYXNzIHtcbiAqICAgICBcXEBzZXR0ZXIoU3RyaW5nKVxuICogICAgIHNldCBteVByb3AodmFsdWU6IHN0cmluZykge1xuICogICAgICAgICAvL1xuICogICAgIH1cbiAqXG4gKiAgICAgXFxAZ2V0dGVyKFN0cmluZylcbiAqICAgICBnZXQgbXlQcm9wKCk6IHN0cmluZyB7XG4gKiAgICAgICAgIHJldHVybiBcIlwiXG4gKiAgICAgfVxuICogfVxuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXR0ZXI8VD4odHlwZURlY2xhcmF0aW9uOiBQcm9wZXJ0eVR5cGVEZWNsYXJhdGlvbjxUPikge1xuICAgIHJldHVybiBmdW5jdGlvbiBzZXR0ZXIoXG4gICAgICAgIHNldHRlcjogKHRoaXM6IEdPYmosIHZhbHVlOiBUKSA9PiB2b2lkLFxuICAgICAgICBjdHg6IFNldHRlckNvbnRleHQ8VD4sXG4gICAgKTogKHRoaXM6IEdPYmosIHZhbHVlOiBUKSA9PiB2b2lkIHtcbiAgICAgICAgY29uc3QgZmllbGROYW1lID0gYXNzZXJ0RmllbGQoY3R4KVxuICAgICAgICBjb25zdCBtZXRhOiBQYXJ0aWFsPE1ldGE+ID0gY3R4Lm1ldGFkYXRhIVxuICAgICAgICBjb25zdCBwcm9wcyA9IChtZXRhLnByb3BlcnRpZXMgPz89IHt9KVxuICAgICAgICBpZiAoZmllbGROYW1lIGluIHByb3BzKSB7XG4gICAgICAgICAgICBjb25zdCB7IGZsYWdzLCB0eXBlIH0gPSBwcm9wc1tmaWVsZE5hbWVdXG4gICAgICAgICAgICBwcm9wc1tmaWVsZE5hbWVdID0geyBmbGFnczogZmxhZ3MgfCBQYXJhbUZsYWdzLldSSVRBQkxFLCB0eXBlIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByb3BzW2ZpZWxkTmFtZV0gPSB7IGZsYWdzOiBQYXJhbUZsYWdzLldSSVRBQkxFLCB0eXBlOiB0eXBlRGVjbGFyYXRpb24gfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZXR0ZXJcbiAgICB9XG59XG5cbnR5cGUgUGFyYW1UeXBlPFA+ID0gUCBleHRlbmRzIHsgJGd0eXBlOiBHVHlwZTxpbmZlciBUPiB9ID8gVCA6IFAgZXh0ZW5kcyBHVHlwZTxpbmZlciBUPiA/IFQgOiBuZXZlclxuXG50eXBlIFBhcmFtVHlwZXM8UGFyYW1zPiA9IHtcbiAgICBbSyBpbiBrZXlvZiBQYXJhbXNdOiBQYXJhbVR5cGU8UGFyYW1zW0tdPlxufVxuXG4vKipcbiAqIERlZmluZXMgYSBzaWduYWwgdG8gYmUgcmVnaXN0ZXJlZCB3aGVuIHVzaW5nIHRoZSB7QGxpbmsgcmVnaXN0ZXJ9IGRlY29yYXRvci5cbiAqXG4gKiBFeGFtcGxlOlxuICogYGBgdHNcbiAqIGNsYXNzIHtcbiAqICAgICBcXEBzaWduYWwoW1N0cmluZywgTnVtYmVyXSwgQm9vbGVhbiwge1xuICogICAgICAgICBhY2N1bXVsYXRvcjogQWNjdW11bGF0b3JUeXBlLkZJUlNUX1dJTlNcbiAqICAgICB9KVxuICogICAgIG15U2lnbmFsKHN0cjogc3RyaW5nLCBuOiBudW1iZXIpOiBib29sZWFuIHtcbiAqICAgICAgICAgLy8gZGVmYXVsdCBoYW5kbGVyXG4gKiAgICAgICAgIHJldHVybiBmYWxzZVxuICogICAgIH1cbiAqIH1cbiAqIGBgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gc2lnbmFsPFxuICAgIGNvbnN0IFBhcmFtcyBleHRlbmRzIEFycmF5PHsgJGd0eXBlOiBHVHlwZSB9IHwgR1R5cGU+LFxuICAgIFJldHVybiBleHRlbmRzIHsgJGd0eXBlOiBHVHlwZSB9IHwgR1R5cGUsXG4+KFxuICAgIHBhcmFtczogUGFyYW1zLFxuICAgIHJldHVyblR5cGU/OiBSZXR1cm4sXG4gICAgb3B0aW9ucz86IFNpZ25hbE9wdGlvbnMsXG4pOiAoXG4gICAgbWV0aG9kOiAodGhpczogR09iaiwgLi4uYXJnczogUGFyYW1UeXBlczxQYXJhbXM+KSA9PiBQYXJhbVR5cGU8UmV0dXJuPixcbiAgICBjdHg6IFNpZ25hbENvbnRleHQ8dHlwZW9mIG1ldGhvZD4sXG4pID0+IHR5cGVvZiBtZXRob2RcblxuLyoqXG4gKiBEZWZpbmVzIGEgc2lnbmFsIHRvIGJlIHJlZ2lzdGVyZWQgd2hlbiB1c2luZyB0aGUge0BsaW5rIHJlZ2lzdGVyfSBkZWNvcmF0b3IuXG4gKlxuICogRXhhbXBsZTpcbiAqIGBgYHRzXG4gKiBjbGFzcyB7XG4gKiAgICAgXFxAc2lnbmFsKFN0cmluZywgTnVtYmVyKVxuICogICAgIG15U2lnbmFsKHN0cjogc3RyaW5nLCBuOiBudW1iZXIpOiB2b2lkIHtcbiAqICAgICAgICAgLy8gZGVmYXVsdCBoYW5kbGVyXG4gKiAgICAgfVxuICogfVxuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaWduYWw8UGFyYW1zIGV4dGVuZHMgQXJyYXk8eyAkZ3R5cGU6IEdUeXBlIH0gfCBHVHlwZT4+KFxuICAgIC4uLnBhcmFtczogUGFyYW1zXG4pOiAoXG4gICAgbWV0aG9kOiAodGhpczogR09iamVjdC5PYmplY3QsIC4uLmFyZ3M6IFBhcmFtVHlwZXM8UGFyYW1zPikgPT4gdm9pZCxcbiAgICBjdHg6IFNpZ25hbENvbnRleHQ8dHlwZW9mIG1ldGhvZD4sXG4pID0+IHR5cGVvZiBtZXRob2RcblxuZXhwb3J0IGZ1bmN0aW9uIHNpZ25hbDxcbiAgICBQYXJhbXMgZXh0ZW5kcyBBcnJheTx7ICRndHlwZTogR1R5cGUgfSB8IEdUeXBlPixcbiAgICBSZXR1cm4gZXh0ZW5kcyB7ICRndHlwZTogR1R5cGUgfSB8IEdUeXBlLFxuPihcbiAgICAuLi5hcmdzOiBQYXJhbXMgfCBbcGFyYW1zOiBQYXJhbXMsIHJldHVyblR5cGU/OiBSZXR1cm4sIG9wdGlvbnM/OiBTaWduYWxPcHRpb25zXVxuKTogKFxuICAgIG1ldGhvZDogKHRoaXM6IEdPYmosIC4uLmFyZ3M6IFBhcmFtVHlwZXM8UGFyYW1zPikgPT4gUGFyYW1UeXBlPFJldHVybj4gfCB2b2lkLFxuICAgIGN0eDogU2lnbmFsQ29udGV4dDx0eXBlb2YgbWV0aG9kPixcbikgPT4gdHlwZW9mIG1ldGhvZCB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChtZXRob2QsIGN0eCkge1xuICAgICAgICBpZiAoY3R4LnByaXZhdGUpIHRocm93IEVycm9yKFwicHJpdmF0ZSBmaWVsZHMgYXJlIG5vdCBzdXBwb3J0ZWRcIilcbiAgICAgICAgaWYgKGN0eC5zdGF0aWMpIHRocm93IEVycm9yKFwic3RhdGljIGZpZWxkcyBhcmUgbm90IHN1cHBvcnRlZFwiKVxuXG4gICAgICAgIGlmICh0eXBlb2YgY3R4Lm5hbWUgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKFwib25seSBzdHJpbmdzIGNhbiBiZSBnb2JqZWN0IHNpZ25hbHNcIilcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHNpZ25hbE5hbWUgPSBrZWJhYmlmeShjdHgubmFtZSlcbiAgICAgICAgY29uc3QgbWV0YTogUGFydGlhbDxNZXRhPiA9IGN0eC5tZXRhZGF0YSFcbiAgICAgICAgY29uc3Qgc2lnbmFscyA9IChtZXRhLnNpZ25hbHMgPz89IHt9KVxuXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGFyZ3NbMF0pKSB7XG4gICAgICAgICAgICBjb25zdCBbcGFyYW1zLCByZXR1cm5UeXBlLCBvcHRpb25zXSA9IGFyZ3MgYXMgW1xuICAgICAgICAgICAgICAgIHBhcmFtczogUGFyYW1zLFxuICAgICAgICAgICAgICAgIHJldHVyblR5cGU/OiBSZXR1cm4sXG4gICAgICAgICAgICAgICAgb3B0aW9ucz86IFNpZ25hbE9wdGlvbnMsXG4gICAgICAgICAgICBdXG5cbiAgICAgICAgICAgIHNpZ25hbHNbc2lnbmFsTmFtZV0gPSB7XG4gICAgICAgICAgICAgICAgbWV0aG9kLFxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IG9wdGlvbnM/LmRlZmF1bHQgPz8gdHJ1ZSxcbiAgICAgICAgICAgICAgICBwYXJhbV90eXBlczogcGFyYW1zLm1hcCgoaSkgPT4gKFwiJGd0eXBlXCIgaW4gaSA/IGkuJGd0eXBlIDogaSkpLFxuICAgICAgICAgICAgICAgIC4uLihyZXR1cm5UeXBlICYmIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuX3R5cGU6IFwiJGd0eXBlXCIgaW4gcmV0dXJuVHlwZSA/IHJldHVyblR5cGUuJGd0eXBlIDogcmV0dXJuVHlwZSxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAuLi4ob3B0aW9ucz8uZmxhZ3MgJiYge1xuICAgICAgICAgICAgICAgICAgICBmbGFnczogb3B0aW9ucy5mbGFncyxcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAuLi4odHlwZW9mIG9wdGlvbnM/LmFjY3VtdWxhdG9yID09PSBcIm51bWJlclwiICYmIHtcbiAgICAgICAgICAgICAgICAgICAgYWNjdW11bGF0b3I6IG9wdGlvbnMuYWNjdW11bGF0b3IsXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBwYXJhbXMgPSBhcmdzIGFzIFBhcmFtc1xuICAgICAgICAgICAgc2lnbmFsc1tzaWduYWxOYW1lXSA9IHtcbiAgICAgICAgICAgICAgICBtZXRob2QsXG4gICAgICAgICAgICAgICAgcGFyYW1fdHlwZXM6IHBhcmFtcy5tYXAoKGkpID0+IChcIiRndHlwZVwiIGluIGkgPyBpLiRndHlwZSA6IGkpKSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoLi4ucGFyYW1zKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lbWl0KHNpZ25hbE5hbWUsIC4uLnBhcmFtcykgYXMgUGFyYW1UeXBlPFJldHVybj5cbiAgICAgICAgfVxuICAgIH1cbn1cblxuY29uc3QgTUFYSU5UID0gMiAqKiAzMSAtIDFcbmNvbnN0IE1JTklOVCA9IC0oMiAqKiAzMSlcbmNvbnN0IE1BWFVJTlQgPSAyICoqIDMyIC0gMVxuY29uc3QgTUFYRkxPQVQgPSAzLjQwMjgyMzVlMzhcbmNvbnN0IE1JTkZMT0FUID0gLTMuNDAyODIzNWUzOFxuY29uc3QgTUlOSU5UNjQgPSBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUlxuY29uc3QgTUFYSU5UNjQgPSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUlxuXG5mdW5jdGlvbiBwc3BlY0Zyb21HVHlwZSh0eXBlOiBHVHlwZTx1bmtub3duPiwgbmFtZTogc3RyaW5nLCBmbGFnczogUGFyYW1GbGFncykge1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIEdPYmplY3QuVFlQRV9CT09MRUFOOlxuICAgICAgICAgICAgcmV0dXJuIFBhcmFtU3BlYy5ib29sZWFuKG5hbWUsIFwiXCIsIFwiXCIsIGZsYWdzLCBmYWxzZSlcbiAgICAgICAgY2FzZSBHT2JqZWN0LlRZUEVfU1RSSU5HOlxuICAgICAgICAgICAgcmV0dXJuIFBhcmFtU3BlYy5zdHJpbmcobmFtZSwgXCJcIiwgXCJcIiwgZmxhZ3MsIFwiXCIpXG4gICAgICAgIGNhc2UgR09iamVjdC5UWVBFX0lOVDpcbiAgICAgICAgICAgIHJldHVybiBQYXJhbVNwZWMuaW50KG5hbWUsIFwiXCIsIFwiXCIsIGZsYWdzLCBNSU5JTlQsIE1BWElOVCwgMClcbiAgICAgICAgY2FzZSBHT2JqZWN0LlRZUEVfVUlOVDpcbiAgICAgICAgICAgIHJldHVybiBQYXJhbVNwZWMudWludChuYW1lLCBcIlwiLCBcIlwiLCBmbGFncywgMCwgTUFYVUlOVCwgMClcbiAgICAgICAgY2FzZSBHT2JqZWN0LlRZUEVfSU5UNjQ6XG4gICAgICAgICAgICByZXR1cm4gUGFyYW1TcGVjLmludDY0KG5hbWUsIFwiXCIsIFwiXCIsIGZsYWdzLCBNSU5JTlQ2NCwgTUFYSU5UNjQsIDApXG4gICAgICAgIGNhc2UgR09iamVjdC5UWVBFX1VJTlQ2NDpcbiAgICAgICAgICAgIHJldHVybiBQYXJhbVNwZWMudWludDY0KG5hbWUsIFwiXCIsIFwiXCIsIGZsYWdzLCAwLCBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUiwgMClcbiAgICAgICAgY2FzZSBHT2JqZWN0LlRZUEVfRkxPQVQ6XG4gICAgICAgICAgICByZXR1cm4gUGFyYW1TcGVjLmZsb2F0KG5hbWUsIFwiXCIsIFwiXCIsIGZsYWdzLCBNSU5GTE9BVCwgTUFYRkxPQVQsIDApXG4gICAgICAgIGNhc2UgR09iamVjdC5UWVBFX0RPVUJMRTpcbiAgICAgICAgICAgIHJldHVybiBQYXJhbVNwZWMuZG91YmxlKG5hbWUsIFwiXCIsIFwiXCIsIGZsYWdzLCBOdW1iZXIuTUlOX1ZBTFVFLCBOdW1iZXIuTUlOX1ZBTFVFLCAwKVxuICAgICAgICBjYXNlIEdPYmplY3QuVFlQRV9KU09CSkVDVDpcbiAgICAgICAgICAgIHJldHVybiBQYXJhbVNwZWMuanNvYmplY3QobmFtZSwgXCJcIiwgXCJcIiwgZmxhZ3MpXG4gICAgICAgIGNhc2UgR09iamVjdC5UWVBFX1ZBUklBTlQ6XG4gICAgICAgICAgICByZXR1cm4gUGFyYW1TcGVjLm9iamVjdChuYW1lLCBcIlwiLCBcIlwiLCBmbGFncyBhcyBhbnksIEdMaWIuVmFyaWFudClcblxuICAgICAgICBjYXNlIEdPYmplY3QuVFlQRV9FTlVNOlxuICAgICAgICBjYXNlIEdPYmplY3QuVFlQRV9JTlRFUkZBQ0U6XG4gICAgICAgIGNhc2UgR09iamVjdC5UWVBFX0JPWEVEOlxuICAgICAgICBjYXNlIEdPYmplY3QuVFlQRV9QT0lOVEVSOlxuICAgICAgICBjYXNlIEdPYmplY3QuVFlQRV9QQVJBTTpcbiAgICAgICAgY2FzZSBHT2JqZWN0LnR5cGVfZnJvbV9uYW1lKFwiR1R5cGVcIik6XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihgY2Fubm90IGd1ZXNzIFBhcmFtU3BlYyBmcm9tIEdUeXBlIFwiJHt0eXBlfVwiYClcbiAgICAgICAgY2FzZSBHT2JqZWN0LlRZUEVfT0JKRUNUOlxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIFBhcmFtU3BlYy5vYmplY3QobmFtZSwgXCJcIiwgXCJcIiwgZmxhZ3MgYXMgYW55LCB0eXBlKVxuICAgIH1cbn1cblxuZnVuY3Rpb24gcHNwZWMobmFtZTogc3RyaW5nLCBmbGFnczogUGFyYW1GbGFncywgZGVjbGFyYXRpb246IFByb3BlcnR5VHlwZURlY2xhcmF0aW9uPHVua25vd24+KSB7XG4gICAgaWYgKGRlY2xhcmF0aW9uIGluc3RhbmNlb2YgUGFyYW1TcGVjKSByZXR1cm4gZGVjbGFyYXRpb25cblxuICAgIGlmIChkZWNsYXJhdGlvbiA9PT0gT2JqZWN0IHx8IGRlY2xhcmF0aW9uID09PSBGdW5jdGlvbiB8fCBkZWNsYXJhdGlvbiA9PT0gQXJyYXkpIHtcbiAgICAgICAgcmV0dXJuIFBhcmFtU3BlYy5qc29iamVjdChuYW1lLCBcIlwiLCBcIlwiLCBmbGFncylcbiAgICB9XG5cbiAgICBpZiAoZGVjbGFyYXRpb24gPT09IFN0cmluZykge1xuICAgICAgICByZXR1cm4gUGFyYW1TcGVjLnN0cmluZyhuYW1lLCBcIlwiLCBcIlwiLCBmbGFncywgXCJcIilcbiAgICB9XG5cbiAgICBpZiAoZGVjbGFyYXRpb24gPT09IE51bWJlcikge1xuICAgICAgICByZXR1cm4gUGFyYW1TcGVjLmRvdWJsZShuYW1lLCBcIlwiLCBcIlwiLCBmbGFncywgLU51bWJlci5NQVhfVkFMVUUsIE51bWJlci5NQVhfVkFMVUUsIDApXG4gICAgfVxuXG4gICAgaWYgKGRlY2xhcmF0aW9uID09PSBCb29sZWFuKSB7XG4gICAgICAgIHJldHVybiBQYXJhbVNwZWMuYm9vbGVhbihuYW1lLCBcIlwiLCBcIlwiLCBmbGFncywgZmFsc2UpXG4gICAgfVxuXG4gICAgaWYgKFwiJGd0eXBlXCIgaW4gZGVjbGFyYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHBzcGVjRnJvbUdUeXBlKGRlY2xhcmF0aW9uLiRndHlwZSwgbmFtZSwgZmxhZ3MpXG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBkZWNsYXJhdGlvbiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBkZWNsYXJhdGlvbihuYW1lLCBmbGFncylcbiAgICB9XG5cbiAgICB0aHJvdyBFcnJvcihcImludmFsaWQgUHJvcGVydHlUeXBlRGVjbGFyYXRpb25cIilcbn1cblxudHlwZSBNZXRhSW5mbyA9IEdPYmplY3QuTWV0YUluZm88bmV2ZXIsIEFycmF5PHsgJGd0eXBlOiBHVHlwZTx1bmtub3duPiB9PiwgbmV2ZXI+XG5cbi8qKlxuICogUmVwbGFjZW1lbnQgZm9yIHtAbGluayBHT2JqZWN0LnJlZ2lzdGVyQ2xhc3N9XG4gKiBUaGlzIGRlY29yYXRvciBjb25zdW1lcyBtZXRhZGF0YSBuZWVkZWQgdG8gcmVnaXN0ZXIgdHlwZXMgd2hlcmUgdGhlIHByb3ZpZGVkIGRlY29yYXRvcnMgYXJlIHVzZWQ6XG4gKiAtIHtAbGluayBzaWduYWx9XG4gKiAtIHtAbGluayBwcm9wZXJ0eX1cbiAqIC0ge0BsaW5rIGdldHRlcn1cbiAqIC0ge0BsaW5rIHNldHRlcn1cbiAqXG4gKiBFeGFtcGxlOlxuICogYGBgdHNcbiAqIFxcQHJlZ2lzdGVyKHsgR1R5cGVOYW1lOiBcIk15Q2xhc3NcIiB9KVxuICogY2xhc3MgTXlDbGFzcyBleHRlbmRzIEdPYmplY3QuT2JqZWN0IHsgfVxuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlcjxDbHMgZXh0ZW5kcyB7IG5ldyAoLi4uYXJnczogYW55KTogR09iaiB9PihvcHRpb25zOiBNZXRhSW5mbyA9IHt9KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChjbHM6IENscywgY3R4OiBDbGFzc0RlY29yYXRvckNvbnRleHQ8Q2xzPikge1xuICAgICAgICBjb25zdCB0ID0gb3B0aW9ucy5UZW1wbGF0ZVxuXG4gICAgICAgIGlmICh0eXBlb2YgdCA9PT0gXCJzdHJpbmdcIiAmJiAhdC5zdGFydHNXaXRoKFwicmVzb3VyY2U6Ly9cIikgJiYgIXQuc3RhcnRzV2l0aChcImZpbGU6Ly9cIikpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuVGVtcGxhdGUgPSBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUodClcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG1ldGEgPSBjdHgubWV0YWRhdGEhIGFzIE1ldGFcblxuICAgICAgICBjb25zdCBwcm9wczogUmVjb3JkPHN0cmluZywgUGFyYW1TcGVjPHVua25vd24+PiA9IGZyb21FbnRyaWVzKFxuICAgICAgICAgICAgZW50cmllcyhtZXRhLnByb3BlcnRpZXMgPz8ge30pLm1hcCgoW2ZpZWxkTmFtZSwgeyBmbGFncywgdHlwZSB9XSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IGtlYmFiaWZ5KGZpZWxkTmFtZSlcbiAgICAgICAgICAgICAgICBjb25zdCBzcGVjID0gcHNwZWMoa2V5LCBmbGFncywgdHlwZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gW2tleSwgc3BlY11cbiAgICAgICAgICAgIH0pLFxuICAgICAgICApXG5cbiAgICAgICAgY29uc3Qgc2lnbmFscyA9IGZyb21FbnRyaWVzKFxuICAgICAgICAgICAgZW50cmllcyhtZXRhLnNpZ25hbHMgPz8ge30pLm1hcCgoW3NpZ25hbE5hbWUsIHsgZGVmYXVsdDogZGVmLCBtZXRob2QsIC4uLnNpZ25hbCB9XSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChkZWYpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmaW5lUHJvcGVydHkoY2xzLnByb3RvdHlwZSwgYG9uXyR7c2lnbmFsTmFtZS5yZXBsYWNlQWxsKFwiLVwiLCBcIl9cIil9YCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IG1ldGhvZCxcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtzaWduYWxOYW1lLCBzaWduYWxdXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgKVxuXG4gICAgICAgIGRlbGV0ZSBtZXRhLnByb3BlcnRpZXNcbiAgICAgICAgZGVsZXRlIG1ldGEuc2lnbmFsc1xuXG4gICAgICAgIHJlZ2lzdGVyQ2xhc3MoeyAuLi5vcHRpb25zLCBQcm9wZXJ0aWVzOiBwcm9wcywgU2lnbmFsczogc2lnbmFscyB9LCBjbHMpXG4gICAgfVxufVxuXG4vKipcbiAqIEBleHBlcmltZW50YWxcbiAqIEFzc2VydHMgYSBndHlwZSBpbiBjYXNlcyB3aGVyZSB0aGUgdHlwZSBpcyB0b28gbG9vc2Uvc3RyaWN0LlxuICpcbiAqIEV4YW1wbGU6XG4gKiBgYGB0c1xuICogdHlwZSBUdXBsZSA9IFtudW1iZXIsIG51bWJlcl1cbiAqIGNvbnN0IFR1cGxlID0gZ3R5cGU8VHVwbGU+KEFycmF5KVxuICpcbiAqIGNsYXNzIHtcbiAqICAgXFxAcHJvcGVydHkoVHVwbGUpIHZhbHVlID0gWzEsIDJdIGFzIFR1cGxlXG4gKiB9XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGd0eXBlPEFzc2VydD4odHlwZTogR1R5cGU8YW55PiB8IHsgJGd0eXBlOiBHVHlwZTxhbnk+IH0pOiB7XG4gICAgJGd0eXBlOiBHVHlwZTxBc3NlcnQ+XG59IHtcbiAgICByZXR1cm4gXCIkZ3R5cGVcIiBpbiB0eXBlID8gdHlwZSA6IHsgJGd0eXBlOiB0eXBlIH1cbn1cblxuZGVjbGFyZSBnbG9iYWwge1xuICAgIGludGVyZmFjZSBGdW5jdGlvbkNvbnN0cnVjdG9yIHtcbiAgICAgICAgJGd0eXBlOiBHVHlwZTwoLi4uYXJnczogYW55W10pID0+IGFueT5cbiAgICB9XG5cbiAgICBpbnRlcmZhY2UgQXJyYXlDb25zdHJ1Y3RvciB7XG4gICAgICAgICRndHlwZTogR1R5cGU8YW55W10+XG4gICAgfVxufVxuXG5GdW5jdGlvbi4kZ3R5cGUgPSBPYmplY3QuJGd0eXBlIGFzIEZ1bmN0aW9uQ29uc3RydWN0b3JbXCIkZ3R5cGVcIl1cbkFycmF5LiRndHlwZSA9IE9iamVjdC4kZ3R5cGUgYXMgQXJyYXlDb25zdHJ1Y3RvcltcIiRndHlwZVwiXVxuIiwgImltcG9ydCBHT2JqZWN0LCB7IHByb3BlcnR5LCByZWdpc3RlciB9IGZyb20gXCJhZ3MvZ29iamVjdFwiO1xuXG5AcmVnaXN0ZXIoeyBHVHlwZU5hbWU6IFwiUGxheWVyTGlzdEl0ZW1cIiB9KVxuZXhwb3J0IGNsYXNzIFBsYXllckxpc3RJdGVtT2JqZWN0IGV4dGVuZHMgR09iamVjdC5PYmplY3Qge1xuICBAcHJvcGVydHkoU3RyaW5nKSB0ZXh0ID0gXCJcIjtcbiAgQHByb3BlcnR5KFN0cmluZykgZGVza3RvcEljb24gPSBcIlwiO1xuICBAcHJvcGVydHkoU3RyaW5nKSBidXNOYW1lID0gXCJcIjtcblxuICBjb25zdHJ1Y3Rvcih7XG4gICAgYnVzTmFtZSxcbiAgICBkZXNrdG9wSWNvbixcbiAgICB0ZXh0LFxuICB9OiB7XG4gICAgdGV4dDogc3RyaW5nO1xuICAgIGRlc2t0b3BJY29uOiBzdHJpbmc7XG4gICAgYnVzTmFtZTogc3RyaW5nO1xuICB9KSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMudGV4dCA9IHRleHQ7XG4gICAgdGhpcy5kZXNrdG9wSWNvbiA9IGRlc2t0b3BJY29uO1xuICAgIHRoaXMuYnVzTmFtZSA9IGJ1c05hbWU7XG4gIH1cbn1cbiIsICJpbXBvcnQgQXBwcyBmcm9tIFwiZ2k6Ly9Bc3RhbEFwcHNcIjtcbmltcG9ydCBHaW8gZnJvbSBcImdpOi8vR2lvXCI7XG5pbXBvcnQgR0xpYiBmcm9tIFwiZ2k6Ly9HTGliXCI7XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVBcHBzSW5zdGFuY2UgPSAoe1xuICB2YXJpYW50LFxufToge1xuICB2YXJpYW50OiBcImFwcFNlYXJjaFwiIHwgXCJvdGhlclwiO1xufSkgPT4ge1xuICByZXR1cm4gbmV3IEFwcHMuQXBwcyhcbiAgICB2YXJpYW50ID09PSBcImFwcFNlYXJjaFwiXG4gICAgICA/IHVuZGVmaW5lZFxuICAgICAgOiB7XG4gICAgICAgICAgbmFtZU11bHRpcGxpZXI6IDIsXG4gICAgICAgICAgZW50cnlNdWx0aXBsaWVyOiAwLFxuICAgICAgICAgIGV4ZWN1dGFibGVNdWx0aXBsaWVyOiAyLFxuICAgICAgICB9LFxuICApO1xufTtcblxuZnVuY3Rpb24gc2ltcGxpZnlBcHBOYW1lKGFwcElkOiBzdHJpbmcgPSBcIlwiKTogc3RyaW5nIHtcbiAgY29uc3QgYWZ0ZXJTbGFzaCA9IGFwcElkLnNwbGl0KFwiL1wiKS5wb3AoKSA/PyBhcHBJZDtcbiAgY29uc3QgYWZ0ZXJEb3QgPSBhZnRlclNsYXNoLmluY2x1ZGVzKFwiLlwiKVxuICAgID8gYWZ0ZXJTbGFzaC5zcGxpdChcIi5cIikucG9wKCkhXG4gICAgOiBhZnRlclNsYXNoO1xuICBsZXQgYmVmb3JlRGFzaCA9IGFmdGVyRG90LmluY2x1ZGVzKFwiLVwiKSA/IGFmdGVyRG90LnNwbGl0KFwiLVwiKVswXSA6IGFmdGVyRG90O1xuXG4gIGJlZm9yZURhc2ggPSBiZWZvcmVEYXNoLnJlcGxhY2UoXCJfXCIsIFwiIFwiKTtcblxuICByZXR1cm4gYmVmb3JlRGFzaDtcbn1cblxuZXhwb3J0IGNvbnN0IHNlYXJjaEFwcEZyb21OYW1lID0gKGFwcHM6IEFwcHMuQXBwcywgbmFtZTogc3RyaW5nKSA9PiB7XG4gIGNvbnN0IG5hbWVUb1VzZSA9IHNpbXBsaWZ5QXBwTmFtZShuYW1lKTtcblxuICBjb25zdCByZXN1bHRzID0gYXBwcy5mdXp6eV9xdWVyeShuYW1lVG9Vc2UpO1xuXG4gIHJldHVybiByZXN1bHRzO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEFsbENvbW1hbmRzKCkge1xuICBsZXQgcGF0aCA9IEdMaWIuZ2V0ZW52KFwiUEFUSFwiKTtcbiAgaWYgKCFwYXRoKSByZXR1cm4gW107XG5cbiAgbGV0IGNvbW1hbmRzID0gbmV3IFNldDxzdHJpbmc+KCk7XG5cbiAgZm9yIChsZXQgZGlycGF0aCBvZiBwYXRoLnNwbGl0KFwiOlwiKSkge1xuICAgIC8vIFZlcmlmaWNhciBxdWUgZWwgZGlyZWN0b3JpbyBleGlzdGUgYW50ZXMgZGUgYWJyaXJsb1xuICAgIGlmICghR0xpYi5maWxlX3Rlc3QoZGlycGF0aCwgR0xpYi5GaWxlVGVzdC5JU19ESVIpKSBjb250aW51ZTtcblxuICAgIGxldCBkaXIgPSBHTGliLkRpci5vcGVuKGRpcnBhdGgsIDApO1xuICAgIGlmICghZGlyKSBjb250aW51ZTtcblxuICAgIGxldCBuYW1lO1xuICAgIHdoaWxlICgobmFtZSA9IGRpci5yZWFkX25hbWUoKSkgIT09IG51bGwpIHtcbiAgICAgIGxldCBmdWxsID0gR0xpYi5idWlsZF9maWxlbmFtZXYoW2RpcnBhdGgsIG5hbWVdKTtcbiAgICAgIGlmIChcbiAgICAgICAgR0xpYi5maWxlX3Rlc3QoXG4gICAgICAgICAgZnVsbCxcbiAgICAgICAgICBHTGliLkZpbGVUZXN0LklTX1JFR1VMQVIgfCBHTGliLkZpbGVUZXN0LklTX0VYRUNVVEFCTEUsXG4gICAgICAgIClcbiAgICAgICkge1xuICAgICAgICBjb21tYW5kcy5hZGQobmFtZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZGlyLmNsb3NlKCk7XG4gIH1cblxuICByZXR1cm4gQXJyYXkuZnJvbShjb21tYW5kcykuc29ydCgpO1xufVxuXG5jb25zdCB0ZXJtaW5hbHMgPSBbXG4gIFwia2l0dHlcIixcbiAgXCJmb290XCIsXG4gIFwiYWxhY3JpdHR5XCIsXG4gIFwid2V6dGVybVwiLFxuICBcImdub21lLXRlcm1pbmFsXCIsXG4gIFwia29uc29sZVwiLFxuICBcInh0ZXJtXCIsXG4gIFwibHh0ZXJtaW5hbFwiLFxuICBcInRpbGl4XCIsXG4gIFwidGVybWluYXRvclwiLFxuICBcInVyeHZ0XCIsXG5dIGFzIGNvbnN0O1xuXG5leHBvcnQgZnVuY3Rpb24gZmluZEF2YWlsYWJsZVRlcm1pbmFsKCkge1xuICBmb3IgKGxldCB0ZXJtIG9mIHRlcm1pbmFscykge1xuICAgIGlmIChHTGliLmZpbmRfcHJvZ3JhbV9pbl9wYXRoKHRlcm0pKSByZXR1cm4gdGVybTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBnZXRUZXJtaW5hbENvbW1hbmQoXG4gIHRlcm1pbmFsOiAodHlwZW9mIHRlcm1pbmFscylbbnVtYmVyXSxcbiAgY29tbWFuZFN0cmluZzogc3RyaW5nLFxuKSB7XG4gIHN3aXRjaCAodGVybWluYWwpIHtcbiAgICBjYXNlIFwia2l0dHlcIjpcbiAgICBjYXNlIFwiZm9vdFwiOlxuICAgIGNhc2UgXCJhbGFjcml0dHlcIjpcbiAgICBjYXNlIFwid2V6dGVybVwiOlxuICAgIGNhc2UgXCJ4dGVybVwiOlxuICAgIGNhc2UgXCJ1cnh2dFwiOlxuICAgIGNhc2UgXCJ0ZXJtaW5hdG9yXCI6XG4gICAgY2FzZSBcImx4dGVybWluYWxcIjpcbiAgICAgIHJldHVybiBbdGVybWluYWwsIFwiLWVcIiwgXCJiYXNoXCIsIFwiLWNcIiwgYCR7Y29tbWFuZFN0cmluZ307IGV4ZWMgYmFzaGBdO1xuICAgIGNhc2UgXCJnbm9tZS10ZXJtaW5hbFwiOlxuICAgIGNhc2UgXCJ0aWxpeFwiOlxuICAgIGNhc2UgXCJrb25zb2xlXCI6XG4gICAgICByZXR1cm4gW3Rlcm1pbmFsLCBcIi0tXCIsIFwiYmFzaFwiLCBcIi1jXCIsIGAke2NvbW1hbmRTdHJpbmd9OyBleGVjIGJhc2hgXTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cbmZ1bmN0aW9uIGlzTGlrZWx5R3VpQXBwKGNvbW1hbmQ6IHN0cmluZykge1xuICBjb25zdCBrbm93bkd1aSA9IG5ldyBTZXQoW1xuICAgIFwid2F5YmFyXCIsXG4gICAgXCJzd2F5YmdcIixcbiAgICBcInJvZmlcIixcbiAgICBcIndvZmlcIixcbiAgICBcImR1bnN0XCIsXG4gICAgXCJ0aHVuYXJcIixcbiAgICBcImFsYWNyaXR0eVwiLFxuICAgIFwia2l0dHlcIixcbiAgICBcImZpcmVmb3hcIixcbiAgICBcImNvZGVcIixcbiAgICBcIm5hdXRpbHVzXCIsXG4gICAgXCJnbm9tZS1jYWxjdWxhdG9yXCIsXG4gICAgXCJwYXZ1Y29udHJvbFwiLFxuICAgIFwidmxjXCIsXG4gICAgXCJnaW1wXCIsXG4gIF0pO1xuXG4gIGlmIChrbm93bkd1aS5oYXMoY29tbWFuZCkpIHJldHVybiB0cnVlO1xuXG4gIC8vIENoZWNrIGlmIGl0J3MgaW4gQXBwSW5mb1xuICBjb25zdCBhcHBJbmZvID0gR2lvLkFwcEluZm8uZ2V0X2FsbCgpLmZpbmQoXG4gICAgKGFwcCkgPT4gYXBwLmdldF9leGVjdXRhYmxlKCkgPT09IGNvbW1hbmQsXG4gICk7XG4gIGlmIChhcHBJbmZvKSByZXR1cm4gdHJ1ZTtcblxuICAvLyBGYWxsYmFjazogY2hlY2sgaWYgdGhlIGJpbmFyeSBpcyBsaW5rZWQgdG8gR1RLL1F0IChvcHRpb25hbCwgc2VlIGJlbG93KVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJ1bkFwcENvbW1hbmQoY29tbWFuZFN0cmluZzogc3RyaW5nKSB7XG4gIGxldCBbb2ssIGFyZ3ZdID0gR0xpYi5zaGVsbF9wYXJzZV9hcmd2KGNvbW1hbmRTdHJpbmcpO1xuICBpZiAoIW9rIHx8ICFhcmd2IHx8IGFyZ3YubGVuZ3RoID09PSAwKSByZXR1cm47XG5cbiAgbGV0IGNvbW1hbmQgPSBhcmd2WzBdO1xuXG4gIHRyeSB7XG4gICAgaWYgKGlzTGlrZWx5R3VpQXBwKGNvbW1hbmQpKSB7XG4gICAgICBHaW8uU3VicHJvY2Vzcy5uZXcoYXJndiwgR2lvLlN1YnByb2Nlc3NGbGFncy5TRUFSQ0hfUEFUSF9GUk9NX0VOVlApO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgdGVybWluYWwgPSBmaW5kQXZhaWxhYmxlVGVybWluYWwoKTtcbiAgICAgIGlmICghdGVybWluYWwpIHRocm93IG5ldyBFcnJvcihcIk5vIHRlcm1pbmFsIGVtdWxhdG9yIGZvdW5kXCIpO1xuXG4gICAgICBsZXQgdGVybUNvbW1hbmQgPSBnZXRUZXJtaW5hbENvbW1hbmQodGVybWluYWwsIGNvbW1hbmRTdHJpbmcpO1xuXG4gICAgICBpZiAoIXRlcm1Db21tYW5kPy5sZW5ndGgpIHtcbiAgICAgICAgcHJpbnRlcnIoXCJObyB0ZXJtQ29tbWFuZFwiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgR2lvLlN1YnByb2Nlc3MubmV3KFxuICAgICAgICB0ZXJtQ29tbWFuZCxcbiAgICAgICAgR2lvLlN1YnByb2Nlc3NGbGFncy5TRUFSQ0hfUEFUSF9GUk9NX0VOVlAsXG4gICAgICApO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIGxvZ0Vycm9yKGUpO1xuICB9XG59XG4iLCAiaW1wb3J0IHsgQWNjZXNzb3IsIG9uQ2xlYW51cCB9IGZyb20gXCJhZ3NcIjtcbmltcG9ydCB7IEdkaywgR3RrIH0gZnJvbSBcImFncy9ndGs0XCI7XG5pbXBvcnQgR2RrUGl4YnVmIGZyb20gXCJnaTovL0dka1BpeGJ1ZlwiO1xuaW1wb3J0IHsgZ2V0SXNJY29uIH0gZnJvbSBcIi4uL3V0aWxzL2ljb25zXCI7XG5cbmNvbnN0IGdldFBpeGJ1ZkZvckljb25OYW1lID0gKHtcbiAgaWNvbixcbiAgc2l6ZSxcbn06IHtcbiAgaWNvbjogc3RyaW5nO1xuICBzaXplOiBudW1iZXI7XG59KSA9PiB7XG4gIGNvbnN0IGRpc3BsYXkgPSBHZGsuRGlzcGxheS5nZXRfZGVmYXVsdCgpO1xuICBpZiAoIWRpc3BsYXkpIHJldHVybiBudWxsO1xuXG4gIGNvbnN0IGljb25UaGVtZSA9IEd0ay5JY29uVGhlbWUuZ2V0X2Zvcl9kaXNwbGF5KGRpc3BsYXkpO1xuXG4gIGlmICghZ2V0SXNJY29uKHsgaWNvbiwgaWNvblRoZW1lIH0pKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBjb25zdCBpY29uSW5mbyA9IGljb25UaGVtZS5sb29rdXBfaWNvbihcbiAgICBpY29uLFxuICAgIG51bGwsIC8vIGZhbGxiYWNrc1xuICAgIDIwMCwgLy8gc2l6ZSBpbiBhcHAgcGl4ZWxzXG4gICAgMSwgLy8gc2NhbGUgKGZvciBIaURQSSwgdXN1YWxseSAxIG9yIHdpbmRvdyBzY2FsZSlcbiAgICBudWxsLCAvLyB0ZXh0IGRpcmVjdGlvbiwgbnVsbCBmb3IgTFRSXG4gICAgbnVsbCwgLy8gZmxhZ3MpO1xuICApO1xuICBjb25zdCBmaWxlID0gaWNvbkluZm8/LmdldF9maWxlKCk7XG4gIGNvbnN0IHBhdGggPSBmaWxlPy5nZXRfcGF0aCgpO1xuXG4gIGlmICghcGF0aCkgcmV0dXJuIG51bGw7XG5cbiAgdHJ5IHtcbiAgICByZXR1cm4gR2RrUGl4YnVmLlBpeGJ1Zi5uZXdfZnJvbV9maWxlX2F0X3NjYWxlKHBhdGgsIHNpemUsIHNpemUsIHRydWUpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59O1xuXG5jb25zdCBDaXJjdWxhckltYWdlID0gKHtcbiAgaW1nLFxuICBzaXplOiB3YW50ZWRTaXplLFxuICAkdHlwZSxcbiAgaWNvbkZhbGxiYWNrLFxuICBvbkNsaWNrZWQsXG4gIG9uUmlnaHRDbGlja2VkLFxuICAuLi5wcm9wc1xufToge1xuICBpbWc6IEFjY2Vzc29yPHN0cmluZz47XG4gIHZpc2libGU/OiBBY2Nlc3Nvcjxib29sZWFuPjtcbiAgc2l6ZTogbnVtYmVyO1xuICAkdHlwZT86IHN0cmluZztcbiAgaWNvbkZhbGxiYWNrOiBzdHJpbmcgfCBudWxsO1xuICBvbkNsaWNrZWQ/OiAoKSA9PiB2b2lkO1xuICBvblJpZ2h0Q2xpY2tlZD86ICgpID0+IHZvaWQ7XG59ICYgUGFydGlhbDxcbiAgUGljazxcbiAgICBHdGsuRHJhd2luZ0FyZWEsXG4gICAgXCJ3aWR0aFJlcXVlc3RcIiB8IFwiaGVpZ2h0UmVxdWVzdFwiIHwgXCJoZXhwYW5kXCIgfCBcInZleHBhbmRcIlxuICA+XG4+KSA9PiB7XG4gIGxldCBkcmF3aW5BcmVhOiBHdGsuRHJhd2luZ0FyZWE7XG5cbiAgY29uc3QgdW5zdWJzY3JpYmUgPSBpbWcuc3Vic2NyaWJlKCgpID0+IHtcbiAgICBkcmF3aW5BcmVhLnF1ZXVlX2RyYXcoKTtcbiAgfSk7XG5cbiAgb25DbGVhbnVwKCgpID0+IHtcbiAgICB1bnN1YnNjcmliZSgpO1xuICB9KTtcblxuICByZXR1cm4gKFxuICAgIDxHdGsuRHJhd2luZ0FyZWFcbiAgICAgICR0eXBlPXskdHlwZX1cbiAgICAgIHsuLi5wcm9wc31cbiAgICAgICQ9eyhzKSA9PiB7XG4gICAgICAgIHMuc2V0X2RyYXdfZnVuYygoXywgY3IsIHdpZHRoLCBoZWlnaHQpID0+IHtcbiAgICAgICAgICBsZXQgY292ZXIgPSBpbWcuZ2V0KCk7XG5cbiAgICAgICAgICBjb3ZlciA9IGNvdmVyPy5zdGFydHNXaXRoKFwiZmlsZTovL1wiKVxuICAgICAgICAgICAgPyBjb3Zlci5yZXBsYWNlKFwiZmlsZTovL1wiLCBcIlwiKVxuICAgICAgICAgICAgOiBjb3ZlcjtcblxuICAgICAgICAgIGNvbnN0IHNpemUgPSBNYXRoLm1pbih3aWR0aCwgaGVpZ2h0LCB3YW50ZWRTaXplKTtcblxuICAgICAgICAgIGxldCBwaXhidWY6IEdka1BpeGJ1Zi5QaXhidWYgfCBudWxsID0gbnVsbDtcblxuICAgICAgICAgIGlmIChjb3Zlcikge1xuICAgICAgICAgICAgLy8gbG9hZCB0aGUgY292ZXIgaW1hZ2UsIHNjYWxlZCBzcXVhcmVcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGNvbnN0IG9yaWdQaXhidWYgPSBHZGtQaXhidWYuUGl4YnVmLm5ld19mcm9tX2ZpbGUoY292ZXIpO1xuXG4gICAgICAgICAgICAgIGNvbnN0IGltZ1dpZHRoID0gb3JpZ1BpeGJ1Zi5nZXRfd2lkdGgoKTtcbiAgICAgICAgICAgICAgY29uc3QgaW1nSGVpZ2h0ID0gb3JpZ1BpeGJ1Zi5nZXRfaGVpZ2h0KCk7XG4gICAgICAgICAgICAgIGNvbnN0IGNpcmNsZURpYW1ldGVyID0gc2l6ZTtcblxuICAgICAgICAgICAgICBjb25zdCBzY2FsZVggPSBjaXJjbGVEaWFtZXRlciAvIGltZ1dpZHRoO1xuICAgICAgICAgICAgICBjb25zdCBzY2FsZVkgPSBjaXJjbGVEaWFtZXRlciAvIGltZ0hlaWdodDtcbiAgICAgICAgICAgICAgY29uc3Qgc2NhbGUgPSBNYXRoLm1heChzY2FsZVgsIHNjYWxlWSk7XG5cbiAgICAgICAgICAgICAgY29uc3Qgc2NhbGVkV2lkdGggPSBNYXRoLmNlaWwoaW1nV2lkdGggKiBzY2FsZSk7XG4gICAgICAgICAgICAgIGNvbnN0IHNjYWxlZEhlaWdodCA9IE1hdGguY2VpbChpbWdIZWlnaHQgKiBzY2FsZSk7XG5cbiAgICAgICAgICAgICAgcGl4YnVmID0gb3JpZ1BpeGJ1Zi5zY2FsZV9zaW1wbGUoXG4gICAgICAgICAgICAgICAgc2NhbGVkV2lkdGgsXG4gICAgICAgICAgICAgICAgc2NhbGVkSGVpZ2h0LFxuICAgICAgICAgICAgICAgIEdka1BpeGJ1Zi5JbnRlcnBUeXBlLkhZUEVSLFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgICAgIHBpeGJ1ZiA9IGdldFBpeGJ1ZkZvckljb25OYW1lKHsgaWNvbjogY292ZXIsIHNpemUgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFwaXhidWYgJiYgaWNvbkZhbGxiYWNrKSB7XG4gICAgICAgICAgICBwaXhidWYgPSBnZXRQaXhidWZGb3JJY29uTmFtZSh7XG4gICAgICAgICAgICAgIGljb246IGljb25GYWxsYmFjayxcbiAgICAgICAgICAgICAgc2l6ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghcGl4YnVmKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgY3ggPSB3aWR0aCAvIDI7XG4gICAgICAgICAgY29uc3QgY3kgPSBoZWlnaHQgLyAyO1xuICAgICAgICAgIGNvbnN0IHJhZGl1cyA9IHNpemUgLyAyO1xuXG4gICAgICAgICAgY3IuYXJjKGN4LCBjeSwgcmFkaXVzLCAwLCBNYXRoLlBJICogMik7XG4gICAgICAgICAgY3IuY2xpcCgpO1xuXG4gICAgICAgICAgY29uc3QgeCA9IGN4IC0gcGl4YnVmLmdldF93aWR0aCgpIC8gMjtcbiAgICAgICAgICBjb25zdCB5ID0gY3kgLSBwaXhidWYuZ2V0X2hlaWdodCgpIC8gMjtcblxuICAgICAgICAgIEdkay5jYWlyb19zZXRfc291cmNlX3BpeGJ1ZihjciwgcGl4YnVmLCB4LCB5KTtcbiAgICAgICAgICBjci5wYWludCgpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAob25DbGlja2VkKSB7XG4gICAgICAgICAgY29uc3QgZ2VzdHVyZSA9IEd0ay5HZXN0dXJlQ2xpY2submV3KCk7XG5cbiAgICAgICAgICBnZXN0dXJlLnNldF9idXR0b24oMSk7XG5cbiAgICAgICAgICBnZXN0dXJlLmNvbm5lY3QoXCJyZWxlYXNlZFwiLCAoKSA9PiB7XG4gICAgICAgICAgICBvbkNsaWNrZWQoKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHMuYWRkX2NvbnRyb2xsZXIoZ2VzdHVyZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob25SaWdodENsaWNrZWQpIHtcbiAgICAgICAgICBjb25zdCBnZXN0dXJlID0gR3RrLkdlc3R1cmVDbGljay5uZXcoKTtcblxuICAgICAgICAgIGdlc3R1cmUuc2V0X2J1dHRvbigzKTtcblxuICAgICAgICAgIGdlc3R1cmUuY29ubmVjdChcInJlbGVhc2VkXCIsICgpID0+IHtcbiAgICAgICAgICAgIG9uUmlnaHRDbGlja2VkKCk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBzLmFkZF9jb250cm9sbGVyKGdlc3R1cmUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZHJhd2luQXJlYSA9IHM7XG4gICAgICB9fVxuICAgIC8+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBDaXJjdWxhckltYWdlO1xuIiwgImltcG9ydCB7IEd0ayB9IGZyb20gXCJhZ3MvZ3RrNFwiO1xuaW1wb3J0IEdpbyBmcm9tIFwiZ2k6Ly9HaW9cIjtcbmltcG9ydCBHTGliIGZyb20gXCJnaTovL0dMaWJcIjtcbmltcG9ydCB7IGNyZWF0ZUFwcHNJbnN0YW5jZSwgc2VhcmNoQXBwRnJvbU5hbWUgfSBmcm9tIFwiLi9hcHBzXCI7XG5cbmNvbnN0IEhPTUUgPSBHTGliLmdldGVudihcIkhPTUVcIik7XG5cbmV4cG9ydCBjb25zdCBnZXRJc0ljb24gPSAoe1xuICBpY29uLFxuICBpY29uVGhlbWUsXG59OiB7XG4gIGljb246IHN0cmluZztcbiAgaWNvblRoZW1lOiBHdGsuSWNvblRoZW1lO1xufSkgPT4ge1xuICByZXR1cm4gaWNvbiA/IGljb25UaGVtZS5oYXNfaWNvbihpY29uKSA6IGZhbHNlO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldElzSWNvbkZpbGUgPSAoeyBpY29uIH06IHsgaWNvbjogc3RyaW5nIH0pID0+IHtcbiAgcmV0dXJuIGljb24/LnN0YXJ0c1dpdGgoXCIvXCIpO1xufTtcblxuZnVuY3Rpb24gZW51bWVyYXRlRGlyKHBhdGg6IHN0cmluZyk6IHN0cmluZ1tdIHtcbiAgY29uc3QgZW51bWVyYXRvciA9IEdpby5GaWxlLm5ld19mb3JfcGF0aChwYXRoKS5lbnVtZXJhdGVfY2hpbGRyZW4oXG4gICAgXCJzdGFuZGFyZDo6bmFtZSxzdGFuZGFyZDo6dHlwZVwiLFxuICAgIEdpby5GaWxlUXVlcnlJbmZvRmxhZ3MuTk9ORSxcbiAgICBudWxsLFxuICApO1xuICBjb25zdCBwaXhtYXBGaWxlczogc3RyaW5nW10gPSBbXTtcbiAgd2hpbGUgKHRydWUpIHtcbiAgICBjb25zdCBpbmZvID0gZW51bWVyYXRvci5uZXh0X2ZpbGUobnVsbCk7XG4gICAgaWYgKCFpbmZvKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgcGl4bWFwRmlsZXMucHVzaChgJHtwYXRofS8ke2luZm8uZ2V0X25hbWUoKX1gKTtcbiAgfVxuXG4gIHJldHVybiBwaXhtYXBGaWxlcztcbn1cblxuLy8gVE9ETzogYWRkIG1pc3NpbmcgaWNvbiBwYXRoXG5jb25zdCBNSVNTSU5HX0lDT04gPSBcIlwiO1xuXG5jb25zdCBpY29uQ2FjaGU6IFJlY29yZDxzdHJpbmcsIHN0cmluZyB8IFwiTk8tSUNPTlwiPiA9IHt9O1xuY29uc3QgYXBwcyA9IGNyZWF0ZUFwcHNJbnN0YW5jZSh7IHZhcmlhbnQ6IFwib3RoZXJcIiB9KTtcbmNvbnN0IHBpeG1hcEZpbGVzID0gZW51bWVyYXRlRGlyKFwiL3Vzci9zaGFyZS9waXhtYXBzXCIpO1xuY29uc3QgaGljb2xvclNjYWxhYmxlID0gZW51bWVyYXRlRGlyKFwiL3Vzci9zaGFyZS9pY29ucy9oaWNvbG9yL3NjYWxhYmxlL2FwcHNcIik7XG4vLyBjb25zdCBjdXN0b21JY29ucyA9IGVudW1lcmF0ZURpcihgJHtIT01FfS8uY29uZmlnL2Fncy9hc3NldHMvYXBwLWljb25zYCk7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRBcHBJY29uKG5hbWU6IHN0cmluZyB8IHVuZGVmaW5lZCk6IHN0cmluZyB7XG4gIC8vIG5vIG5hbWUsIGNhbnQgc2VhcmNoIGZvciBpY29uXG4gIGlmICghbmFtZSkge1xuICAgIHJldHVybiBNSVNTSU5HX0lDT047XG4gIH1cblxuICAvLyBpY29uIGFscmVhZHkgaW4gY2FjaGVcbiAgaWYgKGljb25DYWNoZVtuYW1lXSAmJiBpY29uQ2FjaGVbbmFtZV0gIT0gXCJOTy1JQ09OXCIpIHtcbiAgICByZXR1cm4gaWNvbkNhY2hlW25hbWVdO1xuICB9XG5cbiAgLy8gaWNvbiB3YXMgYWxyZWFkeSBzZWFyY2hlZCBmb3IgYW5kIG5vdCBmb3VuZFxuICBpZiAoaWNvbkNhY2hlW25hbWVdICYmIGljb25DYWNoZVtuYW1lXSA9PSBcIk5PLUlDT05cIikge1xuICAgIHJldHVybiBNSVNTSU5HX0lDT047XG4gIH1cblxuICAvLyBjaGVjayBjdXN0b20gaWNvbnMgaW4gYWdzL2Fzc2V0cy9hcHAtaWNvbnMgZGlyXG4gIC8vIGNvbnN0IGN1c3RvbSA9IGN1c3RvbUljb25zLmZpbHRlcigoaXQpID0+IGl0LmluY2x1ZGVzKG5hbWUpKTtcbiAgLy8gaWYgKGN1c3RvbS5sZW5ndGgpIHtcbiAgLy8gICAgIGljb25DYWNoZVtuYW1lXSA9IGN1c3RvbS5hdCgtMSkhITtcbiAgLy8gICAgIHJldHVybiBpY29uQ2FjaGVbbmFtZV07XG4gIC8vIH1cblxuICAvLyBjaGVjayBzdGVhbSBnYW1lIGljb25zXG4gIGlmIChuYW1lLnN0YXJ0c1dpdGgoXCJzdGVhbV9hcHBcIikpIHtcbiAgICB0cnkge1xuICAgICAgLy8gc2VlbXMgbGlrZSBldmVyeSBzdGVhbSBnYW1lIGhhcyBhbiBpY29uIGluIGZvcm1hdCBsaWtlICdmNmRhMTQyMGExNzMzMjRkNDliY2Q0NzBmYTNlZWU3ODFhZDBmYTVlLmpwZydcbiAgICAgIC8vIGFsbCB0aGVzZSBpY29ucyBhcmUganBnIGFuZCBubyBvdGhlciBpbWFnZXMgd2l0aCBzaW1pbGFyIG5hbWUgYXJlIHByZXNlbnQgaW4gYW55IGdhbWUgZnJvbSB3aGF0IEkgY2FuIHRlbGwuXG4gICAgICBjb25zdCBnYW1lRmlsZXMgPSBlbnVtZXJhdGVEaXIoXG4gICAgICAgIGAke0hPTUV9Ly5sb2NhbC9zaGFyZS9TdGVhbS9hcHBjYWNoZS9saWJyYXJ5Y2FjaGUvJHtuYW1lLnN1YnN0cmluZygxMCl9YCxcbiAgICAgICk7XG4gICAgICBjb25zdCBzaGEyNTZQYXR0ZXJuID0gL1swLTlhLWZdezQwfVxcLmpwZyQvO1xuICAgICAgY29uc3QgaWNvbiA9IGdhbWVGaWxlcy5maW5kKChmKSA9PiBzaGEyNTZQYXR0ZXJuLnRlc3QoZikpO1xuICAgICAgaWYgKGljb24pIHtcbiAgICAgICAgaWNvbkNhY2hlW25hbWVdID0gaWNvbjtcbiAgICAgICAgcmV0dXJuIGljb25DYWNoZVtuYW1lXTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJGb3VuZCBzdGVhbSBhcHAgYnV0IG5vIGNhY2hlIGRpclwiLCBuYW1lKTtcbiAgICB9XG5cbiAgICAvLyBJZiBhYm92ZSBmYWlscywgY2hlY2sgZm9yIGxvZ28ucG5nIGluIHRoZSBzYW1lIGRpclxuICAgIGNvbnN0IHN0ZWFtSWNvblBhdGggPSBgJHtIT01FfS8ubG9jYWwvc2hhcmUvU3RlYW0vYXBwY2FjaGUvbGlicmFyeWNhY2hlLyR7bmFtZS5zdWJzdHJpbmcoMTApfS9sb2dvLnBuZ2A7XG4gICAgaWYgKEdMaWIuZmlsZV90ZXN0KHN0ZWFtSWNvblBhdGgsIEdMaWIuRmlsZVRlc3QuRVhJU1RTKSkge1xuICAgICAgaWNvbkNhY2hlW25hbWVdID0gc3RlYW1JY29uUGF0aDtcbiAgICAgIHJldHVybiBpY29uQ2FjaGVbbmFtZV07XG4gICAgfVxuICB9XG5cbiAgLy8gVHJ5IHRoZSBhcHBzIGxpYnJhcnkgaGVyZS4uXG4gIGNvbnN0IGljb25OYW1lID0gc2VhcmNoQXBwRnJvbU5hbWUoYXBwcywgbmFtZSk/LlswXT8uZ2V0X2ljb25fbmFtZSgpO1xuXG4gIGlmIChpY29uTmFtZSkge1xuICAgIGljb25DYWNoZVtuYW1lXSA9IGljb25OYW1lO1xuICAgIHJldHVybiBpY29uTmFtZTtcbiAgfVxuXG4gIC8vIHRyeSAvdXNyL3NoYXJlL3BpeG1hcHNcbiAgY29uc3QgcGl4bWFwcyA9IHBpeG1hcEZpbGVzLmZpbHRlcigoaXQpID0+IGl0LmluY2x1ZGVzKG5hbWUpKTtcbiAgaWYgKHBpeG1hcHMubGVuZ3RoKSB7XG4gICAgaWNvbkNhY2hlW25hbWVdID0gcGl4bWFwcy5hdCgtMSkhITtcbiAgICByZXR1cm4gaWNvbkNhY2hlW25hbWVdO1xuICB9XG5cbiAgLy8gdHJ5IC91c3Ivc2hhcmUvaWNvbnMvaGljb2xvci9zY2FsYWJsZS9hcHBzXG4gIGNvbnN0IHNjYWxhYmxlID0gaGljb2xvclNjYWxhYmxlLmZpbHRlcigoaXQpID0+IGl0LmluY2x1ZGVzKG5hbWUpKTtcbiAgaWYgKHNjYWxhYmxlLmxlbmd0aCkge1xuICAgIGljb25DYWNoZVtuYW1lXSA9IHNjYWxhYmxlLmF0KC0xKSEhO1xuICAgIHJldHVybiBpY29uQ2FjaGVbbmFtZV07XG4gIH1cblxuICAvLyBldmVyeSBhdHRlbXB0IGZhaWxlZCwgY2FjaGUgYSBtaXNzaW5nIGljb25cbiAgaWNvbkNhY2hlW1wiTk8tSUNPTlwiXSA9IE1JU1NJTkdfSUNPTjtcbiAgcmV0dXJuIE1JU1NJTkdfSUNPTjtcbn1cbiIsICIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbmFtZXNwYWNlICovXG5pbXBvcnQgR3RrIGZyb20gXCJnaTovL0d0az92ZXJzaW9uPTQuMFwiXG5pbXBvcnQgQXN0YWwgZnJvbSBcImdpOi8vQXN0YWw/dmVyc2lvbj00LjBcIlxuaW1wb3J0IHsgQ0NQcm9wcyB9IGZyb20gXCIuLi8uLi9nbmltL3NyYy9qc3gvaW5kZXguanNcIlxuaW1wb3J0IHsgaW50cmluc2ljRWxlbWVudHMgfSBmcm9tIFwiLi4vLi4vZ25pbS9zcmMvZ3RrNC9qc3gtcnVudGltZS5qc1wiXG5cbnR5cGUgUHJvcHM8VCBleHRlbmRzIEd0ay5XaWRnZXQsIFByb3BzPiA9IENDUHJvcHM8VCwgUGFydGlhbDxQcm9wcz4+XG5cbk9iamVjdC5hc3NpZ24oaW50cmluc2ljRWxlbWVudHMsIHtcbiAgICBib3g6IEd0ay5Cb3gsXG4gICAgYnV0dG9uOiBHdGsuQnV0dG9uLFxuICAgIGNlbnRlcmJveDogR3RrLkNlbnRlckJveCxcbiAgICAvLyBjaXJjdWxhcnByb2dyZXNzOiBBc3RhbC5DaXJjdWxhclByb2dyZXNzLFxuICAgIGRyYXdpbmdhcmVhOiBHdGsuRHJhd2luZ0FyZWEsXG4gICAgZW50cnk6IEd0ay5FbnRyeSxcbiAgICBpbWFnZTogR3RrLkltYWdlLFxuICAgIGxhYmVsOiBHdGsuTGFiZWwsXG4gICAgbGV2ZWxiYXI6IEd0ay5MZXZlbEJhcixcbiAgICBtZW51YnV0dG9uOiBHdGsuTWVudUJ1dHRvbixcbiAgICBvdmVybGF5OiBHdGsuT3ZlcmxheSxcbiAgICBwb3BvdmVyOiBHdGsuUG9wb3ZlcixcbiAgICByZXZlYWxlcjogR3RrLlJldmVhbGVyLFxuICAgIHNjcm9sbGVkd2luZG93OiBHdGsuU2Nyb2xsZWRXaW5kb3csXG4gICAgc2xpZGVyOiBBc3RhbC5TbGlkZXIsXG4gICAgc3RhY2s6IEd0ay5TdGFjayxcbiAgICBzd2l0Y2g6IEd0ay5Td2l0Y2gsXG4gICAgdG9nZ2xlYnV0dG9uOiBHdGsuVG9nZ2xlQnV0dG9uLFxuICAgIHdpbmRvdzogQXN0YWwuV2luZG93LFxufSlcblxuZGVjbGFyZSBnbG9iYWwge1xuICAgIG5hbWVzcGFjZSBKU1gge1xuICAgICAgICBpbnRlcmZhY2UgSW50cmluc2ljRWxlbWVudHMge1xuICAgICAgICAgICAgYm94OiBQcm9wczxHdGsuQm94LCBHdGsuQm94LkNvbnN0cnVjdG9yUHJvcHM+XG4gICAgICAgICAgICBidXR0b246IFByb3BzPEd0ay5CdXR0b24sIEd0ay5CdXR0b24uQ29uc3RydWN0b3JQcm9wcz5cbiAgICAgICAgICAgIGNlbnRlcmJveDogUHJvcHM8R3RrLkNlbnRlckJveCwgR3RrLkNlbnRlckJveC5Db25zdHJ1Y3RvclByb3BzPlxuICAgICAgICAgICAgLy8gY2lyY3VsYXJwcm9ncmVzczogUHJvcHM8QXN0YWwuQ2lyY3VsYXJQcm9ncmVzcywgQXN0YWwuQ2lyY3VsYXJQcm9ncmVzcy5Db25zdHJ1Y3RvclByb3BzPlxuICAgICAgICAgICAgZHJhd2luZ2FyZWE6IFByb3BzPEd0ay5EcmF3aW5nQXJlYSwgR3RrLkRyYXdpbmdBcmVhLkNvbnN0cnVjdG9yUHJvcHM+XG4gICAgICAgICAgICBlbnRyeTogUHJvcHM8R3RrLkVudHJ5LCBHdGsuRW50cnkuQ29uc3RydWN0b3JQcm9wcz5cbiAgICAgICAgICAgIGltYWdlOiBQcm9wczxHdGsuSW1hZ2UsIEd0ay5JbWFnZS5Db25zdHJ1Y3RvclByb3BzPlxuICAgICAgICAgICAgbGFiZWw6IFByb3BzPEd0ay5MYWJlbCwgR3RrLkxhYmVsLkNvbnN0cnVjdG9yUHJvcHM+XG4gICAgICAgICAgICBsZXZlbGJhcjogUHJvcHM8R3RrLkxldmVsQmFyLCBHdGsuTGV2ZWxCYXIuQ29uc3RydWN0b3JQcm9wcz5cbiAgICAgICAgICAgIG1lbnVidXR0b246IFByb3BzPEd0ay5NZW51QnV0dG9uLCBHdGsuTWVudUJ1dHRvbi5Db25zdHJ1Y3RvclByb3BzPlxuICAgICAgICAgICAgb3ZlcmxheTogUHJvcHM8R3RrLk92ZXJsYXksIEd0ay5PdmVybGF5LkNvbnN0cnVjdG9yUHJvcHM+XG4gICAgICAgICAgICBwb3BvdmVyOiBQcm9wczxHdGsuUG9wb3ZlciwgR3RrLlBvcG92ZXIuQ29uc3RydWN0b3JQcm9wcz5cbiAgICAgICAgICAgIHJldmVhbGVyOiBQcm9wczxHdGsuUmV2ZWFsZXIsIEd0ay5SZXZlYWxlci5Db25zdHJ1Y3RvclByb3BzPlxuICAgICAgICAgICAgc2Nyb2xsZWR3aW5kb3c6IFByb3BzPEd0ay5TY3JvbGxlZFdpbmRvdywgR3RrLlNjcm9sbGVkV2luZG93LkNvbnN0cnVjdG9yUHJvcHM+XG4gICAgICAgICAgICBzbGlkZXI6IFByb3BzPEFzdGFsLlNsaWRlciwgQXN0YWwuU2xpZGVyLkNvbnN0cnVjdG9yUHJvcHM+XG4gICAgICAgICAgICBzdGFjazogUHJvcHM8R3RrLlN0YWNrLCBHdGsuU3RhY2suQ29uc3RydWN0b3JQcm9wcz5cbiAgICAgICAgICAgIHN3aXRjaDogUHJvcHM8R3RrLlN3aXRjaCwgR3RrLlN3aXRjaC5Db25zdHJ1Y3RvclByb3BzPlxuICAgICAgICAgICAgdG9nZ2xlYnV0dG9uOiBQcm9wczxHdGsuVG9nZ2xlQnV0dG9uLCBHdGsuVG9nZ2xlQnV0dG9uLkNvbnN0cnVjdG9yUHJvcHM+XG4gICAgICAgICAgICB3aW5kb3c6IFByb3BzPEFzdGFsLldpbmRvdywgQXN0YWwuV2luZG93LkNvbnN0cnVjdG9yUHJvcHM+XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCAqIGZyb20gXCIuLi8uLi9nbmltL3NyYy9ndGs0L2pzeC1ydW50aW1lLmpzXCJcbiIsICJpbXBvcnQgR3RrIGZyb20gXCJnaTovL0d0az92ZXJzaW9uPTQuMFwiXG5pbXBvcnQgR2lvIGZyb20gXCJnaTovL0dpbz92ZXJzaW9uPTIuMFwiXG5pbXBvcnQgR09iamVjdCBmcm9tIFwiZ2k6Ly9HT2JqZWN0XCJcbmltcG9ydCB7IGdldFR5cGUsIG9uQ2xlYW51cCwgQWNjZXNzb3IsIEZyYWdtZW50IH0gZnJvbSBcIi4uL2pzeC9pbmRleC5qc1wiXG5pbXBvcnQgeyBjb25maWd1ZSB9IGZyb20gXCIuLi9qc3gvZW52LmpzXCJcblxuY29uc3QgZHVtbXlCdWlsZGVyID0gbmV3IEd0ay5CdWlsZGVyKClcblxuZnVuY3Rpb24gYWRkKHBhcmVudDogR3RrLkJ1aWxkYWJsZSwgY2hpbGQ6IEdPYmplY3QuT2JqZWN0LCBfOiBudW1iZXIpIHtcbiAgICBpZiAoIXNwZWNpYWxBZGQocGFyZW50LCBjaGlsZCwgXykpIHtcbiAgICAgICAgcGFyZW50LnZmdW5jX2FkZF9jaGlsZChkdW1teUJ1aWxkZXIsIGNoaWxkLCBnZXRUeXBlKGNoaWxkKSlcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHNwZWNpYWxSZW1vdmUoX3BhcmVudDogR09iamVjdC5PYmplY3QsIF9jaGlsZDogR09iamVjdC5PYmplY3QpIHtcbiAgICAvLyBUT0RPOiBhZGQgYW55IHNwZWNpYWwgY2FzZVxuICAgIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBzcGVjaWFsQWRkKHBhcmVudDogR09iamVjdC5PYmplY3QsIGNoaWxkOiBHT2JqZWN0Lk9iamVjdCwgXzogbnVtYmVyKSB7XG4gICAgLy8gVE9ETzogYWRkIGFueSBvdGhlciBzcGVjaWFsIGNhc2VcbiAgICBpZiAoXG4gICAgICAgIGNoaWxkIGluc3RhbmNlb2YgR3RrLkFkanVzdG1lbnQgJiZcbiAgICAgICAgXCJzZXRfYWRqdXN0bWVudFwiIGluIHBhcmVudCAmJlxuICAgICAgICB0eXBlb2YgcGFyZW50LnNldF9hZGp1c3RtZW50ID09PSBcImZ1bmN0aW9uXCJcbiAgICApIHtcbiAgICAgICAgcGFyZW50LnNldF9hZGp1c3RtZW50KGNoaWxkKVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIGlmIChcbiAgICAgICAgY2hpbGQgaW5zdGFuY2VvZiBHdGsuV2lkZ2V0ICYmXG4gICAgICAgIHBhcmVudCBpbnN0YW5jZW9mIEd0ay5TdGFjayAmJlxuICAgICAgICBjaGlsZC5uYW1lICE9PSBcIlwiICYmXG4gICAgICAgIGNoaWxkLm5hbWUgIT09IG51bGwgJiZcbiAgICAgICAgZ2V0VHlwZShjaGlsZCkgPT09IFwibmFtZWRcIlxuICAgICkge1xuICAgICAgICBwYXJlbnQuYWRkX25hbWVkKGNoaWxkLCBjaGlsZC5uYW1lKVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIGlmIChjaGlsZCBpbnN0YW5jZW9mIEd0ay5Qb3BvdmVyICYmIHBhcmVudCBpbnN0YW5jZW9mIEd0ay5NZW51QnV0dG9uKSB7XG4gICAgICAgIHBhcmVudC5zZXRfcG9wb3ZlcihjaGlsZClcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICAgIGNoaWxkIGluc3RhbmNlb2YgR2lvLk1lbnVNb2RlbCAmJlxuICAgICAgICAocGFyZW50IGluc3RhbmNlb2YgR3RrLk1lbnVCdXR0b24gfHwgcGFyZW50IGluc3RhbmNlb2YgR3RrLlBvcG92ZXJNZW51KVxuICAgICkge1xuICAgICAgICBwYXJlbnQuc2V0X21lbnVfbW9kZWwoY2hpbGQpXG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgR2lvLk1lbnVJdGVtICYmIHBhcmVudCBpbnN0YW5jZW9mIEdpby5NZW51KSB7XG4gICAgICAgIC8vIFRPRE86XG4gICAgfVxuXG4gICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgR3RrLldpbmRvdyAmJiBwYXJlbnQgaW5zdGFuY2VvZiBHdGsuQXBwbGljYXRpb24pIHtcbiAgICAgICAgcGFyZW50LmFkZF93aW5kb3coY2hpbGQpXG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgR3RrLlRleHRCdWZmZXIgJiYgcGFyZW50IGluc3RhbmNlb2YgR3RrLlRleHRWaWV3KSB7XG4gICAgICAgIHBhcmVudC5zZXRfYnVmZmVyKGNoaWxkKVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiByZW1vdmUocGFyZW50OiBHT2JqZWN0Lk9iamVjdCwgY2hpbGQ6IEdPYmplY3QuT2JqZWN0KSB7XG4gICAgaWYgKHNwZWNpYWxSZW1vdmUocGFyZW50LCBjaGlsZCkpIHJldHVyblxuXG4gICAgaWYgKFwic2V0X2NoaWxkXCIgaW4gcGFyZW50ICYmIHR5cGVvZiBwYXJlbnQuc2V0X2NoaWxkID09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gcGFyZW50LnNldF9jaGlsZChudWxsKVxuICAgIH1cblxuICAgIGlmIChcInJlbW92ZVwiIGluIHBhcmVudCAmJiB0eXBlb2YgcGFyZW50LnJlbW92ZSA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIHBhcmVudC5yZW1vdmUoY2hpbGQpXG4gICAgfVxuXG4gICAgdGhyb3cgRXJyb3IoYGNhbm5vdCByZW1vdmUgJHtjaGlsZH0gZnJvbSAke3BhcmVudH1gKVxufVxuXG5jb25zdCB7IGFkZENoaWxkLCBpbnRyaW5zaWNFbGVtZW50cyB9ID0gY29uZmlndWUoe1xuICAgIHNldENzcyhvYmplY3QsIGNzcykge1xuICAgICAgICBpZiAoIShvYmplY3QgaW5zdGFuY2VvZiBHdGsuV2lkZ2V0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbnNvbGUud2FybihFcnJvcihgY2Fubm90IHNldCBjc3Mgb24gJHtvYmplY3R9YCkpXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjdHggPSBvYmplY3QuZ2V0X3N0eWxlX2NvbnRleHQoKVxuICAgICAgICBsZXQgcHJvdmlkZXI6IEd0ay5Dc3NQcm92aWRlclxuXG4gICAgICAgIGNvbnN0IHNldHRlciA9IChjc3M6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgaWYgKCFjc3MuaW5jbHVkZXMoXCJ7XCIpIHx8ICFjc3MuaW5jbHVkZXMoXCJ9XCIpKSB7XG4gICAgICAgICAgICAgICAgY3NzID0gYCogeyAke2Nzc30gfWBcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHByb3ZpZGVyKSBjdHgucmVtb3ZlX3Byb3ZpZGVyKHByb3ZpZGVyKVxuXG4gICAgICAgICAgICBwcm92aWRlciA9IG5ldyBHdGsuQ3NzUHJvdmlkZXIoKVxuICAgICAgICAgICAgcHJvdmlkZXIubG9hZF9mcm9tX3N0cmluZyhjc3MpXG4gICAgICAgICAgICBjdHguYWRkX3Byb3ZpZGVyKHByb3ZpZGVyLCBHdGsuU1RZTEVfUFJPVklERVJfUFJJT1JJVFlfVVNFUilcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjc3MgaW5zdGFuY2VvZiBBY2Nlc3Nvcikge1xuICAgICAgICAgICAgc2V0dGVyKGNzcy5nZXQoKSlcbiAgICAgICAgICAgIGNvbnN0IGRpc3Bvc2UgPSBjc3Muc3Vic2NyaWJlKCgpID0+IHNldHRlcihjc3MuZ2V0KCkpKVxuICAgICAgICAgICAgb25DbGVhbnVwKGRpc3Bvc2UpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZXR0ZXIoY3NzKVxuICAgICAgICB9XG4gICAgfSxcbiAgICBzZXRDbGFzcyhvYmplY3QsIGNsYXNzTmFtZSkge1xuICAgICAgICBpZiAoIShvYmplY3QgaW5zdGFuY2VvZiBHdGsuV2lkZ2V0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbnNvbGUud2FybihFcnJvcihgY2Fubm90IHNldCBjbGFzc05hbWUgb24gJHtvYmplY3R9YCkpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2xhc3NOYW1lIGluc3RhbmNlb2YgQWNjZXNzb3IpIHtcbiAgICAgICAgICAgIG9iamVjdC5jc3NDbGFzc2VzID0gY2xhc3NOYW1lLmdldCgpLnNwbGl0KC9cXHMrLylcbiAgICAgICAgICAgIGNvbnN0IGRpc3Bvc2UgPSBjbGFzc05hbWUuc3Vic2NyaWJlKFxuICAgICAgICAgICAgICAgICgpID0+IChvYmplY3QuY3NzQ2xhc3NlcyA9IGNsYXNzTmFtZS5nZXQoKS5zcGxpdCgvXFxzKy8pKSxcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIG9uQ2xlYW51cChkaXNwb3NlKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb2JqZWN0LnNldF9jc3NfY2xhc3NlcyhjbGFzc05hbWUuc3BsaXQoL1xccysvKSlcbiAgICAgICAgfVxuICAgIH0sXG4gICAgYWRkQ2hpbGQocGFyZW50LCBjaGlsZCwgaW5kZXggPSAtMSkge1xuICAgICAgICBpZiAoIShjaGlsZCBpbnN0YW5jZW9mIEdPYmplY3QuT2JqZWN0KSkge1xuICAgICAgICAgICAgY2hpbGQgPSBHdGsuTGFiZWwubmV3KFN0cmluZyhjaGlsZCkpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3BlY2lhbEFkZChwYXJlbnQsIGNoaWxkLCBpbmRleCkpIHJldHVyblxuXG4gICAgICAgIGlmIChwYXJlbnQgaW5zdGFuY2VvZiBGcmFnbWVudCkge1xuICAgICAgICAgICAgcGFyZW50LmFkZENoaWxkKGNoaWxkKVxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFyZW50IGluc3RhbmNlb2YgR3RrLkJ1aWxkYWJsZSkge1xuICAgICAgICAgICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgRnJhZ21lbnQpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGNoIG9mIGNoaWxkLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZChwYXJlbnQsIGNoLCBpbmRleClcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjaGlsZC5jb25uZWN0KFwiY2hpbGQtYWRkZWRcIiwgKF8sIGNoOiB1bmtub3duLCBpbmRleDogbnVtYmVyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghKGNoIGluc3RhbmNlb2YgR09iamVjdC5PYmplY3QpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFR5cGVFcnJvcihgY2Fubm90IGFkZCAke2NofSB0byAke3BhcmVudH1gKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGFkZENoaWxkKHBhcmVudCwgY2gsIGluZGV4KVxuICAgICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgICAgICBjaGlsZC5jb25uZWN0KFwiY2hpbGQtcmVtb3ZlZFwiLCAoXywgY2g6IHVua25vd24pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoY2ggaW5zdGFuY2VvZiBHT2JqZWN0Lk9iamVjdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoVHlwZUVycm9yKGBjYW5ub3QgcmVtb3ZlICR7Y2h9IGZyb20gJHtwYXJlbnR9YCkpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZW1vdmUocGFyZW50LCBjaClcbiAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAgICAgb25DbGVhbnVwKCgpID0+IGNoaWxkLmRlc3Ryb3koKSlcbiAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYWRkKHBhcmVudCwgY2hpbGQsIGluZGV4KVxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBFcnJvcihgY2Fubm90IGFkZCAke2NoaWxkfSB0byAke3BhcmVudH1gKVxuICAgIH0sXG59KVxuXG5leHBvcnQgeyBGcmFnbWVudCwgaW50cmluc2ljRWxlbWVudHMgfVxuZXhwb3J0IHsganN4LCBqc3hzIH0gZnJvbSBcIi4uL2pzeC9qc3guanNcIlxuIiwgImV4cG9ydCBjb25zdCBzcGFjaW5nID0ge1xuICB4U21hbGw6IDIsXG4gIHNtYWxsOiA0LFxuICBub3JtYWw6IDgsXG4gIGxhcmdlOiAxMixcbiAgeExhcmdlOiAyMCxcbn07XG4iLCAiaW1wb3J0IHsgQWNjZXNzb3IsIGNyZWF0ZVN0YXRlLCBvbkNsZWFudXAgfSBmcm9tIFwiYWdzXCI7XG5pbXBvcnQgeyBHZGssIEd0ayB9IGZyb20gXCJhZ3MvZ3RrNFwiO1xuXG5jb25zdCBnZXRJc1ZhbGlkS2V5Rm9yU2NhbGUgPSAoa2V5dmFsOiBudW1iZXIpOiBib29sZWFuID0+IHtcbiAgcmV0dXJuIFtcbiAgICBHZGsuS0VZX1JpZ2h0LFxuICAgIEdkay5LRVlfTGVmdCxcbiAgICBHZGsuS0VZX1BhZ2VfRG93bixcbiAgICBHZGsuS0VZX1BhZ2VfVXAsXG4gICAgR2RrLktFWV9Ib21lLFxuICAgIEdkay5LRVlfRW5kLFxuICBdLmluY2x1ZGVzKGtleXZhbCk7XG59O1xuXG5jb25zdCBjcmVhdGVBZGp1c3RtZW50ID0gKHtcbiAgbGVuZ3RoLFxuICBwb3NpdGlvbixcbiAgaW5jcmVtZW50ZXIsXG59OiB7XG4gIHBvc2l0aW9uOiBudW1iZXIgfCB1bmRlZmluZWQ7XG4gIGxlbmd0aDogbnVtYmVyIHwgdW5kZWZpbmVkO1xuICBpbmNyZW1lbnRlcjogbnVtYmVyO1xufSkgPT4ge1xuICByZXR1cm4gR3RrLkFkanVzdG1lbnQubmV3KFxuICAgIHBvc2l0aW9uID8/IDAsXG4gICAgMCxcbiAgICBsZW5ndGggfHwgMSxcbiAgICBpbmNyZW1lbnRlcixcbiAgICBpbmNyZW1lbnRlcixcbiAgICAwLFxuICApO1xufTtcblxuZXhwb3J0IGNvbnN0IHVzZUNvbnRyb2xsZWRTY2FsZSA9ICh7XG4gIHVwZGF0ZVZhbHVlLFxuICBsaW1pdCxcbiAgdmFsdWUsXG4gIGluY3JlbWVudGVyLFxuICB2YXJpYW50ID0gXCJzZWVrXCIsXG59OiB7XG4gIHVwZGF0ZVZhbHVlOiAodjogbnVtYmVyKSA9PiB2b2lkO1xuICB2YWx1ZTogQWNjZXNzb3I8bnVtYmVyPjtcbiAgbGltaXQ6IEFjY2Vzc29yPG51bWJlcj47XG4gIGluY3JlbWVudGVyOiBudW1iZXI7XG4gIHZhcmlhbnQ6IFwic2Vla1wiIHwgXCJpbnN0YW50XCI7XG59KSA9PiB7XG4gIGNvbnN0IFtpc1NlZWtpbmcsIHNldElzU2Vla2luZ10gPSBjcmVhdGVTdGF0ZTxib29sZWFuPihmYWxzZSk7XG5cbiAgY29uc3QgW2FkanVzdG1lbnQsIHNldEFkanVzdG1lbnRdID0gY3JlYXRlU3RhdGUoXG4gICAgY3JlYXRlQWRqdXN0bWVudCh7XG4gICAgICBwb3NpdGlvbjogdmFsdWUuZ2V0KCksXG4gICAgICBsZW5ndGg6IGxpbWl0LmdldCgpLFxuICAgICAgaW5jcmVtZW50ZXIsXG4gICAgfSksXG4gICk7XG5cbiAgY29uc3QgdXBkYXRlU2NhbGUgPSAoczogR3RrLlNjYWxlKSA9PiB7XG4gICAgY29uc3QgYWRqdXN0bWVudCA9IHMuZ2V0X2FkanVzdG1lbnQoKTtcbiAgICBjb25zdCB2ID0gYWRqdXN0bWVudC5nZXRfdmFsdWUoKTtcbiAgICB1cGRhdGVWYWx1ZSh2KTtcbiAgICBzZXRJc1NlZWtpbmcoZmFsc2UpO1xuICB9O1xuXG4gIGNvbnN0IHVwZGF0ZVNjYWxlSW5zdGFudCA9IChzOiBHdGsuU2NhbGUpID0+IHtcbiAgICBjb25zdCB2ID0gcy5nZXRfYWRqdXN0bWVudCgpLmdldF92YWx1ZSgpO1xuICAgIHVwZGF0ZVZhbHVlKHYpO1xuICB9O1xuXG4gIGNvbnN0IHJlc3RhcnRBZGp1c3RtZW50ID0gKHtcbiAgICBsaW1pdCxcbiAgICB2YWx1ZSxcbiAgfToge1xuICAgIHZhbHVlOiBudW1iZXI7XG4gICAgbGltaXQ6IG51bWJlcjtcbiAgfSkgPT4ge1xuICAgIHNldEFkanVzdG1lbnQoXG4gICAgICBjcmVhdGVBZGp1c3RtZW50KHtcbiAgICAgICAgcG9zaXRpb246IHZhbHVlLFxuICAgICAgICBsZW5ndGg6IGxpbWl0LFxuICAgICAgICBpbmNyZW1lbnRlcixcbiAgICAgIH0pLFxuICAgICk7XG4gIH07XG5cbiAgY29uc3QgbGVuZ3RoVW5zdWJzY3JpYmUgPSBsaW1pdC5zdWJzY3JpYmUoKCkgPT4ge1xuICAgIGlmIChhZGp1c3RtZW50LmdldCgpLmdldF91cHBlcigpID09PSBsaW1pdC5nZXQoKSkgcmV0dXJuO1xuICAgIGFkanVzdG1lbnQuZ2V0KCkuc2V0X3VwcGVyKGxpbWl0LmdldCgpID8/IDApO1xuICB9KTtcblxuICBjb25zdCBwb3NpdGlvblVuc3Vic2NyaWJlID0gdmFsdWUuc3Vic2NyaWJlKCgpID0+IHtcbiAgICBpZiAoaXNTZWVraW5nLmdldCgpKSByZXR1cm47XG5cbiAgICBjb25zdCB2ID0gdmFsdWUuZ2V0KCk7XG4gICAgaWYgKHYgPT09IGFkanVzdG1lbnQuZ2V0KCkuZ2V0X3ZhbHVlKCkpIHJldHVybjtcblxuICAgIGFkanVzdG1lbnQuZ2V0KCkuc2V0X3ZhbHVlKHYgPz8gMCk7XG4gIH0pO1xuXG4gIGNvbnN0IHVwZGF0ZVNjYWxlU2Vla1ZhbHVlID0gKCkgPT4ge1xuICAgIHNldElzU2Vla2luZyh0cnVlKTtcbiAgfTtcblxuICBjb25zdCBzZXR1cCA9IChzOiBHdGsuU2NhbGUpID0+IHtcbiAgICBjb25zdCBrZXlDb250cm9sbGVyID0gR3RrLkV2ZW50Q29udHJvbGxlcktleS5uZXcoKTtcbiAgICBsZXQgY2xpY2tDb250cm9sbGVyOiBHdGsuR2VzdHVyZUNsaWNrIHwgdW5kZWZpbmVkO1xuXG4gICAgY29uc3QgY29udHJvbGxlcnMgPSBzLm9ic2VydmVfY29udHJvbGxlcnMoKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29udHJvbGxlcnMuZ2V0X25faXRlbXMoKTsgaSsrKSB7XG4gICAgICBjb25zdCBjb250cm9sbGVyID0gY29udHJvbGxlcnMuZ2V0X2l0ZW0oaSk7XG4gICAgICBpZiAoY29udHJvbGxlciBpbnN0YW5jZW9mIEd0ay5HZXN0dXJlQ2xpY2spIHtcbiAgICAgICAgY2xpY2tDb250cm9sbGVyID0gY29udHJvbGxlcjtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFjbGlja0NvbnRyb2xsZXIpIHtcbiAgICAgIGNsaWNrQ29udHJvbGxlciA9IG5ldyBHdGsuR2VzdHVyZUNsaWNrKCk7XG4gICAgICBzLmFkZF9jb250cm9sbGVyKGNsaWNrQ29udHJvbGxlcik7XG4gICAgfVxuXG4gICAgaWYgKHZhcmlhbnQgPT09IFwic2Vla1wiKSB7XG4gICAgICBrZXlDb250cm9sbGVyLmNvbm5lY3QoXCJrZXktcHJlc3NlZFwiLCAoXywga2V5dmFsKSA9PiB7XG4gICAgICAgIGlmICghZ2V0SXNWYWxpZEtleUZvclNjYWxlKGtleXZhbCkpIHJldHVybjtcbiAgICAgICAgdXBkYXRlU2NhbGVTZWVrVmFsdWUoKTtcbiAgICAgIH0pO1xuXG4gICAgICBrZXlDb250cm9sbGVyLmNvbm5lY3QoXCJrZXktcmVsZWFzZWRcIiwgKF8sIGtleXZhbCkgPT4ge1xuICAgICAgICBpZiAoIWdldElzVmFsaWRLZXlGb3JTY2FsZShrZXl2YWwpKSByZXR1cm47XG4gICAgICAgIHVwZGF0ZVNjYWxlKHMpO1xuICAgICAgfSk7XG5cbiAgICAgIGNsaWNrQ29udHJvbGxlci5jb25uZWN0KFwicHJlc3NlZFwiLCAoKSA9PiB7XG4gICAgICAgIHVwZGF0ZVNjYWxlU2Vla1ZhbHVlKCk7XG4gICAgICB9KTtcblxuICAgICAgY2xpY2tDb250cm9sbGVyLmNvbm5lY3QoXCJyZWxlYXNlZFwiLCAoKSA9PiB7XG4gICAgICAgIHVwZGF0ZVNjYWxlKHMpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICh2YXJpYW50ID09PSBcImluc3RhbnRcIikge1xuICAgICAgcy5jb25uZWN0KFwidmFsdWUtY2hhbmdlZFwiLCAoKSA9PiB7XG4gICAgICAgIHVwZGF0ZVNjYWxlSW5zdGFudChzKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHMuYWRkX2NvbnRyb2xsZXIoa2V5Q29udHJvbGxlcik7XG4gIH07XG5cbiAgb25DbGVhbnVwKCgpID0+IHtcbiAgICBsZW5ndGhVbnN1YnNjcmliZSgpO1xuICAgIHBvc2l0aW9uVW5zdWJzY3JpYmUoKTtcbiAgfSk7XG5cbiAgcmV0dXJuIHtcbiAgICBzZXR1cCxcbiAgICBhZGp1c3RtZW50LFxuICAgIHN0YXRlOiB7XG4gICAgICBpc1NlZWtpbmcsXG4gICAgICBzZXRJc1NlZWtpbmcsXG4gICAgfSxcbiAgICByZXN0YXJ0QWRqdXN0bWVudCxcbiAgfTtcbn07XG4iLCAiaW1wb3J0IHtcbiAgQWNjZXNzb3IsXG4gIGNyZWF0ZUJpbmRpbmcsXG4gIGNyZWF0ZUNvbXB1dGVkLFxuICBjcmVhdGVTdGF0ZSxcbiAgb25DbGVhbnVwLFxufSBmcm9tIFwiYWdzXCI7XG5pbXBvcnQgTXByaXMgZnJvbSBcImdpOi8vQXN0YWxNcHJpc1wiO1xuXG5jb25zdCBnZXRQbGF5ZXJzUGxheWluZyA9IChwbGF5ZXJzOiBBY2Nlc3NvcjxNcHJpcy5QbGF5ZXJbXT4pID0+IHtcbiAgcmV0dXJuIHBsYXllcnMuZ2V0KCkubWFwKChwKSA9PiAoe1xuICAgIGJ1c05hbWU6IHAuZ2V0X2J1c19uYW1lKCksXG4gICAgaXNQbGF5aW5nOiBwLmdldF9wbGF5YmFja19zdGF0dXMoKSA9PT0gTXByaXMuUGxheWJhY2tTdGF0dXMuUExBWUlORyxcbiAgfSkpO1xufTtcblxuZXhwb3J0IGNvbnN0IHVzZUlzQW55UGxheWVyUGxheWluZyA9ICgpID0+IHtcbiAgY29uc3QgbXByaXMgPSBNcHJpcy5nZXRfZGVmYXVsdCgpO1xuICBjb25zdCBhbGxQbGF5ZXJzID0gY3JlYXRlQmluZGluZyhtcHJpcywgXCJwbGF5ZXJzXCIpO1xuXG4gIGNvbnN0IFtwbGF5ZXJzUGxheWluZywgc2V0UGxheWVyc1BsYXlpbmddID0gY3JlYXRlU3RhdGUoXG4gICAgZ2V0UGxheWVyc1BsYXlpbmcoYWxsUGxheWVycyksXG4gICk7XG5cbiAgY29uc3QgaXNBbnlQbGF5ZXJQbGF5aW5nID0gY3JlYXRlQ29tcHV0ZWQoW3BsYXllcnNQbGF5aW5nXSwgKHBsYXllcnMpID0+IHtcbiAgICByZXR1cm4gcGxheWVycy5zb21lKChwKSA9PiAhIXAuaXNQbGF5aW5nKTtcbiAgfSk7XG5cbiAgYWxsUGxheWVycy5nZXQoKS5mb3JFYWNoKChwbGF5ZXIpID0+IHtcbiAgICBwbGF5ZXIuY29ubmVjdChcIm5vdGlmeTo6cGxheWJhY2stc3RhdHVzXCIsICgpID0+IHtcbiAgICAgIHNldFBsYXllcnNQbGF5aW5nKGdldFBsYXllcnNQbGF5aW5nKGFsbFBsYXllcnMpKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgY29uc3QgdW5zdWJzY3JpYmVQbGF5ZXJzID0gYWxsUGxheWVycy5zdWJzY3JpYmUoKCkgPT4ge1xuICAgIHNldFBsYXllcnNQbGF5aW5nKGdldFBsYXllcnNQbGF5aW5nKGFsbFBsYXllcnMpKTtcbiAgfSk7XG5cbiAgb25DbGVhbnVwKCgpID0+IHtcbiAgICB1bnN1YnNjcmliZVBsYXllcnMoKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGlzQW55UGxheWVyUGxheWluZztcbn07XG4iLCAiaW1wb3J0IEdpbyBmcm9tIFwiZ2k6Ly9HaW9cIjtcbmltcG9ydCBHTGliIGZyb20gXCJnaTovL0dMaWJcIjtcblxuZnVuY3Rpb24gZXh0cmFjdEZyYW1lKHZpZGVvUGF0aDogc3RyaW5nLCBvdXRwdXRQYXRoOiBzdHJpbmcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCBjbWQgPSBbXG4gICAgICBcImZmbXBlZ1wiLFxuICAgICAgXCIteVwiLCAvLyBvdmVyd3JpdGUgb3V0cHV0XG4gICAgICBcIi1pXCIsXG4gICAgICB2aWRlb1BhdGgsXG4gICAgICBcIi1mcmFtZXM6dlwiLFxuICAgICAgXCIxXCIsXG4gICAgICBcIi1xOnZcIixcbiAgICAgIFwiMlwiLFxuICAgICAgb3V0cHV0UGF0aCxcbiAgICBdO1xuXG4gICAgY29uc3QgcHJvYyA9IEdpby5TdWJwcm9jZXNzLm5ldyhcbiAgICAgIGNtZCxcbiAgICAgIEdpby5TdWJwcm9jZXNzRmxhZ3MuU1RET1VUX1NJTEVOQ0UgfCBHaW8uU3VicHJvY2Vzc0ZsYWdzLlNUREVSUl9TSUxFTkNFLFxuICAgICk7XG5cbiAgICBwcm9jLndhaXRfY2hlY2tfYXN5bmMobnVsbCwgKHByb2NPYmosIHJlcykgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3Qgc3VjY2VzcyA9IHByb2NPYmo/LndhaXRfY2hlY2tfZmluaXNoKHJlcyk7XG4gICAgICAgIGlmIChzdWNjZXNzKSByZXNvbHZlKHRydWUpO1xuICAgICAgICBlbHNlIHJlamVjdChuZXcgRXJyb3IoXCJmZm1wZWcgZmFpbGVkXCIpKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59XG5cbi8vIE5ldzogTGlzdGVuIGZvciBtcHYgJ3BhdGgnIGNoYW5nZXMgdmlhIElQQyBhbmQgZXh0cmFjdCBmcmFtZSBvbiBlYWNoIHVwZGF0ZVxuYXN5bmMgZnVuY3Rpb24gbGlzdGVuTXB2UGF0aENoYW5nZXMoXG4gIG9uRnJhbWVFeHRyYWN0ZWQ6IChmcmFtZVBhdGg6IHN0cmluZykgPT4gdm9pZCxcbiAgcmV0cnkgPSB0cnVlLFxuKSB7XG4gIGNvbnN0IGFkZHJlc3MgPSBHaW8uVW5peFNvY2tldEFkZHJlc3MubmV3KFwiL3RtcC9tcHZzb2NrZXRcIik7XG4gIGNvbnN0IGNsaWVudCA9IG5ldyBHaW8uU29ja2V0Q2xpZW50KCk7XG5cbiAgbGV0IGNvbm46IEdpby5JT1N0cmVhbTtcblxuICB0cnkge1xuICAgIGNvbm4gPSBhd2FpdCBuZXcgUHJvbWlzZTxHaW8uSU9TdHJlYW0+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNsaWVudC5jb25uZWN0X2FzeW5jKGFkZHJlc3MsIG51bGwsIChzcmMsIHJlcykgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJlc29sdmUoY2xpZW50LmNvbm5lY3RfZmluaXNoKHJlcykpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcHJpbnRlcnIoXCJDb25uZWN0aW9uIGZhaWxlZDpcIiwgKGVyciBhcyB7IG1lc3NhZ2U6IHN0cmluZyB9KS5tZXNzYWdlKTtcbiAgICBpZiAocmV0cnkpIHtcbiAgICAgIEdMaWIudGltZW91dF9hZGRfc2Vjb25kcyhHTGliLlBSSU9SSVRZX0RFRkFVTFQsIDMsICgpID0+IHtcbiAgICAgICAgbGlzdGVuTXB2UGF0aENoYW5nZXMob25GcmFtZUV4dHJhY3RlZCwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiBHTGliLlNPVVJDRV9SRU1PVkU7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgaW5wdXQgPSBjb25uLmdldF9pbnB1dF9zdHJlYW0oKTtcbiAgY29uc3Qgb3V0cHV0ID0gY29ubi5nZXRfb3V0cHV0X3N0cmVhbSgpO1xuXG4gIC8vIFN1YnNjcmliZVxuICBjb25zdCBzdWJzY3JpYmVDbWQgPVxuICAgIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgIGNvbW1hbmQ6IFtcIm9ic2VydmVfcHJvcGVydHlcIiwgMSwgXCJwYXRoXCJdLFxuICAgIH0pICsgXCJcXG5cIjtcblxuICB0cnkge1xuICAgIG91dHB1dC53cml0ZV9hbGwoc3Vic2NyaWJlQ21kLCBudWxsKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHByaW50ZXJyKFwiV3JpdGUgZmFpbGVkOlwiLCAoZSBhcyB7IG1lc3NhZ2U6IHN0cmluZyB9KS5tZXNzYWdlKTtcbiAgICBpZiAocmV0cnkpIHtcbiAgICAgIEdMaWIudGltZW91dF9hZGRfc2Vjb25kcyhHTGliLlBSSU9SSVRZX0RFRkFVTFQsIDMsICgpID0+IHtcbiAgICAgICAgbGlzdGVuTXB2UGF0aENoYW5nZXMob25GcmFtZUV4dHJhY3RlZCwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiBHTGliLlNPVVJDRV9SRU1PVkU7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbGV0IGJ1ZmZlciA9IFwiXCI7XG5cbiAgZnVuY3Rpb24gb25SZWFkKHNyYzogR2lvLklucHV0U3RyZWFtIHwgbnVsbCwgcmVzOiBHaW8uQXN5bmNSZXN1bHQpIHtcbiAgICBpZiAoIXNyYykgcmV0dXJuO1xuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGJ5dGVzID0gc3JjLnJlYWRfYnl0ZXNfZmluaXNoKHJlcyk7XG4gICAgICBjb25zdCBkYXRhID0gYnl0ZXM/LmdldF9kYXRhKCk7XG5cbiAgICAgIGlmICghZGF0YSB8fCBkYXRhLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBwcmludGVycihcIkRpc2Nvbm5lY3RlZCBvciBFT0YuIFJlY29ubmVjdGluZy4uLlwiKTtcbiAgICAgICAgY29ubi5jbG9zZShudWxsKTsgLy8gY2xlYW51cFxuICAgICAgICBpZiAocmV0cnkpIHtcbiAgICAgICAgICBHTGliLnRpbWVvdXRfYWRkX3NlY29uZHMoR0xpYi5QUklPUklUWV9ERUZBVUxULCAzLCAoKSA9PiB7XG4gICAgICAgICAgICBsaXN0ZW5NcHZQYXRoQ2hhbmdlcyhvbkZyYW1lRXh0cmFjdGVkLCB0cnVlKTtcbiAgICAgICAgICAgIHJldHVybiBHTGliLlNPVVJDRV9SRU1PVkU7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBidWZmZXIgKz0gbmV3IFRleHREZWNvZGVyKCkuZGVjb2RlKGRhdGEpO1xuXG4gICAgICBjb25zdCBsaW5lcyA9IGJ1ZmZlci5zcGxpdChcIlxcblwiKTtcbiAgICAgIGJ1ZmZlciA9IGxpbmVzLnBvcCgpIHx8IFwiXCI7XG5cbiAgICAgIGZvciAoY29uc3QgbGluZSBvZiBsaW5lcykge1xuICAgICAgICBpZiAoIWxpbmUudHJpbSgpKSBjb250aW51ZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCBqc29uID0gSlNPTi5wYXJzZShsaW5lKTtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBqc29uLmV2ZW50ID09PSBcInByb3BlcnR5LWNoYW5nZVwiICYmXG4gICAgICAgICAgICBqc29uLm5hbWUgPT09IFwicGF0aFwiICYmXG4gICAgICAgICAgICBqc29uLmRhdGFcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGNvbnN0IG91dHB1dFBhdGggPSBHTGliLmJ1aWxkX2ZpbGVuYW1ldihbXG4gICAgICAgICAgICAgIFwiL3RtcFwiLFxuICAgICAgICAgICAgICBgbXB2X2N1cnJlbnRfZnJhbWUtJHtEYXRlLm5vdygpfS5qcGdgLFxuICAgICAgICAgICAgXSk7XG5cbiAgICAgICAgICAgIGV4dHJhY3RGcmFtZShqc29uLmRhdGEsIG91dHB1dFBhdGgpXG4gICAgICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICBvbkZyYW1lRXh0cmFjdGVkKG91dHB1dFBhdGgpO1xuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgICAgICAgICBwcmludGVycihcIkZyYW1lIGV4dHJhY3Rpb24gZXJyb3I6XCIsIGUubWVzc2FnZSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIHByaW50ZXJyKFwiSlNPTiBwYXJzZSBlcnJvcjpcIiwgKGUgYXMgeyBtZXNzYWdlOiBzdHJpbmcgfSkubWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gS2VlcCByZWFkaW5nXG4gICAgICBzcmMucmVhZF9ieXRlc19hc3luYyg0MDk2LCBHTGliLlBSSU9SSVRZX0RFRkFVTFQsIG51bGwsIG9uUmVhZCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcHJpbnRlcnIoXCJTdHJlYW0gcmVhZCBlcnJvcjpcIiwgKGUgYXMgeyBtZXNzYWdlOiBzdHJpbmcgfSkubWVzc2FnZSk7XG4gICAgfVxuICB9XG5cbiAgaW5wdXQucmVhZF9ieXRlc19hc3luYyg0MDk2LCBHTGliLlBSSU9SSVRZX0RFRkFVTFQsIG51bGwsIG9uUmVhZCk7XG59XG5cbi8vIEV4cG9ydCBhIGZ1bmN0aW9uIHRvIHN0YXJ0IHRoZSBsaXN0ZW5lclxuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0TXB2SW1hZ2VMaXN0ZW5lcihcbiAgb25GcmFtZUV4dHJhY3RlZDogKGZyYW1lUGF0aDogc3RyaW5nKSA9PiB2b2lkLFxuKSB7XG4gIGxpc3Rlbk1wdlBhdGhDaGFuZ2VzKG9uRnJhbWVFeHRyYWN0ZWQpO1xufVxuIiwgImltcG9ydCBHaW8gZnJvbSBcImdpOi8vR2lvXCI7XG5pbXBvcnQgR0xpYiBmcm9tIFwiZ2k6Ly9HTGliXCI7XG5cbmZ1bmN0aW9uIHNlbmRNcHZDb21tYW5kKGNvbW1hbmQ6IHN0cmluZ1tdKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3QgYWRkcmVzcyA9IEdpby5Vbml4U29ja2V0QWRkcmVzcy5uZXcoXCIvdG1wL21wdnNvY2tldFwiKTtcbiAgICBjb25zdCBjbGllbnQgPSBuZXcgR2lvLlNvY2tldENsaWVudCgpO1xuXG4gICAgY2xpZW50LmNvbm5lY3RfYXN5bmMoYWRkcmVzcywgbnVsbCwgKGNsaWVudF8sIHJlcykgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKCFjbGllbnRfKSB7XG4gICAgICAgICAgcHJpbnRlcnIoXCJObyBjbGllbnRfIGZvciBzZW5kTXB2Q29tbWFuZFwiKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjb25uID0gY2xpZW50Xy5jb25uZWN0X2ZpbmlzaChyZXMpO1xuICAgICAgICBjb25zdCBvdXRwdXQgPSBjb25uLmdldF9vdXRwdXRfc3RyZWFtKCk7XG5cbiAgICAgICAgY29uc3QgY21kU3RyID0gSlNPTi5zdHJpbmdpZnkoeyBjb21tYW5kIH0pICsgXCJcXG5cIjtcbiAgICAgICAgY29uc3QgYnl0ZUFycmF5ID0gbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKGNtZFN0cik7IC8vIFx1MjcwNSBDb252ZXJ0IHRvIFVpbnQ4QXJyYXlcblxuICAgICAgICBvdXRwdXQud3JpdGVfYnl0ZXNfYXN5bmMoXG4gICAgICAgICAgYnl0ZUFycmF5LFxuICAgICAgICAgIEdMaWIuUFJJT1JJVFlfREVGQVVMVCxcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIChzdHJlYW0sIHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgc3RyZWFtPy53cml0ZV9ieXRlc19maW5pc2gocmVzdWx0KTtcbiAgICAgICAgICAgICAgb3V0cHV0LmNsb3NlKG51bGwpO1xuICAgICAgICAgICAgICBjb25uLmNsb3NlKG51bGwpO1xuICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGVycm9yID0gZSBhcyB7IG1lc3NhZ2U6IHN0cmluZyB9O1xuICAgICAgICAgICAgICByZWplY3QoXG4gICAgICAgICAgICAgICAgbmV3IEVycm9yKFwiRmFpbGVkIHRvIHdyaXRlIHRvIE1QViBzb2NrZXQ6IFwiICsgZXJyb3IubWVzc2FnZSksXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY29uc3QgZXJyb3IgPSBlIGFzIHsgbWVzc2FnZTogc3RyaW5nIH07XG4gICAgICAgIHJlamVjdChuZXcgRXJyb3IoXCJGYWlsZWQgdG8gY29ubmVjdCB0byBNUFYgc29ja2V0OiBcIiArIGVycm9yLm1lc3NhZ2UpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59XG5cbmV4cG9ydCBjb25zdCBjaGFuZ2VNcHZQYXBlckltYWdlID0gKGFjdGlvbjogXCJuZXh0XCIgfCBcInByZXZcIikgPT4ge1xuICBpZiAoYWN0aW9uID09PSBcIm5leHRcIikge1xuICAgIHNlbmRNcHZDb21tYW5kKFtcInBsYXlsaXN0LW5leHRcIl0pO1xuICB9IGVsc2Uge1xuICAgIHNlbmRNcHZDb21tYW5kKFtcInBsYXlsaXN0LXByZXZcIl0pO1xuICB9XG59O1xuIiwgImltcG9ydCBHVG9wIGZyb20gXCJnaTovL0dUb3BcIjtcblxuY29uc3QgY3B1OiBHVG9wLmdsaWJ0b3BfY3B1ID0gbmV3IEdUb3AuZ2xpYnRvcF9jcHUoKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldENwdVVzYWdlKCkge1xuICBHVG9wLmdsaWJ0b3BfZ2V0X2NwdShjcHUpO1xuXG4gIGNvbnN0IHVzZWQgPVxuICAgIGNwdS51c2VyICsgY3B1LnN5cyArIGNwdS5uaWNlICsgY3B1LmlycSArIGNwdS5zb2Z0aXJxICsgY3B1Lmlvd2FpdDtcbiAgY29uc3QgdG90YWwgPSB1c2VkICsgY3B1LmlkbGUgKyBjcHUuaW93YWl0O1xuXG4gIHJldHVybiB7IHVzZWQsIHRvdGFsIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYWxjdWxhdGVDcHVMb2FkKFxuICBwcmV2OiBSZXR1cm5UeXBlPHR5cGVvZiBnZXRDcHVVc2FnZT4sXG4gIGN1cnI6IFJldHVyblR5cGU8dHlwZW9mIGdldENwdVVzYWdlPixcbikge1xuICBpZiAoIXByZXYgfHwgIWN1cnIpIHJldHVybiBudWxsO1xuXG4gIGNvbnN0IGRpZmZVc2VkID0gY3Vyci51c2VkIC0gcHJldi51c2VkO1xuICBjb25zdCBkaWZmVG90YWwgPSBjdXJyLnRvdGFsIC0gcHJldi50b3RhbDtcblxuICBjb25zdCByZXMgPSBkaWZmVXNlZCAvIGRpZmZUb3RhbDtcblxuICByZXR1cm4gcmVzO1xufVxuIiwgImltcG9ydCB7IGNyZWF0ZVN0YXRlIH0gZnJvbSBcImFnc1wiO1xuaW1wb3J0IHsgY2FsY3VsYXRlQ3B1TG9hZCwgZ2V0Q3B1VXNhZ2UgfSBmcm9tIFwiLi4vdXRpbHMvY3B1XCI7XG5pbXBvcnQgeyBjcmVhdGVQb2xsIH0gZnJvbSBcImFncy90aW1lXCI7XG5cbmV4cG9ydCBjb25zdCB1c2VDcHVVc2FnZSA9ICgpID0+IHtcbiAgY29uc3QgW3ByZXYsIHNldFByZXZdID0gY3JlYXRlU3RhdGUoZ2V0Q3B1VXNhZ2UoKSk7XG5cbiAgY29uc3QgZGF0YSA9IGNyZWF0ZVBvbGwoXG4gICAge1xuICAgICAgY3B1VXNhZ2U6IDAsXG4gICAgICBjcHVVc2FnZUluRnJhY3Rpb246IDAsXG4gICAgfSxcbiAgICAxMDAwLFxuICAgICgpID0+IHtcbiAgICAgIGNvbnN0IGN1cnIgPSBnZXRDcHVVc2FnZSgpO1xuICAgICAgY29uc3QgbG9hZCA9IGNhbGN1bGF0ZUNwdUxvYWQocHJldi5nZXQoKSwgY3Vycik7XG5cbiAgICAgIGlmICghbG9hZCkgcmV0dXJuIHsgY3B1VXNhZ2U6IDAsIGNwdVVzYWdlSW5GcmFjdGlvbjogMCB9O1xuXG4gICAgICBzZXRQcmV2KGN1cnIpO1xuXG4gICAgICBjb25zdCBjcHVVc2FnZSA9IE51bWJlcihsb2FkKSAqIDEwMDtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNwdVVzYWdlLFxuICAgICAgICBjcHVVc2FnZUluRnJhY3Rpb246IGNwdVVzYWdlIC8gMTAwLFxuICAgICAgfTtcbiAgICB9LFxuICApO1xuXG4gIHJldHVybiBkYXRhO1xufTtcbiIsICJpbXBvcnQgR1RvcCBmcm9tIFwiZ2k6Ly9HVG9wXCI7XG5cbmNvbnN0IG1lbSA9IG5ldyBHVG9wLmdsaWJ0b3BfbWVtKCk7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRNZW1vcnlVc2FnZSgpIHtcbiAgR1RvcC5nbGlidG9wX2dldF9tZW0obWVtKTtcblxuICBjb25zdCB0b3RhbCA9IG1lbS50b3RhbDtcbiAgY29uc3QgYXZhaWxhYmxlID0gbWVtLmZyZWUgKyBtZW0uYnVmZmVyICsgbWVtLmNhY2hlZDtcbiAgY29uc3QgdXNlZCA9IHRvdGFsIC0gYXZhaWxhYmxlO1xuICBjb25zdCBwZXJjZW50VXNlZCA9IHVzZWQgLyB0b3RhbDtcblxuICByZXR1cm4ge1xuICAgIHRvdGFsS0I6IHRvdGFsLFxuICAgIGF2YWlsYWJsZUtCOiBhdmFpbGFibGUsXG4gICAgdXNlZEtCOiB1c2VkLFxuICAgIHBlcmNlbnRVc2VkOiBwZXJjZW50VXNlZC50b0ZpeGVkKDIpLFxuICB9O1xufVxuIiwgImltcG9ydCB7IGNyZWF0ZVBvbGwgfSBmcm9tIFwiYWdzL3RpbWVcIjtcbmltcG9ydCB7IGdldE1lbW9yeVVzYWdlIH0gZnJvbSBcIi4uL3V0aWxzL21lbW9yeS1yYW1cIjtcblxuZXhwb3J0IGNvbnN0IHVzZU1lbW9yeVJhbVVzYWdlID0gKCkgPT4ge1xuICBjb25zdCBkYXRhID0gY3JlYXRlUG9sbChcbiAgICB7XG4gICAgICBtZW1vcnlVc2FnZTogMCxcbiAgICAgIG1lbW9yeVVzYWdlSW5GcmFjdGlvbjogMCxcbiAgICB9LFxuICAgIDEwMDAsXG4gICAgKCkgPT4ge1xuICAgICAgY29uc3QgbG9hZCA9IGdldE1lbW9yeVVzYWdlKCk7XG5cbiAgICAgIGlmICghbG9hZCkgcmV0dXJuIHsgbWVtb3J5VXNhZ2U6IDAsIG1lbW9yeVVzYWdlSW5GcmFjdGlvbjogMCB9O1xuXG4gICAgICBjb25zdCB1c2VkID0gTnVtYmVyKGxvYWQucGVyY2VudFVzZWQpICogMTAwO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBtZW1vcnlVc2FnZTogdXNlZCxcbiAgICAgICAgbWVtb3J5VXNhZ2VJbkZyYWN0aW9uOiB1c2VkIC8gMTAwLFxuICAgICAgfTtcbiAgICB9LFxuICApO1xuXG4gIHJldHVybiBkYXRhO1xufTtcbiIsICJpbXBvcnQgeyBjcmVhdGVQb2xsIH0gZnJvbSBcImFncy90aW1lXCI7XG5pbXBvcnQgR0xpYiBmcm9tIFwiZ2k6Ly9HTGliXCI7XG5cbmV4cG9ydCBjb25zdCB1c2VGb3JtYXR0ZWRUaW1lID0gKGZvcm1hdDogXCJ0aW1lXCIgfCBcInRpbWUtd2l0aC1wbVwiKSA9PiB7XG4gIGNvbnN0IHRpbWVTdHJpbmcgPSBjcmVhdGVQb2xsKFwiXCIsIDUwMCwgKCkgPT4ge1xuICAgIGxldCBub3cgPSBHTGliLkRhdGVUaW1lLm5ld19ub3dfbG9jYWwoKTtcbiAgICBjb25zdCBmb3JtYXRUb1VzZSA9IGZvcm1hdCA9PT0gXCJ0aW1lXCIgPyBcIiVJOiVNXCIgOiBcIiVJOiVNICVwXCI7XG4gICAgcmV0dXJuIG5vdy5mb3JtYXQoZm9ybWF0VG9Vc2UpID8/IFwiXCI7XG4gIH0pO1xuXG4gIHJldHVybiB0aW1lU3RyaW5nO1xufTtcbiIsICJpbXBvcnQgeyBBY2Nlc3NvciwgY3JlYXRlQmluZGluZywgY3JlYXRlQ29tcHV0ZWQsIGNyZWF0ZVN0YXRlLCBGb3IgfSBmcm9tIFwiYWdzXCI7XG5pbXBvcnQgeyBHZGsgfSBmcm9tIFwiYWdzL2d0azRcIjtcbmltcG9ydCBIeXBybGFuZCBmcm9tIFwiZ2k6Ly9Bc3RhbEh5cHJsYW5kXCI7XG5pbXBvcnQgeyBnZXRBcHBJY29uLCBnZXRJc0ljb25GaWxlIH0gZnJvbSBcIi4uL3V0aWxzL2ljb25zXCI7XG5pbXBvcnQgeyBnZXRXb3Jrc3BhY2VzT2ZDdXJyZW50TW9uaXRvciB9IGZyb20gXCIuLi91dGlscy93b3Jrc3BhY2VzXCI7XG5pbXBvcnQgeyBFbXB0eUh5cHJsYW5kV29ya3NwYWNlIH0gZnJvbSBcIi4uL29iamVjdHMvRW1wdHlIeXBybGFuZFdvcmtzcGFjZVwiO1xuXG5jb25zdCBDbGllbnRJdGVtID0gKHtcbiAgY2xpZW50LFxuICBmb2N1c2VkQ2xpZW50LFxuICBoYXNNb3JlQ2xpZW50cyxcbn06IHtcbiAgY2xpZW50OiBIeXBybGFuZC5DbGllbnQ7XG4gIGZvY3VzZWRDbGllbnQ6IEFjY2Vzc29yPEh5cHJsYW5kLkNsaWVudD47XG4gIGhhc01vcmVDbGllbnRzOiBBY2Nlc3Nvcjxib29sZWFuPjtcbn0pID0+IHtcbiAgY29uc3QgZm91bmQgPSBnZXRBcHBJY29uKGNsaWVudC5nZXRfY2xhc3MoKSk7XG4gIGNvbnN0IGlzSWNvbiA9IGdldElzSWNvbkZpbGUoeyBpY29uOiBmb3VuZCB9KSA9PT0gZmFsc2U7XG4gIGNvbnN0IHRpdGxlID0gY3JlYXRlQmluZGluZyhjbGllbnQsIFwidGl0bGVcIik7XG5cbiAgY29uc3QgaXNGb2N1c2VkID0gZm9jdXNlZENsaWVudChcbiAgICAoYykgPT4gYz8uZ2V0X2FkZHJlc3MoKSA9PT0gY2xpZW50Py5nZXRfYWRkcmVzcygpLFxuICApO1xuXG4gIGNvbnN0IGNsYXNzTmFtZSA9IGNyZWF0ZUNvbXB1dGVkKFxuICAgIFtpc0ZvY3VzZWQsIGhhc01vcmVDbGllbnRzXSxcbiAgICAoaXNGb2N1c2VkLCBoYXNNb3JlQ2xpZW50cykgPT4ge1xuICAgICAgbGV0IHJlcyA9IFwiV29ya3NwYWNlQ2xpZW50SXRlbSBjaXJjdWxhclwiO1xuXG4gICAgICBpZiAoaXNGb2N1c2VkID09PSB0cnVlKSB7XG4gICAgICAgIHJlcyArPSBcIiBmb2N1c2VkXCI7XG4gICAgICB9IGVsc2UgaWYgKGhhc01vcmVDbGllbnRzID09PSB0cnVlKSB7XG4gICAgICAgIHJlcyArPSBcIiBmbGF0XCI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXM7XG4gICAgfSxcbiAgKTtcbiAgcmV0dXJuIChcbiAgICA8YnV0dG9uXG4gICAgICB2aXNpYmxlPXt0aXRsZSgodikgPT4gISF2KX1cbiAgICAgIGNsYXNzPXtjbGFzc05hbWV9XG4gICAgICB0b29sdGlwVGV4dD17dGl0bGV9XG4gICAgICBvbkNsaWNrZWQ9eygpID0+IHtcbiAgICAgICAgY29uc3QgaXNDdXJyZW50bHlGb2N1c2VkID0gaXNGb2N1c2VkLmdldCgpO1xuICAgICAgICBpZiAoaXNDdXJyZW50bHlGb2N1c2VkID09PSB0cnVlKSByZXR1cm47XG5cbiAgICAgICAgY2xpZW50LmZvY3VzKCk7XG4gICAgICB9fVxuICAgICAgZm9jdXNhYmxlPXtmYWxzZX1cbiAgICA+XG4gICAgICA8aW1hZ2VcbiAgICAgICAgaWNvbk5hbWU9e2lzSWNvbiA/IGZvdW5kIDogdW5kZWZpbmVkfVxuICAgICAgICB2aXNpYmxlPXshIWZvdW5kfVxuICAgICAgICBwaXhlbFNpemU9ezIwfVxuICAgICAgICBmaWxlPXtpc0ljb24gPyB1bmRlZmluZWQgOiBmb3VuZH1cbiAgICAgIC8+XG4gICAgPC9idXR0b24+XG4gICk7XG59O1xuXG5jb25zdCBXb3Jrc3BhY2VJdGVtID0gKHtcbiAgd29ya3NwYWNlLFxuICBmb2N1c2VkQ2xpZW50LFxuICBmb2N1c2VkV29ya3NwYWNlSWQsXG4gIGh5cHJsYW5kLFxuICBpbmRleCxcbn06IHtcbiAgZm9jdXNlZFdvcmtzcGFjZUlkOiBBY2Nlc3NvcjxudW1iZXI+O1xuICB3b3Jrc3BhY2U6IEh5cHJsYW5kLldvcmtzcGFjZSB8IEVtcHR5SHlwcmxhbmRXb3Jrc3BhY2U7XG4gIGZvY3VzZWRDbGllbnQ6IEFjY2Vzc29yPEh5cHJsYW5kLkNsaWVudD47XG4gIGh5cHJsYW5kOiBIeXBybGFuZC5IeXBybGFuZDtcbiAgaW5kZXg6IEFjY2Vzc29yPG51bWJlcj47XG59KSA9PiB7XG4gIGNvbnN0IGNsaWVudHMgPSBjcmVhdGVCaW5kaW5nKHdvcmtzcGFjZSwgXCJjbGllbnRzXCIpO1xuICBjb25zdCBoYXNOb0NsaWVudHMgPSBjbGllbnRzKChjKSA9PiBjLmxlbmd0aCA+IDAgPT09IGZhbHNlKTtcblxuICBjb25zdCBjbGFzc05hbWUgPSBjbGllbnRzKChjbGllbnRzKSA9PiB7XG4gICAgbGV0IHJlcyA9IFwiV29ya3NwYWNlSXRlbVwiO1xuXG4gICAgaWYgKGNsaWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgcmVzICs9IFwiIGdyb3VwXCI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfSk7XG5cbiAgY29uc3QgaXNGb2N1c2VkRW1wdHkgPSBmb2N1c2VkV29ya3NwYWNlSWQoKHYpID0+IHtcbiAgICByZXR1cm4gd29ya3NwYWNlLmdldF9pZCgpID09PSB2O1xuICB9KTtcblxuICByZXR1cm4gKFxuICAgIDxib3ggY2xhc3M9e2NsYXNzTmFtZX0+XG4gICAgICA8Rm9yIGVhY2g9e2NsaWVudHN9PlxuICAgICAgICB7KGNsaWVudCkgPT4ge1xuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8Q2xpZW50SXRlbVxuICAgICAgICAgICAgICBjbGllbnQ9e2NsaWVudH1cbiAgICAgICAgICAgICAgZm9jdXNlZENsaWVudD17Zm9jdXNlZENsaWVudH1cbiAgICAgICAgICAgICAgaGFzTW9yZUNsaWVudHM9e2NsaWVudHMoKGMpID0+IGMubGVuZ3RoID4gMSl9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICk7XG4gICAgICAgIH19XG4gICAgICA8L0Zvcj5cblxuICAgICAgPGJ1dHRvblxuICAgICAgICB2aXNpYmxlPXtoYXNOb0NsaWVudHN9XG4gICAgICAgIGNsYXNzPXtpc0ZvY3VzZWRFbXB0eSgodikgPT5cbiAgICAgICAgICB2ID09PSB0cnVlID8gXCJXb3Jrc3BhY2VDbGllbnRJdGVtIGZvY3VzZWRcIiA6IFwiV29ya3NwYWNlQ2xpZW50SXRlbVwiLFxuICAgICAgICApfVxuICAgICAgICBvbkNsaWNrZWQ9eygpID0+IHtcbiAgICAgICAgICBoeXBybGFuZC5kaXNwYXRjaChcInNwbGl0LXdvcmtzcGFjZVwiLCAoaW5kZXguZ2V0KCkgKyAxKS50b1N0cmluZygpKTtcbiAgICAgICAgfX1cbiAgICAgICAgdG9vbHRpcFRleHQ9e1wiVmFjaW9cIn1cbiAgICAgID5cbiAgICAgICAgPGxhYmVsIGxhYmVsPVwiXHUyMDIyXCIgLz5cbiAgICAgIDwvYnV0dG9uPlxuICAgIDwvYm94PlxuICApO1xufTtcbmNvbnN0IFdvcmtzcGFjZXMgPSAoe1xuICBnZGttb25pdG9yLFxuICBpbmRleCxcbn06IHtcbiAgZ2RrbW9uaXRvcjogR2RrLk1vbml0b3I7XG4gIGluZGV4OiBudW1iZXI7XG59KSA9PiB7XG4gIGNvbnN0IGh5cHJsYW5kID0gSHlwcmxhbmQuZ2V0X2RlZmF1bHQoKTtcbiAgY29uc3QgZm9jdXNlZFdvcmtzcGFjZSA9IGNyZWF0ZUJpbmRpbmcoaHlwcmxhbmQsIFwiZm9jdXNlZFdvcmtzcGFjZVwiKTtcbiAgY29uc3QgZm9jdXNlZFdvcmtzcGFjZUlkID0gZm9jdXNlZFdvcmtzcGFjZSgodikgPT4gdj8uZ2V0X2lkKCkpO1xuXG4gIGNvbnN0IFt3b3Jrc3BhY2VzLCBzZXRXb3Jrc3BhY2VzXSA9IGNyZWF0ZVN0YXRlKFxuICAgIGdldFdvcmtzcGFjZXNPZkN1cnJlbnRNb25pdG9yKGh5cHJsYW5kLCBnZGttb25pdG9yLCBpbmRleCksXG4gICk7XG4gIGNvbnN0IGZvY3VzZWRDbGllbnQgPSBjcmVhdGVCaW5kaW5nKGh5cHJsYW5kLCBcImZvY3VzZWRfY2xpZW50XCIpO1xuXG4gIGh5cHJsYW5kLmNvbm5lY3QoXCJub3RpZnk6OndvcmtzcGFjZXNcIiwgKCkgPT4ge1xuICAgIGNvbnN0IG5ld1dvcmtzcGFjZXMgPSBnZXRXb3Jrc3BhY2VzT2ZDdXJyZW50TW9uaXRvcihcbiAgICAgIGh5cHJsYW5kLFxuICAgICAgZ2RrbW9uaXRvcixcbiAgICAgIGluZGV4LFxuICAgICk7XG5cbiAgICBzZXRXb3Jrc3BhY2VzKG5ld1dvcmtzcGFjZXMpO1xuICB9KTtcblxuICByZXR1cm4gKFxuICAgIDxib3ggY2xhc3M9XCJXb3Jrc3BhY2VzXCI+XG4gICAgICA8Rm9yIGVhY2g9e3dvcmtzcGFjZXN9PlxuICAgICAgICB7KGl0ZW0sIGluZGV4KSA9PiAoXG4gICAgICAgICAgPFdvcmtzcGFjZUl0ZW1cbiAgICAgICAgICAgIGluZGV4PXtpbmRleH1cbiAgICAgICAgICAgIGh5cHJsYW5kPXtoeXBybGFuZH1cbiAgICAgICAgICAgIGZvY3VzZWRXb3Jrc3BhY2VJZD17Zm9jdXNlZFdvcmtzcGFjZUlkfVxuICAgICAgICAgICAgd29ya3NwYWNlPXtpdGVtfVxuICAgICAgICAgICAgZm9jdXNlZENsaWVudD17Zm9jdXNlZENsaWVudH1cbiAgICAgICAgICAvPlxuICAgICAgICApfVxuICAgICAgPC9Gb3I+XG4gICAgPC9ib3g+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBXb3Jrc3BhY2VzO1xuIiwgImltcG9ydCB7IEdkayB9IGZyb20gXCJhZ3MvZ3RrNFwiO1xuaW1wb3J0IEh5cHJsYW5kIGZyb20gXCJnaTovL0FzdGFsSHlwcmxhbmRcIjtcblxuZXhwb3J0IGNvbnN0IGdldElzQ3VycmVudE1vbml0b3IgPSAoXG4gIGhNb25pdG9yOiBIeXBybGFuZC5Nb25pdG9yLFxuICBnTW9uaXRvcjogR2RrLk1vbml0b3IsXG4pID0+IHtcbiAgcmV0dXJuIGhNb25pdG9yPy5nZXRfbW9kZWwoKSA9PT0gZ01vbml0b3I/LmdldF9tb2RlbCgpO1xufTtcbiIsICJpbXBvcnQgR09iamVjdCwgeyBwcm9wZXJ0eSwgcmVnaXN0ZXIgfSBmcm9tIFwiYWdzL2dvYmplY3RcIjtcbmltcG9ydCBBc3RhbEh5cHJsYW5kIGZyb20gXCJnaTovL0FzdGFsSHlwcmxhbmQ/dmVyc2lvbj0wLjFcIjtcblxuQHJlZ2lzdGVyKHsgR1R5cGVOYW1lOiBcIkVtcHR5SHlwcmxhbmRXb3Jrc3BhY2VcIiB9KVxuZXhwb3J0IGNsYXNzIEVtcHR5SHlwcmxhbmRXb3Jrc3BhY2UgZXh0ZW5kcyBHT2JqZWN0Lk9iamVjdCB7XG4gIEBwcm9wZXJ0eShOdW1iZXIpIGlkID0gMDtcblxuICBjb25zdHJ1Y3Rvcih7IGlkIH06IHsgaWQ6IG51bWJlciB9KSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMuaWQgPSBpZDtcbiAgfVxuXG4gIGdldF9pZCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmlkO1xuICB9XG5cbiAgZ2V0X2NsaWVudHMoKTogQXN0YWxIeXBybGFuZC5DbGllbnRbXSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgZ2V0IGNsaWVudHMoKTogQXN0YWxIeXBybGFuZC5DbGllbnRbXSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0X2NsaWVudHMoKTtcbiAgfVxufVxuIiwgImltcG9ydCB7IEdkayB9IGZyb20gXCJhZ3MvZ3RrNFwiO1xuaW1wb3J0IEFzdGFsSHlwcmxhbmQgZnJvbSBcImdpOi8vQXN0YWxIeXBybGFuZD92ZXJzaW9uPTAuMVwiO1xuaW1wb3J0IHsgZ2V0SXNDdXJyZW50TW9uaXRvciB9IGZyb20gXCIuL2lzLWN1cnJlbnQtbW9uaXRvclwiO1xuaW1wb3J0IHsgRW1wdHlIeXBybGFuZFdvcmtzcGFjZSB9IGZyb20gXCIuLi9vYmplY3RzL0VtcHR5SHlwcmxhbmRXb3Jrc3BhY2VcIjtcblxuY29uc3Qgd29ya3NwYWNlc0xpbWl0ID0gNTtcblxuZXhwb3J0IGNvbnN0IGdldFdvcmtzcGFjZXNPZkN1cnJlbnRNb25pdG9yID0gKFxuICBoeXBybGFuZDogQXN0YWxIeXBybGFuZC5IeXBybGFuZCxcbiAgZ2RrbW9uaXRvcjogR2RrLk1vbml0b3IsXG4gIG1vbml0b3JJbmRleDogbnVtYmVyLFxuKTogKEFzdGFsSHlwcmxhbmQuV29ya3NwYWNlIHwgRW1wdHlIeXBybGFuZFdvcmtzcGFjZSlbXSA9PiB7XG4gIGNvbnN0IHdvcmtzcGFjZXMgPSBoeXBybGFuZC5nZXRfd29ya3NwYWNlcygpO1xuICBjb25zdCBleGlzdGluZyA9IHdvcmtzcGFjZXMuZmlsdGVyKCh3KSA9PiB7XG4gICAgcmV0dXJuIGdldElzQ3VycmVudE1vbml0b3Iody5nZXRfbW9uaXRvcigpLCBnZGttb25pdG9yKTtcbiAgfSk7XG5cbiAgY29uc3QgYnlJZCA9IG5ldyBNYXAoZXhpc3RpbmcubWFwKCh3KSA9PiBbdy5nZXRfaWQoKSwgd10pKTtcblxuICBjb25zdCByZXN1bHQ6IChBc3RhbEh5cHJsYW5kLldvcmtzcGFjZSB8IEVtcHR5SHlwcmxhbmRXb3Jrc3BhY2UpW10gPSBbXTtcblxuICBmb3IgKGxldCBpID0gMTsgaSA8PSB3b3Jrc3BhY2VzTGltaXQ7IGkrKykge1xuICAgIGNvbnN0IGlkID0gaSArIHdvcmtzcGFjZXNMaW1pdCAqIG1vbml0b3JJbmRleDtcbiAgICBjb25zdCB3cyA9IGJ5SWQuZ2V0KGlkKTtcblxuICAgIGlmICh3cykge1xuICAgICAgcmVzdWx0LnB1c2god3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDcmVhdGUgYSBmYWtlIGVtcHR5IHdvcmtzcGFjZSBvYmplY3RcbiAgICAgIGNvbnN0IGZha2UgPSBuZXcgRW1wdHlIeXBybGFuZFdvcmtzcGFjZSh7XG4gICAgICAgIGlkLFxuICAgICAgfSk7XG5cbiAgICAgIHJlc3VsdC5wdXNoKGZha2UpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwgImltcG9ydCB7IGNyZWF0ZUJpbmRpbmcsIGNyZWF0ZVN0YXRlLCBGb3IgfSBmcm9tIFwiYWdzXCI7XG5pbXBvcnQgQXN0YWxUcmF5IGZyb20gXCJnaTovL0FzdGFsVHJheVwiO1xuaW1wb3J0IHsgc3BhY2luZyB9IGZyb20gXCIuLi9jb25zdGFudHMvdGhlbWUvc3BhY2luZ1wiO1xuXG5jb25zdCBnZXRGaW5hbFRvb2x0aXBNYXJrdXAgPSAoaXRlbTogQXN0YWxUcmF5LlRyYXlJdGVtKTogc3RyaW5nID0+IHtcbiAgcmV0dXJuIGl0ZW0uZ2V0X3Rvb2x0aXBfbWFya3VwKCkgfHwgaXRlbS5nZXRfdGl0bGUoKTtcbn07XG5cbmNvbnN0IFRyYXlJdGVtID0gKHsgaXRlbSB9OiB7IGl0ZW06IEFzdGFsVHJheS5UcmF5SXRlbSB9KSA9PiB7XG4gIGNvbnN0IGhhc0l0ZW1zOiBib29sZWFuID0gISEoaXRlbS5nZXRfbWVudV9tb2RlbCgpPy5nZXRfbl9pdGVtcygpIHNhdGlzZmllc1xuICAgIHwgbnVtYmVyXG4gICAgfCB1bmRlZmluZWQpO1xuXG4gIGNvbnN0IFtmaW5hbFRvb2x0aXBNYXJrdXAsIHNldEZpbmFsVG9vbHRpcE1hcmt1cF0gPSBjcmVhdGVTdGF0ZShcbiAgICBnZXRGaW5hbFRvb2x0aXBNYXJrdXAoaXRlbSksXG4gICk7XG5cbiAgY29uc3QgZ2ljb24gPSBjcmVhdGVCaW5kaW5nKGl0ZW0sIFwiZ2ljb25cIik7XG4gIGNvbnN0IG1lbnVNb2RlbCA9IGNyZWF0ZUJpbmRpbmcoaXRlbSwgXCJtZW51TW9kZWxcIik7XG5cbiAgaXRlbS5jb25uZWN0KFwibm90aWZ5Ojp0b29sdGlwXCIsIChzKSA9PiB7XG4gICAgLy8gbm90aWZ5Ojp0b29sdGlwLW1hcmt1cCBkb2Vzbid0IGRvIGFueXRoaW5nIGJ1dCBub3RpZnk6OnRvb2x0aXAgZG9lc1xuICAgIHNldEZpbmFsVG9vbHRpcE1hcmt1cChnZXRGaW5hbFRvb2x0aXBNYXJrdXAocykpO1xuICB9KTtcblxuICBpdGVtLmNvbm5lY3QoXCJub3RpZnk6OnRpdGxlXCIsIChzKSA9PiB7XG4gICAgc2V0RmluYWxUb29sdGlwTWFya3VwKGdldEZpbmFsVG9vbHRpcE1hcmt1cChzKSk7XG4gIH0pO1xuXG4gIGlmIChoYXNJdGVtcylcbiAgICByZXR1cm4gKFxuICAgICAgPG1lbnVidXR0b25cbiAgICAgICAgY2xhc3M9e1wiZmxhdFwifVxuICAgICAgICAkPXsocykgPT4ge1xuICAgICAgICAgIC8vIHBhc3MgYWN0aW9ucyBzbyBpdCBjYW4gd29ya1xuICAgICAgICAgIGNvbnN0IGFjdGlvbnMgPSBpdGVtLmdldF9hY3Rpb25fZ3JvdXAoKTtcbiAgICAgICAgICAvLyBkYnVzbWVudSBpcyBuZWVkZWQsIGl0IG1ha2VzIGl0IHdvcmssIGl0IHdhcyBpbiB0aGUgZG9jc1xuICAgICAgICAgIGlmIChhY3Rpb25zKSBzLmluc2VydF9hY3Rpb25fZ3JvdXAoXCJkYnVzbWVudVwiLCBhY3Rpb25zKTtcbiAgICAgICAgfX1cbiAgICAgICAgLy8gZ2VuZXJhbGx5IHRoZXkgZG9uJ3QgaGF2ZSB0b29sdGlwX21hcmt1cCBidXQganVzdCBpbiBjYXNlXG4gICAgICAgIHRvb2x0aXBfbWFya3VwPXtmaW5hbFRvb2x0aXBNYXJrdXB9XG4gICAgICAgIG1lbnVNb2RlbD17bWVudU1vZGVsfVxuICAgICAgPlxuICAgICAgICA8aW1hZ2UgZ2ljb249e2dpY29ufSAvPlxuICAgICAgPC9tZW51YnV0dG9uPlxuICAgICk7XG5cbiAgcmV0dXJuIChcbiAgICA8YnV0dG9uXG4gICAgICBjc3M9e1wiZmxhdFwifVxuICAgICAgb25DbGlja2VkPXsoKSA9PiB7XG4gICAgICAgIGl0ZW0uYWN0aXZhdGUoMCwgMCk7XG4gICAgICB9fVxuICAgICAgdG9vbHRpcF9tYXJrdXA9e2ZpbmFsVG9vbHRpcE1hcmt1cH1cbiAgICA+XG4gICAgICA8aW1hZ2UgZ2ljb249e2dpY29ufSAvPlxuICAgIDwvYnV0dG9uPlxuICApO1xufTtcblxuY29uc3QgVHJheSA9ICgpID0+IHtcbiAgY29uc3QgdHJheSA9IEFzdGFsVHJheS5nZXRfZGVmYXVsdCgpO1xuICBjb25zdCBpdGVtcyA9IGNyZWF0ZUJpbmRpbmcodHJheSwgXCJpdGVtc1wiKTtcblxuICByZXR1cm4gKFxuICAgIDxib3hcbiAgICAgIGNsYXNzPVwiVHJheVJvd1wiXG4gICAgICBzcGFjaW5nPXtzcGFjaW5nLnNtYWxsfVxuICAgICAgdmlzaWJsZT17aXRlbXMoKGl0ZW1zKSA9PiBpdGVtcy5sZW5ndGggPiAwKX1cbiAgICA+XG4gICAgICA8Rm9yIGVhY2g9e2l0ZW1zfT57KGl0ZW0pID0+IDxUcmF5SXRlbSBpdGVtPXtpdGVtfSAvPn08L0Zvcj5cbiAgICA8L2JveD5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFRyYXk7XG4iLCAiZXhwb3J0IGNvbnN0IHdpbmRvd05hbWVzID0ge1xuICBNYWluU2VhcmNoV2luZG93OiBcIk1haW5TZWFyY2hXaW5kb3dcIixcbiAgQmFyOiBcIkJhclwiLFxuICBOb3RpZmljYXRpb25XaW5kb3c6IFwiTm90aWZpY2F0aW9uV2luZG93XCIsXG4gIExvZ291dFBhbmVsV2luZG93OiBcIkxvZ291dFBhbmVsV2luZG93XCIsXG59O1xuIiwgImltcG9ydCB7IGV4ZWMgfSBmcm9tIFwiYWdzL3Byb2Nlc3NcIjtcblxuZXhwb3J0IGNvbnN0IGdldEtleWJvYXJkID0gKCkgPT4ge1xuICByZXR1cm4gZXhlYyhbXG4gICAgXCJiYXNoXCIsXG4gICAgXCItY1wiLFxuICAgIFwiaHlwcmN0bCBkZXZpY2VzIC1qIHwganEgLXIgJy5rZXlib2FyZHNbXSB8IHNlbGVjdCgubWFpbiA9PSB0cnVlKSB8IC5hY3RpdmVfa2V5bWFwJ1wiLFxuICBdKTtcbn07XG5cbmV4cG9ydCBjb25zdCBmb3JtYXRLZXlib2FyZCA9IChrZXlib2FyZDogc3RyaW5nKSA9PiB7XG4gIGlmIChrZXlib2FyZCA9PT0gXCJTcGFuaXNoXCIgfHwga2V5Ym9hcmQgPT09IFwiRXNwYVx1MDBGMW9sXCIpIHtcbiAgICByZXR1cm4gXCJFU1wiO1xuICB9IGVsc2UgaWYgKGtleWJvYXJkPy5pbmNsdWRlcyhcIkVuZ2xpc2hcIikpIHtcbiAgICByZXR1cm4gXCJVU1wiO1xuICB9XG5cbiAgcmV0dXJuIGtleWJvYXJkO1xufTtcbiIsICJpbXBvcnQgeyBBY2Nlc3NvciwgY3JlYXRlQmluZGluZywgY3JlYXRlQ29tcHV0ZWQsIGNyZWF0ZVN0YXRlIH0gZnJvbSBcImFnc1wiO1xuaW1wb3J0IEFzdGFsQmx1ZXRvb3RoIGZyb20gXCJnaTovL0FzdGFsQmx1ZXRvb3RoXCI7XG5pbXBvcnQgQXN0YWxOZXR3b3JrIGZyb20gXCJnaTovL0FzdGFsTmV0d29ya1wiO1xuaW1wb3J0IEFzdGFsV3AgZnJvbSBcImdpOi8vQXN0YWxXcFwiO1xuaW1wb3J0IHsgc3BhY2luZyB9IGZyb20gXCIuLi8uLi9jb25zdGFudHMvdGhlbWUvc3BhY2luZ1wiO1xuaW1wb3J0IHsgZ2V0SGFzVnBuIH0gZnJvbSBcIi4uLy4uL3V0aWxzL25ldHdvcmtcIjtcbmltcG9ydCB7IEd0ayB9IGZyb20gXCJhZ3MvZ3RrNFwiO1xuaW1wb3J0IHsgdXNlTm90aWZpY2F0aW9ucyB9IGZyb20gXCIuLi8uLi9ob29rcy91c2VOb3RpZmljYXRpb25zXCI7XG5pbXBvcnQgQ29udHJvbFBhbmVsUG9wb3ZlciBmcm9tIFwiLi9Db250cm9sUGFuZWxQb3BvdmVyXCI7XG5cbmNvbnN0IGFjdGl2ZUNsYXNzID0gXCJDb250cm9sUGFuZWxBY3RpdmVJY29uXCI7XG5cbmNvbnN0IGdldFZvbHVtZSA9IChkZXZpY2U6IEFzdGFsV3AuRW5kcG9pbnQpID0+IHtcbiAgcmV0dXJuIE1hdGgucm91bmQoKGRldmljZS52b2x1bWUgPz8gMSkgKiAxMDApO1xufTtcblxuY29uc3QgZ2V0V3BOYW1lID0gKGRldmljZTogQXN0YWxXcC5FbmRwb2ludCkgPT4ge1xuICByZXR1cm4gZGV2aWNlLmdldF9kZXNjcmlwdGlvbigpO1xufTtcblxuY29uc3QgaGFuZGxlVm9sdW1lU2Nyb2xsID0gKFxuICBpbnN0YW5jZTogQXN0YWxXcC5FbmRwb2ludCxcbiAgX2R4OiBudW1iZXIsXG4gIGR5OiBudW1iZXIsXG4pID0+IHtcbiAgY29uc3QgY3VycmVudFZvbHVtZSA9IGdldFZvbHVtZShpbnN0YW5jZSk7XG5cbiAgaWYgKGR5ID4gMCkge1xuICAgIGluc3RhbmNlLnNldF92b2x1bWUoKGN1cnJlbnRWb2x1bWUgLSAxKSAvIDEwMCk7XG4gIH0gZWxzZSBpZiAoY3VycmVudFZvbHVtZSA8IDEwMCB8fCBjdXJyZW50Vm9sdW1lID4gMTAwKSB7XG4gICAgaW5zdGFuY2Uuc2V0X3ZvbHVtZSgoY3VycmVudFZvbHVtZSArIDEpIC8gMTAwKTtcbiAgfVxufTtcblxuY29uc3QgQmx1ZXRvb3RoSWNvbiA9ICgpID0+IHtcbiAgY29uc3QgYmx1ZXRvb3RoID0gQXN0YWxCbHVldG9vdGguZ2V0X2RlZmF1bHQoKTtcbiAgY29uc3QgaXNDb25uZWN0ZWQgPSBjcmVhdGVCaW5kaW5nKGJsdWV0b290aCwgXCJpc19jb25uZWN0ZWRcIik7XG4gIGNvbnN0IGlzUG93ZXJlZCA9IGNyZWF0ZUJpbmRpbmcoYmx1ZXRvb3RoLCBcImlzX3Bvd2VyZWRcIik7XG4gIGNvbnN0IGFkYXB0ZXIgPSBjcmVhdGVCaW5kaW5nKGJsdWV0b290aCwgXCJhZGFwdGVyXCIpO1xuXG4gIGNvbnN0IGljb25OYW1lID0gY3JlYXRlQ29tcHV0ZWQoXG4gICAgW2lzQ29ubmVjdGVkLCBpc1Bvd2VyZWQsIGFkYXB0ZXJdLFxuICAgIChfaXNDb25uZWN0ZWRCbHVldG9vdGgsIGlzUG93ZXJlZEJsdWV0b290aCwgYmx1ZXRvb3RoQWRhcHRlcikgPT4ge1xuICAgICAgaWYgKGJsdWV0b290aEFkYXB0ZXIgPT09IG51bGwgfHwgYmx1ZXRvb3RoQWRhcHRlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBcImJsdWV0b290aC14LXN5bWJvbGljXCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc1Bvd2VyZWRCbHVldG9vdGggPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiBcImJsdWV0b290aC1ub25lLXN5bWJvbGljXCI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBcImJsdWV0b290aC1zeW1ib2xpY1wiO1xuICAgIH0sXG4gICk7XG5cbiAgY29uc3QgdG9vbHRpcFRleHQgPSBjcmVhdGVDb21wdXRlZChcbiAgICBbaXNDb25uZWN0ZWQsIGlzUG93ZXJlZCwgYWRhcHRlcl0sXG4gICAgKGlzQ29ubiwgaXNQd3IsIGFkYXB0ZXIpID0+IHtcbiAgICAgIGlmICghYWRhcHRlcikgcmV0dXJuIFwiQWRhcHRhZG9yIEJsdWV0b290aCBubyBlbmNvbnRyYWRvXCI7XG4gICAgICBpZiAoIWlzUHdyKSByZXR1cm4gXCJCbHVldG9vdGggZXN0XHUwMEUxIGFwYWdhZG9cIjtcbiAgICAgIHJldHVybiBpc0Nvbm4gPyBcIkJsdWV0b290aCBjb25lY3RhZG9cIiA6IFwiQmx1ZXRvb3RoIGFjdGl2YWRvXCI7XG4gICAgfSxcbiAgKTtcblxuICByZXR1cm4gKFxuICAgIDxpbWFnZVxuICAgICAgaWNvbk5hbWU9e2ljb25OYW1lfVxuICAgICAgY2xhc3M9e2lzQ29ubmVjdGVkKCh2KSA9PiAodiA/IGFjdGl2ZUNsYXNzIDogXCJcIikpfVxuICAgICAgdG9vbHRpcFRleHQ9e3Rvb2x0aXBUZXh0fVxuICAgIC8+XG4gICk7XG59O1xuXG5jb25zdCBOZXR3b3JrSWNvbiA9ICgpID0+IHtcbiAgY29uc3QgbmV0d29yayA9IEFzdGFsTmV0d29yay5nZXRfZGVmYXVsdCgpO1xuXG4gIGNvbnN0IGNsaWVudCA9IGNyZWF0ZUJpbmRpbmcobmV0d29yaywgXCJjbGllbnRcIik7XG4gIGNvbnN0IHByaW1hcnkgPSBjcmVhdGVCaW5kaW5nKG5ldHdvcmssIFwicHJpbWFyeVwiKTtcbiAgY29uc3QgY29ubmVjdGl2aXR5ID0gY3JlYXRlQmluZGluZyhuZXR3b3JrLCBcImNvbm5lY3Rpdml0eVwiKTtcbiAgY29uc3Qgc3RhdGUgPSBjcmVhdGVCaW5kaW5nKG5ldHdvcmssIFwic3RhdGVcIik7XG4gIGNvbnN0IHdpZmkgPSBjcmVhdGVCaW5kaW5nKG5ldHdvcmssIFwid2lmaVwiKTtcblxuICBjb25zdCBbd2lmaVN0cmVuZ3RoLCBzZXRXaWZpU3RyZW5ndGhdID0gY3JlYXRlU3RhdGUoXG4gICAgd2lmaS5nZXQoKS5nZXRfc3RyZW5ndGgoKSA/PyAwLFxuICApO1xuXG4gIGNvbnN0IFtoYXNWcG4sIHNldEhhc1Zwbl0gPSBjcmVhdGVTdGF0ZShcbiAgICBnZXRIYXNWcG4oY2xpZW50LmdldCgpLmdldF9hY3RpdmVfY29ubmVjdGlvbnMoKSksXG4gICk7XG5cbiAgd2lmaS5nZXQoKS5jb25uZWN0KFwibm90aWZ5OjpzdHJlbmd0aFwiLCAoKSA9PiB7XG4gICAgc2V0V2lmaVN0cmVuZ3RoKHdpZmkuZ2V0KCk/LmdldF9zdHJlbmd0aCgpID8/IDApO1xuICB9KTtcblxuICBjbGllbnQuZ2V0KCkuY29ubmVjdChcIm5vdGlmeTo6YWN0aXZlLWNvbm5lY3Rpb25zXCIsIChzKSA9PiB7XG4gICAgc2V0SGFzVnBuKGdldEhhc1ZwbihzLmdldF9hY3RpdmVfY29ubmVjdGlvbnMoKSkpO1xuICB9KTtcblxuICBjb25zdCBpY29uTmFtZSA9IGNyZWF0ZUNvbXB1dGVkKFxuICAgIFtwcmltYXJ5LCBjb25uZWN0aXZpdHksIHN0YXRlLCB3aWZpU3RyZW5ndGhdLFxuICAgIChwcmltYXJ5LCBjb25uZWN0aXZpdHksIHN0YXRlLCB3aWZpU3RyZW5ndGgpID0+IHtcbiAgICAgIGlmIChzdGF0ZSA9PT0gQXN0YWxOZXR3b3JrLlN0YXRlLkNPTk5FQ1RJTkcpIHtcbiAgICAgICAgcmV0dXJuIFwicmFkaW93YXZlcy1kb3RzLXN5bWJvbGljXCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChcbiAgICAgICAgcHJpbWFyeSA9PT0gQXN0YWxOZXR3b3JrLlByaW1hcnkuV0lGSSAmJlxuICAgICAgICBjb25uZWN0aXZpdHkgPT09IEFzdGFsTmV0d29yay5Db25uZWN0aXZpdHkuRlVMTFxuICAgICAgKSB7XG4gICAgICAgIGlmICh3aWZpU3RyZW5ndGggPD0gMCkge1xuICAgICAgICAgIHJldHVybiBcInJhZGlvd2F2ZXMtNC1zeW1ib2xpY1wiO1xuICAgICAgICB9IGVsc2UgaWYgKHdpZmlTdHJlbmd0aCA8PSA1MCkge1xuICAgICAgICAgIHJldHVybiBcInJhZGlvd2F2ZXMtMy1zeW1ib2xpY1wiO1xuICAgICAgICB9IGVsc2UgaWYgKHdpZmlTdHJlbmd0aCA8PSA3NSkge1xuICAgICAgICAgIHJldHVybiBcInJhZGlvd2F2ZXMtMi1zeW1ib2xpY1wiO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFwicmFkaW93YXZlcy0xLXN5bWJvbGljXCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChcbiAgICAgICAgcHJpbWFyeSA9PT0gQXN0YWxOZXR3b3JrLlByaW1hcnkuV0lSRUQgJiZcbiAgICAgICAgY29ubmVjdGl2aXR5ID09PSBBc3RhbE5ldHdvcmsuQ29ubmVjdGl2aXR5LkZVTExcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gXCJsYW4tc3ltYm9saWNcIjtcbiAgICAgIH1cblxuICAgICAgaWYgKFxuICAgICAgICBjb25uZWN0aXZpdHkgPT09IEFzdGFsTmV0d29yay5Db25uZWN0aXZpdHkuTElNSVRFRCB8fFxuICAgICAgICBwcmltYXJ5ID09PSBBc3RhbE5ldHdvcmsuUHJpbWFyeS5VTktOT1dOXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIFwicmFkaW93YXZlcy01LXN5bWJvbGljXCI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBcInRlc3RcIjtcbiAgICB9LFxuICApO1xuXG4gIGNvbnN0IHRvb2x0aXBUZXh0ID0gY3JlYXRlQ29tcHV0ZWQoXG4gICAgW3ByaW1hcnksIGNvbm5lY3Rpdml0eSwgc3RhdGUsIGhhc1Zwbl0sXG4gICAgKHByaW1hcnksIGNvbm5lY3Rpdml0eSwgc3RhdGUsIGhhc1ZwbikgPT4ge1xuICAgICAgaWYgKHN0YXRlID09PSBBc3RhbE5ldHdvcmsuU3RhdGUuQ09OTkVDVElORykge1xuICAgICAgICByZXR1cm4gXCJDb25lY3RhbmRvLi4uXCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChcbiAgICAgICAgcHJpbWFyeSA9PT0gQXN0YWxOZXR3b3JrLlByaW1hcnkuV0lGSSAmJlxuICAgICAgICBjb25uZWN0aXZpdHkgPT09IEFzdGFsTmV0d29yay5Db25uZWN0aXZpdHkuRlVMTFxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiBoYXNWcG4gPyBcIldpLUZpIGNvbmVjdGFkYSAoVlBOIGFjdGl2YSlcIiA6IFwiV2ktRmkgY29uZWN0YWRhXCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChcbiAgICAgICAgcHJpbWFyeSA9PT0gQXN0YWxOZXR3b3JrLlByaW1hcnkuV0lSRUQgJiZcbiAgICAgICAgY29ubmVjdGl2aXR5ID09PSBBc3RhbE5ldHdvcmsuQ29ubmVjdGl2aXR5LkZVTExcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gaGFzVnBuXG4gICAgICAgICAgPyBcIlJlZCBjYWJsZWFkYSBjb25lY3RhZGEgKFZQTiBhY3RpdmEpXCJcbiAgICAgICAgICA6IFwiUmVkIGNhYmxlYWRhIGNvbmVjdGFkYVwiO1xuICAgICAgfVxuXG4gICAgICBpZiAoY29ubmVjdGl2aXR5ID09PSBBc3RhbE5ldHdvcmsuQ29ubmVjdGl2aXR5LkxJTUlURUQpIHtcbiAgICAgICAgcmV0dXJuIFwiQ29uZWN0aXZpZGFkIGxpbWl0YWRhXCI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBcIlNpbiBjb25leGlcdTAwRjNuXCI7XG4gICAgfSxcbiAgKTtcblxuICByZXR1cm4gKFxuICAgIDxib3ggc3BhY2luZz17c3BhY2luZy5zbWFsbH0gdG9vbHRpcFRleHQ9e3Rvb2x0aXBUZXh0fT5cbiAgICAgIHsvKiA8bGFiZWwgbGFiZWw9e3ByaW1hcnkoKHApID0+IHAudG9TdHJpbmcoKSl9IC8+ICovfVxuICAgICAgey8qIDxsYWJlbCBsYWJlbD17Y29ubmVjdGl2aXR5KChwKSA9PiBwLnRvU3RyaW5nKCkpfSAvPiAqL31cbiAgICAgIHsvKiA8bGFiZWwgbGFiZWw9e3N0YXRlKChwKSA9PiBwLnRvU3RyaW5nKCkpfSAvPiAqL31cbiAgICAgIDxpbWFnZSBpY29uTmFtZT17aWNvbk5hbWV9IC8+XG4gICAgICA8aW1hZ2UgaWNvbk5hbWU9e1widnBuLWNhcHMtc3ltYm9saWNcIn0gdmlzaWJsZT17aGFzVnBufSAvPlxuICAgIDwvYm94PlxuICApO1xufTtcblxuY29uc3QgU291bmRJY29uID0gKCkgPT4ge1xuICBjb25zdCB3cCA9IEFzdGFsV3AuZ2V0X2RlZmF1bHQoKTtcblxuICBjb25zdCBkZWZhdWx0TWljcm9waG9uZSA9IGNyZWF0ZUJpbmRpbmcod3AsIFwiZGVmYXVsdE1pY3JvcGhvbmVcIik7XG4gIGNvbnN0IGRlZmF1bHRTcGVha2VyID0gY3JlYXRlQmluZGluZyh3cCwgXCJkZWZhdWx0U3BlYWtlclwiKTtcblxuICBjb25zdCBbc3BlYWtlck5hbWUsIHNldFNwZWFrZXJOYW1lXSA9IGNyZWF0ZVN0YXRlKFxuICAgIGdldFdwTmFtZShkZWZhdWx0U3BlYWtlci5nZXQoKSksXG4gICk7XG5cbiAgY29uc3QgW21pY3JvTmFtZSwgc2V0TWljcm9OYW1lXSA9IGNyZWF0ZVN0YXRlKFxuICAgIGdldFdwTmFtZShkZWZhdWx0TWljcm9waG9uZS5nZXQoKSksXG4gICk7XG4gIGNvbnN0IFtzcGVha2VyVm9sdW1lLCBzZXRTcGVha2VyVm9sdW1lXSA9IGNyZWF0ZVN0YXRlKFxuICAgIGdldFZvbHVtZShkZWZhdWx0U3BlYWtlci5nZXQoKSksXG4gICk7XG4gIGNvbnN0IFttaWNyb3Bob25lVm9sdW1lLCBzZXRNaWNyb3Bob25lVm9sdW1lXSA9IGNyZWF0ZVN0YXRlKFxuICAgIGdldFZvbHVtZShkZWZhdWx0TWljcm9waG9uZS5nZXQoKSksXG4gICk7XG5cbiAgY29uc3QgW3NwZWFrZXJNdXRlZCwgc2V0U3BlYWtlck11dGVkXSA9IGNyZWF0ZVN0YXRlKFxuICAgIGRlZmF1bHRTcGVha2VyLmdldCgpLm11dGUsXG4gICk7XG5cbiAgY29uc3QgW21pY3JvTXV0ZWQsIHNldE1pY3JvTXV0ZWRdID0gY3JlYXRlU3RhdGUoZGVmYXVsdE1pY3JvcGhvbmUuZ2V0KCkubXV0ZSk7XG4gIGNvbnN0IFttaWNyb1N0YXRlLCBzZXRNaWNyb1N0YXRlXSA9IGNyZWF0ZVN0YXRlKFxuICAgIGRlZmF1bHRNaWNyb3Bob25lLmdldCgpLnN0YXRlLFxuICApO1xuXG4gIGNvbnN0IHNwZWFrZXJJY29uID0gY3JlYXRlQ29tcHV0ZWQoXG4gICAgW3NwZWFrZXJWb2x1bWUsIHNwZWFrZXJNdXRlZF0sXG4gICAgKHYsIHNwZWFrZXJNdXRlZCkgPT4ge1xuICAgICAgaWYgKHYgPD0gMCB8fCBzcGVha2VyTXV0ZWQgPT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuIFwic3BlYWtlci0wLXN5bWJvbGljXCI7XG4gICAgICB9IGVsc2UgaWYgKHYgPD0gMzApIHtcbiAgICAgICAgcmV0dXJuIFwic3BlYWtlci0xLXN5bWJvbGljXCI7XG4gICAgICB9IGVsc2UgaWYgKHYgPD0gNjUpIHtcbiAgICAgICAgcmV0dXJuIFwic3BlYWtlci0yLXN5bWJvbGljXCI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBcInNwZWFrZXItMy1zeW1ib2xpY1wiO1xuICAgIH0sXG4gICk7XG5cbiAgY29uc3QgbWljcm9JY29uID0gY3JlYXRlQ29tcHV0ZWQoXG4gICAgW21pY3JvcGhvbmVWb2x1bWUsIG1pY3JvTXV0ZWQsIG1pY3JvU3RhdGVdLFxuICAgICh2LCBtaWNyb011dGVkKSA9PiB7XG4gICAgICBpZiAobWljcm9NdXRlZCA9PT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gXCJtaWMtbm9uZS1zeW1ib2xpY1wiO1xuICAgICAgfSBlbHNlIGlmICh2IDw9IDApIHtcbiAgICAgICAgcmV0dXJuIFwibWljLTQtc3ltYm9saWNcIjtcbiAgICAgIH0gZWxzZSBpZiAodiA8PSAzMCkge1xuICAgICAgICByZXR1cm4gXCJtaWMtMy1zeW1ib2xpY1wiO1xuICAgICAgfSBlbHNlIGlmICh2IDw9IDY1KSB7XG4gICAgICAgIHJldHVybiBcIm1pYy0yLXN5bWJvbGljXCI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBcIm1pYy0xLXN5bWJvbGljXCI7XG4gICAgfSxcbiAgKTtcblxuICAvLyBub3RpZnk6OnZvbHVtZVxuICBkZWZhdWx0U3BlYWtlci5nZXQoKS5jb25uZWN0KFwibm90aWZ5Ojp2b2x1bWVcIiwgKHMpID0+IHtcbiAgICBzZXRTcGVha2VyVm9sdW1lKGdldFZvbHVtZShzKSk7XG4gIH0pO1xuXG4gIGRlZmF1bHRNaWNyb3Bob25lLmdldCgpLmNvbm5lY3QoXCJub3RpZnk6OnZvbHVtZVwiLCAocykgPT4ge1xuICAgIHNldE1pY3JvcGhvbmVWb2x1bWUoZ2V0Vm9sdW1lKHMpKTtcbiAgfSk7XG5cbiAgLy8gbm90aWZ5OjptdXRlXG4gIGRlZmF1bHRTcGVha2VyLmdldCgpLmNvbm5lY3QoXCJub3RpZnk6Om11dGVcIiwgKHMpID0+IHtcbiAgICBzZXRTcGVha2VyTXV0ZWQocy5tdXRlKTtcbiAgfSk7XG5cbiAgZGVmYXVsdE1pY3JvcGhvbmUuZ2V0KCkuY29ubmVjdChcIm5vdGlmeTo6bXV0ZVwiLCAocykgPT4ge1xuICAgIHNldE1pY3JvTXV0ZWQocy5tdXRlKTtcbiAgfSk7XG5cbiAgLy8gbm90aWZ5OjpzdGF0ZVxuICBkZWZhdWx0TWljcm9waG9uZS5nZXQoKS5jb25uZWN0KFwibm90aWZ5OjpzdGF0ZVwiLCAocykgPT4ge1xuICAgIHNldE1pY3JvU3RhdGUocy5zdGF0ZSk7XG4gIH0pO1xuXG4gIC8vIG5vdGlmeTo6bmFtZVxuICBkZWZhdWx0U3BlYWtlci5nZXQoKS5jb25uZWN0KFwibm90aWZ5OjpuYW1lXCIsIChzKSA9PiB7XG4gICAgc2V0U3BlYWtlck5hbWUoZ2V0V3BOYW1lKHMpKTtcbiAgfSk7XG5cbiAgZGVmYXVsdE1pY3JvcGhvbmUuZ2V0KCkuY29ubmVjdChcIm5vdGlmeTo6bmFtZVwiLCAocykgPT4ge1xuICAgIHNldE1pY3JvTmFtZShnZXRXcE5hbWUocykpO1xuICB9KTtcblxuICB3cC5jb25uZWN0KFwicmVhZHlcIiwgKHMpID0+IHtcbiAgICBzZXRTcGVha2VyTmFtZShnZXRXcE5hbWUocy5nZXRfZGVmYXVsdF9zcGVha2VyKCkpKTtcbiAgICBzZXRNaWNyb05hbWUoZ2V0V3BOYW1lKHMuZ2V0X2RlZmF1bHRfbWljcm9waG9uZSgpKSk7XG4gIH0pO1xuXG4gIHJldHVybiAoXG4gICAgPGJveCBzcGFjaW5nPXtzcGFjaW5nLm5vcm1hbH0+XG4gICAgICA8Ym94XG4gICAgICAgIHNwYWNpbmc9e3NwYWNpbmcubm9ybWFsfVxuICAgICAgICAkPXsocykgPT4ge1xuICAgICAgICAgIGNvbnN0IGdlc3R1cmUgPSBHdGsuRXZlbnRDb250cm9sbGVyU2Nyb2xsLm5ldyhcbiAgICAgICAgICAgIEd0ay5FdmVudENvbnRyb2xsZXJTY3JvbGxGbGFncy5WRVJUSUNBTCxcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgZ2VzdHVyZS5jb25uZWN0KFwic2Nyb2xsXCIsIChfcywgZHgsIGR5KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpbnN0YW5jZSA9IGRlZmF1bHRTcGVha2VyLmdldCgpO1xuICAgICAgICAgICAgaGFuZGxlVm9sdW1lU2Nyb2xsKGluc3RhbmNlLCBkeCwgZHkpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgcy5hZGRfY29udHJvbGxlcihnZXN0dXJlKTtcbiAgICAgICAgfX1cbiAgICAgICAgdG9vbHRpcFRleHQ9e3NwZWFrZXJOYW1lKChzKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHMgPz8gXCJcIjtcbiAgICAgICAgfSl9XG4gICAgICA+XG4gICAgICAgIDxsYWJlbFxuICAgICAgICAgIGxhYmVsPXtzcGVha2VyVm9sdW1lKChzKSA9PiBzLnRvU3RyaW5nKCkgKyBcIiVcIil9XG4gICAgICAgICAgdmlzaWJsZT17c3BlYWtlck11dGVkKCh2KSA9PiB2ID09PSBmYWxzZSl9XG4gICAgICAgIC8+XG4gICAgICAgIDxpbWFnZSBpY29uTmFtZT17c3BlYWtlckljb259IC8+XG4gICAgICA8L2JveD5cbiAgICAgIDxib3hcbiAgICAgICAgc3BhY2luZz17c3BhY2luZy5ub3JtYWx9XG4gICAgICAgIHZpc2libGU9e21pY3JvU3RhdGUoKHMpID0+IHtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBzID09PSBBc3RhbFdwLk5vZGVTdGF0ZS5TVVNQRU5ERUQgfHxcbiAgICAgICAgICAgIHMgPT09IEFzdGFsV3AuTm9kZVN0YXRlLkVSUk9SXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0pfVxuICAgICAgPlxuICAgICAgICA8R3RrLlNlcGFyYXRvciBvcmllbnRhdGlvbj17R3RrLk9yaWVudGF0aW9uLlZFUlRJQ0FMfSAvPlxuICAgICAgICA8Ym94XG4gICAgICAgICAgdG9vbHRpcFRleHQ9e21pY3JvTmFtZSgocykgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHMgPz8gXCJcIjtcbiAgICAgICAgICB9KX1cbiAgICAgICAgICBzcGFjaW5nPXtzcGFjaW5nLm5vcm1hbH1cbiAgICAgICAgICAkPXsocykgPT4ge1xuICAgICAgICAgICAgY29uc3QgZ2VzdHVyZSA9IEd0ay5FdmVudENvbnRyb2xsZXJTY3JvbGwubmV3KFxuICAgICAgICAgICAgICBHdGsuRXZlbnRDb250cm9sbGVyU2Nyb2xsRmxhZ3MuVkVSVElDQUwsXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBnZXN0dXJlLmNvbm5lY3QoXCJzY3JvbGxcIiwgKF9zLCBkeCwgZHkpID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgaW5zdGFuY2UgPSBkZWZhdWx0TWljcm9waG9uZS5nZXQoKTtcbiAgICAgICAgICAgICAgaGFuZGxlVm9sdW1lU2Nyb2xsKGluc3RhbmNlLCBkeCwgZHkpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHMuYWRkX2NvbnRyb2xsZXIoZ2VzdHVyZSk7XG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIDxsYWJlbFxuICAgICAgICAgICAgbGFiZWw9e21pY3JvcGhvbmVWb2x1bWUoKHMpID0+IHMudG9TdHJpbmcoKSArIFwiJVwiKX1cbiAgICAgICAgICAgIHZpc2libGU9e21pY3JvTXV0ZWQoKHYpID0+IHYgPT09IGZhbHNlKX1cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxpbWFnZSBpY29uTmFtZT17bWljcm9JY29ufSAvPlxuICAgICAgICA8L2JveD5cbiAgICAgIDwvYm94PlxuICAgIDwvYm94PlxuICApO1xufTtcblxuY29uc3QgTm90aWZpY2F0aW9uc0ljb24gPSAoeyBpc09wZW5lZCB9OiB7IGlzT3BlbmVkOiBBY2Nlc3Nvcjxib29sZWFuPiB9KSA9PiB7XG4gIGNvbnN0IHsgbm90aWZpY2F0aW9ucywgZG9udERpc3R1cmIgfSA9IHVzZU5vdGlmaWNhdGlvbnMoe1xuICAgIHJlbW92ZU9uRXhwaXJhdGlvbjogZmFsc2UsXG4gIH0pO1xuXG4gIGNvbnN0IGhhc05vdGlmaWNhdGlvbnMgPSBub3RpZmljYXRpb25zKCh2KSA9PiB7XG4gICAgcmV0dXJuIHYubGVuZ3RoID4gMDtcbiAgfSk7XG5cbiAgY29uc3QgaW1nQ2xhc3MgPSBjcmVhdGVDb21wdXRlZChcbiAgICBbaGFzTm90aWZpY2F0aW9ucywgaXNPcGVuZWRdLFxuICAgIChoYXNOb3RpZmljYXRpb25zLCBpc09wZW5lZCkgPT4ge1xuICAgICAgaWYgKGlzT3BlbmVkID09PSB0cnVlKSByZXR1cm4gXCJcIjtcbiAgICAgIHJldHVybiBoYXNOb3RpZmljYXRpb25zID09PSB0cnVlID8gYWN0aXZlQ2xhc3MgOiBcIlwiO1xuICAgIH0sXG4gICk7XG5cbiAgcmV0dXJuIChcbiAgICA8Ym94IHNwYWNpbmc9e3NwYWNpbmcubm9ybWFsfT5cbiAgICAgIHsvKiA8bGFiZWwgKi99XG4gICAgICB7LyogICBsYWJlbD17bm90aWZpY2F0aW9ucygobikgPT4gbi5sZW5ndGgudG9TdHJpbmcoKSl9ICovfVxuICAgICAgey8qICAgdmlzaWJsZT17aGFzTm90aWZpY2F0aW9uc30gKi99XG4gICAgICB7LyogLz4gKi99XG4gICAgICA8aW1hZ2VcbiAgICAgICAgaWNvbk5hbWU9e2RvbnREaXN0dXJiKCh2KSA9PlxuICAgICAgICAgIHYgPT09IHRydWUgPyBcImJlbGwtb3V0bGluZS1ub25lLXN5bWJvbGljXCIgOiBcImJlbGwtb3V0bGluZS1zeW1ib2xpY1wiLFxuICAgICAgICApfVxuICAgICAgICBjbGFzcz17aW1nQ2xhc3N9XG4gICAgICAvPlxuICAgIDwvYm94PlxuICApO1xufTtcblxuY29uc3QgQ29udHJvbFBhbmVsID0gKCkgPT4ge1xuICBjb25zdCBbaXNPcGVuZWQsIHNldElzT3BlbmVkXSA9IGNyZWF0ZVN0YXRlKGZhbHNlKTtcbiAgcmV0dXJuIChcbiAgICA8bWVudWJ1dHRvblxuICAgICAgY2xhc3M9XCJDb250cm9sUGFuZWxNZW51QnV0dG9uXCJcbiAgICAgIGFjdGl2ZT17aXNPcGVuZWR9XG4gICAgICBvbk5vdGlmeUFjdGl2ZT17KCkgPT4ge1xuICAgICAgICBzZXRJc09wZW5lZCgocCkgPT4gIXApO1xuICAgICAgfX1cbiAgICA+XG4gICAgICA8Ym94IHNwYWNpbmc9e3NwYWNpbmcubm9ybWFsfT5cbiAgICAgICAgPE5vdGlmaWNhdGlvbnNJY29uIGlzT3BlbmVkPXtpc09wZW5lZH0gLz5cbiAgICAgICAgPEd0ay5TZXBhcmF0b3Igb3JpZW50YXRpb249e0d0ay5PcmllbnRhdGlvbi5WRVJUSUNBTH0gLz5cbiAgICAgICAgPFNvdW5kSWNvbiAvPlxuICAgICAgICA8R3RrLlNlcGFyYXRvciBvcmllbnRhdGlvbj17R3RrLk9yaWVudGF0aW9uLlZFUlRJQ0FMfSAvPlxuICAgICAgICA8TmV0d29ya0ljb24gLz5cbiAgICAgICAgPEd0ay5TZXBhcmF0b3Igb3JpZW50YXRpb249e0d0ay5PcmllbnRhdGlvbi5WRVJUSUNBTH0gLz5cbiAgICAgICAgPEJsdWV0b290aEljb24gLz5cbiAgICAgIDwvYm94PlxuXG4gICAgICA8Q29udHJvbFBhbmVsUG9wb3ZlciAvPlxuICAgIDwvbWVudWJ1dHRvbj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IENvbnRyb2xQYW5lbDtcbiIsICJpbXBvcnQgTk0gZnJvbSBcImdpOi8vTk1cIjtcblxuZXhwb3J0IGNvbnN0IGdldEhhc1ZwbiA9IChcbiAgYWN0aXZlQ29ubmVjdGlvbnM6IE5NLkFjdGl2ZUNvbm5lY3Rpb25bXSA9IFtdLFxuKTogYm9vbGVhbiA9PiB7XG4gIHJldHVybiBhY3RpdmVDb25uZWN0aW9ucy5zb21lKChhYykgPT4ge1xuICAgIGlmIChhYy5nZXRfdnBuKCkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGNvbnN0IHR5cGUgPSBhYy5nZXRfY29ubmVjdGlvbl90eXBlKCk7XG5cbiAgICBpZiAoW1wid2lyZWd1YXJkXCIsIFwib3BlbnZwblwiLCBcImlwc2VjXCIsIFwiaWtldjJcIl0uaW5jbHVkZXModHlwZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfSk7XG59O1xuIiwgImltcG9ydCB7IGNyZWF0ZUJpbmRpbmcsIGNyZWF0ZVN0YXRlIH0gZnJvbSBcImFnc1wiO1xuaW1wb3J0IE5vdGlmZCBmcm9tIFwiZ2k6Ly9Bc3RhbE5vdGlmZFwiO1xuaW1wb3J0IEdMaWIgZnJvbSBcImdpOi8vR0xpYlwiO1xuXG5leHBvcnQgY29uc3QgdXNlTm90aWZpY2F0aW9ucyA9ICh7XG4gIHJlbW92ZU9uRXhwaXJhdGlvbixcbn06IHtcbiAgcmVtb3ZlT25FeHBpcmF0aW9uOiBib29sZWFuO1xufSkgPT4ge1xuICBjb25zdCBbbm90aWZpY2F0aW9ucywgc2V0Tm90aWZpY2F0aW9uc10gPSBjcmVhdGVTdGF0ZTxOb3RpZmQuTm90aWZpY2F0aW9uW10+KFxuICAgIFtdLFxuICApO1xuXG4gIGNvbnN0IG5vdGlmZCA9IE5vdGlmZC5nZXRfZGVmYXVsdCgpO1xuICBjb25zdCBpZ25vcmVUaW1lb3V0ID0gY3JlYXRlQmluZGluZyhub3RpZmQsIFwiaWdub3JlVGltZW91dFwiKTtcbiAgY29uc3QgZG9udERpc3R1cmIgPSBjcmVhdGVCaW5kaW5nKG5vdGlmZCwgXCJkb250RGlzdHVyYlwiKTtcblxuICBjb25zdCByZW1vdmVOb3RpZmljYXRpb25CeUlkID0gKGlkOiBudW1iZXIpID0+IHtcbiAgICBzZXROb3RpZmljYXRpb25zKChwcmV2KSA9PiB7XG4gICAgICByZXR1cm4gcHJldi5maWx0ZXIoKG4pID0+IG4uZ2V0X2lkKCkgIT09IGlkKTtcbiAgICB9KTtcbiAgfTtcblxuICBub3RpZmQuY29ubmVjdChcIm5vdGlmaWVkXCIsIChfc291cmNlLCBpZCwgcmVwbGFjZWQpID0+IHtcbiAgICBjb25zdCBpbnN0YW5jZSA9IE5vdGlmZC5nZXRfZGVmYXVsdCgpO1xuICAgIGNvbnN0IG5vdGlmID0gaW5zdGFuY2UuZ2V0X25vdGlmaWNhdGlvbihpZCk7XG4gICAgaWYgKCFub3RpZikgcmV0dXJuO1xuXG4gICAgc2V0Tm90aWZpY2F0aW9ucygocHJldikgPT4ge1xuICAgICAgaWYgKHJlcGxhY2VkKSB7XG4gICAgICAgIC8vIFx1RDgzRFx1REQwNCBVcGRhdGUgdGhlIGV4aXN0aW5nIG5vdGlmaWNhdGlvblxuICAgICAgICByZXR1cm4gcHJldi5tYXAoKGl0ZW0pID0+IChpdGVtLmlkID09PSBpZCA/IG5vdGlmIDogaXRlbSkpO1xuICAgICAgfVxuXG4gICAgICAvLyBcdUQ4M0NcdUREOTUgTmV3IG5vdGlmaWNhdGlvblxuICAgICAgcmV0dXJuIFtub3RpZiwgLi4ucHJldl07XG4gICAgfSk7XG5cbiAgICBpZiAocmVtb3ZlT25FeHBpcmF0aW9uICYmIG5vdGlmLmdldF9leHBpcmVfdGltZW91dCgpID09PSAtMSkge1xuICAgICAgR0xpYi50aW1lb3V0X2FkZChHTGliLlBSSU9SSVRZX0RFRkFVTFQsIDMwXzAwMCwgKCkgPT4ge1xuICAgICAgICByZW1vdmVOb3RpZmljYXRpb25CeUlkKGlkKTtcbiAgICAgICAgcmV0dXJuIEdMaWIuU09VUkNFX1JFTU9WRTsgLy8gZG9uJ3QgcmVwZWF0XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuXG4gIG5vdGlmZC5jb25uZWN0KFwicmVzb2x2ZWRcIiwgKF9zb3VyY2UsIGlkLCByZWFzb24pID0+IHtcbiAgICBpZiAocmVtb3ZlT25FeHBpcmF0aW9uID09PSBmYWxzZSAmJiByZWFzb24gPT09IE5vdGlmZC5DbG9zZWRSZWFzb24uRVhQSVJFRClcbiAgICAgIHJldHVybjtcblxuICAgIHJlbW92ZU5vdGlmaWNhdGlvbkJ5SWQoaWQpO1xuICB9KTtcblxuICByZXR1cm4geyBub3RpZmljYXRpb25zLCBkb250RGlzdHVyYiwgaWdub3JlVGltZW91dCB9O1xufTtcbiIsICJpbXBvcnQgeyBjcmVhdGVCaW5kaW5nLCBjcmVhdGVTdGF0ZSwgRm9yIH0gZnJvbSBcImFnc1wiO1xuaW1wb3J0IHsgR3RrIH0gZnJvbSBcImFncy9ndGs0XCI7XG5pbXBvcnQgQXN0YWxXcCBmcm9tIFwiZ2k6Ly9Bc3RhbFdwXCI7XG5pbXBvcnQgeyBzcGFjaW5nIH0gZnJvbSBcIi4uLy4uL2NvbnN0YW50cy90aGVtZS9zcGFjaW5nXCI7XG5pbXBvcnQgUGFuZ28gZnJvbSBcImdpOi8vUGFuZ28/dmVyc2lvbj0xLjBcIjtcbmltcG9ydCB7IGdldEFwcEljb24sIGdldElzSWNvbkZpbGUgfSBmcm9tIFwiLi4vLi4vdXRpbHMvaWNvbnNcIjtcbmltcG9ydCB7IHVzZUNvbnRyb2xsZWRTY2FsZSB9IGZyb20gXCIuLi8uLi9ob29rcy91c2VDb250cm9sbGVkU2NhbGVcIjtcblxuY29uc3QgZ2V0U3RyZWFtcyA9IChzdHJlYW1zOiBBc3RhbFdwLlN0cmVhbVtdKSA9PiB7XG4gIGNvbnN0IHNlZW4gPSBuZXcgTWFwPHN0cmluZywgQXN0YWxXcC5TdHJlYW0+KCk7XG5cbiAgZm9yIChjb25zdCBzIG9mIHN0cmVhbXMpIHtcbiAgICBjb25zdCBuYW1lID0gcy5nZXRfbmFtZSgpIHx8IFwiXCI7XG4gICAgY29uc3QgaWNvbiA9IHMuZ2V0X2ljb24oKSB8fCBcIlwiOyAvLyBvciB1c2UgZ2V0X3ZvbHVtZV9pY29uKClcbiAgICBjb25zdCBrZXkgPSBgJHtuYW1lfTo6JHtpY29ufWA7XG5cbiAgICAvLyBvbmx5IGtlZXAgdGhlIGZpcnN0IHN0cmVhbSB3aXRoIHRoaXMgbmFtZStpY29uIGNvbWJvXG4gICAgaWYgKCFzZWVuLmhhcyhrZXkpKSB7XG4gICAgICBzZWVuLnNldChrZXksIHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBBcnJheS5mcm9tKHNlZW4udmFsdWVzKCkpO1xufTtcblxuY29uc3QgQXVkaW9TdHJlYW1JdGVtID0gKHsgc3RyZWFtIH06IHsgc3RyZWFtOiBBc3RhbFdwLlN0cmVhbSB9KSA9PiB7XG4gIGNvbnN0IG5hbWUgPSBjcmVhdGVCaW5kaW5nKHN0cmVhbSwgXCJuYW1lXCIpO1xuICBjb25zdCBkZXNjID0gY3JlYXRlQmluZGluZyhzdHJlYW0sIFwiZGVzY3JpcHRpb25cIik7XG5cbiAgY29uc3QgZm91bmQgPSBnZXRBcHBJY29uKHN0cmVhbS5nZXRfZGVzY3JpcHRpb24oKSB8fCBcIlwiKTtcblxuICBjb25zdCBpc0ljb24gPSBnZXRJc0ljb25GaWxlKHsgaWNvbjogZm91bmQgfSkgPT09IGZhbHNlO1xuICBjb25zdCB2b2x1bWUgPSBjcmVhdGVCaW5kaW5nKHN0cmVhbSwgXCJ2b2x1bWVcIik7XG5cbiAgY29uc3QgW2xpbWl0XSA9IGNyZWF0ZVN0YXRlKDEpO1xuXG4gIGNvbnN0IHsgYWRqdXN0bWVudCwgc2V0dXAgfSA9IHVzZUNvbnRyb2xsZWRTY2FsZSh7XG4gICAgbGltaXQsXG4gICAgdmFsdWU6IHZvbHVtZSxcbiAgICB1cGRhdGVWYWx1ZTogKHYpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKHsgdiB9KTtcbiAgICAgIHN0cmVhbS5zZXRfdm9sdW1lKHYpO1xuICAgIH0sXG4gICAgaW5jcmVtZW50ZXI6IDAuMSxcblxuICAgIHZhcmlhbnQ6IFwiaW5zdGFudFwiLFxuICB9KTtcblxuICByZXR1cm4gKFxuICAgIDxib3ggb3JpZW50YXRpb249e0d0ay5PcmllbnRhdGlvbi5WRVJUSUNBTH0+XG4gICAgICA8Ym94IHNwYWNpbmc9e3NwYWNpbmcubm9ybWFsfT5cbiAgICAgICAgPGxhYmVsIGxhYmVsPXtuYW1lfSAvPlxuICAgICAgICA8Ym94IHZpc2libGU9e2Rlc2MoKHYpID0+ICEhdil9IHNwYWNpbmc9e3NwYWNpbmcubm9ybWFsfT5cbiAgICAgICAgICA8bGFiZWwgbGFiZWw9XCJcdTIwMjJcIiAvPlxuICAgICAgICAgIDxsYWJlbFxuICAgICAgICAgICAgbGFiZWw9e2Rlc2N9XG4gICAgICAgICAgICBlbGxpcHNpemU9e1BhbmdvLkVsbGlwc2l6ZU1vZGUuRU5EfVxuICAgICAgICAgICAgbWF4V2lkdGhDaGFycz17MzB9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9ib3g+XG4gICAgICA8L2JveD5cblxuICAgICAgPGJveD5cbiAgICAgICAgPGltYWdlXG4gICAgICAgICAgaWNvbk5hbWU9e2lzSWNvbiA/IGZvdW5kIDogdW5kZWZpbmVkfVxuICAgICAgICAgIHZpc2libGU9eyEhZm91bmR9XG4gICAgICAgICAgcGl4ZWxTaXplPXsyMH1cbiAgICAgICAgICBmaWxlPXtpc0ljb24gPyB1bmRlZmluZWQgOiBmb3VuZH1cbiAgICAgICAgLz5cbiAgICAgICAgPEd0ay5TY2FsZVxuICAgICAgICAgIGFkanVzdG1lbnQ9e2FkanVzdG1lbnR9XG4gICAgICAgICAgaGV4cGFuZFxuICAgICAgICAgICQ9eyhzKSA9PiB7XG4gICAgICAgICAgICBzZXR1cChzKTtcbiAgICAgICAgICB9fVxuICAgICAgICAvPlxuICAgICAgPC9ib3g+XG4gICAgPC9ib3g+XG4gICk7XG59O1xuXG5jb25zdCBWb2x1bWVNaXhlciA9ICgpID0+IHtcbiAgY29uc3Qgd3AgPSBBc3RhbFdwLmdldF9kZWZhdWx0KCk7XG5cbiAgY29uc3QgYXVkaW8gPSBjcmVhdGVCaW5kaW5nKHdwLCBcImF1ZGlvXCIpO1xuXG4gIGNvbnN0IFthdWRpb1N0cmVhbXMsIHNldEF1ZGlvU3RyZWFtc10gPSBjcmVhdGVTdGF0ZShcbiAgICBnZXRTdHJlYW1zKGF1ZGlvLmdldCgpLnN0cmVhbXMpLFxuICApO1xuXG4gIGF1ZGlvLmdldCgpLmNvbm5lY3QoXCJub3RpZnk6OnN0cmVhbXNcIiwgKHMpID0+IHtcbiAgICBzZXRBdWRpb1N0cmVhbXMoZ2V0U3RyZWFtcyhzLnN0cmVhbXMpKTtcbiAgfSk7XG5cbiAgLy8gY29uc3QgdW4gPSBhdWRpb1N0cmVhbXMuc3Vic2NyaWJlKCgpID0+IHtcbiAgLy8gICBjb25zb2xlLmxvZyhcbiAgLy8gICAgIGF1ZGlvU3RyZWFtcy5nZXQoKS5tYXAoKHN0cmVhbSkgPT4gKHtcbiAgLy8gICAgICAgbmFtZTogc3RyZWFtLm5hbWUsXG4gIC8vICAgICAgIGlkOiBzdHJlYW0uaWQsXG4gIC8vICAgICAgIHZJY29uOiBzdHJlYW0uZ2V0X3ZvbHVtZV9pY29uKCksXG4gIC8vICAgICAgIGljb246IHN0cmVhbS5nZXRfaWNvbigpLFxuICAvLyAgICAgICB2b2x1bWU6IHN0cmVhbS5nZXRfdm9sdW1lKCksXG4gIC8vICAgICAgIHN0YXRlOiBzdHJlYW0uZ2V0X3N0YXRlKCksXG4gIC8vICAgICAgIGNsYXNzOiBzdHJlYW0uZ2V0X21lZGlhX2NsYXNzKCksXG4gIC8vICAgICAgIGRlc2M6IHN0cmVhbS5nZXRfZGVzY3JpcHRpb24oKSxcbiAgLy8gICAgICAgc2VyaWFsOiBzdHJlYW0uZ2V0X3NlcmlhbCgpLFxuICAvLyAgICAgICByb2xlOiBzdHJlYW0uZ2V0X21lZGlhX3JvbGUoKSxcbiAgLy8gICAgIH0pKSxcbiAgLy8gICApO1xuICAvLyB9KTtcbiAgLy9cbiAgLy8gb25DbGVhbnVwKCgpID0+IHtcbiAgLy8gICB1bigpO1xuICAvLyB9KTtcblxuICByZXR1cm4gKFxuICAgIDxib3ggb3JpZW50YXRpb249e0d0ay5PcmllbnRhdGlvbi5WRVJUSUNBTH0+XG4gICAgICA8Rm9yIGVhY2g9e2F1ZGlvU3RyZWFtc30+XG4gICAgICAgIHsoc3RyZWFtKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIDxBdWRpb1N0cmVhbUl0ZW0gc3RyZWFtPXtzdHJlYW19IC8+O1xuICAgICAgICB9fVxuICAgICAgPC9Gb3I+XG4gICAgPC9ib3g+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBWb2x1bWVNaXhlcjtcbiIsICJpbXBvcnQgeyBjcmVhdGVCaW5kaW5nLCBjcmVhdGVDb21wdXRlZCwgRm9yIH0gZnJvbSBcImFnc1wiO1xuaW1wb3J0IHsgR3RrIH0gZnJvbSBcImFncy9ndGs0XCI7XG5pbXBvcnQgTm90aWZkIGZyb20gXCJnaTovL0FzdGFsTm90aWZkXCI7XG5pbXBvcnQgUGFuZ28gZnJvbSBcImdpOi8vUGFuZ28/dmVyc2lvbj0xLjBcIjtcbmltcG9ydCB7IHNwYWNpbmcgfSBmcm9tIFwiLi4vLi4vY29uc3RhbnRzL3RoZW1lL3NwYWNpbmdcIjtcbmltcG9ydCBDaXJjdWxhckltYWdlIGZyb20gXCIuLi9DaXJjdWxhckltYWdlXCI7XG5cbmNvbnN0IE5vdGlmaWNhdGlvbkxpc3RJdGVtID0gKHsgaXRlbSB9OiB7IGl0ZW06IE5vdGlmZC5Ob3RpZmljYXRpb24gfSkgPT4ge1xuICBjb25zdCBhcHBJY29uID0gY3JlYXRlQmluZGluZyhpdGVtLCBcImFwcEljb25cIik7XG4gIGNvbnN0IGRlc2t0b3BFbnRyeSA9IGNyZWF0ZUJpbmRpbmcoaXRlbSwgXCJkZXNrdG9wRW50cnlcIik7XG4gIGNvbnN0IHN1bW1hcnkgPSBjcmVhdGVCaW5kaW5nKGl0ZW0sIFwic3VtbWFyeVwiKTtcbiAgY29uc3QgYm9keSA9IGNyZWF0ZUJpbmRpbmcoaXRlbSwgXCJib2R5XCIpO1xuICBjb25zdCBhY3Rpb25zID0gY3JlYXRlQmluZGluZyhpdGVtLCBcImFjdGlvbnNcIik7XG5cbiAgY29uc3QgbWFpbkljb24gPSBjcmVhdGVDb21wdXRlZChbYXBwSWNvbiwgZGVza3RvcEVudHJ5XSwgKGEsIGQpID0+IGEgfHwgZCk7XG5cbiAgY29uc3QgZmlyc3RBY3Rpb24gPSBhY3Rpb25zKCh2KSA9PiB2Py5bMF0pO1xuICBjb25zdCBvdGhlckFjdGlvbnMgPSBhY3Rpb25zKCh2KSA9PiB2Py5zcGxpY2UoMSkpO1xuXG4gIHJldHVybiAoXG4gICAgPGJveFxuICAgICAgc3BhY2luZz17c3BhY2luZy5ub3JtYWx9XG4gICAgICBjbGFzcz1cIk5vdGlmaWNhdGlvbldpbmRvd05vdGlmaWNhdGlvbkl0ZW1cIlxuICAgICAgaGV4cGFuZFxuICAgICAgb3JpZW50YXRpb249e0d0ay5PcmllbnRhdGlvbi5WRVJUSUNBTH1cbiAgICA+XG4gICAgICA8Ym94IHNwYWNpbmc9e3NwYWNpbmcubm9ybWFsfT5cbiAgICAgICAgPENpcmN1bGFySW1hZ2VcbiAgICAgICAgICB2aXNpYmxlPXttYWluSWNvbigoYSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuICEhYTtcbiAgICAgICAgICB9KX1cbiAgICAgICAgICBpbWc9e21haW5JY29ufVxuICAgICAgICAgIGljb25GYWxsYmFjaz1cIm5vdGlmaWNhdGlvbi1hY3RpdmVcIlxuICAgICAgICAgIHNpemU9ezMwMH1cbiAgICAgICAgICBoZWlnaHRSZXF1ZXN0PXs2MH1cbiAgICAgICAgICB3aWR0aFJlcXVlc3Q9ezYwfVxuICAgICAgICAvPlxuXG4gICAgICAgIDxib3hcbiAgICAgICAgICBvcmllbnRhdGlvbj17R3RrLk9yaWVudGF0aW9uLlZFUlRJQ0FMfVxuICAgICAgICAgIHZhbGlnbj17R3RrLkFsaWduLlNUQVJUfVxuICAgICAgICAgIGhleHBhbmRcbiAgICAgICAgPlxuICAgICAgICAgIDxib3ggc3BhY2luZz17c3BhY2luZy5zbWFsbH0+XG4gICAgICAgICAgICA8bGFiZWxcbiAgICAgICAgICAgICAgaGV4cGFuZFxuICAgICAgICAgICAgICB2aXNpYmxlPXtzdW1tYXJ5KChzKSA9PiAhIXMpfVxuICAgICAgICAgICAgICBsYWJlbD17c3VtbWFyeX1cbiAgICAgICAgICAgICAgY2xhc3M9XCJOb3RpZmljYXRpb25XaW5kb3dOb3RpZmljYXRpb25JdGVtU3VtbWFyeVwiXG4gICAgICAgICAgICAgIHdyYXBcbiAgICAgICAgICAgICAgZWxsaXBzaXplPXtQYW5nby5FbGxpcHNpemVNb2RlLkVORH1cbiAgICAgICAgICAgICAgd2lkdGhDaGFycz17MzB9XG4gICAgICAgICAgICAgIHhhbGlnbj17MH1cbiAgICAgICAgICAgICAgbWF4V2lkdGhDaGFycz17MzB9XG4gICAgICAgICAgICAgIGxpbmVzPXsxfVxuICAgICAgICAgICAgICBoYWxpZ249e0d0ay5BbGlnbi5TVEFSVH1cbiAgICAgICAgICAgIC8+XG5cbiAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgaWNvbk5hbWU9XCJkaWFsb2ctY2xvc2VcIlxuICAgICAgICAgICAgICBjbGFzcz1cImNpcmN1bGFyXCJcbiAgICAgICAgICAgICAgb25DbGlja2VkPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgaXRlbS5kaXNtaXNzKCk7XG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvYm94PlxuXG4gICAgICAgICAgPGxhYmVsXG4gICAgICAgICAgICBsYWJlbD17aXRlbS5ib2R5fVxuICAgICAgICAgICAgdmlzaWJsZT17Ym9keSgocykgPT4gISFzKX1cbiAgICAgICAgICAgIHdyYXBcbiAgICAgICAgICAgIGVsbGlwc2l6ZT17UGFuZ28uRWxsaXBzaXplTW9kZS5FTkR9XG4gICAgICAgICAgICB3aWR0aENoYXJzPXszMH1cbiAgICAgICAgICAgIG1heFdpZHRoQ2hhcnM9ezMwfVxuICAgICAgICAgICAgaGFsaWduPXtHdGsuQWxpZ24uU1RBUlR9XG4gICAgICAgICAgICB4YWxpZ249ezB9XG4gICAgICAgICAgICBsaW5lcz17Mn1cbiAgICAgICAgICAvPlxuICAgICAgICA8L2JveD5cbiAgICAgIDwvYm94PlxuXG4gICAgICA8Ym94IHZpc2libGU9e290aGVyQWN0aW9ucygoYSkgPT4gYS5sZW5ndGggPiAwKX0gc3BhY2luZz17c3BhY2luZy5ub3JtYWx9PlxuICAgICAgICA8Rm9yIGVhY2g9e290aGVyQWN0aW9uc30+XG4gICAgICAgICAgeyhhY3Rpb24pID0+IHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgIDxidXR0b24gaGV4cGFuZCBvbkNsaWNrZWQ9eygpID0+IGl0ZW0uaW52b2tlKGFjdGlvbi5pZCl9PlxuICAgICAgICAgICAgICAgIDxsYWJlbCBsYWJlbD17YWN0aW9uLmxhYmVsfSBoYWxpZ249e0d0ay5BbGlnbi5DRU5URVJ9IGhleHBhbmQgLz5cbiAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICApO1xuICAgICAgICAgIH19XG4gICAgICAgIDwvRm9yPlxuICAgICAgPC9ib3g+XG4gICAgPC9ib3g+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBOb3RpZmljYXRpb25MaXN0SXRlbTtcbiIsICJpbXBvcnQgeyBHdGsgfSBmcm9tIFwiYWdzL2d0azRcIjtcbmltcG9ydCBWb2x1bWVNaXhlciBmcm9tIFwiLi9Wb2x1bWVNaXhlclwiO1xuaW1wb3J0IHsgdXNlTm90aWZpY2F0aW9ucyB9IGZyb20gXCIuLi8uLi9ob29rcy91c2VOb3RpZmljYXRpb25zXCI7XG5pbXBvcnQgeyBBY2Nlc3NvciwgRm9yIH0gZnJvbSBcImFnc1wiO1xuaW1wb3J0IEFzdGFsTm90aWZkIGZyb20gXCJnaTovL0FzdGFsTm90aWZkXCI7XG5pbXBvcnQgTm90aWZpY2F0aW9uTGlzdEl0ZW0gZnJvbSBcIi4uL05vdGlmaWNhdGlvbnMvTm90aWZpY2F0aW9uTGlzdEl0ZW1cIjtcblxuY29uc3QgTm90aWZpY2F0aW9uc1RhYiA9ICh7XG4gIG5vdGlmaWNhdGlvbnMsXG59OiB7XG4gIG5vdGlmaWNhdGlvbnM6IEFjY2Vzc29yPEFzdGFsTm90aWZkLk5vdGlmaWNhdGlvbltdPjtcbn0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8Ym94IG9yaWVudGF0aW9uPXtHdGsuT3JpZW50YXRpb24uVkVSVElDQUx9PlxuICAgICAgPEd0ay5TY3JvbGxlZFdpbmRvdyBtYXhDb250ZW50SGVpZ2h0PXs2MDB9IG1pbkNvbnRlbnRIZWlnaHQ9ezYwMH0+XG4gICAgICAgIDxHdGsuVmlld3BvcnQ+XG4gICAgICAgICAgPGJveCBvcmllbnRhdGlvbj17R3RrLk9yaWVudGF0aW9uLlZFUlRJQ0FMfT5cbiAgICAgICAgICAgIDxGb3IgZWFjaD17bm90aWZpY2F0aW9uc30+XG4gICAgICAgICAgICAgIHsoaXRlbSkgPT4gPE5vdGlmaWNhdGlvbkxpc3RJdGVtIGl0ZW09e2l0ZW19IC8+fVxuICAgICAgICAgICAgPC9Gb3I+XG5cbiAgICAgICAgICAgIDxib3hcbiAgICAgICAgICAgICAgaGV4cGFuZFxuICAgICAgICAgICAgICBoYWxpZ249e0d0ay5BbGlnbi5DRU5URVJ9XG4gICAgICAgICAgICAgIHZhbGlnbj17R3RrLkFsaWduLkNFTlRFUn1cbiAgICAgICAgICAgICAgdmV4cGFuZFxuICAgICAgICAgICAgICB2aXNpYmxlPXtub3RpZmljYXRpb25zKChuKSA9PiBuLmxlbmd0aCA9PT0gMCl9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxsYWJlbCBsYWJlbD1cIlNpbiBOb3RpZmljYWNpb25lc1wiIC8+XG4gICAgICAgICAgICA8L2JveD5cbiAgICAgICAgICA8L2JveD5cbiAgICAgICAgPC9HdGsuVmlld3BvcnQ+XG4gICAgICA8L0d0ay5TY3JvbGxlZFdpbmRvdz5cbiAgICA8L2JveD5cbiAgKTtcbn07XG5cbmNvbnN0IFZvbHVtZU1peGVyVGFiID0gKCkgPT4ge1xuICByZXR1cm4gPFZvbHVtZU1peGVyIC8+O1xufTtcblxuY29uc3QgQWxsVGFicyA9ICgpID0+IHtcbiAgbGV0IHN3aXRjaGVyOiBHdGsuU3RhY2tTd2l0Y2hlciB8IHVuZGVmaW5lZDtcbiAgbGV0IHN0YWNrOiBHdGsuU3RhY2sgfCB1bmRlZmluZWQ7XG5cbiAgY29uc3QgeyBub3RpZmljYXRpb25zIH0gPSB1c2VOb3RpZmljYXRpb25zKHsgcmVtb3ZlT25FeHBpcmF0aW9uOiBmYWxzZSB9KTtcblxuICByZXR1cm4gKFxuICAgIDxib3ggb3JpZW50YXRpb249e0d0ay5PcmllbnRhdGlvbi5WRVJUSUNBTH0gaGVpZ2h0UmVxdWVzdD17NjAwfT5cbiAgICAgIDxHdGsuU3RhY2tTd2l0Y2hlclxuICAgICAgICAkPXsocykgPT4ge1xuICAgICAgICAgIHN3aXRjaGVyID0gcztcbiAgICAgICAgfX1cbiAgICAgICAgc3RhY2s9e3N0YWNrfVxuICAgICAgLz5cbiAgICAgIDxHdGsuU3RhY2tcbiAgICAgICAgdHJhbnNpdGlvblR5cGU9e0d0ay5TdGFja1RyYW5zaXRpb25UeXBlLlNMSURFX0xFRlRfUklHSFR9XG4gICAgICAgICQ9eyhzKSA9PiB7XG4gICAgICAgICAgc3RhY2sgPSBzO1xuICAgICAgICAgIGlmIChzd2l0Y2hlcikgc3dpdGNoZXIuc2V0X3N0YWNrKHMpO1xuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICA8R3RrLlN0YWNrUGFnZVxuICAgICAgICAgIG5hbWU9XCJjaGlsZDFcIlxuICAgICAgICAgIHRpdGxlPVwiTm90aWZpY2F0aW9uc1wiXG4gICAgICAgICAgaWNvbk5hbWU9XCJiZWxsLW91dGxpbmUtc3ltYm9saWNcIlxuICAgICAgICAgIG5lZWRzQXR0ZW50aW9uPXtub3RpZmljYXRpb25zKChuKSA9PiBuLmxlbmd0aCA+IDApfVxuICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgaXQgd29ya3MgYW55d2F5c1xuICAgICAgICAgIGNoaWxkPXs8Tm90aWZpY2F0aW9uc1RhYiBub3RpZmljYXRpb25zPXtub3RpZmljYXRpb25zfSAvPn1cbiAgICAgICAgLz5cbiAgICAgICAgPEd0ay5TdGFja1BhZ2VcbiAgICAgICAgICBuYW1lPVwiY2hpbGQyXCJcbiAgICAgICAgICBpY29uTmFtZT1cInNwZWFrZXItMy1zeW1ib2xpY1wiXG4gICAgICAgICAgdGl0bGU9XCJWb2x1bWUgbWl4ZXJcIlxuICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgaXQgd29ya3MgYW55d2F5c1xuICAgICAgICAgIGNoaWxkPXs8Vm9sdW1lTWl4ZXJUYWIgLz59XG4gICAgICAgIC8+XG4gICAgICA8L0d0ay5TdGFjaz5cbiAgICA8L2JveD5cbiAgKTtcbn07XG5cbmNvbnN0IENvbnRyb2xQYW5lbFBvcG92ZXIgPSAoKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPHBvcG92ZXIgd2lkdGhSZXF1ZXN0PXs0MDB9PlxuICAgICAgPEFsbFRhYnMgLz5cbiAgICA8L3BvcG92ZXI+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBDb250cm9sUGFuZWxQb3BvdmVyO1xuIiwgImltcG9ydCB7IEFjY2Vzc29yLCBjcmVhdGVDb250ZXh0LCBTZXR0ZXIgfSBmcm9tIFwiYWdzXCI7XG5cbmV4cG9ydCBjb25zdCBMb2dvdXRQYW5lbFdpbmRvd0NvbnRleHQgPSBjcmVhdGVDb250ZXh0PHtcbiAgdmlzaWJsZTogQWNjZXNzb3I8Ym9vbGVhbj4gfCB1bmRlZmluZWQ7XG4gIHNldFZpc2libGU6IFNldHRlcjxib29sZWFuPiB8IHVuZGVmaW5lZDtcbn0+KHsgc2V0VmlzaWJsZTogdW5kZWZpbmVkLCB2aXNpYmxlOiB1bmRlZmluZWQgfSk7XG4iLCAiaW1wb3J0IHsgQXN0YWwsIEdkaywgR3RrIH0gZnJvbSBcImFncy9ndGs0XCI7XG5pbXBvcnQgYXBwIGZyb20gXCJhZ3MvZ3RrNC9hcHBcIjtcbmltcG9ydCB7IHNwYWNpbmcgfSBmcm9tIFwiLi4vLi4vY29uc3RhbnRzL3RoZW1lL3NwYWNpbmdcIjtcbmltcG9ydCBIeXBybGFuZCBmcm9tIFwiZ2k6Ly9Bc3RhbEh5cHJsYW5kXCI7XG5pbXBvcnQgR2lvIGZyb20gXCJnaTovL0dpbz92ZXJzaW9uPTIuMFwiO1xuaW1wb3J0IEFzdGFsQXBwcyBmcm9tIFwiZ2k6Ly9Bc3RhbEFwcHM/dmVyc2lvbj0wLjFcIjtcbmltcG9ydCB7IE1haW5TZWFyY2hMaXN0SXRlbU9iamVjdCB9IGZyb20gXCIuLi8uLi9vYmplY3RzL01haW5TZWFyY2hMaXN0SXRlbU9iamVjdFwiO1xuaW1wb3J0IHtcbiAgY3JlYXRlQXBwc0luc3RhbmNlLFxuICBnZXRBbGxDb21tYW5kcyxcbiAgcnVuQXBwQ29tbWFuZCxcbn0gZnJvbSBcIi4uLy4uL3V0aWxzL2FwcHNcIjtcbmltcG9ydCB7IE1haW5TZWFyY2hXaW5kb3dDb250ZXh0IH0gZnJvbSBcIi4uLy4uL2NvbnRleHQvTWFpblNlYXJjaFdpbmRvd0NvbnRleHRcIjtcbmltcG9ydCB7XG4gIEFjY2Vzc29yLFxuICBjcmVhdGVCaW5kaW5nLFxuICBjcmVhdGVDb21wdXRlZCxcbiAgY3JlYXRlU3RhdGUsXG4gIFNldHRlcixcbn0gZnJvbSBcImFnc1wiO1xuaW1wb3J0IHsgZ2V0SXNDdXJyZW50TW9uaXRvciB9IGZyb20gXCIuLi8uLi91dGlscy9pcy1jdXJyZW50LW1vbml0b3JcIjtcbmltcG9ydCB7IGdldElzSWNvbkZpbGUgfSBmcm9tIFwiLi4vLi4vdXRpbHMvaWNvbnNcIjtcbmltcG9ydCB7IHdpbmRvd05hbWVzIH0gZnJvbSBcIi4uLy4uL2NvbnN0YW50cy93aW5kb3dzXCI7XG5cbmNvbnN0IHRyYW5zaXRpb25EdXJhdGlvbiA9IDUwMDtcblxuY2xhc3MgTXlMaXN0SXRlbSBleHRlbmRzIEd0ay5MaXN0SXRlbSB7XG4gIF9tYWluQm94ITogR3RrLkJveDtcbiAgX3RleHRMYWJlbCE6IEd0ay5MYWJlbDtcbiAgX2Rlc2NMYWJlbCE6IEd0ay5MYWJlbDtcbiAgX2ltYWdlITogR3RrLkltYWdlO1xufVxuXG5jb25zdCBmaWx0ZXJDb21tYW5kcyA9IChjb21tYW5kczogc3RyaW5nW10sIHF1ZXJ5OiBzdHJpbmcpOiBzdHJpbmdbXSA9PiB7XG4gIGNvbnN0IGxvd2VyUXVlcnkgPSBxdWVyeS50b0xvd2VyQ2FzZSgpO1xuXG4gIHJldHVybiBjb21tYW5kcy5maWx0ZXIoKGNtZCkgPT4ge1xuICAgIGNvbnN0IG5hbWUgPSBjbWQ7XG5cbiAgICAvLyBDaGVjayBpZiBxdWVyeSBpcyBzdWJzdHJpbmcgb2YgbmFtZSBvciBkZXNjcmlwdGlvblxuICAgIHJldHVybiBuYW1lLmluY2x1ZGVzKGxvd2VyUXVlcnkpO1xuICB9KTtcbn07XG5cbmNvbnN0IGFkZEFwcHNUb0xpc3RTdG9yZSA9IChcbiAgbGlzdFN0b3JlOiBHaW8uTGlzdFN0b3JlLFxuICByZXN1bHRzOiBBc3RhbEFwcHMuQXBwbGljYXRpb25bXSxcbikgPT4ge1xuICBsaXN0U3RvcmUucmVtb3ZlX2FsbCgpO1xuXG4gIHJlc3VsdHMuZm9yRWFjaCgocikgPT4ge1xuICAgIGNvbnN0IGl0ZW0gPSBuZXcgTWFpblNlYXJjaExpc3RJdGVtT2JqZWN0KHtcbiAgICAgIGRlc2t0b3BJY29uOiByLmdldF9pY29uX25hbWUoKSxcbiAgICAgIHRleHQ6IHIuZ2V0X25hbWUoKSxcbiAgICAgIG9uU2VsZWN0OiAoKSA9PiByLmxhdW5jaCgpLFxuICAgICAgZGVzYzogci5nZXRfZGVzY3JpcHRpb24oKSxcbiAgICB9KTtcblxuICAgIGxpc3RTdG9yZS5hcHBlbmQoaXRlbSk7XG4gIH0pO1xufTtcblxuY29uc3QgYWRkQ29tbWFuZHNUb0xpc3RTdG9yZSA9IChcbiAgbGlzdFN0b3JlOiBHaW8uTGlzdFN0b3JlLFxuICByZXN1bHRzOiBzdHJpbmdbXSxcbikgPT4ge1xuICBsaXN0U3RvcmUucmVtb3ZlX2FsbCgpO1xuXG4gIHJlc3VsdHMuZm9yRWFjaCgocikgPT4ge1xuICAgIGNvbnN0IGl0ZW0gPSBuZXcgTWFpblNlYXJjaExpc3RJdGVtT2JqZWN0KHtcbiAgICAgIGRlc2t0b3BJY29uOiBcIlwiLFxuICAgICAgdGV4dDogcixcbiAgICAgIG9uU2VsZWN0OiAoKSA9PiB7XG4gICAgICAgIHJ1bkFwcENvbW1hbmQocik7XG4gICAgICB9LFxuICAgICAgZGVzYzogXCJcIixcbiAgICB9KTtcblxuICAgIGxpc3RTdG9yZS5hcHBlbmQoaXRlbSk7XG4gIH0pO1xufTtcblxuY29uc3QgZ2V0QWxsQXBwc0Zvckxpc3QgPSAoYXBwczogQXN0YWxBcHBzLkFwcHMpID0+IHtcbiAgcmV0dXJuIGFwcHNcbiAgICAuZ2V0X2xpc3QoKVxuICAgIC5zb3J0KChhLCBiKSA9PiBhLmdldF9uYW1lKCkubG9jYWxlQ29tcGFyZShiLmdldF9uYW1lKCkpKTtcbn07XG5cbmNvbnN0IE1haW5TZWFyY2ggPSAoe1xuICBsaXN0VmlldyxcbiAgc2V0TGlzdFZpZXcsXG4gIHNldFNlYXJjaEVudHJ5LFxuICBoYW5kbGVDbG9zZSxcblxuICBhcHBzLFxufToge1xuICBsaXN0VmlldzogQWNjZXNzb3I8R3RrLkxpc3RWaWV3IHwgdW5kZWZpbmVkPjtcbiAgc2V0TGlzdFZpZXc6IFNldHRlcjxHdGsuTGlzdFZpZXcgfCB1bmRlZmluZWQ+O1xuICBzZXRTZWFyY2hFbnRyeTogU2V0dGVyPEd0ay5TZWFyY2hFbnRyeSB8IHVuZGVmaW5lZD47XG4gIGhhbmRsZUNsb3NlOiAoaW1tZWRpYXRlOiBib29sZWFuKSA9PiBQcm9taXNlPHZvaWQ+O1xuICBhcHBzOiBBc3RhbEFwcHMuQXBwcztcbn0pID0+IHtcbiAgY29uc3QgbGlzdFN0b3JlID0gbmV3IEdpby5MaXN0U3RvcmUoKTtcbiAgY29uc3QgbW9kZWwgPSBuZXcgR3RrLlNpbmdsZVNlbGVjdGlvbih7IG1vZGVsOiBsaXN0U3RvcmUgfSk7XG4gIGNvbnN0IGNvbW1hbmRzID0gZ2V0QWxsQ29tbWFuZHMoKTtcblxuICBhZGRBcHBzVG9MaXN0U3RvcmUobGlzdFN0b3JlLCBnZXRBbGxBcHBzRm9yTGlzdChhcHBzKSk7XG5cbiAgY29uc3QgaGFuZGxlU2VsZWN0ID0gYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHNlbGVjdGVkSXRlbSA9IG1vZGVsLmdldF9zZWxlY3RlZF9pdGVtPE1haW5TZWFyY2hMaXN0SXRlbU9iamVjdD4oKTtcbiAgICBhd2FpdCBoYW5kbGVDbG9zZSh0cnVlKTtcblxuICAgIHNlbGVjdGVkSXRlbS5vblNlbGVjdCgpO1xuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPGJveFxuICAgICAgb3JpZW50YXRpb249e0d0ay5PcmllbnRhdGlvbi5WRVJUSUNBTH1cbiAgICAgIHZhbGlnbj17R3RrLkFsaWduLkVORH1cbiAgICAgIHZleHBhbmRcbiAgICAgIGhleHBhbmRcbiAgICA+XG4gICAgICA8R3RrLlNjcm9sbGVkV2luZG93IG1heENvbnRlbnRIZWlnaHQ9ezYwMH0gcHJvcGFnYXRlTmF0dXJhbEhlaWdodD5cbiAgICAgICAgPEd0ay5MaXN0Vmlld1xuICAgICAgICAgIHZleHBhbmRcbiAgICAgICAgICAkPXsocykgPT4ge1xuICAgICAgICAgICAgc2V0TGlzdFZpZXcocyk7XG4gICAgICAgICAgfX1cbiAgICAgICAgICBvbkFjdGl2YXRlPXsoKSA9PiB7XG4gICAgICAgICAgICBoYW5kbGVTZWxlY3QoKTtcbiAgICAgICAgICB9fVxuICAgICAgICAgIGZvY3VzYWJsZT17ZmFsc2V9XG4gICAgICAgICAgY2FuX2ZvY3VzPXtmYWxzZX1cbiAgICAgICAgICBtb2RlbD17bW9kZWx9XG4gICAgICAgICAgZmFjdG9yeT17XG4gICAgICAgICAgICA8R3RrLlNpZ25hbExpc3RJdGVtRmFjdG9yeVxuICAgICAgICAgICAgICBvblNldHVwPXsoXywgbCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxpc3RJdGVtID0gbCBhcyBNeUxpc3RJdGVtO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgbWFpbkJveCA9IG5ldyBHdGsuQm94KHtcbiAgICAgICAgICAgICAgICAgIHNwYWNpbmc6IHNwYWNpbmcubm9ybWFsLFxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgcmlnaHRCb3ggPSBuZXcgR3RrLkJveCh7XG4gICAgICAgICAgICAgICAgICBzcGFjaW5nOiBzcGFjaW5nLnNtYWxsLFxuICAgICAgICAgICAgICAgICAgb3JpZW50YXRpb246IEd0ay5PcmllbnRhdGlvbi5WRVJUSUNBTCxcbiAgICAgICAgICAgICAgICAgIHZhbGlnbjogR3RrLkFsaWduLkNFTlRFUixcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHRleHRMYWJlbCA9IG5ldyBHdGsuTGFiZWwoe1xuICAgICAgICAgICAgICAgICAgeGFsaWduOiAwLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IGRlc2NMYWJlbCA9IG5ldyBHdGsuTGFiZWwoe1xuICAgICAgICAgICAgICAgICAgeGFsaWduOiAwLFxuICAgICAgICAgICAgICAgICAgd3JhcDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgIG1heFdpZHRoQ2hhcnM6IDQwLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IGltYWdlID0gbmV3IEd0ay5JbWFnZSh7XG4gICAgICAgICAgICAgICAgICBwaXhlbFNpemU6IDQwLFxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgbGlzdEl0ZW0uX3RleHRMYWJlbCA9IHRleHRMYWJlbDtcbiAgICAgICAgICAgICAgICBsaXN0SXRlbS5fZGVzY0xhYmVsID0gZGVzY0xhYmVsO1xuICAgICAgICAgICAgICAgIGxpc3RJdGVtLl9pbWFnZSA9IGltYWdlO1xuICAgICAgICAgICAgICAgIGxpc3RJdGVtLl9tYWluQm94ID0gbWFpbkJveDtcblxuICAgICAgICAgICAgICAgIHJpZ2h0Qm94LmFwcGVuZCh0ZXh0TGFiZWwpO1xuICAgICAgICAgICAgICAgIHJpZ2h0Qm94LmFwcGVuZChkZXNjTGFiZWwpO1xuXG4gICAgICAgICAgICAgICAgbWFpbkJveC5hcHBlbmQoaW1hZ2UpO1xuICAgICAgICAgICAgICAgIG1haW5Cb3guYXBwZW5kKHJpZ2h0Qm94KTtcblxuICAgICAgICAgICAgICAgIGxpc3RJdGVtLnNldF9jaGlsZChtYWluQm94KTtcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgb25CaW5kPXsoXywgbCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxpc3RJdGVtID0gbCBhcyBNeUxpc3RJdGVtO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgdGV4dExhYmVsID0gbGlzdEl0ZW0uX3RleHRMYWJlbDtcbiAgICAgICAgICAgICAgICBjb25zdCBkZXNjTGFiZWwgPSBsaXN0SXRlbS5fZGVzY0xhYmVsO1xuICAgICAgICAgICAgICAgIGNvbnN0IGltYWdlID0gbGlzdEl0ZW0uX2ltYWdlO1xuICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSBsaXN0SXRlbS5nZXRfaXRlbTxNYWluU2VhcmNoTGlzdEl0ZW1PYmplY3Q+KCk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBpY29uID0gaXRlbS5kZXNrdG9wSWNvbjtcblxuICAgICAgICAgICAgICAgIGlmIChpY29uKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoZ2V0SXNJY29uRmlsZSh7IGljb24gfSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2Uuc2V0X2Zyb21fZmlsZShpY29uKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGltYWdlLnNldF9mcm9tX2ljb25fbmFtZShpY29uKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgaW1hZ2Uuc2V0X3Zpc2libGUoZmFsc2UpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRleHRMYWJlbD8uc2V0X3RleHQoaXRlbS50ZXh0KTtcblxuICAgICAgICAgICAgICAgIGlmIChpdGVtLmRlc2MpIHtcbiAgICAgICAgICAgICAgICAgIGRlc2NMYWJlbD8uc2V0X3RleHQoaXRlbS5kZXNjKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgZGVzY0xhYmVsLnNldF92aXNpYmxlKGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIH1cbiAgICAgICAgLz5cbiAgICAgIDwvR3RrLlNjcm9sbGVkV2luZG93PlxuXG4gICAgICA8R3RrLlNlYXJjaEVudHJ5XG4gICAgICAgIHZhbGlnbj17R3RrLkFsaWduLkVORH1cbiAgICAgICAgb25TZWFyY2hDaGFuZ2VkPXsocykgPT4ge1xuICAgICAgICAgIGNvbnN0IHRleHQgPSBzLmdldF90ZXh0KCk7XG5cbiAgICAgICAgICBpZiAodGV4dC5zdGFydHNXaXRoKFwiPlwiKSkge1xuICAgICAgICAgICAgLy8gaGFuZGxlIG90aGVyIHN0dWZmXG4gICAgICAgICAgICBjb25zdCBbXywgLi4ucmVzdF0gPSB0ZXh0LnNwbGl0KFwiPlwiKTtcbiAgICAgICAgICAgIGNvbnN0IHF1ZXJ5ID0gcmVzdC5qb2luKFwiPlwiKTtcblxuICAgICAgICAgICAgaWYgKHF1ZXJ5Lmxlbmd0aCkge1xuICAgICAgICAgICAgICBhZGRDb21tYW5kc1RvTGlzdFN0b3JlKFxuICAgICAgICAgICAgICAgIGxpc3RTdG9yZSxcbiAgICAgICAgICAgICAgICBmaWx0ZXJDb21tYW5kcyhjb21tYW5kcywgcXVlcnkpLFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgYWRkQ29tbWFuZHNUb0xpc3RTdG9yZShsaXN0U3RvcmUsIGNvbW1hbmRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gaGFuZGxlIGFwcHNcbiAgICAgICAgICAgIGlmICh0ZXh0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICBjb25zdCByZXN1bHRzID0gYXBwcy5mdXp6eV9xdWVyeShzLmdldF90ZXh0KCkpO1xuICAgICAgICAgICAgICBhZGRBcHBzVG9MaXN0U3RvcmUobGlzdFN0b3JlLCByZXN1bHRzKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGFkZEFwcHNUb0xpc3RTdG9yZShsaXN0U3RvcmUsIGdldEFsbEFwcHNGb3JMaXN0KGFwcHMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH19XG4gICAgICAgIG9uQWN0aXZhdGU9eygpID0+IHtcbiAgICAgICAgICBoYW5kbGVTZWxlY3QoKTtcbiAgICAgICAgfX1cbiAgICAgICAgb25TdG9wU2VhcmNoPXsoKSA9PiB7XG4gICAgICAgICAgaGFuZGxlQ2xvc2UoZmFsc2UpO1xuICAgICAgICB9fVxuICAgICAgICAkPXsocykgPT4ge1xuICAgICAgICAgIGNvbnN0IGtleUNvbnRyb2xsZXIgPSBHdGsuRXZlbnRDb250cm9sbGVyS2V5Lm5ldygpO1xuXG4gICAgICAgICAga2V5Q29udHJvbGxlci5jb25uZWN0KFwia2V5LXByZXNzZWRcIiwgKF8sIGtleXZhbCkgPT4ge1xuICAgICAgICAgICAgaWYgKGtleXZhbCAhPT0gR2RrLktFWV9VcCAmJiBrZXl2YWwgIT09IEdkay5LRVlfRG93bikge1xuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gbW9kZWwuZ2V0X3NlbGVjdGVkKCk7XG4gICAgICAgICAgICBsZXQgbmV3SW5kZXggPSBpbmRleDtcblxuICAgICAgICAgICAgaWYgKGtleXZhbCA9PSBHZGsuS0VZX1VwICYmIGluZGV4ID4gMCkge1xuICAgICAgICAgICAgICBuZXdJbmRleCA9IGluZGV4IC0gMTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICAgIGtleXZhbCA9PSBHZGsuS0VZX0Rvd24gJiZcbiAgICAgICAgICAgICAgaW5kZXggPCBsaXN0U3RvcmUuZ2V0X25faXRlbXMoKSAtIDFcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICBuZXdJbmRleCA9IGluZGV4ICsgMTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbW9kZWwuc2VsZWN0X2l0ZW0obmV3SW5kZXgsIHRydWUpO1xuXG4gICAgICAgICAgICBsaXN0Vmlldy5nZXQoKT8uc2Nyb2xsX3RvKG5ld0luZGV4LCBudWxsLCBudWxsKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlOyAvLyBhdm9pZCBwcm9wYWdhdGlvblxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgcy5hZGRfY29udHJvbGxlcihrZXlDb250cm9sbGVyKTtcblxuICAgICAgICAgIHNldFNlYXJjaEVudHJ5KHMpO1xuICAgICAgICB9fVxuICAgICAgLz5cbiAgICA8L2JveD5cbiAgKTtcbn07XG5cbmNvbnN0IE1haW5TZWFyY2hXaW5kb3cgPSAoeyBnZGttb25pdG9yIH06IHsgZ2RrbW9uaXRvcjogR2RrLk1vbml0b3IgfSkgPT4ge1xuICBjb25zdCB7IEJPVFRPTSB9ID0gQXN0YWwuV2luZG93QW5jaG9yO1xuICBjb25zdCBhcHBzID0gY3JlYXRlQXBwc0luc3RhbmNlKHsgdmFyaWFudDogXCJhcHBTZWFyY2hcIiB9KTtcblxuICBjb25zdCB7IHZpc2libGUsIHNldFZpc2libGUgfSA9IE1haW5TZWFyY2hXaW5kb3dDb250ZXh0LnVzZSgpO1xuXG4gIGNvbnN0IGh5cHJsYW5kID0gSHlwcmxhbmQuZ2V0X2RlZmF1bHQoKTtcbiAgY29uc3QgZm9jdXNlZE1vbml0b3IgPSBjcmVhdGVCaW5kaW5nKGh5cHJsYW5kLCBcImZvY3VzZWRNb25pdG9yXCIpO1xuXG4gIGNvbnN0IFtzZWFyY2hFbnRyeSwgc2V0U2VhcmNoRW50cnldID0gY3JlYXRlU3RhdGU8XG4gICAgR3RrLlNlYXJjaEVudHJ5IHwgdW5kZWZpbmVkXG4gID4odW5kZWZpbmVkKTtcbiAgY29uc3QgW2xpc3RWaWV3LCBzZXRMaXN0Vmlld10gPSBjcmVhdGVTdGF0ZTxHdGsuTGlzdFZpZXcgfCB1bmRlZmluZWQ+KFxuICAgIHVuZGVmaW5lZCxcbiAgKTtcbiAgY29uc3QgW3dpbmRvd0luc3RhbmNlLCBzZXRXaW5kb3dJbnN0YW5jZV0gPSBjcmVhdGVTdGF0ZTxcbiAgICBHdGsuV2luZG93IHwgdW5kZWZpbmVkXG4gID4odW5kZWZpbmVkKTtcblxuICBjb25zdCBbcmV2ZWFsQ2hpbGQsIHNldFJldmVhbENoaWxkXSA9IGNyZWF0ZVN0YXRlKGZhbHNlKTtcblxuICBjb25zdCBpc1Zpc2libGUgPSBjcmVhdGVDb21wdXRlZChcbiAgICBbdmlzaWJsZSEsIGZvY3VzZWRNb25pdG9yXSxcbiAgICAodmlzaWJsZSwgZm9jdXNlZE1vbml0b3IpID0+IHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIGdldElzQ3VycmVudE1vbml0b3IoZm9jdXNlZE1vbml0b3IsIGdka21vbml0b3IpICYmIHZpc2libGUgPT09IHRydWVcbiAgICAgICk7XG4gICAgfSxcbiAgKTtcblxuICBjb25zdCBoYW5kbGVDbG9zZSA9IGFzeW5jIChpbW1lZGlhdGU6IGJvb2xlYW4pID0+IHtcbiAgICBzZXRSZXZlYWxDaGlsZChmYWxzZSk7XG5cbiAgICBjb25zdCBjbG9zZSA9ICgpID0+IHtcbiAgICAgIHNldFZpc2libGU/LihmYWxzZSk7XG4gICAgICBzZWFyY2hFbnRyeS5nZXQoKT8uc2V0X3RleHQoXCJcIik7XG4gICAgfTtcblxuICAgIGlmIChpbW1lZGlhdGUpIHtcbiAgICAgIGNsb3NlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXMpID0+IHtcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgY2xvc2UoKTtcbiAgICAgICAgICByZXModHJ1ZSk7XG4gICAgICAgIH0sIHRyYW5zaXRpb25EdXJhdGlvbiAtIDEwMCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8d2luZG93XG4gICAgICB2aXNpYmxlPXtpc1Zpc2libGV9XG4gICAgICBuYW1lPXt3aW5kb3dOYW1lcy5Ob3RpZmljYXRpb25XaW5kb3d9XG4gICAgICBjbGFzcz1cIk1haW5TZWFyY2hXaW5kb3dcIlxuICAgICAgcmVzaXphYmxlPXtmYWxzZX1cbiAgICAgIGdka21vbml0b3I9e2dka21vbml0b3J9XG4gICAgICBhbmNob3I9e0JPVFRPTX1cbiAgICAgIGV4Y2x1c2l2aXR5PXtBc3RhbC5FeGNsdXNpdml0eS5OT1JNQUx9XG4gICAgICBhcHBsaWNhdGlvbj17YXBwfVxuICAgICAga2V5bW9kZT17QXN0YWwuS2V5bW9kZS5FWENMVVNJVkV9XG4gICAgICBvbk5vdGlmeVZpc2libGU9eyh3aW4pID0+IHtcbiAgICAgICAgY29uc3QgdmlzaWJsZSA9IHdpbi5pc192aXNpYmxlKCk7XG5cbiAgICAgICAgaWYgKHZpc2libGUpIHtcbiAgICAgICAgICBzZWFyY2hFbnRyeS5nZXQoKT8uZ3JhYl9mb2N1cygpO1xuICAgICAgICAgIGFwcHMucmVsb2FkKCk7IC8vIHJlbG9hZCB0aGUgbGlzdCBvZiBhcHBzIGluIGNhc2Ugb2YgaW5zdGFsbGVkIG5ldyBhcHAgb3Igc2ltaWxhclxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZpc2libGUpIHtcbiAgICAgICAgICBzZXRSZXZlYWxDaGlsZCh2aXNpYmxlKTtcbiAgICAgICAgfVxuICAgICAgfX1cbiAgICAgICQ9eyhzKSA9PiB7XG4gICAgICAgIGNvbnN0IGNsaWNrSGFuZGxlciA9IEd0ay5HZXN0dXJlQ2xpY2submV3KCk7XG5cbiAgICAgICAgY2xpY2tIYW5kbGVyLnNldF9idXR0b24oMCk7IC8vIGxpc3RlbiBhbnkgYnV0dG9uXG5cbiAgICAgICAgY2xpY2tIYW5kbGVyLmNvbm5lY3QoXCJyZWxlYXNlZFwiLCAoX2dlc3R1cmUsIF9uX3ByZXNzLCB4LCB5KSA9PiB7XG4gICAgICAgICAgbGV0IHd4ID0geCxcbiAgICAgICAgICAgIHd5ID0geTtcbiAgICAgICAgICBjb25zdCByZXN1bHQgPSB3aW5kb3dJbnN0YW5jZVxuICAgICAgICAgICAgLmdldCgpXG4gICAgICAgICAgICA/LnRyYW5zbGF0ZV9jb29yZGluYXRlcyh3aW5kb3dJbnN0YW5jZS5nZXQoKSEsIHgsIHkpO1xuXG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocmVzdWx0KSAmJiByZXN1bHRbMF0pIHtcbiAgICAgICAgICAgIHd4ID0gcmVzdWx0WzFdO1xuICAgICAgICAgICAgd3kgPSByZXN1bHRbMl07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgaXNJbnNpZGUgPSAod2lkZ2V0OiBHdGsuV2lkZ2V0IHwgdW5kZWZpbmVkKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXdpZGdldCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgY29uc3QgYWxsb2MgPSB3aWRnZXQuZ2V0X2FsbG9jYXRpb24oKTtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgIHd4ID49IGFsbG9jLnggJiZcbiAgICAgICAgICAgICAgd3kgPj0gYWxsb2MueSAmJlxuICAgICAgICAgICAgICB3eCA8PSBhbGxvYy54ICsgYWxsb2Mud2lkdGggJiZcbiAgICAgICAgICAgICAgd3kgPD0gYWxsb2MueSArIGFsbG9jLmhlaWdodFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgaWYgKCFpc0luc2lkZShzZWFyY2hFbnRyeS5nZXQoKSkgJiYgIWlzSW5zaWRlKGxpc3RWaWV3LmdldCgpKSkge1xuICAgICAgICAgICAgaGFuZGxlQ2xvc2UoZmFsc2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcy5hZGRfY29udHJvbGxlcihjbGlja0hhbmRsZXIpO1xuICAgICAgICBzZXRXaW5kb3dJbnN0YW5jZShzKTtcbiAgICAgIH19XG4gICAgPlxuICAgICAgPEd0ay5SZXZlYWxlclxuICAgICAgICByZXZlYWxDaGlsZD17cmV2ZWFsQ2hpbGR9XG4gICAgICAgIHRyYW5zaXRpb25fdHlwZT17R3RrLlJldmVhbGVyVHJhbnNpdGlvblR5cGUuU0xJREVfVVB9XG4gICAgICAgIHRyYW5zaXRpb25EdXJhdGlvbj17dHJhbnNpdGlvbkR1cmF0aW9ufVxuICAgICAgICB3aWR0aFJlcXVlc3Q9ezgwMH1cbiAgICAgICAgaGVpZ2h0UmVxdWVzdD17ODAwfVxuICAgICAgPlxuICAgICAgICA8Ym94XG4gICAgICAgICAgY2xhc3M9e3JldmVhbENoaWxkKCh2KSA9PiAodiA/IFwiTWFpblNlYXJjaFwiIDogXCJNYWluU2VhcmNoIGhpZGVcIikpfVxuICAgICAgICAgIHZhbGlnbj17R3RrLkFsaWduLkVORH1cbiAgICAgICAgPlxuICAgICAgICAgIDxNYWluU2VhcmNoXG4gICAgICAgICAgICBsaXN0Vmlldz17bGlzdFZpZXd9XG4gICAgICAgICAgICBzZXRMaXN0Vmlldz17c2V0TGlzdFZpZXd9XG4gICAgICAgICAgICBzZXRTZWFyY2hFbnRyeT17c2V0U2VhcmNoRW50cnl9XG4gICAgICAgICAgICBoYW5kbGVDbG9zZT17aGFuZGxlQ2xvc2V9XG4gICAgICAgICAgICBhcHBzPXthcHBzfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvYm94PlxuICAgICAgPC9HdGsuUmV2ZWFsZXI+XG4gICAgPC93aW5kb3c+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBNYWluU2VhcmNoV2luZG93O1xuIiwgImltcG9ydCBHT2JqZWN0LCB7IHByb3BlcnR5LCByZWdpc3RlciB9IGZyb20gXCJhZ3MvZ29iamVjdFwiO1xuXG50eXBlIFNlbGVjdENhbGxiYWNrID0gKHNlbGY6IE1haW5TZWFyY2hMaXN0SXRlbU9iamVjdCkgPT4gdm9pZDtcblxuQHJlZ2lzdGVyKHsgR1R5cGVOYW1lOiBcIk1haW5TZWFyY2hMaXN0SXRlbVwiIH0pXG5leHBvcnQgY2xhc3MgTWFpblNlYXJjaExpc3RJdGVtT2JqZWN0IGV4dGVuZHMgR09iamVjdC5PYmplY3Qge1xuICBAcHJvcGVydHkoU3RyaW5nKSB0ZXh0ID0gXCJcIjtcbiAgQHByb3BlcnR5KFN0cmluZykgZGVzYyA9IFwiXCI7XG4gIEBwcm9wZXJ0eShTdHJpbmcpIGRlc2t0b3BJY29uID0gXCJcIjtcblxuICBwcml2YXRlIF9vblNlbGVjdD86IFNlbGVjdENhbGxiYWNrO1xuXG4gIGNvbnN0cnVjdG9yKHtcbiAgICBkZXNrdG9wSWNvbixcbiAgICB0ZXh0LFxuICAgIG9uU2VsZWN0LFxuICAgIGRlc2MsXG4gIH06IHtcbiAgICB0ZXh0OiBzdHJpbmc7XG4gICAgZGVza3RvcEljb246IHN0cmluZztcbiAgICBkZXNjOiBzdHJpbmc7XG5cbiAgICBvblNlbGVjdDogU2VsZWN0Q2FsbGJhY2s7XG4gIH0pIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy50ZXh0ID0gdGV4dDtcbiAgICB0aGlzLmRlc2t0b3BJY29uID0gZGVza3RvcEljb247XG4gICAgdGhpcy5kZXNjID0gZGVzYztcbiAgICB0aGlzLl9vblNlbGVjdCA9IG9uU2VsZWN0O1xuICB9XG5cbiAgb25TZWxlY3QoKSB7XG4gICAgdGhpcy5fb25TZWxlY3Q/Lih0aGlzKTtcbiAgfVxufVxuIiwgImltcG9ydCB7IEFjY2Vzc29yLCBjcmVhdGVDb250ZXh0LCBTZXR0ZXIgfSBmcm9tIFwiYWdzXCI7XG5cbmV4cG9ydCBjb25zdCBNYWluU2VhcmNoV2luZG93Q29udGV4dCA9IGNyZWF0ZUNvbnRleHQ8e1xuICB2aXNpYmxlOiBBY2Nlc3Nvcjxib29sZWFuPiB8IHVuZGVmaW5lZDtcbiAgc2V0VmlzaWJsZTogU2V0dGVyPGJvb2xlYW4+IHwgdW5kZWZpbmVkO1xufT4oeyBzZXRWaXNpYmxlOiB1bmRlZmluZWQsIHZpc2libGU6IHVuZGVmaW5lZCB9KTtcbiIsICJpbXBvcnQgeyBjcmVhdGVCaW5kaW5nLCBjcmVhdGVDb21wdXRlZCwgY3JlYXRlU3RhdGUgfSBmcm9tIFwiYWdzXCI7XG5pbXBvcnQgeyBBc3RhbCwgR2RrLCBHdGsgfSBmcm9tIFwiYWdzL2d0azRcIjtcbmltcG9ydCBhcHAgZnJvbSBcImFncy9ndGs0L2FwcFwiO1xuaW1wb3J0IHsgZ2V0SXNDdXJyZW50TW9uaXRvciB9IGZyb20gXCIuLi8uLi91dGlscy9pcy1jdXJyZW50LW1vbml0b3JcIjtcbmltcG9ydCBBc3RhbEh5cHJsYW5kIGZyb20gXCJnaTovL0FzdGFsSHlwcmxhbmQ/dmVyc2lvbj0wLjFcIjtcbmltcG9ydCB7IExvZ291dFBhbmVsV2luZG93Q29udGV4dCB9IGZyb20gXCIuLi8uLi9jb250ZXh0L0xvZ291dFBhbmVsV2luZG93Q29udGV4dFwiO1xuaW1wb3J0IHsgd2luZG93TmFtZXMgfSBmcm9tIFwiLi4vLi4vY29uc3RhbnRzL3dpbmRvd3NcIjtcbmltcG9ydCB7IHNwYWNpbmcgfSBmcm9tIFwiLi4vLi4vY29uc3RhbnRzL3RoZW1lL3NwYWNpbmdcIjtcbmltcG9ydCB7IGV4ZWNBc3luYyB9IGZyb20gXCJhZ3MvcHJvY2Vzc1wiO1xuXG5jb25zdCBMb2dvdXRCdG4gPSAoe1xuICBvbkNvbmZpcm0sXG4gIGljb25OYW1lLFxuICBsYWJlbCxcbn06IHtcbiAgb25Db25maXJtOiAoKSA9PiB2b2lkO1xuICBpY29uTmFtZTogc3RyaW5nO1xuICBsYWJlbDogc3RyaW5nO1xufSkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxHdGsuRmxvd0JveENoaWxkXG4gICAgICBvbkFjdGl2YXRlPXsoKSA9PiB7XG4gICAgICAgIG9uQ29uZmlybSgpO1xuICAgICAgfX1cbiAgICA+XG4gICAgICA8Ym94PlxuICAgICAgICA8aW1hZ2UgaWNvbk5hbWU9e2ljb25OYW1lfSBwaXhlbFNpemU9ezEwMH0gLz5cbiAgICAgICAgPGxhYmVsIGxhYmVsPXtsYWJlbH0gdmlzaWJsZT17ZmFsc2V9IC8+XG4gICAgICA8L2JveD5cbiAgICA8L0d0ay5GbG93Qm94Q2hpbGQ+XG4gICk7XG59O1xuXG5jb25zdCBMb2dvdXRQYW5lbFdpbmRvdyA9ICh7IGdka21vbml0b3IgfTogeyBnZGttb25pdG9yOiBHZGsuTW9uaXRvciB9KSA9PiB7XG4gIGNvbnN0IHsgQk9UVE9NLCBMRUZULCBSSUdIVCwgVE9QIH0gPSBBc3RhbC5XaW5kb3dBbmNob3I7XG4gIGNvbnN0IHsgc2V0VmlzaWJsZSwgdmlzaWJsZSB9ID0gTG9nb3V0UGFuZWxXaW5kb3dDb250ZXh0LnVzZSgpO1xuICBjb25zdCBbc2VsZWN0ZWRMYWJlbCwgc2V0U2VsZWN0ZWRMYWJlbF0gPSBjcmVhdGVTdGF0ZTxzdHJpbmcgfCBudWxsPihudWxsKTtcblxuICBjb25zdCBoeXBybGFuZCA9IEFzdGFsSHlwcmxhbmQuZ2V0X2RlZmF1bHQoKTtcblxuICBjb25zdCBmb2N1c2VkTW9uaXRvciA9IGNyZWF0ZUJpbmRpbmcoaHlwcmxhbmQsIFwiZm9jdXNlZE1vbml0b3JcIik7XG5cbiAgY29uc3QgaXNDdXJyZW50TW9uaXRvciA9IGNyZWF0ZUNvbXB1dGVkKFtmb2N1c2VkTW9uaXRvciFdLCAobSkgPT4ge1xuICAgIHJldHVybiBnZXRJc0N1cnJlbnRNb25pdG9yKG0sIGdka21vbml0b3IpO1xuICB9KTtcblxuICBjb25zdCBvbkNsb3NlID0gKCkgPT4gc2V0VmlzaWJsZT8uKGZhbHNlKTtcblxuICBjb25zdCBvbkNvbmZpcm0gPSBhc3luYyAoY29tbWFuZDogc3RyaW5nKSA9PiB7XG4gICAgYXdhaXQgZXhlY0FzeW5jKGNvbW1hbmQpO1xuICAgIG9uQ2xvc2UoKTtcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDx3aW5kb3dcbiAgICAgIHZpc2libGU9e3Zpc2libGV9XG4gICAgICBnZGttb25pdG9yPXtnZGttb25pdG9yfVxuICAgICAgbmFtZT17d2luZG93TmFtZXMuTG9nb3V0UGFuZWxXaW5kb3d9XG4gICAgICBjbGFzcz1cIkxvZ291dFBhbmVsV2luZG93XCJcbiAgICAgICQ9eyhzKSA9PiB7XG4gICAgICAgIGNvbnN0IGtleUNvbnRyb2xsZXIgPSBHdGsuRXZlbnRDb250cm9sbGVyS2V5Lm5ldygpO1xuXG4gICAgICAgIGtleUNvbnRyb2xsZXIuY29ubmVjdChcImtleS1yZWxlYXNlZFwiLCAoXywga2V5dmFsKSA9PiB7XG4gICAgICAgICAgaWYgKGtleXZhbCAhPT0gR2RrLktFWV9Fc2NhcGUpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBvbkNsb3NlKCk7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHMuYWRkX2NvbnRyb2xsZXIoa2V5Q29udHJvbGxlcik7XG4gICAgICB9fVxuICAgICAgZXhjbHVzaXZpdHk9e0FzdGFsLkV4Y2x1c2l2aXR5LklHTk9SRX1cbiAgICAgIGFuY2hvcj17Qk9UVE9NIHwgTEVGVCB8IFJJR0hUIHwgVE9QfVxuICAgICAga2V5bW9kZT17aXNDdXJyZW50TW9uaXRvcigodikgPT5cbiAgICAgICAgdiA/IEFzdGFsLktleW1vZGUuRVhDTFVTSVZFIDogQXN0YWwuS2V5bW9kZS5OT05FLFxuICAgICAgKX1cbiAgICAgIGFwcGxpY2F0aW9uPXthcHB9XG4gICAgPlxuICAgICAgPGJveCBoZXhwYW5kIHZleHBhbmQgdmlzaWJsZT17aXNDdXJyZW50TW9uaXRvcn0+XG4gICAgICAgIDxib3hcbiAgICAgICAgICBvcmllbnRhdGlvbj17R3RrLk9yaWVudGF0aW9uLlZFUlRJQ0FMfVxuICAgICAgICAgIGhhbGlnbj17R3RrLkFsaWduLkNFTlRFUn1cbiAgICAgICAgICB2YWxpZ249e0d0ay5BbGlnbi5DRU5URVJ9XG4gICAgICAgICAgc3BhY2luZz17c3BhY2luZy54TGFyZ2V9XG4gICAgICAgID5cbiAgICAgICAgICA8R3RrLkZsb3dCb3hcbiAgICAgICAgICAgIGNsYXNzPVwiTG9nb3V0Rmxvd0JveFwiXG4gICAgICAgICAgICB2YWxpZ249e0d0ay5BbGlnbi5DRU5URVJ9XG4gICAgICAgICAgICBoYWxpZ249e0d0ay5BbGlnbi5DRU5URVJ9XG4gICAgICAgICAgICBoZXhwYW5kXG4gICAgICAgICAgICB2ZXhwYW5kXG4gICAgICAgICAgICBjb2x1bW5TcGFjaW5nPXs0MH1cbiAgICAgICAgICAgIHJvd1NwYWNpbmc9ezQwfVxuICAgICAgICAgICAgbWF4X2NoaWxkcmVuX3Blcl9saW5lPXszfVxuICAgICAgICAgICAgYWN0aXZhdGVPblNpbmdsZUNsaWNrPXtmYWxzZX1cbiAgICAgICAgICAgIG9uQ2hpbGRBY3RpdmF0ZWQ9eyhfcywgc2VsZWN0ZWQpID0+IHtcbiAgICAgICAgICAgICAgLy8gbmVlZGVkIGZvciBjbGlja1xuICAgICAgICAgICAgICBzZWxlY3RlZC5hY3RpdmF0ZSgpO1xuICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIG9uU2VsZWN0ZWRDaGlsZHJlbkNoYW5nZWQ9eyhzKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkID0gcy5nZXRfc2VsZWN0ZWRfY2hpbGRyZW4oKT8uWzBdO1xuXG4gICAgICAgICAgICAgIGlmICghc2VsZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2V0U2VsZWN0ZWRMYWJlbChudWxsKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGNvbnN0IGxhYmVsID0gc2VsZWN0ZWQuZ2V0X2NoaWxkKCk/LmdldF9sYXN0X2NoaWxkKCk7XG5cbiAgICAgICAgICAgICAgaWYgKCFsYWJlbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzZXRTZWxlY3RlZExhYmVsKG51bGwpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgY29uc3QgdGV4dCA9IChsYWJlbCBhcyBHdGsuTGFiZWwpLmdldF9sYWJlbCgpO1xuXG4gICAgICAgICAgICAgIHNldFNlbGVjdGVkTGFiZWwodGV4dCk7XG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgJD17KHMpID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgZmlyc3QgPSAoXG4gICAgICAgICAgICAgICAgPExvZ291dEJ0blxuICAgICAgICAgICAgICAgICAgaWNvbk5hbWU9XCJwYWRsb2NrMi1zeW1ib2xpY1wiXG4gICAgICAgICAgICAgICAgICBvbkNvbmZpcm09eygpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgb25Db25maXJtKFwibG9naW5jdGwgbG9jay1zZXNzaW9uXCIpO1xuICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgIGxhYmVsPVwiTG9ja1wiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICAgIHMuYXBwZW5kKGZpcnN0KTtcbiAgICAgICAgICAgICAgcy5hcHBlbmQoXG4gICAgICAgICAgICAgICAgPExvZ291dEJ0blxuICAgICAgICAgICAgICAgICAgaWNvbk5hbWU9XCJsb2ctb3V0LXN5bWJvbGljXCJcbiAgICAgICAgICAgICAgICAgIG9uQ29uZmlybT17KCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBvbkNvbmZpcm0oXCJoeXByY3RsIGRpc3BhdGNoIGV4aXRcIik7XG4gICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgbGFiZWw9XCJMb2dvdXRcIlxuICAgICAgICAgICAgICAgIC8+LFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBzLmFwcGVuZChcbiAgICAgICAgICAgICAgICA8TG9nb3V0QnRuXG4gICAgICAgICAgICAgICAgICBpY29uTmFtZT1cIm1vb24tb3V0bGluZS1zeW1ib2xpY1wiXG4gICAgICAgICAgICAgICAgICBvbkNvbmZpcm09eygpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgb25Db25maXJtKFwic3lzdGVtY3RsIHN1c3BlbmRcIik7XG4gICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgbGFiZWw9XCJTdXNwZW5kXCJcbiAgICAgICAgICAgICAgICAvPixcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgcy5hcHBlbmQoXG4gICAgICAgICAgICAgICAgPExvZ291dEJ0blxuICAgICAgICAgICAgICAgICAgaWNvbk5hbWU9XCJzbm93LXN5bWJvbGljXCJcbiAgICAgICAgICAgICAgICAgIG9uQ29uZmlybT17KCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBvbkNvbmZpcm0oXCJzeXN0ZW1jdGwgaGliZXJuYXRlXCIpO1xuICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgIGxhYmVsPVwiSGliZXJuYXRlXCJcbiAgICAgICAgICAgICAgICAvPixcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgcy5hcHBlbmQoXG4gICAgICAgICAgICAgICAgPExvZ291dEJ0blxuICAgICAgICAgICAgICAgICAgaWNvbk5hbWU9XCJ0dXJuLW9mZi1zeW1ib2xpY1wiXG4gICAgICAgICAgICAgICAgICBvbkNvbmZpcm09eygpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgb25Db25maXJtKFwic3lzdGVtY3RsIHBvd2Vyb2ZmXCIpO1xuICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgIGxhYmVsPVwiU2h1dGRvd25cIlxuICAgICAgICAgICAgICAgIC8+LFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBzLmFwcGVuZChcbiAgICAgICAgICAgICAgICA8TG9nb3V0QnRuXG4gICAgICAgICAgICAgICAgICBpY29uTmFtZT1cImFycm93LWNpcmN1bGFyLWJvdHRvbS1yaWdodC1zeW1ib2xpY1wiXG4gICAgICAgICAgICAgICAgICBvbkNvbmZpcm09eygpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgb25Db25maXJtKFwic3lzdGVtY3RsIHJlYm9vdFwiKTtcbiAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICBsYWJlbD1cIlJlc3RhcnRcIlxuICAgICAgICAgICAgICAgIC8+LFxuICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgIHMuZ3JhYl9mb2N1cygpO1xuXG4gICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgICAgICAgcy5zZWxlY3RfY2hpbGQoZmlyc3QpO1xuICAgICAgICAgICAgfX1cbiAgICAgICAgICAvPlxuXG4gICAgICAgICAgPGxhYmVsXG4gICAgICAgICAgICBsYWJlbD17c2VsZWN0ZWRMYWJlbCgodikgPT4gdiB8fCBcIlwiKX1cbiAgICAgICAgICAgIGNsYXNzPVwiTG9nb3V0UGFuZWx3aW5kb3dMYWJlbFwiXG4gICAgICAgICAgLz5cbiAgICAgICAgPC9ib3g+XG4gICAgICA8L2JveD5cbiAgICA8L3dpbmRvdz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IExvZ291dFBhbmVsV2luZG93O1xuIiwgImltcG9ydCB7IEFjY2Vzc29yLCBjcmVhdGVCaW5kaW5nLCBjcmVhdGVDb21wdXRlZCwgRm9yIH0gZnJvbSBcImFnc1wiO1xuaW1wb3J0IHsgQXN0YWwsIEdkaywgR3RrIH0gZnJvbSBcImFncy9ndGs0XCI7XG5pbXBvcnQgYXBwIGZyb20gXCJhZ3MvZ3RrNC9hcHBcIjtcbmltcG9ydCBIeXBybGFuZCBmcm9tIFwiZ2k6Ly9Bc3RhbEh5cHJsYW5kXCI7XG5pbXBvcnQgeyBnZXRJc0N1cnJlbnRNb25pdG9yIH0gZnJvbSBcIi4uLy4uL3V0aWxzL2lzLWN1cnJlbnQtbW9uaXRvclwiO1xuaW1wb3J0IHsgc3BhY2luZyB9IGZyb20gXCIuLi8uLi9jb25zdGFudHMvdGhlbWUvc3BhY2luZ1wiO1xuaW1wb3J0IHsgd2luZG93TmFtZXMgfSBmcm9tIFwiLi4vLi4vY29uc3RhbnRzL3dpbmRvd3NcIjtcbmltcG9ydCB7IHVzZU5vdGlmaWNhdGlvbnMgfSBmcm9tIFwiLi4vLi4vaG9va3MvdXNlTm90aWZpY2F0aW9uc1wiO1xuaW1wb3J0IE5vdGlmaWNhdGlvbkxpc3RJdGVtIGZyb20gXCIuL05vdGlmaWNhdGlvbkxpc3RJdGVtXCI7XG5cbmNvbnN0IHdhbnRlZFdpZHRoID0gNDAwO1xuXG5jb25zdCBOb3RpZmljYXRpb25XaW5kb3cgPSAoeyBnZGttb25pdG9yIH06IHsgZ2RrbW9uaXRvcjogR2RrLk1vbml0b3IgfSkgPT4ge1xuICBjb25zdCB7IFRPUCwgUklHSFQgfSA9IEFzdGFsLldpbmRvd0FuY2hvcjtcbiAgY29uc3QgeyBub3RpZmljYXRpb25zIH0gPSB1c2VOb3RpZmljYXRpb25zKHsgcmVtb3ZlT25FeHBpcmF0aW9uOiB0cnVlIH0pO1xuXG4gIGNvbnN0IGh5cHJsYW5kID0gSHlwcmxhbmQuZ2V0X2RlZmF1bHQoKTtcblxuICBjb25zdCBmb2N1c2VkTW9uaXRvciA9IGNyZWF0ZUJpbmRpbmcoaHlwcmxhbmQsIFwiZm9jdXNlZE1vbml0b3JcIik7XG5cbiAgY29uc3QgaXNWaXNpYmxlID0gY3JlYXRlQ29tcHV0ZWQoXG4gICAgW2ZvY3VzZWRNb25pdG9yLCBub3RpZmljYXRpb25zXSxcbiAgICAobSwgbm90aWZpY2F0aW9ucykgPT4ge1xuICAgICAgcmV0dXJuIGdldElzQ3VycmVudE1vbml0b3IobSwgZ2RrbW9uaXRvcikgJiYgbm90aWZpY2F0aW9ucy5sZW5ndGggPiAwO1xuICAgIH0sXG4gICk7XG5cbiAgcmV0dXJuIChcbiAgICA8d2luZG93XG4gICAgICB2aXNpYmxlPXtpc1Zpc2libGV9XG4gICAgICBuYW1lPXt3aW5kb3dOYW1lcy5Ob3RpZmljYXRpb25XaW5kb3d9XG4gICAgICBjbGFzcz1cIk5vdGlmaWNhdGlvbldpbmRvd1wiXG4gICAgICBnZGttb25pdG9yPXtnZGttb25pdG9yfVxuICAgICAgZXhjbHVzaXZpdHk9e0FzdGFsLkV4Y2x1c2l2aXR5Lk5PUk1BTH1cbiAgICAgIGFuY2hvcj17VE9QIHwgUklHSFR9XG4gICAgICBhcHBsaWNhdGlvbj17YXBwfVxuICAgID5cbiAgICAgIDxib3hcbiAgICAgICAgb3JpZW50YXRpb249e0d0ay5PcmllbnRhdGlvbi5WRVJUSUNBTH1cbiAgICAgICAgc3BhY2luZz17c3BhY2luZy5ub3JtYWx9XG4gICAgICAgIHdpZHRoUmVxdWVzdD17d2FudGVkV2lkdGh9XG4gICAgICA+XG4gICAgICAgIDxGb3IgZWFjaD17bm90aWZpY2F0aW9uc30+XG4gICAgICAgICAgeyhpdGVtKSA9PiA8Tm90aWZpY2F0aW9uTGlzdEl0ZW0gaXRlbT17aXRlbX0gLz59XG4gICAgICAgIDwvRm9yPlxuICAgICAgPC9ib3g+XG4gICAgPC93aW5kb3c+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBOb3RpZmljYXRpb25XaW5kb3c7XG4iLCAiLy8gdGhpcyBpcyBhIGhhY2sgdG8gZml4IGFuIGlzc3VlIHdpdGggbm90aWZpY2F0aW9ucywgdGhlIGRhZW1vbiByZWNlaXZlcyB0aGUgbm90aWZpY2F0aW9uXG5cbmltcG9ydCBHaW8gZnJvbSBcImdpOi8vR2lvXCI7XG5pbXBvcnQgR0xpYiBmcm9tIFwiZ2k6Ly9HTGliXCI7XG5cbi8vIGJ1dCB0aGUgYXBwIGRvZXNuJ3QgZ2V0IHVwZGF0ZWQsIGl0IGdldHMgc3R1Y2sgaW4gYW4gb2xkIHN0YXRlLCByZW1vdmluZyB0aGUgZmlsZSB3aGVuIHN0YXJ0aW5nIHRoZSBhcHAgZml4ZXMgaXRcbmV4cG9ydCBjb25zdCByZW1vdmVOb3RpZmljYXRpb25zRmlsZUxpc3QgPSAoKSA9PiB7XG4gIGxldCBwYXRoID0gR0xpYi5idWlsZF9maWxlbmFtZXYoW1xuICAgIEdMaWIuZ2V0X3VzZXJfc3RhdGVfZGlyKCksXG4gICAgXCJhc3RhbFwiLFxuICAgIFwibm90aWZkXCIsXG4gICAgXCJub3RpZmljYXRpb25zLmpzb25cIixcbiAgXSk7XG5cbiAgbGV0IGZpbGUgPSBHaW8uRmlsZS5uZXdfZm9yX3BhdGgocGF0aCk7XG5cbiAgdHJ5IHtcbiAgICBpZiAoZmlsZS5xdWVyeV9leGlzdHMobnVsbCkpIHtcbiAgICAgIGZpbGUuZGVsZXRlKG51bGwpO1xuICAgICAgcHJpbnQoXCJOb3RpZmljYXRpb25zIHN0YXRlIGZpbGUgZGVsZXRlZCBzdWNjZXNzZnVsbHkuXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcmludChcIk5vdGlmaWNhdGlvbnMgc3RhdGUgZmlsZSBkb2VzIG5vdCBleGlzdC5cIik7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgcHJpbnQoYEVycm9yIGRlbGV0aW5nIGZpbGU6ICR7KGUgYXMgeyBtZXNzYWdlOiBzdHJpbmcgfSkubWVzc2FnZX1gKTtcbiAgfVxufTtcbiIsICJpbXBvcnQgYXBwIGZyb20gXCJhZ3MvZ3RrNC9hcHBcIjtcbmltcG9ydCBzdHlsZSBmcm9tIFwiLi9zdHlsZS5zY3NzXCI7XG5pbXBvcnQgQmFyIGZyb20gXCIuL3NyYy93aWRnZXQvQmFyXCI7XG5pbXBvcnQgTWFpblNlYXJjaFdpbmRvdyBmcm9tIFwiLi9zcmMvd2lkZ2V0L01haW5TZWFyY2gvTWFpblNlYXJjaFdpbmRvd1wiO1xuaW1wb3J0IHsgTWFpblNlYXJjaFdpbmRvd0NvbnRleHQgfSBmcm9tIFwiLi9zcmMvY29udGV4dC9NYWluU2VhcmNoV2luZG93Q29udGV4dFwiO1xuaW1wb3J0IHsgY3JlYXRlU3RhdGUgfSBmcm9tIFwiYWdzXCI7XG5pbXBvcnQgeyB3aW5kb3dOYW1lcyB9IGZyb20gXCIuL3NyYy9jb25zdGFudHMvd2luZG93c1wiO1xuaW1wb3J0IHsgZ2V0S2V5Ym9hcmQgfSBmcm9tIFwiLi9zcmMvdXRpbHMva2V5Ym9hcmRcIjtcbmltcG9ydCBMb2dvdXRQYW5lbFdpbmRvdyBmcm9tIFwiLi9zcmMvd2lkZ2V0L0xvZ291dFBhbmVsL0xvZ291dFBhbmVsV2luZG93XCI7XG5pbXBvcnQgeyBMb2dvdXRQYW5lbFdpbmRvd0NvbnRleHQgfSBmcm9tIFwiLi9zcmMvY29udGV4dC9Mb2dvdXRQYW5lbFdpbmRvd0NvbnRleHRcIjtcbmltcG9ydCBOb3RpZmljYXRpb25XaW5kb3cgZnJvbSBcIi4vc3JjL3dpZGdldC9Ob3RpZmljYXRpb25zL05vdGlmaWNhdGlvbldpbmRvd1wiO1xuaW1wb3J0IHsgcmVtb3ZlTm90aWZpY2F0aW9uc0ZpbGVMaXN0IH0gZnJvbSBcIi4vc3JjL3V0aWxzL25vdGlmaWNhdGlvbnNcIjtcblxuY29uc3QgW2lzVmlzaWJsZU1haW5TZWFyY2gsIHNldElzVmlzaWJsZU1haW5TZWFyY2hdID0gY3JlYXRlU3RhdGUoZmFsc2UpO1xuY29uc3QgW2lzVmlzaWJsZUxvZ291dFdpbmRvdywgc2V0SXNWaXNpYmxlTG9nb3V0V2luZG93XSA9IGNyZWF0ZVN0YXRlKGZhbHNlKTtcbmNvbnN0IFtrZXlib2FyZCwgc2V0S2V5Ym9hcmRdID0gY3JlYXRlU3RhdGUoZ2V0S2V5Ym9hcmQoKSk7XG5cbmFwcC5zdGFydCh7XG4gIGNzczogc3R5bGUsXG4gIGljb25zOiBcIi9ob21lL2pvc2UvLmNvbmZpZy9teS1hZ3MvaWNvbnNcIixcbiAgcmVxdWVzdEhhbmRsZXI6IChyZXF1ZXN0LCByZXMpID0+IHtcbiAgICBpZiAocmVxdWVzdCA9PT0gd2luZG93TmFtZXMuTWFpblNlYXJjaFdpbmRvdykge1xuICAgICAgc2V0SXNWaXNpYmxlTWFpblNlYXJjaCh0cnVlKTtcbiAgICAgIHJlcyhgb3BlbmVkIHdpbmRvd2ApO1xuICAgICAgcmV0dXJuO1xuICAgIH0gZWxzZSBpZiAocmVxdWVzdCA9PT0gXCJrZXlib2FyZC1jaGFuZ2VkXCIpIHtcbiAgICAgIHNldEtleWJvYXJkKGdldEtleWJvYXJkKCkpO1xuICAgICAgcmVzKFwia2V5Ym9hcmQgY2hhbmdlZFwiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByZXMoXCJ1bmtub3duIGNvbW1hbmRcIik7XG4gIH0sXG4gIG1haW4oKSB7XG4gICAgcmVtb3ZlTm90aWZpY2F0aW9uc0ZpbGVMaXN0KCk7XG5cbiAgICBhcHAuZ2V0X21vbml0b3JzKCkubWFwKChtb25pdG9yLCBpKSA9PiB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8TWFpblNlYXJjaFdpbmRvd0NvbnRleHRcbiAgICAgICAgICB2YWx1ZT17e1xuICAgICAgICAgICAgdmlzaWJsZTogaXNWaXNpYmxlTWFpblNlYXJjaCxcbiAgICAgICAgICAgIHNldFZpc2libGU6IHNldElzVmlzaWJsZU1haW5TZWFyY2gsXG4gICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgIHsoKSA9PiAoXG4gICAgICAgICAgICA8TG9nb3V0UGFuZWxXaW5kb3dDb250ZXh0XG4gICAgICAgICAgICAgIHZhbHVlPXt7XG4gICAgICAgICAgICAgICAgdmlzaWJsZTogaXNWaXNpYmxlTG9nb3V0V2luZG93LFxuICAgICAgICAgICAgICAgIHNldFZpc2libGU6IHNldElzVmlzaWJsZUxvZ291dFdpbmRvdyxcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgeygpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICAgICAgPEJhclxuICAgICAgICAgICAgICAgICAgICAgIGdka21vbml0b3I9e21vbml0b3J9XG4gICAgICAgICAgICAgICAgICAgICAgaW5kZXg9e2l9XG4gICAgICAgICAgICAgICAgICAgICAga2V5Ym9hcmQ9e2tleWJvYXJkfVxuICAgICAgICAgICAgICAgICAgICAgIHNldEtleWJvYXJkPXtzZXRLZXlib2FyZH1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgPE1haW5TZWFyY2hXaW5kb3cgZ2RrbW9uaXRvcj17bW9uaXRvcn0gLz5cbiAgICAgICAgICAgICAgICAgICAgPExvZ291dFBhbmVsV2luZG93IGdka21vbml0b3I9e21vbml0b3J9IC8+XG4gICAgICAgICAgICAgICAgICAgIDxOb3RpZmljYXRpb25XaW5kb3cgZ2RrbW9uaXRvcj17bW9uaXRvcn0gLz5cbiAgICAgICAgICAgICAgICAgIDwvPlxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH19XG4gICAgICAgICAgICA8L0xvZ291dFBhbmVsV2luZG93Q29udGV4dD5cbiAgICAgICAgICApfVxuICAgICAgICA8L01haW5TZWFyY2hXaW5kb3dDb250ZXh0PlxuICAgICAgKTtcbiAgICB9KTtcbiAgfSxcbn0pO1xuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLE9BQU8sVUFBVTtBQUNqQixPQUFP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QyxrQkFBYyxRQUFRLGNBQWNBLEVBQUMsQ0FBQztBQUV0QyxVQUFNLFFBQVEsc0JBQXNCLFNBQVMsY0FBYztBQUMzRCxxQkFBaUIsS0FBSztBQUFBLEVBQ3hCLENBQUM7QUFFRCxVQUFRLElBQUksRUFBRSxRQUFRLENBQUMsV0FBVztBQUNoQztBQUFBLE1BQ0U7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0EsUUFBUTtBQUFBLE1BQ1I7QUFBQSxNQUNBO0FBQUEsSUFDRjtBQUNBO0FBQUEsTUFDRTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQSxRQUFRO0FBQUEsTUFDUjtBQUFBLE1BQ0E7QUFBQSxJQUNGO0FBQ0E7QUFBQSxNQUNFO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBLFFBQVE7QUFBQSxNQUNSO0FBQUEsTUFDQTtBQUFBLElBQ0Y7QUFDQTtBQUFBLE1BQ0U7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0EsUUFBUTtBQUFBLE1BQ1I7QUFBQSxNQUNBO0FBQUEsSUFDRjtBQUNBO0FBQUEsTUFDRTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQSxRQUFRO0FBQUEsTUFDUjtBQUFBLE1BQ0E7QUFBQSxJQUNGO0FBQ0E7QUFBQSxNQUNFO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBLFFBQVE7QUFBQSxNQUNSO0FBQUEsTUFDQTtBQUFBLElBQ0Y7QUFDQTtBQUFBLE1BQ0U7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0EsUUFBUTtBQUFBLE1BQ1I7QUFBQSxNQUNBO0FBQUEsSUFDRjtBQUNBO0FBQUEsTUFDRTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQSxRQUFRO0FBQUEsTUFDUjtBQUFBLE1BQ0E7QUFBQSxJQUNGO0FBQ0E7QUFBQSxNQUNFO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBLFFBQVE7QUFBQSxNQUNSO0FBQUEsTUFDQTtBQUFBLElBQ0Y7QUFDQTtBQUFBLE1BQ0U7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0EsUUFBUTtBQUFBLE1BQ1I7QUFBQSxNQUNBO0FBQUEsSUFDRjtBQUNBO0FBQUEsTUFDRTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQSxRQUFRO0FBQUEsTUFDUjtBQUFBLE1BQ0E7QUFBQSxJQUNGO0FBQ0E7QUFBQSxNQUNFO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBLFFBQVE7QUFBQSxNQUNSO0FBQUEsTUFDQTtBQUFBLElBQ0Y7QUFDQTtBQUFBLE1BQ0U7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0EsUUFBUTtBQUFBLE1BQ1I7QUFBQSxNQUNBO0FBQUEsSUFDRjtBQUVBLFdBQU87QUFBQSxNQUNMO0FBQUEsTUFDQSxrQkFBa0IsQ0FBQ0EsT0FBTTtBQUN2QiwwQkFBa0IsUUFBUSxrQkFBa0JBLEVBQUMsQ0FBQztBQUM5QyxtQkFBVyxRQUFRLFdBQVdBLEVBQUMsQ0FBQztBQUNoQyxzQkFBYyxRQUFRLGNBQWNBLEVBQUMsQ0FBQztBQUFBLE1BQ3hDLEdBQUcsaUJBQWlCO0FBQUEsSUFDdEI7QUFHQSxXQUFPLFFBQVEsbUJBQW1CLENBQUNBLE9BQU07QUFDdkMsWUFBTSxlQUF3QixnQkFBZ0JBLEVBQUM7QUFDL0MsVUFBSSxDQUFDLGFBQWM7QUFFbkIsd0JBQWtCQSxFQUFDO0FBQ25CLDRCQUFzQixXQUFXLFNBQVNILEtBQUk7QUFBQSxJQUNoRCxDQUFDO0FBQUEsRUFDSCxDQUFDO0FBRUQsUUFBTSx3QkFBd0IsUUFBUSxVQUFVLE1BQU07QUFDcEQsMEJBQXNCLFdBQVcsU0FBU0EsS0FBSTtBQUFBLEVBQ2hELENBQUM7QUFFRCxZQUFVLE1BQU07QUFDZCw4QkFBMEI7QUFDMUIsMEJBQXNCO0FBQUEsRUFDeEIsQ0FBQztBQUVELFNBQU87QUFBQSxJQUNMLFlBQVk7QUFBQSxNQUNWO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsSUFDRjtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBLFlBQVk7QUFBQSxFQUNkO0FBQ0Y7OztBS2pYQSxPQUFPLGVBQWU7OztBQ0R0QixPQUFPSSxVQUFTO0FBQ2hCLE9BQU9DLFdBQVU7QUFHakIsSUFBTSxPQUFPQyxNQUFLLE9BQU8sTUFBTTtBQUV4QixJQUFNLFlBQVksQ0FBQztBQUFBLEVBQ3hCO0FBQUEsRUFDQTtBQUNGLE1BR007QUFDSixTQUFPLE9BQU8sVUFBVSxTQUFTLElBQUksSUFBSTtBQUMzQztBQUVPLElBQU0sZ0JBQWdCLENBQUMsRUFBRSxLQUFLLE1BQXdCO0FBQzNELFNBQU8sTUFBTSxXQUFXLEdBQUc7QUFDN0I7QUFFQSxTQUFTLGFBQWEsTUFBd0I7QUFDNUMsUUFBTSxhQUFhQyxLQUFJLEtBQUssYUFBYSxJQUFJLEVBQUU7QUFBQSxJQUM3QztBQUFBLElBQ0FBLEtBQUksbUJBQW1CO0FBQUEsSUFDdkI7QUFBQSxFQUNGO0FBQ0EsUUFBTUMsZUFBd0IsQ0FBQztBQUMvQixTQUFPLE1BQU07QUFDWCxVQUFNLE9BQU8sV0FBVyxVQUFVLElBQUk7QUFDdEMsUUFBSSxDQUFDLE1BQU07QUFDVDtBQUFBLElBQ0Y7QUFDQSxJQUFBQSxhQUFZLEtBQUssR0FBRyxJQUFJLElBQUksS0FBSyxTQUFTLENBQUMsRUFBRTtBQUFBLEVBQy9DO0FBRUEsU0FBT0E7QUFDVDtBQUdBLElBQU0sZUFBZTtBQUVyQixJQUFNLFlBQWdELENBQUM7QUFDdkQsSUFBTSxPQUFPLG1CQUFtQixFQUFFLFNBQVMsUUFBUSxDQUFDO0FBQ3BELElBQU0sY0FBYyxhQUFhLG9CQUFvQjtBQUNyRCxJQUFNLGtCQUFrQixhQUFhLHdDQUF3QztBQUd0RSxTQUFTLFdBQVcsTUFBa0M7QUFFM0QsTUFBSSxDQUFDLE1BQU07QUFDVCxXQUFPO0FBQUEsRUFDVDtBQUdBLE1BQUksVUFBVSxJQUFJLEtBQUssVUFBVSxJQUFJLEtBQUssV0FBVztBQUNuRCxXQUFPLFVBQVUsSUFBSTtBQUFBLEVBQ3ZCO0FBR0EsTUFBSSxVQUFVLElBQUksS0FBSyxVQUFVLElBQUksS0FBSyxXQUFXO0FBQ25ELFdBQU87QUFBQSxFQUNUO0FBVUEsTUFBSSxLQUFLLFdBQVcsV0FBVyxHQUFHO0FBQ2hDLFFBQUk7QUFHRixZQUFNLFlBQVk7QUFBQSxRQUNoQixHQUFHLElBQUksNkNBQTZDLEtBQUssVUFBVSxFQUFFLENBQUM7QUFBQSxNQUN4RTtBQUNBLFlBQU0sZ0JBQWdCO0FBQ3RCLFlBQU0sT0FBTyxVQUFVLEtBQUssQ0FBQyxNQUFNLGNBQWMsS0FBSyxDQUFDLENBQUM7QUFDeEQsVUFBSSxNQUFNO0FBQ1Isa0JBQVUsSUFBSSxJQUFJO0FBQ2xCLGVBQU8sVUFBVSxJQUFJO0FBQUEsTUFDdkI7QUFBQSxJQUNGLFNBQVMsS0FBSztBQUNaLGNBQVEsTUFBTSxvQ0FBb0MsSUFBSTtBQUFBLElBQ3hEO0FBR0EsVUFBTSxnQkFBZ0IsR0FBRyxJQUFJLDZDQUE2QyxLQUFLLFVBQVUsRUFBRSxDQUFDO0FBQzVGLFFBQUlGLE1BQUssVUFBVSxlQUFlQSxNQUFLLFNBQVMsTUFBTSxHQUFHO0FBQ3ZELGdCQUFVLElBQUksSUFBSTtBQUNsQixhQUFPLFVBQVUsSUFBSTtBQUFBLElBQ3ZCO0FBQUEsRUFDRjtBQUdBLFFBQU0sV0FBVyxrQkFBa0IsTUFBTSxJQUFJLElBQUksQ0FBQyxHQUFHLGNBQWM7QUFFbkUsTUFBSSxVQUFVO0FBQ1osY0FBVSxJQUFJLElBQUk7QUFDbEIsV0FBTztBQUFBLEVBQ1Q7QUFHQSxRQUFNLFVBQVUsWUFBWSxPQUFPLENBQUMsT0FBTyxHQUFHLFNBQVMsSUFBSSxDQUFDO0FBQzVELE1BQUksUUFBUSxRQUFRO0FBQ2xCLGNBQVUsSUFBSSxJQUFJLFFBQVEsR0FBRyxFQUFFO0FBQy9CLFdBQU8sVUFBVSxJQUFJO0FBQUEsRUFDdkI7QUFHQSxRQUFNLFdBQVcsZ0JBQWdCLE9BQU8sQ0FBQyxPQUFPLEdBQUcsU0FBUyxJQUFJLENBQUM7QUFDakUsTUFBSSxTQUFTLFFBQVE7QUFDbkIsY0FBVSxJQUFJLElBQUksU0FBUyxHQUFHLEVBQUU7QUFDaEMsV0FBTyxVQUFVLElBQUk7QUFBQSxFQUN2QjtBQUdBLFlBQVUsU0FBUyxJQUFJO0FBQ3ZCLFNBQU87QUFDVDs7O0FDekhBLE9BQU9HLFVBQVM7QUFDaEIsT0FBT0MsWUFBVzs7O0FDRmxCLE9BQU9DLFVBQVM7QUFDaEIsT0FBT0MsVUFBUztBQUNoQixPQUFPQyxjQUFhO0FBSXBCLElBQU0sZUFBZSxJQUFJQyxLQUFJLFFBQVE7QUFFckMsU0FBUyxJQUFJLFFBQXVCLE9BQXVCLEdBQVc7QUFDbEUsTUFBSSxDQUFDLFdBQVcsUUFBUSxPQUFPLENBQUMsR0FBRztBQUMvQixXQUFPLGdCQUFnQixjQUFjLE9BQU8sUUFBUSxLQUFLLENBQUM7QUFBQSxFQUM5RDtBQUNKO0FBRUEsU0FBUyxjQUFjLFNBQXlCLFFBQXdCO0FBRXBFLFNBQU87QUFDWDtBQUVBLFNBQVMsV0FBVyxRQUF3QixPQUF1QixHQUFXO0FBRTFFLE1BQ0ksaUJBQWlCQSxLQUFJLGNBQ3JCLG9CQUFvQixVQUNwQixPQUFPLE9BQU8sbUJBQW1CLFlBQ25DO0FBQ0UsV0FBTyxlQUFlLEtBQUs7QUFDM0IsV0FBTztBQUFBLEVBQ1g7QUFFQSxNQUNJLGlCQUFpQkEsS0FBSSxVQUNyQixrQkFBa0JBLEtBQUksU0FDdEIsTUFBTSxTQUFTLE1BQ2YsTUFBTSxTQUFTLFFBQ2YsUUFBUSxLQUFLLE1BQU0sU0FDckI7QUFDRSxXQUFPLFVBQVUsT0FBTyxNQUFNLElBQUk7QUFDbEMsV0FBTztBQUFBLEVBQ1g7QUFFQSxNQUFJLGlCQUFpQkEsS0FBSSxXQUFXLGtCQUFrQkEsS0FBSSxZQUFZO0FBQ2xFLFdBQU8sWUFBWSxLQUFLO0FBQ3hCLFdBQU87QUFBQSxFQUNYO0FBRUEsTUFDSSxpQkFBaUJDLEtBQUksY0FDcEIsa0JBQWtCRCxLQUFJLGNBQWMsa0JBQWtCQSxLQUFJLGNBQzdEO0FBQ0UsV0FBTyxlQUFlLEtBQUs7QUFDM0IsV0FBTztBQUFBLEVBQ1g7QUFFQSxNQUFJLGlCQUFpQkMsS0FBSSxZQUFZLGtCQUFrQkEsS0FBSSxNQUFNO0FBQUEsRUFFakU7QUFFQSxNQUFJLGlCQUFpQkQsS0FBSSxVQUFVLGtCQUFrQkEsS0FBSSxhQUFhO0FBQ2xFLFdBQU8sV0FBVyxLQUFLO0FBQ3ZCLFdBQU87QUFBQSxFQUNYO0FBRUEsTUFBSSxpQkFBaUJBLEtBQUksY0FBYyxrQkFBa0JBLEtBQUksVUFBVTtBQUNuRSxXQUFPLFdBQVcsS0FBSztBQUN2QixXQUFPO0FBQUEsRUFDWDtBQUVBLFNBQU87QUFDWDtBQUVBLFNBQVMsT0FBTyxRQUF3QixPQUF1QjtBQUMzRCxNQUFJLGNBQWMsUUFBUSxLQUFLLEVBQUc7QUFFbEMsTUFBSSxlQUFlLFVBQVUsT0FBTyxPQUFPLGFBQWEsWUFBWTtBQUNoRSxXQUFPLE9BQU8sVUFBVSxJQUFJO0FBQUEsRUFDaEM7QUFFQSxNQUFJLFlBQVksVUFBVSxPQUFPLE9BQU8sVUFBVSxZQUFZO0FBQzFELFdBQU8sT0FBTyxPQUFPLEtBQUs7QUFBQSxFQUM5QjtBQUVBLFFBQU0sTUFBTSxpQkFBaUIsS0FBSyxTQUFTLE1BQU0sRUFBRTtBQUN2RDtBQUVBLElBQU0sRUFBRSxVQUFVLGtCQUFrQixJQUFJLFNBQVM7QUFBQSxFQUM3QyxPQUFPLFFBQVEsS0FBSztBQUNoQixRQUFJLEVBQUUsa0JBQWtCQSxLQUFJLFNBQVM7QUFDakMsYUFBTyxRQUFRLEtBQUssTUFBTSxxQkFBcUIsTUFBTSxFQUFFLENBQUM7QUFBQSxJQUM1RDtBQUVBLFVBQU0sTUFBTSxPQUFPLGtCQUFrQjtBQUNyQyxRQUFJO0FBRUosVUFBTSxTQUFTLENBQUNFLFNBQWdCO0FBQzVCLFVBQUksQ0FBQ0EsS0FBSSxTQUFTLEdBQUcsS0FBSyxDQUFDQSxLQUFJLFNBQVMsR0FBRyxHQUFHO0FBQzFDLFFBQUFBLE9BQU0sT0FBT0EsSUFBRztBQUFBLE1BQ3BCO0FBRUEsVUFBSSxTQUFVLEtBQUksZ0JBQWdCLFFBQVE7QUFFMUMsaUJBQVcsSUFBSUYsS0FBSSxZQUFZO0FBQy9CLGVBQVMsaUJBQWlCRSxJQUFHO0FBQzdCLFVBQUksYUFBYSxVQUFVRixLQUFJLDRCQUE0QjtBQUFBLElBQy9EO0FBRUEsUUFBSSxlQUFlLFVBQVU7QUFDekIsYUFBTyxJQUFJLElBQUksQ0FBQztBQUNoQixZQUFNLFVBQVUsSUFBSSxVQUFVLE1BQU0sT0FBTyxJQUFJLElBQUksQ0FBQyxDQUFDO0FBQ3JELGdCQUFVLE9BQU87QUFBQSxJQUNyQixPQUFPO0FBQ0gsYUFBTyxHQUFHO0FBQUEsSUFDZDtBQUFBLEVBQ0o7QUFBQSxFQUNBLFNBQVMsUUFBUSxXQUFXO0FBQ3hCLFFBQUksRUFBRSxrQkFBa0JBLEtBQUksU0FBUztBQUNqQyxhQUFPLFFBQVEsS0FBSyxNQUFNLDJCQUEyQixNQUFNLEVBQUUsQ0FBQztBQUFBLElBQ2xFO0FBRUEsUUFBSSxxQkFBcUIsVUFBVTtBQUMvQixhQUFPLGFBQWEsVUFBVSxJQUFJLEVBQUUsTUFBTSxLQUFLO0FBQy9DLFlBQU0sVUFBVSxVQUFVO0FBQUEsUUFDdEIsTUFBTyxPQUFPLGFBQWEsVUFBVSxJQUFJLEVBQUUsTUFBTSxLQUFLO0FBQUEsTUFDMUQ7QUFDQSxnQkFBVSxPQUFPO0FBQUEsSUFDckIsT0FBTztBQUNILGFBQU8sZ0JBQWdCLFVBQVUsTUFBTSxLQUFLLENBQUM7QUFBQSxJQUNqRDtBQUFBLEVBQ0o7QUFBQSxFQUNBLFNBQVMsUUFBUSxPQUFPLFFBQVEsSUFBSTtBQUNoQyxRQUFJLEVBQUUsaUJBQWlCRyxTQUFRLFNBQVM7QUFDcEMsY0FBUUgsS0FBSSxNQUFNLElBQUksT0FBTyxLQUFLLENBQUM7QUFBQSxJQUN2QztBQUVBLFFBQUksV0FBVyxRQUFRLE9BQU8sS0FBSyxFQUFHO0FBRXRDLFFBQUksa0JBQWtCLFVBQVU7QUFDNUIsYUFBTyxTQUFTLEtBQUs7QUFDckI7QUFBQSxJQUNKO0FBRUEsUUFBSSxrQkFBa0JBLEtBQUksV0FBVztBQUNqQyxVQUFJLGlCQUFpQixVQUFVO0FBQzNCLG1CQUFXLE1BQU0sTUFBTSxVQUFVO0FBQzdCLGNBQUksUUFBUSxJQUFJLEtBQUs7QUFBQSxRQUN6QjtBQUVBLGNBQU0sUUFBUSxlQUFlLENBQUMsR0FBRyxJQUFhSSxXQUFrQjtBQUM1RCxjQUFJLEVBQUUsY0FBY0QsU0FBUSxTQUFTO0FBQ2pDLG9CQUFRLE1BQU0sVUFBVSxjQUFjLEVBQUUsT0FBTyxNQUFNLEVBQUUsQ0FBQztBQUN4RDtBQUFBLFVBQ0o7QUFDQSxtQkFBUyxRQUFRLElBQUlDLE1BQUs7QUFBQSxRQUM5QixDQUFDO0FBRUQsY0FBTSxRQUFRLGlCQUFpQixDQUFDLEdBQUcsT0FBZ0I7QUFDL0MsY0FBSSxFQUFFLGNBQWNELFNBQVEsU0FBUztBQUNqQyxvQkFBUSxNQUFNLFVBQVUsaUJBQWlCLEVBQUUsU0FBUyxNQUFNLEVBQUUsQ0FBQztBQUM3RDtBQUFBLFVBQ0o7QUFDQSxpQkFBTyxRQUFRLEVBQUU7QUFBQSxRQUNyQixDQUFDO0FBRUQsa0JBQVUsTUFBTSxNQUFNLFFBQVEsQ0FBQztBQUMvQjtBQUFBLE1BQ0o7QUFFQSxVQUFJLFFBQVEsT0FBTyxLQUFLO0FBQ3hCO0FBQUEsSUFDSjtBQUVBLFVBQU0sTUFBTSxjQUFjLEtBQUssT0FBTyxNQUFNLEVBQUU7QUFBQSxFQUNsRDtBQUNKLENBQUM7OztBRHJLRCxPQUFPLE9BQU8sbUJBQW1CO0FBQUEsRUFDN0IsS0FBS0UsS0FBSTtBQUFBLEVBQ1QsUUFBUUEsS0FBSTtBQUFBLEVBQ1osV0FBV0EsS0FBSTtBQUFBO0FBQUEsRUFFZixhQUFhQSxLQUFJO0FBQUEsRUFDakIsT0FBT0EsS0FBSTtBQUFBLEVBQ1gsT0FBT0EsS0FBSTtBQUFBLEVBQ1gsT0FBT0EsS0FBSTtBQUFBLEVBQ1gsVUFBVUEsS0FBSTtBQUFBLEVBQ2QsWUFBWUEsS0FBSTtBQUFBLEVBQ2hCLFNBQVNBLEtBQUk7QUFBQSxFQUNiLFNBQVNBLEtBQUk7QUFBQSxFQUNiLFVBQVVBLEtBQUk7QUFBQSxFQUNkLGdCQUFnQkEsS0FBSTtBQUFBLEVBQ3BCLFFBQVFDLE9BQU07QUFBQSxFQUNkLE9BQU9ELEtBQUk7QUFBQSxFQUNYLFFBQVFBLEtBQUk7QUFBQSxFQUNaLGNBQWNBLEtBQUk7QUFBQSxFQUNsQixRQUFRQyxPQUFNO0FBQ2xCLENBQUM7OztBRnZCRCxJQUFNLHVCQUF1QixDQUFDO0FBQUEsRUFDNUI7QUFBQSxFQUNBO0FBQ0YsTUFHTTtBQUNKLFFBQU0sVUFBVSxJQUFJLFFBQVEsWUFBWTtBQUN4QyxNQUFJLENBQUMsUUFBUyxRQUFPO0FBRXJCLFFBQU0sWUFBWUMsS0FBSSxVQUFVLGdCQUFnQixPQUFPO0FBRXZELE1BQUksQ0FBQyxVQUFVLEVBQUUsTUFBTSxVQUFVLENBQUMsR0FBRztBQUNuQyxXQUFPO0FBQUEsRUFDVDtBQUVBLFFBQU0sV0FBVyxVQUFVO0FBQUEsSUFDekI7QUFBQSxJQUNBO0FBQUE7QUFBQSxJQUNBO0FBQUE7QUFBQSxJQUNBO0FBQUE7QUFBQSxJQUNBO0FBQUE7QUFBQSxJQUNBO0FBQUE7QUFBQSxFQUNGO0FBQ0EsUUFBTSxPQUFPLFVBQVUsU0FBUztBQUNoQyxRQUFNLE9BQU8sTUFBTSxTQUFTO0FBRTVCLE1BQUksQ0FBQyxLQUFNLFFBQU87QUFFbEIsTUFBSTtBQUNGLFdBQU8sVUFBVSxPQUFPLHVCQUF1QixNQUFNLE1BQU0sTUFBTSxJQUFJO0FBQUEsRUFDdkUsU0FBUyxPQUFPO0FBQ2QsV0FBTztBQUFBLEVBQ1Q7QUFDRjtBQUVBLElBQU0sZ0JBQWdCLENBQUM7QUFBQSxFQUNyQjtBQUFBLEVBQ0EsTUFBTTtBQUFBLEVBQ047QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBLEdBQUc7QUFDTCxNQWFNO0FBQ0osTUFBSTtBQUVKLFFBQU0sY0FBYyxJQUFJLFVBQVUsTUFBTTtBQUN0QyxlQUFXLFdBQVc7QUFBQSxFQUN4QixDQUFDO0FBRUQsWUFBVSxNQUFNO0FBQ2QsZ0JBQVk7QUFBQSxFQUNkLENBQUM7QUFFRCxTQUNFO0FBQUEsSUFBQ0EsS0FBSTtBQUFBLElBQUo7QUFBQSxNQUNDO0FBQUEsTUFDQyxHQUFHO0FBQUEsTUFDSixHQUFHLENBQUMsTUFBTTtBQUNSLFVBQUUsY0FBYyxDQUFDLEdBQUcsSUFBSSxPQUFPLFdBQVc7QUFDeEMsY0FBSSxRQUFRLElBQUksSUFBSTtBQUVwQixrQkFBUSxPQUFPLFdBQVcsU0FBUyxJQUMvQixNQUFNLFFBQVEsV0FBVyxFQUFFLElBQzNCO0FBRUosZ0JBQU0sT0FBTyxLQUFLLElBQUksT0FBTyxRQUFRLFVBQVU7QUFFL0MsY0FBSSxTQUFrQztBQUV0QyxjQUFJLE9BQU87QUFFVCxnQkFBSTtBQUNGLG9CQUFNLGFBQWEsVUFBVSxPQUFPLGNBQWMsS0FBSztBQUV2RCxvQkFBTSxXQUFXLFdBQVcsVUFBVTtBQUN0QyxvQkFBTSxZQUFZLFdBQVcsV0FBVztBQUN4QyxvQkFBTSxpQkFBaUI7QUFFdkIsb0JBQU0sU0FBUyxpQkFBaUI7QUFDaEMsb0JBQU0sU0FBUyxpQkFBaUI7QUFDaEMsb0JBQU0sUUFBUSxLQUFLLElBQUksUUFBUSxNQUFNO0FBRXJDLG9CQUFNLGNBQWMsS0FBSyxLQUFLLFdBQVcsS0FBSztBQUM5QyxvQkFBTSxlQUFlLEtBQUssS0FBSyxZQUFZLEtBQUs7QUFFaEQsdUJBQVMsV0FBVztBQUFBLGdCQUNsQjtBQUFBLGdCQUNBO0FBQUEsZ0JBQ0EsVUFBVSxXQUFXO0FBQUEsY0FDdkI7QUFBQSxZQUNGLFFBQVE7QUFDTix1QkFBUyxxQkFBcUIsRUFBRSxNQUFNLE9BQU8sS0FBSyxDQUFDO0FBQUEsWUFDckQ7QUFBQSxVQUNGO0FBRUEsY0FBSSxDQUFDLFVBQVUsY0FBYztBQUMzQixxQkFBUyxxQkFBcUI7QUFBQSxjQUM1QixNQUFNO0FBQUEsY0FDTjtBQUFBLFlBQ0YsQ0FBQztBQUFBLFVBQ0g7QUFFQSxjQUFJLENBQUMsUUFBUTtBQUNYO0FBQUEsVUFDRjtBQUVBLGdCQUFNLEtBQUssUUFBUTtBQUNuQixnQkFBTSxLQUFLLFNBQVM7QUFDcEIsZ0JBQU0sU0FBUyxPQUFPO0FBRXRCLGFBQUcsSUFBSSxJQUFJLElBQUksUUFBUSxHQUFHLEtBQUssS0FBSyxDQUFDO0FBQ3JDLGFBQUcsS0FBSztBQUVSLGdCQUFNLElBQUksS0FBSyxPQUFPLFVBQVUsSUFBSTtBQUNwQyxnQkFBTSxJQUFJLEtBQUssT0FBTyxXQUFXLElBQUk7QUFFckMsY0FBSSx3QkFBd0IsSUFBSSxRQUFRLEdBQUcsQ0FBQztBQUM1QyxhQUFHLE1BQU07QUFBQSxRQUNYLENBQUM7QUFFRCxZQUFJLFdBQVc7QUFDYixnQkFBTSxVQUFVQSxLQUFJLGFBQWEsSUFBSTtBQUVyQyxrQkFBUSxXQUFXLENBQUM7QUFFcEIsa0JBQVEsUUFBUSxZQUFZLE1BQU07QUFDaEMsc0JBQVU7QUFBQSxVQUNaLENBQUM7QUFFRCxZQUFFLGVBQWUsT0FBTztBQUFBLFFBQzFCO0FBRUEsWUFBSSxnQkFBZ0I7QUFDbEIsZ0JBQU0sVUFBVUEsS0FBSSxhQUFhLElBQUk7QUFFckMsa0JBQVEsV0FBVyxDQUFDO0FBRXBCLGtCQUFRLFFBQVEsWUFBWSxNQUFNO0FBQ2hDLDJCQUFlO0FBQUEsVUFDakIsQ0FBQztBQUVELFlBQUUsZUFBZSxPQUFPO0FBQUEsUUFDMUI7QUFFQSxxQkFBYTtBQUFBLE1BQ2Y7QUFBQTtBQUFBLEVBQ0Y7QUFFSjtBQUVBLElBQU8sd0JBQVE7OztBSTFLUixJQUFNLFVBQVU7QUFBQSxFQUNyQixRQUFRO0FBQUEsRUFDUixPQUFPO0FBQUEsRUFDUCxRQUFRO0FBQUEsRUFDUixPQUFPO0FBQUEsRUFDUCxRQUFRO0FBQ1Y7OztBQ0hBLElBQU0sd0JBQXdCLENBQUMsV0FBNEI7QUFDekQsU0FBTztBQUFBLElBQ0wsSUFBSTtBQUFBLElBQ0osSUFBSTtBQUFBLElBQ0osSUFBSTtBQUFBLElBQ0osSUFBSTtBQUFBLElBQ0osSUFBSTtBQUFBLElBQ0osSUFBSTtBQUFBLEVBQ04sRUFBRSxTQUFTLE1BQU07QUFDbkI7QUFFQSxJQUFNLG1CQUFtQixDQUFDO0FBQUEsRUFDeEI7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUNGLE1BSU07QUFDSixTQUFPQyxLQUFJLFdBQVc7QUFBQSxJQUNwQixZQUFZO0FBQUEsSUFDWjtBQUFBLElBQ0EsVUFBVTtBQUFBLElBQ1Y7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLEVBQ0Y7QUFDRjtBQUVPLElBQU0scUJBQXFCLENBQUM7QUFBQSxFQUNqQztBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0EsVUFBVTtBQUNaLE1BTU07QUFDSixRQUFNLENBQUMsV0FBVyxZQUFZLElBQUksWUFBcUIsS0FBSztBQUU1RCxRQUFNLENBQUMsWUFBWSxhQUFhLElBQUk7QUFBQSxJQUNsQyxpQkFBaUI7QUFBQSxNQUNmLFVBQVUsTUFBTSxJQUFJO0FBQUEsTUFDcEIsUUFBUSxNQUFNLElBQUk7QUFBQSxNQUNsQjtBQUFBLElBQ0YsQ0FBQztBQUFBLEVBQ0g7QUFFQSxRQUFNLGNBQWMsQ0FBQyxNQUFpQjtBQUNwQyxVQUFNQyxjQUFhLEVBQUUsZUFBZTtBQUNwQyxVQUFNLElBQUlBLFlBQVcsVUFBVTtBQUMvQixnQkFBWSxDQUFDO0FBQ2IsaUJBQWEsS0FBSztBQUFBLEVBQ3BCO0FBRUEsUUFBTSxxQkFBcUIsQ0FBQyxNQUFpQjtBQUMzQyxVQUFNLElBQUksRUFBRSxlQUFlLEVBQUUsVUFBVTtBQUN2QyxnQkFBWSxDQUFDO0FBQUEsRUFDZjtBQUVBLFFBQU0sb0JBQW9CLENBQUM7QUFBQSxJQUN6QixPQUFBQztBQUFBLElBQ0EsT0FBQUM7QUFBQSxFQUNGLE1BR007QUFDSjtBQUFBLE1BQ0UsaUJBQWlCO0FBQUEsUUFDZixVQUFVQTtBQUFBLFFBQ1YsUUFBUUQ7QUFBQSxRQUNSO0FBQUEsTUFDRixDQUFDO0FBQUEsSUFDSDtBQUFBLEVBQ0Y7QUFFQSxRQUFNLG9CQUFvQixNQUFNLFVBQVUsTUFBTTtBQUM5QyxRQUFJLFdBQVcsSUFBSSxFQUFFLFVBQVUsTUFBTSxNQUFNLElBQUksRUFBRztBQUNsRCxlQUFXLElBQUksRUFBRSxVQUFVLE1BQU0sSUFBSSxLQUFLLENBQUM7QUFBQSxFQUM3QyxDQUFDO0FBRUQsUUFBTSxzQkFBc0IsTUFBTSxVQUFVLE1BQU07QUFDaEQsUUFBSSxVQUFVLElBQUksRUFBRztBQUVyQixVQUFNLElBQUksTUFBTSxJQUFJO0FBQ3BCLFFBQUksTUFBTSxXQUFXLElBQUksRUFBRSxVQUFVLEVBQUc7QUFFeEMsZUFBVyxJQUFJLEVBQUUsVUFBVSxLQUFLLENBQUM7QUFBQSxFQUNuQyxDQUFDO0FBRUQsUUFBTSx1QkFBdUIsTUFBTTtBQUNqQyxpQkFBYSxJQUFJO0FBQUEsRUFDbkI7QUFFQSxRQUFNLFFBQVEsQ0FBQyxNQUFpQjtBQUM5QixVQUFNLGdCQUFnQkYsS0FBSSxtQkFBbUIsSUFBSTtBQUNqRCxRQUFJO0FBRUosVUFBTSxjQUFjLEVBQUUsb0JBQW9CO0FBRTFDLGFBQVMsSUFBSSxHQUFHLElBQUksWUFBWSxZQUFZLEdBQUcsS0FBSztBQUNsRCxZQUFNLGFBQWEsWUFBWSxTQUFTLENBQUM7QUFDekMsVUFBSSxzQkFBc0JBLEtBQUksY0FBYztBQUMxQywwQkFBa0I7QUFDbEI7QUFBQSxNQUNGO0FBQUEsSUFDRjtBQUVBLFFBQUksQ0FBQyxpQkFBaUI7QUFDcEIsd0JBQWtCLElBQUlBLEtBQUksYUFBYTtBQUN2QyxRQUFFLGVBQWUsZUFBZTtBQUFBLElBQ2xDO0FBRUEsUUFBSSxZQUFZLFFBQVE7QUFDdEIsb0JBQWMsUUFBUSxlQUFlLENBQUMsR0FBRyxXQUFXO0FBQ2xELFlBQUksQ0FBQyxzQkFBc0IsTUFBTSxFQUFHO0FBQ3BDLDZCQUFxQjtBQUFBLE1BQ3ZCLENBQUM7QUFFRCxvQkFBYyxRQUFRLGdCQUFnQixDQUFDLEdBQUcsV0FBVztBQUNuRCxZQUFJLENBQUMsc0JBQXNCLE1BQU0sRUFBRztBQUNwQyxvQkFBWSxDQUFDO0FBQUEsTUFDZixDQUFDO0FBRUQsc0JBQWdCLFFBQVEsV0FBVyxNQUFNO0FBQ3ZDLDZCQUFxQjtBQUFBLE1BQ3ZCLENBQUM7QUFFRCxzQkFBZ0IsUUFBUSxZQUFZLE1BQU07QUFDeEMsb0JBQVksQ0FBQztBQUFBLE1BQ2YsQ0FBQztBQUFBLElBQ0gsV0FBVyxZQUFZLFdBQVc7QUFDaEMsUUFBRSxRQUFRLGlCQUFpQixNQUFNO0FBQy9CLDJCQUFtQixDQUFDO0FBQUEsTUFDdEIsQ0FBQztBQUFBLElBQ0g7QUFFQSxNQUFFLGVBQWUsYUFBYTtBQUFBLEVBQ2hDO0FBRUEsWUFBVSxNQUFNO0FBQ2Qsc0JBQWtCO0FBQ2xCLHdCQUFvQjtBQUFBLEVBQ3RCLENBQUM7QUFFRCxTQUFPO0FBQUEsSUFDTDtBQUFBLElBQ0E7QUFBQSxJQUNBLE9BQU87QUFBQSxNQUNMO0FBQUEsTUFDQTtBQUFBLElBQ0Y7QUFBQSxJQUNBO0FBQUEsRUFDRjtBQUNGOzs7QVpqSkEsSUFBTSxvQkFBTixjQUFnQ0ksS0FBSSxTQUFTO0FBRzdDO0FBRUEsU0FBUyxvQkFDUCxRQUM2QjtBQUM3QixRQUFNLE9BQU8sU0FBUyxZQUFZO0FBQ2xDLFFBQU0sUUFBUSxPQUFPLFVBQVUsR0FBRyxZQUFZLEVBQUUsUUFBUSxNQUFNLEdBQUc7QUFDakUsUUFBTSxXQUFXLE9BQU8sYUFBYSxFQUFFLFlBQVk7QUFFbkQsUUFBTSxVQUFVLEtBQUssWUFBWTtBQUVqQyxTQUNFLFFBQVE7QUFBQSxJQUFLLENBQUMsTUFDWixFQUNHLFVBQVUsRUFDVixZQUFZLEVBQ1osU0FBUyxTQUFTLFFBQVE7QUFBQSxFQUMvQixLQUFLLFFBQVEsS0FBSyxDQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLFNBQVMsUUFBUSxDQUFDO0FBRTNFO0FBRUEsSUFBTSxTQUFTLENBQUM7QUFBQSxFQUNkO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQ0YsTUFLTTtBQUNKLFFBQU0sQ0FBQyxVQUFVLFdBQVcsSUFBSSxZQUFZLGVBQWUsWUFBWSxJQUFJLENBQUM7QUFFNUUsaUJBQWUsUUFBUSxtQkFBbUIsTUFBTTtBQUM5QyxVQUFNLGFBQWEsZUFBZSxZQUFZO0FBQzlDLGdCQUFZLGFBQWEsQ0FBQztBQUFBLEVBQzVCLENBQUM7QUFDRCxTQUNFO0FBQUEsSUFBQ0EsS0FBSTtBQUFBLElBQUo7QUFBQSxNQUNDLE9BQU87QUFBQSxNQUNQLFVBQVU7QUFBQSxNQUNWLFdBQVc7QUFBQSxNQUNYLHNCQUFzQixDQUFDLE1BQU07QUFDM0IsY0FBTSxPQUFPLEVBQUUsa0JBQWtCO0FBRWpDLGNBQU0sU0FBUyxXQUNaLElBQUksRUFDSixLQUFLLENBQUMsTUFBTSxFQUFFLGFBQWEsTUFBTSxNQUFNLE9BQU87QUFFakQsWUFBSSxRQUFRO0FBQ1YsNEJBQWtCLE1BQU07QUFBQSxRQUMxQjtBQUFBLE1BQ0Y7QUFBQSxNQUNBLFNBQ0U7QUFBQSxRQUFDQSxLQUFJO0FBQUEsUUFBSjtBQUFBLFVBQ0MsU0FBUyxDQUFDLFVBQVUsTUFBTTtBQUN4QixrQkFBTSxXQUFXO0FBQ2pCLGtCQUFNLE1BQU0sSUFBSUEsS0FBSSxJQUFJO0FBQUEsY0FDdEIsU0FBUyxRQUFRO0FBQUEsY0FDakIsYUFBYUEsS0FBSSxZQUFZO0FBQUEsWUFDL0IsQ0FBQztBQUNELGtCQUFNLFFBQVEsSUFBSUEsS0FBSSxNQUFNO0FBQUEsY0FDMUIsVUFBVTtBQUFBO0FBQUEsY0FDVixXQUFXO0FBQUEsWUFDYixDQUFDO0FBRUQsa0JBQU0sUUFBUSxJQUFJQSxLQUFJLE1BQU0sRUFBRSxRQUFRLEVBQUUsQ0FBQztBQUd6QyxxQkFBUyxTQUFTO0FBQ2xCLHFCQUFTLFNBQVM7QUFFbEIsZ0JBQUksT0FBTyxLQUFLO0FBQ2hCLGdCQUFJLE9BQU8sS0FBSztBQUVoQixxQkFBUyxVQUFVLEdBQUc7QUFBQSxVQUN4QjtBQUFBLFVBQ0EsUUFBUSxDQUFDLFVBQVUsTUFBTTtBQUN2QixrQkFBTSxXQUFXO0FBRWpCLGtCQUFNLFFBQVEsU0FBUztBQUN2QixrQkFBTSxRQUFRLFNBQVM7QUFFdkIsa0JBQU0sT0FBTyxTQUFTLFNBQStCO0FBRXJELG1CQUFPLFNBQVMsS0FBSyxJQUFJO0FBRXpCLGtCQUFNLFVBQVUsSUFBSSxRQUFRLFlBQVk7QUFDeEMsZ0JBQUksU0FBUztBQUNYLG9CQUFNLFlBQVlBLEtBQUksVUFBVSxnQkFBZ0IsT0FBTztBQUV2RCxvQkFBTSxPQUFPLEtBQUs7QUFFbEIsa0JBQUksVUFBVSxFQUFFLE1BQU0sVUFBVSxDQUFDLEdBQUc7QUFDbEMsc0JBQU0sbUJBQW1CLElBQUk7QUFBQSxjQUMvQixPQUFPO0FBQ0wsc0JBQU0sbUJBQW1CLDRCQUE0QjtBQUFBLGNBQ3ZEO0FBQUEsWUFDRjtBQUFBLFVBQ0Y7QUFBQTtBQUFBLE1BQ0Y7QUFBQTtBQUFBLEVBRUg7QUFFTDtBQUVBLElBQU0sY0FBYyxDQUFDLEVBQUUsUUFBUSxNQUEyQztBQUN4RSxRQUFNO0FBQUEsSUFDSixZQUFZO0FBQUEsTUFDVjtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxJQUNGO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxFQUNGLElBQUksY0FBYztBQUVsQixRQUFNLGNBQWMsZUFBZSxDQUFDQyxvQkFBbUI7QUFDckQsV0FBT0Esb0JBQW1CQyxPQUFNLGVBQWUsVUFDM0MseUJBQ0FELG9CQUFtQkMsT0FBTSxlQUFlLFNBQ3RDLHlCQUNBO0FBQUEsRUFDUixDQUFDO0FBRUQsUUFBTSxZQUFZLGVBQWUsQ0FBQyxPQUFPLE1BQU0sR0FBRyxJQUFJLFNBQVM7QUFDN0QsV0FBTyxLQUFLLE9BQU8sT0FBTyxFQUFFLEtBQUssS0FBSyxLQUFLO0FBQUEsRUFDN0MsQ0FBQztBQUVELFFBQU0seUJBQXlCO0FBQy9CLFFBQU0sa0JBQWtCO0FBQ3hCLFFBQU0sa0JBQWtCO0FBRXhCLFFBQU07QUFBQSxJQUNKO0FBQUEsSUFDQTtBQUFBLElBQ0EsT0FBTyxFQUFFLGFBQWE7QUFBQSxJQUN0QjtBQUFBLEVBQ0YsSUFBSSxtQkFBbUI7QUFBQSxJQUNyQixPQUFPO0FBQUEsSUFDUCxPQUFPO0FBQUEsSUFDUCxhQUFhO0FBQUEsSUFDYixhQUFhLENBQUMsTUFBTTtBQUNsQixxQkFBZSxJQUFJLEdBQUcsYUFBYSxDQUFDO0FBQUEsSUFDdEM7QUFBQSxJQUNBLFNBQVM7QUFBQSxFQUNYLENBQUM7QUFFRCxRQUFNLE9BQU8sS0FBSyxZQUFZO0FBQzlCLFFBQU0sU0FBUyxFQUFFO0FBQ2pCLE1BQUk7QUFDSixNQUFJO0FBRUosUUFBTSxDQUFDLFVBQVUsV0FBVyxJQUFJO0FBQUEsSUFDOUIsSUFBSSxNQUFNLE1BQU0sU0FBUyxDQUFDLEVBQUUsS0FBSyxDQUFDO0FBQUEsRUFDcEM7QUFFQSxRQUFNLHFCQUFxQixTQUFTLFVBQVUsTUFBTTtBQUNsRCxvQkFBZ0IsV0FBVztBQUFBLEVBQzdCLENBQUM7QUFFRCxRQUFNLDRCQUE0QixlQUFlLFVBQVUsTUFBTTtBQUMvRCxVQUFNQyxVQUFTLGVBQWUsSUFBSSxFQUFFLFdBQVcsS0FBSztBQUNwRCxVQUFNQyxZQUFXLGVBQWUsSUFBSSxFQUFFLGFBQWEsS0FBSztBQUd4RCxzQkFBa0I7QUFBQSxNQUNoQixPQUFPQTtBQUFBLE1BQ1AsT0FBT0Q7QUFBQSxJQUNULENBQUM7QUFBQSxFQUNILENBQUM7QUFFRCxRQUFNLFFBQVEsa0JBQWtCLE1BQU07QUFDcEMsVUFBTSxPQUFPLENBQUMsR0FBVyxHQUFXLE1BQWMsS0FBSyxJQUFJLEtBQUs7QUFDaEUsVUFBTSxZQUFZLGVBQWUsSUFBSSxNQUFNRCxPQUFNLGVBQWU7QUFFaEUsVUFBTSxTQUFtQixDQUFDLEdBQUcsU0FBUyxJQUFJLENBQUM7QUFDM0MsVUFBTSxTQUFTLEtBQUssV0FBVztBQUMvQixVQUFNLE9BQU8sS0FBSyxTQUFTO0FBRTNCLGFBQVMsSUFBSSxHQUFHLElBQUksTUFBTSxLQUFLO0FBQzdCLFlBQU0sU0FBUyxPQUFPLENBQUMsS0FBSztBQUU1QixVQUFJLFdBQVc7QUFDYixlQUFPLENBQUMsSUFBSSxLQUFLLE9BQU8sQ0FBQyxHQUFHLFFBQVEsR0FBRztBQUFBLE1BQ3pDLE9BQU87QUFDTCxlQUFPLENBQUMsSUFBSSxLQUFLLE9BQU8sQ0FBQyxHQUFHLEdBQUcsR0FBRztBQUFBLE1BQ3BDO0FBQUEsSUFDRjtBQUVBLGdCQUFZLE1BQU07QUFDbEIscUJBQWlCLFdBQVc7QUFBQSxFQUM5QixDQUFDO0FBRUQsWUFBVSxNQUFNO0FBQ2QsdUJBQW1CO0FBQ25CLDhCQUEwQjtBQUFBLEVBQzVCLENBQUM7QUFFRCxTQUNFO0FBQUEsSUFBQztBQUFBO0FBQUEsTUFDQyxhQUNFLFlBQVksYUFDUkYsS0FBSSxZQUFZLGFBQ2hCQSxLQUFJLFlBQVk7QUFBQSxNQUV0QixTQUFPO0FBQUEsTUFDUCxTQUFTLFFBQVE7QUFBQSxNQUVqQjtBQUFBLDZCQUFDLGFBQ0M7QUFBQTtBQUFBLFlBQUM7QUFBQTtBQUFBLGNBQ0MsZUFBZSxZQUFZLGFBQWEsTUFBTTtBQUFBLGNBQzlDLGNBQWMsWUFBWSxhQUFhLE1BQU07QUFBQTtBQUFBLFVBQy9DO0FBQUEsVUFDQTtBQUFBLFlBQUM7QUFBQTtBQUFBLGNBQ0MsT0FBTTtBQUFBLGNBQ04sS0FBSztBQUFBLGNBQ0wsTUFBTSxZQUFZLGFBQWEsTUFBTTtBQUFBLGNBQ3JDLGNBQWE7QUFBQTtBQUFBLFVBQ2Y7QUFBQSxVQUNBO0FBQUEsWUFBQ0EsS0FBSTtBQUFBLFlBQUo7QUFBQSxjQUNDLE9BQU07QUFBQSxjQUNOLGNBQWM7QUFBQSxjQUNkLGVBQWU7QUFBQSxjQUNmLFNBQVMsWUFBWTtBQUFBLGNBQ3JCLE9BQU07QUFBQSxjQUNOLFNBQVM7QUFBQSxjQUNULFNBQVM7QUFBQSxjQUNULEdBQUcsQ0FBQyxNQUFNO0FBQ1Isa0JBQUUsY0FBYyxDQUFDLFFBQVEsSUFBSSxPQUFPLFdBQVc7QUFDN0Msd0JBQU0sT0FBTyxTQUFTLElBQUk7QUFFMUIsd0JBQU0sS0FBSyxRQUFRO0FBQ25CLHdCQUFNLEtBQUssU0FBUztBQUNwQix3QkFBTSxTQUFTO0FBQ2Ysd0JBQU0sZUFBZTtBQUNyQix3QkFBTSxRQUFRLEtBQUs7QUFFbkIsd0JBQU0sUUFBUSxPQUFPLFVBQVU7QUFFL0IsMkJBQVMsSUFBSSxHQUFHLElBQUksT0FBTyxLQUFLO0FBQzlCLDBCQUFNLFFBQVMsSUFBSSxRQUFTLEtBQUssS0FBSztBQUN0QywwQkFBTSxZQUFZLEtBQUssSUFBSSxLQUFLLENBQUMsR0FBRyxHQUFHLElBQUk7QUFFM0MsMEJBQU0sS0FBSyxLQUFLLEtBQUssSUFBSSxLQUFLLElBQUk7QUFDbEMsMEJBQU0sS0FBSyxLQUFLLEtBQUssSUFBSSxLQUFLLElBQUk7QUFDbEMsMEJBQU0sS0FBSyxLQUFLLEtBQUssSUFBSSxLQUFLLEtBQUssU0FBUztBQUM1QywwQkFBTSxLQUFLLEtBQUssS0FBSyxJQUFJLEtBQUssS0FBSyxTQUFTO0FBRTVDLHVCQUFHO0FBQUEsc0JBQ0QsTUFBTTtBQUFBLHNCQUNOLE1BQU07QUFBQSxzQkFDTixNQUFNO0FBQUEsc0JBQ04sTUFBTTtBQUFBLG9CQUNSO0FBQ0EsdUJBQUcsYUFBYSxDQUFDO0FBQ2pCLHVCQUFHLFdBQVcsTUFBTSxRQUFRLEtBQUs7QUFDakMsdUJBQUcsT0FBTyxJQUFJLEVBQUU7QUFDaEIsdUJBQUcsT0FBTyxJQUFJLEVBQUU7QUFDaEIsdUJBQUcsT0FBTztBQUFBLGtCQUNaO0FBQUEsZ0JBQ0YsQ0FBQztBQUNELGtDQUFrQjtBQUFBLGNBQ3BCO0FBQUE7QUFBQSxVQUNGO0FBQUEsV0FDRjtBQUFBLFFBRUE7QUFBQSxVQUFDO0FBQUE7QUFBQSxZQUNDLGFBQWFBLEtBQUksWUFBWTtBQUFBLFlBQzdCLFNBQVMsUUFBUTtBQUFBLFlBQ2pCLFFBQVFBLEtBQUksTUFBTTtBQUFBLFlBRWxCO0FBQUE7QUFBQSxnQkFBQztBQUFBO0FBQUEsa0JBQ0MsUUFBUUEsS0FBSSxNQUFNO0FBQUEsa0JBQ2xCLFFBQVFBLEtBQUksTUFBTTtBQUFBLGtCQUNsQixhQUFhQSxLQUFJLFlBQVk7QUFBQSxrQkFFN0I7QUFBQTtBQUFBLHNCQUFDO0FBQUE7QUFBQSx3QkFDQyxjQUFjO0FBQUEsd0JBQ2QsUUFBUUEsS0FBSSxNQUFNO0FBQUEsd0JBQ2xCLFFBQVFBLEtBQUksTUFBTTtBQUFBLHdCQUVsQjtBQUFBLDBCQUFDO0FBQUE7QUFBQSw0QkFDQyxPQUFPO0FBQUEsNEJBQ1AsT0FBTTtBQUFBLDRCQUNOLFdBQVcsTUFBTSxjQUFjO0FBQUEsNEJBQy9CLGVBQWUsWUFBWSxhQUFhLEtBQUs7QUFBQTtBQUFBLHdCQUMvQztBQUFBO0FBQUEsb0JBQ0Y7QUFBQSxvQkFDQTtBQUFBLHNCQUFDO0FBQUE7QUFBQSx3QkFDQyxRQUFRQSxLQUFJLE1BQU07QUFBQSx3QkFDbEIsUUFBUUEsS0FBSSxNQUFNO0FBQUEsd0JBQ2xCLFNBQVMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFBQSx3QkFFekI7QUFBQSwwQkFBQztBQUFBO0FBQUEsNEJBQ0MsT0FBTztBQUFBLDRCQUNQLFdBQVcsTUFBTSxjQUFjO0FBQUEsNEJBQy9CLGVBQWUsWUFBWSxhQUFhLEtBQUs7QUFBQTtBQUFBLHdCQUMvQztBQUFBO0FBQUEsb0JBQ0Y7QUFBQTtBQUFBO0FBQUEsY0FDRjtBQUFBLGNBRUE7QUFBQSxnQkFBQ0EsS0FBSTtBQUFBLGdCQUFKO0FBQUEsa0JBQ0MsYUFBYTtBQUFBLGtCQUNiLFdBQVc7QUFBQSxrQkFDWCxXQUFXO0FBQUEsa0JBQ1g7QUFBQSxrQkFDQSxZQUFZO0FBQUEsa0JBRVosZ0JBQWdCLENBQUMsTUFBTTtBQUNyQiwwQkFBTUssY0FBYSxFQUFFLGVBQWU7QUFDcEMsMEJBQU0sTUFBTUEsWUFBVyxVQUFVO0FBQ2pDLDBCQUFNLFFBQWdCQSxZQUFXLFVBQVU7QUFFM0Msc0JBQUUsWUFBWTtBQUVkLHNCQUFFLFNBQVMsR0FBR0wsS0FBSSxhQUFhLFFBQVEsY0FBYyxLQUFLLENBQUM7QUFDM0Qsc0JBQUUsU0FBUyxLQUFLQSxLQUFJLGFBQWEsT0FBTyxjQUFjLEdBQUcsQ0FBQztBQUFBLGtCQUM1RDtBQUFBLGtCQUNBLEdBQUcsQ0FBQyxNQUFNO0FBQ1IsMEJBQU0sQ0FBQztBQUFBLGtCQUNUO0FBQUE7QUFBQSxjQUNGO0FBQUEsY0FFQSxxQkFBQyxlQUFVLFNBQU8sTUFDZjtBQUFBLDRCQUFZLGFBQ1gscUJBQUMsU0FBSSxPQUFNLFNBQVEsU0FBUyxRQUFRLE9BQ2xDO0FBQUE7QUFBQSxvQkFBQ0EsS0FBSTtBQUFBLG9CQUFKO0FBQUEsc0JBQ0MsV0FBVztBQUFBLHNCQUNYLFFBQVE7QUFBQSx3QkFDTixDQUFDLE1BQU0sTUFBTUUsT0FBTSxLQUFLLFlBQVksTUFBTUEsT0FBTSxLQUFLO0FBQUEsc0JBQ3ZEO0FBQUEsc0JBQ0EsV0FBVyxNQUFNO0FBQ2YsdUNBQWUsSUFBSSxFQUFFLEtBQUs7QUFBQSxzQkFDNUI7QUFBQSxzQkFFQTtBQUFBLHdCQUFDO0FBQUE7QUFBQSwwQkFDQyxVQUFVLFdBQVcsQ0FBQyxXQUFXO0FBQy9CLGdDQUFJLFdBQVdBLE9BQU0sS0FBSyxPQUFPO0FBQy9CLHFDQUFPO0FBQUEsNEJBQ1QsT0FBTztBQUNMLHFDQUFPO0FBQUEsNEJBQ1Q7QUFBQSwwQkFDRixDQUFDO0FBQUE7QUFBQSxzQkFDSDtBQUFBO0FBQUEsa0JBQ0Y7QUFBQSxrQkFFQTtBQUFBLG9CQUFDRixLQUFJO0FBQUEsb0JBQUo7QUFBQSxzQkFDQyxXQUFXO0FBQUEsc0JBQ1gsUUFBUSxjQUFjLENBQUMsTUFBTSxNQUFNRSxPQUFNLFFBQVEsRUFBRTtBQUFBLHNCQUNuRCxXQUFXLE1BQU07QUFFZix1Q0FBZSxJQUFJLEVBQUUsbUJBQW1CQSxPQUFNLFFBQVEsRUFBRTtBQUFBLHNCQUMxRDtBQUFBLHNCQUVBO0FBQUEsd0JBQUM7QUFBQTtBQUFBLDBCQUNDLFVBQVUsY0FBYyxDQUFDLFdBQVc7QUFDbEMsZ0NBQUksV0FBV0EsT0FBTSxRQUFRLEtBQUs7QUFDaEMscUNBQU87QUFBQSw0QkFDVCxPQUFPO0FBQ0wscUNBQU87QUFBQSw0QkFDVDtBQUFBLDBCQUNGLENBQUM7QUFBQTtBQUFBLHNCQUNIO0FBQUE7QUFBQSxrQkFDRjtBQUFBLGtCQUNBO0FBQUEsb0JBQUM7QUFBQTtBQUFBLHNCQUNDLFVBQVM7QUFBQSxzQkFDVCxXQUFXLE1BQU07QUFDZiw4QkFBTSxTQUFTLGVBQWUsSUFBSTtBQUNsQyw4QkFBTSxTQUFTLFVBQVUsb0JBQW9CLE1BQU07QUFDbkQsZ0NBQVEsTUFBTTtBQUFBLHNCQUNoQjtBQUFBO0FBQUEsa0JBQ0Y7QUFBQSxtQkFDRixJQUNFO0FBQUEsZ0JBQ0o7QUFBQSxrQkFBQztBQUFBO0FBQUEsb0JBQ0MsT0FBTTtBQUFBLG9CQUNOLGFBQWFGLEtBQUksWUFBWTtBQUFBLG9CQUM3QixTQUFTLFFBQVE7QUFBQSxvQkFDakIsUUFBUUEsS0FBSSxNQUFNO0FBQUEsb0JBRWxCO0FBQUE7QUFBQSx3QkFBQztBQUFBO0FBQUEsMEJBQ0MsV0FBVztBQUFBLDBCQUNYLFdBQVcsTUFBTTtBQUNmLHlDQUFhLEtBQUs7QUFDbEIsMkNBQWUsSUFBSSxHQUFHLFNBQVM7QUFBQSwwQkFDakM7QUFBQSwwQkFDQSxPQUFPLFlBQVksYUFBYSxLQUFLO0FBQUEsMEJBRXJDLDhCQUFDLFdBQU0sVUFBVSx1QkFBdUI7QUFBQTtBQUFBLHNCQUMxQztBQUFBLHNCQUVBO0FBQUEsd0JBQUM7QUFBQTtBQUFBLDBCQUNDLFdBQVc7QUFBQSwwQkFDWCxPQUFNO0FBQUEsMEJBQ04sV0FBVyxNQUFNO0FBQ2YseUNBQWEsS0FBSztBQUNsQiwyQ0FBZSxJQUFJLEdBQUcsV0FBVztBQUFBLDBCQUNuQztBQUFBLDBCQUVBLDhCQUFDLFdBQU0sVUFBVSxhQUFhO0FBQUE7QUFBQSxzQkFDaEM7QUFBQSxzQkFFQTtBQUFBLHdCQUFDO0FBQUE7QUFBQSwwQkFDQyxXQUFXO0FBQUEsMEJBQ1gsV0FBVyxNQUFNO0FBQ2YsMkNBQWUsSUFBSSxHQUFHLEtBQUs7QUFBQSwwQkFDN0I7QUFBQSwwQkFDQSxPQUFPLFlBQVksYUFBYSxLQUFLO0FBQUEsMEJBRXJDLDhCQUFDLFdBQU0sVUFBVSxzQkFBc0I7QUFBQTtBQUFBLHNCQUN6QztBQUFBO0FBQUE7QUFBQSxnQkFDRjtBQUFBLGdCQWFDLFlBQVksYUFDWCxvQkFBQyxTQUFJLE9BQU0sT0FBTSxLQUFJLG9CQUNuQjtBQUFBLGtCQUFDO0FBQUE7QUFBQSxvQkFDQztBQUFBLG9CQUNBO0FBQUEsb0JBQ0E7QUFBQSxvQkFDQTtBQUFBO0FBQUEsZ0JBQ0YsR0FDRixJQUNFO0FBQUEsaUJBQ047QUFBQTtBQUFBO0FBQUEsUUFDRjtBQUFBO0FBQUE7QUFBQSxFQUNGO0FBRUo7QUFFQSxJQUFPLHNCQUFROzs7QWFyZGYsT0FBT00sWUFBVztBQUVsQixJQUFNLG9CQUFvQixDQUFDLFlBQXNDO0FBQy9ELFNBQU8sUUFBUSxJQUFJLEVBQUUsSUFBSSxDQUFDLE9BQU87QUFBQSxJQUMvQixTQUFTLEVBQUUsYUFBYTtBQUFBLElBQ3hCLFdBQVcsRUFBRSxvQkFBb0IsTUFBTUEsT0FBTSxlQUFlO0FBQUEsRUFDOUQsRUFBRTtBQUNKO0FBRU8sSUFBTSx3QkFBd0IsTUFBTTtBQUN6QyxRQUFNLFFBQVFBLE9BQU0sWUFBWTtBQUNoQyxRQUFNLGFBQWEsY0FBYyxPQUFPLFNBQVM7QUFFakQsUUFBTSxDQUFDLGdCQUFnQixpQkFBaUIsSUFBSTtBQUFBLElBQzFDLGtCQUFrQixVQUFVO0FBQUEsRUFDOUI7QUFFQSxRQUFNLHFCQUFxQixlQUFlLENBQUMsY0FBYyxHQUFHLENBQUMsWUFBWTtBQUN2RSxXQUFPLFFBQVEsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsU0FBUztBQUFBLEVBQzFDLENBQUM7QUFFRCxhQUFXLElBQUksRUFBRSxRQUFRLENBQUMsV0FBVztBQUNuQyxXQUFPLFFBQVEsMkJBQTJCLE1BQU07QUFDOUMsd0JBQWtCLGtCQUFrQixVQUFVLENBQUM7QUFBQSxJQUNqRCxDQUFDO0FBQUEsRUFDSCxDQUFDO0FBRUQsUUFBTSxxQkFBcUIsV0FBVyxVQUFVLE1BQU07QUFDcEQsc0JBQWtCLGtCQUFrQixVQUFVLENBQUM7QUFBQSxFQUNqRCxDQUFDO0FBRUQsWUFBVSxNQUFNO0FBQ2QsdUJBQW1CO0FBQUEsRUFDckIsQ0FBQztBQUVELFNBQU87QUFDVDs7O0FDM0NBLE9BQU9DLFVBQVM7QUFDaEIsT0FBT0MsV0FBVTtBQUVqQixTQUFTLGFBQWEsV0FBbUIsWUFBb0I7QUFDM0QsU0FBTyxJQUFJLFFBQVEsQ0FBQyxTQUFTLFdBQVc7QUFDdEMsVUFBTSxNQUFNO0FBQUEsTUFDVjtBQUFBLE1BQ0E7QUFBQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxJQUNGO0FBRUEsVUFBTSxPQUFPRCxLQUFJLFdBQVc7QUFBQSxNQUMxQjtBQUFBLE1BQ0FBLEtBQUksZ0JBQWdCLGlCQUFpQkEsS0FBSSxnQkFBZ0I7QUFBQSxJQUMzRDtBQUVBLFNBQUssaUJBQWlCLE1BQU0sQ0FBQyxTQUFTLFFBQVE7QUFDNUMsVUFBSTtBQUNGLGNBQU0sVUFBVSxTQUFTLGtCQUFrQixHQUFHO0FBQzlDLFlBQUksUUFBUyxTQUFRLElBQUk7QUFBQSxZQUNwQixRQUFPLElBQUksTUFBTSxlQUFlLENBQUM7QUFBQSxNQUN4QyxTQUFTLEtBQUs7QUFDWixlQUFPLEdBQUc7QUFBQSxNQUNaO0FBQUEsSUFDRixDQUFDO0FBQUEsRUFDSCxDQUFDO0FBQ0g7QUFHQSxlQUFlLHFCQUNiLGtCQUNBLFFBQVEsTUFDUjtBQUNBLFFBQU0sVUFBVUEsS0FBSSxrQkFBa0IsSUFBSSxnQkFBZ0I7QUFDMUQsUUFBTSxTQUFTLElBQUlBLEtBQUksYUFBYTtBQUVwQyxNQUFJO0FBRUosTUFBSTtBQUNGLFdBQU8sTUFBTSxJQUFJLFFBQXNCLENBQUMsU0FBUyxXQUFXO0FBQzFELGFBQU8sY0FBYyxTQUFTLE1BQU0sQ0FBQyxLQUFLLFFBQVE7QUFDaEQsWUFBSTtBQUNGLGtCQUFRLE9BQU8sZUFBZSxHQUFHLENBQUM7QUFBQSxRQUNwQyxTQUFTLEdBQUc7QUFDVixpQkFBTyxDQUFDO0FBQUEsUUFDVjtBQUFBLE1BQ0YsQ0FBQztBQUFBLElBQ0gsQ0FBQztBQUFBLEVBQ0gsU0FBUyxLQUFLO0FBQ1osYUFBUyxzQkFBdUIsSUFBNEIsT0FBTztBQUNuRSxRQUFJLE9BQU87QUFDVCxNQUFBQyxNQUFLLG9CQUFvQkEsTUFBSyxrQkFBa0IsR0FBRyxNQUFNO0FBQ3ZELDZCQUFxQixrQkFBa0IsSUFBSTtBQUMzQyxlQUFPQSxNQUFLO0FBQUEsTUFDZCxDQUFDO0FBQUEsSUFDSDtBQUNBO0FBQUEsRUFDRjtBQUVBLFFBQU0sUUFBUSxLQUFLLGlCQUFpQjtBQUNwQyxRQUFNLFNBQVMsS0FBSyxrQkFBa0I7QUFHdEMsUUFBTSxlQUNKLEtBQUssVUFBVTtBQUFBLElBQ2IsU0FBUyxDQUFDLG9CQUFvQixHQUFHLE1BQU07QUFBQSxFQUN6QyxDQUFDLElBQUk7QUFFUCxNQUFJO0FBQ0YsV0FBTyxVQUFVLGNBQWMsSUFBSTtBQUFBLEVBQ3JDLFNBQVMsR0FBRztBQUNWLGFBQVMsaUJBQWtCLEVBQTBCLE9BQU87QUFDNUQsUUFBSSxPQUFPO0FBQ1QsTUFBQUEsTUFBSyxvQkFBb0JBLE1BQUssa0JBQWtCLEdBQUcsTUFBTTtBQUN2RCw2QkFBcUIsa0JBQWtCLElBQUk7QUFDM0MsZUFBT0EsTUFBSztBQUFBLE1BQ2QsQ0FBQztBQUFBLElBQ0g7QUFDQTtBQUFBLEVBQ0Y7QUFFQSxNQUFJLFNBQVM7QUFFYixXQUFTLE9BQU8sS0FBNkIsS0FBc0I7QUFDakUsUUFBSSxDQUFDLElBQUs7QUFFVixRQUFJO0FBQ0YsWUFBTSxRQUFRLElBQUksa0JBQWtCLEdBQUc7QUFDdkMsWUFBTSxPQUFPLE9BQU8sU0FBUztBQUU3QixVQUFJLENBQUMsUUFBUSxLQUFLLFdBQVcsR0FBRztBQUM5QixpQkFBUyxzQ0FBc0M7QUFDL0MsYUFBSyxNQUFNLElBQUk7QUFDZixZQUFJLE9BQU87QUFDVCxVQUFBQSxNQUFLLG9CQUFvQkEsTUFBSyxrQkFBa0IsR0FBRyxNQUFNO0FBQ3ZELGlDQUFxQixrQkFBa0IsSUFBSTtBQUMzQyxtQkFBT0EsTUFBSztBQUFBLFVBQ2QsQ0FBQztBQUFBLFFBQ0g7QUFDQTtBQUFBLE1BQ0Y7QUFFQSxnQkFBVSxJQUFJLFlBQVksRUFBRSxPQUFPLElBQUk7QUFFdkMsWUFBTSxRQUFRLE9BQU8sTUFBTSxJQUFJO0FBQy9CLGVBQVMsTUFBTSxJQUFJLEtBQUs7QUFFeEIsaUJBQVcsUUFBUSxPQUFPO0FBQ3hCLFlBQUksQ0FBQyxLQUFLLEtBQUssRUFBRztBQUNsQixZQUFJO0FBQ0YsZ0JBQU0sT0FBTyxLQUFLLE1BQU0sSUFBSTtBQUM1QixjQUNFLEtBQUssVUFBVSxxQkFDZixLQUFLLFNBQVMsVUFDZCxLQUFLLE1BQ0w7QUFDQSxrQkFBTSxhQUFhQSxNQUFLLGdCQUFnQjtBQUFBLGNBQ3RDO0FBQUEsY0FDQSxxQkFBcUIsS0FBSyxJQUFJLENBQUM7QUFBQSxZQUNqQyxDQUFDO0FBRUQseUJBQWEsS0FBSyxNQUFNLFVBQVUsRUFDL0IsS0FBSyxNQUFNO0FBQ1YsK0JBQWlCLFVBQVU7QUFBQSxZQUM3QixDQUFDLEVBQ0EsTUFBTSxDQUFDLE1BQU07QUFDWix1QkFBUywyQkFBMkIsRUFBRSxPQUFPO0FBQUEsWUFDL0MsQ0FBQztBQUFBLFVBQ0w7QUFBQSxRQUNGLFNBQVMsR0FBRztBQUNWLG1CQUFTLHFCQUFzQixFQUEwQixPQUFPO0FBQUEsUUFDbEU7QUFBQSxNQUNGO0FBR0EsVUFBSSxpQkFBaUIsTUFBTUEsTUFBSyxrQkFBa0IsTUFBTSxNQUFNO0FBQUEsSUFDaEUsU0FBUyxHQUFHO0FBQ1YsZUFBUyxzQkFBdUIsRUFBMEIsT0FBTztBQUFBLElBQ25FO0FBQUEsRUFDRjtBQUVBLFFBQU0saUJBQWlCLE1BQU1BLE1BQUssa0JBQWtCLE1BQU0sTUFBTTtBQUNsRTtBQUdPLFNBQVMsc0JBQ2Qsa0JBQ0E7QUFDQSx1QkFBcUIsZ0JBQWdCO0FBQ3ZDOzs7QUMzSkEsT0FBT0MsVUFBUztBQUNoQixPQUFPQyxXQUFVO0FBRWpCLFNBQVMsZUFBZSxTQUFtQjtBQUN6QyxTQUFPLElBQUksUUFBYyxDQUFDLFNBQVMsV0FBVztBQUM1QyxVQUFNLFVBQVVELEtBQUksa0JBQWtCLElBQUksZ0JBQWdCO0FBQzFELFVBQU0sU0FBUyxJQUFJQSxLQUFJLGFBQWE7QUFFcEMsV0FBTyxjQUFjLFNBQVMsTUFBTSxDQUFDLFNBQVMsUUFBUTtBQUNwRCxVQUFJO0FBQ0YsWUFBSSxDQUFDLFNBQVM7QUFDWixtQkFBUywrQkFBK0I7QUFDeEM7QUFBQSxRQUNGO0FBRUEsY0FBTSxPQUFPLFFBQVEsZUFBZSxHQUFHO0FBQ3ZDLGNBQU0sU0FBUyxLQUFLLGtCQUFrQjtBQUV0QyxjQUFNLFNBQVMsS0FBSyxVQUFVLEVBQUUsUUFBUSxDQUFDLElBQUk7QUFDN0MsY0FBTSxZQUFZLElBQUksWUFBWSxFQUFFLE9BQU8sTUFBTTtBQUVqRCxlQUFPO0FBQUEsVUFDTDtBQUFBLFVBQ0FDLE1BQUs7QUFBQSxVQUNMO0FBQUEsVUFDQSxDQUFDLFFBQVEsV0FBVztBQUNsQixnQkFBSTtBQUNGLHNCQUFRLG1CQUFtQixNQUFNO0FBQ2pDLHFCQUFPLE1BQU0sSUFBSTtBQUNqQixtQkFBSyxNQUFNLElBQUk7QUFDZixzQkFBUTtBQUFBLFlBQ1YsU0FBUyxHQUFHO0FBQ1Ysb0JBQU0sUUFBUTtBQUNkO0FBQUEsZ0JBQ0UsSUFBSSxNQUFNLG9DQUFvQyxNQUFNLE9BQU87QUFBQSxjQUM3RDtBQUFBLFlBQ0Y7QUFBQSxVQUNGO0FBQUEsUUFDRjtBQUFBLE1BQ0YsU0FBUyxHQUFHO0FBQ1YsY0FBTSxRQUFRO0FBQ2QsZUFBTyxJQUFJLE1BQU0sc0NBQXNDLE1BQU0sT0FBTyxDQUFDO0FBQUEsTUFDdkU7QUFBQSxJQUNGLENBQUM7QUFBQSxFQUNILENBQUM7QUFDSDtBQUVPLElBQU0sc0JBQXNCLENBQUMsV0FBNEI7QUFDOUQsTUFBSSxXQUFXLFFBQVE7QUFDckIsbUJBQWUsQ0FBQyxlQUFlLENBQUM7QUFBQSxFQUNsQyxPQUFPO0FBQ0wsbUJBQWUsQ0FBQyxlQUFlLENBQUM7QUFBQSxFQUNsQztBQUNGOzs7QUNyREEsT0FBTyxVQUFVO0FBRWpCLElBQU0sTUFBd0IsSUFBSSxLQUFLLFlBQVk7QUFFNUMsU0FBUyxjQUFjO0FBQzVCLE9BQUssZ0JBQWdCLEdBQUc7QUFFeEIsUUFBTSxPQUNKLElBQUksT0FBTyxJQUFJLE1BQU0sSUFBSSxPQUFPLElBQUksTUFBTSxJQUFJLFVBQVUsSUFBSTtBQUM5RCxRQUFNLFFBQVEsT0FBTyxJQUFJLE9BQU8sSUFBSTtBQUVwQyxTQUFPLEVBQUUsTUFBTSxNQUFNO0FBQ3ZCO0FBRU8sU0FBUyxpQkFDZCxNQUNBLE1BQ0E7QUFDQSxNQUFJLENBQUMsUUFBUSxDQUFDLEtBQU0sUUFBTztBQUUzQixRQUFNLFdBQVcsS0FBSyxPQUFPLEtBQUs7QUFDbEMsUUFBTSxZQUFZLEtBQUssUUFBUSxLQUFLO0FBRXBDLFFBQU0sTUFBTSxXQUFXO0FBRXZCLFNBQU87QUFDVDs7O0FDdEJPLElBQU0sY0FBYyxNQUFNO0FBQy9CLFFBQU0sQ0FBQyxNQUFNLE9BQU8sSUFBSSxZQUFZLFlBQVksQ0FBQztBQUVqRCxRQUFNLE9BQU87QUFBQSxJQUNYO0FBQUEsTUFDRSxVQUFVO0FBQUEsTUFDVixvQkFBb0I7QUFBQSxJQUN0QjtBQUFBLElBQ0E7QUFBQSxJQUNBLE1BQU07QUFDSixZQUFNLE9BQU8sWUFBWTtBQUN6QixZQUFNLE9BQU8saUJBQWlCLEtBQUssSUFBSSxHQUFHLElBQUk7QUFFOUMsVUFBSSxDQUFDLEtBQU0sUUFBTyxFQUFFLFVBQVUsR0FBRyxvQkFBb0IsRUFBRTtBQUV2RCxjQUFRLElBQUk7QUFFWixZQUFNLFdBQVcsT0FBTyxJQUFJLElBQUk7QUFDaEMsYUFBTztBQUFBLFFBQ0w7QUFBQSxRQUNBLG9CQUFvQixXQUFXO0FBQUEsTUFDakM7QUFBQSxJQUNGO0FBQUEsRUFDRjtBQUVBLFNBQU87QUFDVDs7O0FDOUJBLE9BQU9DLFdBQVU7QUFFakIsSUFBTSxNQUFNLElBQUlBLE1BQUssWUFBWTtBQUUxQixTQUFTLGlCQUFpQjtBQUMvQixFQUFBQSxNQUFLLGdCQUFnQixHQUFHO0FBRXhCLFFBQU0sUUFBUSxJQUFJO0FBQ2xCLFFBQU0sWUFBWSxJQUFJLE9BQU8sSUFBSSxTQUFTLElBQUk7QUFDOUMsUUFBTSxPQUFPLFFBQVE7QUFDckIsUUFBTSxjQUFjLE9BQU87QUFFM0IsU0FBTztBQUFBLElBQ0wsU0FBUztBQUFBLElBQ1QsYUFBYTtBQUFBLElBQ2IsUUFBUTtBQUFBLElBQ1IsYUFBYSxZQUFZLFFBQVEsQ0FBQztBQUFBLEVBQ3BDO0FBQ0Y7OztBQ2ZPLElBQU0sb0JBQW9CLE1BQU07QUFDckMsUUFBTSxPQUFPO0FBQUEsSUFDWDtBQUFBLE1BQ0UsYUFBYTtBQUFBLE1BQ2IsdUJBQXVCO0FBQUEsSUFDekI7QUFBQSxJQUNBO0FBQUEsSUFDQSxNQUFNO0FBQ0osWUFBTSxPQUFPLGVBQWU7QUFFNUIsVUFBSSxDQUFDLEtBQU0sUUFBTyxFQUFFLGFBQWEsR0FBRyx1QkFBdUIsRUFBRTtBQUU3RCxZQUFNLE9BQU8sT0FBTyxLQUFLLFdBQVcsSUFBSTtBQUV4QyxhQUFPO0FBQUEsUUFDTCxhQUFhO0FBQUEsUUFDYix1QkFBdUIsT0FBTztBQUFBLE1BQ2hDO0FBQUEsSUFDRjtBQUFBLEVBQ0Y7QUFFQSxTQUFPO0FBQ1Q7OztBQ3hCQSxPQUFPQyxXQUFVO0FBRVYsSUFBTSxtQkFBbUIsQ0FBQyxXQUFvQztBQUNuRSxRQUFNLGFBQWEsV0FBVyxJQUFJLEtBQUssTUFBTTtBQUMzQyxRQUFJLE1BQU1BLE1BQUssU0FBUyxjQUFjO0FBQ3RDLFVBQU0sY0FBYyxXQUFXLFNBQVMsVUFBVTtBQUNsRCxXQUFPLElBQUksT0FBTyxXQUFXLEtBQUs7QUFBQSxFQUNwQyxDQUFDO0FBRUQsU0FBTztBQUNUOzs7QUNUQSxPQUFPQyxlQUFjOzs7QUNDZCxJQUFNLHNCQUFzQixDQUNqQyxVQUNBLGFBQ0c7QUFDSCxTQUFPLFVBQVUsVUFBVSxNQUFNLFVBQVUsVUFBVTtBQUN2RDs7O0FDUkEsYUFBQUMsS0FBQSxvQ0FBQUM7QUFHQSxzQ0FBQyxTQUFTLEVBQUUsV0FBVyx5QkFBeUIsQ0FBQztBQUMxQyxJQUFNLHlCQUFOLGVBQXFDRCxNQUFBRSxTQUFRLFFBQ2xELFdBQUMsU0FBUyxNQUFNLElBRDBCRixLQUFlO0FBQUEsRUFHekQsWUFBWSxFQUFFLEdBQUcsR0FBbUI7QUFDbEMsVUFBTTtBQUhVLGNBQUssa0JBQUxDLFFBQUEsU0FBSyxJQUFMLGtCQUFBQSxRQUFBO0FBS2hCLFNBQUssS0FBSztBQUFBLEVBQ1o7QUFBQSxFQUVBLFNBQWlCO0FBQ2YsV0FBTyxLQUFLO0FBQUEsRUFDZDtBQUFBLEVBRUEsY0FBc0M7QUFDcEMsV0FBTyxDQUFDO0FBQUEsRUFDVjtBQUFBLEVBRUEsSUFBSSxVQUFrQztBQUNwQyxXQUFPLEtBQUssWUFBWTtBQUFBLEVBQzFCO0FBQ0Y7QUFwQk9BLFNBQUEsaUJBQUFEO0FBQ2Esa0JBQUFDLFFBQUEsU0FBbEIsU0FEVztBQUFBLHlCQUFOLGtCQUFBQSxRQUFBLDZCQURQLG9DQUNhO0FBQU4sa0JBQUFBLFFBQUEsR0FBTTs7O0FDQ2IsSUFBTSxrQkFBa0I7QUFFakIsSUFBTSxnQ0FBZ0MsQ0FDM0MsVUFDQSxZQUNBLGlCQUN5RDtBQUN6RCxRQUFNLGFBQWEsU0FBUyxlQUFlO0FBQzNDLFFBQU0sV0FBVyxXQUFXLE9BQU8sQ0FBQyxNQUFNO0FBQ3hDLFdBQU8sb0JBQW9CLEVBQUUsWUFBWSxHQUFHLFVBQVU7QUFBQSxFQUN4RCxDQUFDO0FBRUQsUUFBTSxPQUFPLElBQUksSUFBSSxTQUFTLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxPQUFPLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFFekQsUUFBTSxTQUErRCxDQUFDO0FBRXRFLFdBQVMsSUFBSSxHQUFHLEtBQUssaUJBQWlCLEtBQUs7QUFDekMsVUFBTSxLQUFLLElBQUksa0JBQWtCO0FBQ2pDLFVBQU0sS0FBSyxLQUFLLElBQUksRUFBRTtBQUV0QixRQUFJLElBQUk7QUFDTixhQUFPLEtBQUssRUFBRTtBQUFBLElBQ2hCLE9BQU87QUFFTCxZQUFNLE9BQU8sSUFBSSx1QkFBdUI7QUFBQSxRQUN0QztBQUFBLE1BQ0YsQ0FBQztBQUVELGFBQU8sS0FBSyxJQUFJO0FBQUEsSUFDbEI7QUFBQSxFQUNGO0FBRUEsU0FBTztBQUNUOzs7QUgvQkEsSUFBTSxhQUFhLENBQUM7QUFBQSxFQUNsQjtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQ0YsTUFJTTtBQUNKLFFBQU0sUUFBUSxXQUFXLE9BQU8sVUFBVSxDQUFDO0FBQzNDLFFBQU0sU0FBUyxjQUFjLEVBQUUsTUFBTSxNQUFNLENBQUMsTUFBTTtBQUNsRCxRQUFNLFFBQVEsY0FBYyxRQUFRLE9BQU87QUFFM0MsUUFBTSxZQUFZO0FBQUEsSUFDaEIsQ0FBQyxNQUFNLEdBQUcsWUFBWSxNQUFNLFFBQVEsWUFBWTtBQUFBLEVBQ2xEO0FBRUEsUUFBTSxZQUFZO0FBQUEsSUFDaEIsQ0FBQyxXQUFXLGNBQWM7QUFBQSxJQUMxQixDQUFDRSxZQUFXQyxvQkFBbUI7QUFDN0IsVUFBSSxNQUFNO0FBRVYsVUFBSUQsZUFBYyxNQUFNO0FBQ3RCLGVBQU87QUFBQSxNQUNULFdBQVdDLG9CQUFtQixNQUFNO0FBQ2xDLGVBQU87QUFBQSxNQUNUO0FBRUEsYUFBTztBQUFBLElBQ1Q7QUFBQSxFQUNGO0FBQ0EsU0FDRTtBQUFBLElBQUM7QUFBQTtBQUFBLE1BQ0MsU0FBUyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztBQUFBLE1BQ3pCLE9BQU87QUFBQSxNQUNQLGFBQWE7QUFBQSxNQUNiLFdBQVcsTUFBTTtBQUNmLGNBQU0scUJBQXFCLFVBQVUsSUFBSTtBQUN6QyxZQUFJLHVCQUF1QixLQUFNO0FBRWpDLGVBQU8sTUFBTTtBQUFBLE1BQ2Y7QUFBQSxNQUNBLFdBQVc7QUFBQSxNQUVYO0FBQUEsUUFBQztBQUFBO0FBQUEsVUFDQyxVQUFVLFNBQVMsUUFBUTtBQUFBLFVBQzNCLFNBQVMsQ0FBQyxDQUFDO0FBQUEsVUFDWCxXQUFXO0FBQUEsVUFDWCxNQUFNLFNBQVMsU0FBWTtBQUFBO0FBQUEsTUFDN0I7QUFBQTtBQUFBLEVBQ0Y7QUFFSjtBQUVBLElBQU0sZ0JBQWdCLENBQUM7QUFBQSxFQUNyQjtBQUFBLEVBQ0E7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFDRixNQU1NO0FBQ0osUUFBTSxVQUFVLGNBQWMsV0FBVyxTQUFTO0FBQ2xELFFBQU0sZUFBZSxRQUFRLENBQUMsTUFBTSxFQUFFLFNBQVMsTUFBTSxLQUFLO0FBRTFELFFBQU0sWUFBWSxRQUFRLENBQUNDLGFBQVk7QUFDckMsUUFBSSxNQUFNO0FBRVYsUUFBSUEsU0FBUSxTQUFTLEdBQUc7QUFDdEIsYUFBTztBQUFBLElBQ1Q7QUFFQSxXQUFPO0FBQUEsRUFDVCxDQUFDO0FBRUQsUUFBTSxpQkFBaUIsbUJBQW1CLENBQUMsTUFBTTtBQUMvQyxXQUFPLFVBQVUsT0FBTyxNQUFNO0FBQUEsRUFDaEMsQ0FBQztBQUVELFNBQ0UscUJBQUMsU0FBSSxPQUFPLFdBQ1Y7QUFBQSx3QkFBQyxPQUFJLE1BQU0sU0FDUixXQUFDLFdBQVc7QUFDWCxhQUNFO0FBQUEsUUFBQztBQUFBO0FBQUEsVUFDQztBQUFBLFVBQ0E7QUFBQSxVQUNBLGdCQUFnQixRQUFRLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQztBQUFBO0FBQUEsTUFDN0M7QUFBQSxJQUVKLEdBQ0Y7QUFBQSxJQUVBO0FBQUEsTUFBQztBQUFBO0FBQUEsUUFDQyxTQUFTO0FBQUEsUUFDVCxPQUFPO0FBQUEsVUFBZSxDQUFDLE1BQ3JCLE1BQU0sT0FBTyxnQ0FBZ0M7QUFBQSxRQUMvQztBQUFBLFFBQ0EsV0FBVyxNQUFNO0FBQ2YsbUJBQVMsU0FBUyxvQkFBb0IsTUFBTSxJQUFJLElBQUksR0FBRyxTQUFTLENBQUM7QUFBQSxRQUNuRTtBQUFBLFFBQ0EsYUFBYTtBQUFBLFFBRWIsOEJBQUMsV0FBTSxPQUFNLFVBQUk7QUFBQTtBQUFBLElBQ25CO0FBQUEsS0FDRjtBQUVKO0FBQ0EsSUFBTSxhQUFhLENBQUM7QUFBQSxFQUNsQjtBQUFBLEVBQ0E7QUFDRixNQUdNO0FBQ0osUUFBTSxXQUFXQyxVQUFTLFlBQVk7QUFDdEMsUUFBTSxtQkFBbUIsY0FBYyxVQUFVLGtCQUFrQjtBQUNuRSxRQUFNLHFCQUFxQixpQkFBaUIsQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDO0FBRTlELFFBQU0sQ0FBQyxZQUFZLGFBQWEsSUFBSTtBQUFBLElBQ2xDLDhCQUE4QixVQUFVLFlBQVksS0FBSztBQUFBLEVBQzNEO0FBQ0EsUUFBTSxnQkFBZ0IsY0FBYyxVQUFVLGdCQUFnQjtBQUU5RCxXQUFTLFFBQVEsc0JBQXNCLE1BQU07QUFDM0MsVUFBTSxnQkFBZ0I7QUFBQSxNQUNwQjtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsSUFDRjtBQUVBLGtCQUFjLGFBQWE7QUFBQSxFQUM3QixDQUFDO0FBRUQsU0FDRSxvQkFBQyxTQUFJLE9BQU0sY0FDVCw4QkFBQyxPQUFJLE1BQU0sWUFDUixXQUFDLE1BQU1DLFdBQ047QUFBQSxJQUFDO0FBQUE7QUFBQSxNQUNDLE9BQU9BO0FBQUEsTUFDUDtBQUFBLE1BQ0E7QUFBQSxNQUNBLFdBQVc7QUFBQSxNQUNYO0FBQUE7QUFBQSxFQUNGLEdBRUosR0FDRjtBQUVKO0FBRUEsSUFBTyxxQkFBUTs7O0FJbEtmLE9BQU8sZUFBZTtBQUd0QixJQUFNLHdCQUF3QixDQUFDLFNBQXFDO0FBQ2xFLFNBQU8sS0FBSyxtQkFBbUIsS0FBSyxLQUFLLFVBQVU7QUFDckQ7QUFFQSxJQUFNLFdBQVcsQ0FBQyxFQUFFLEtBQUssTUFBb0M7QUFDM0QsUUFBTSxXQUFvQixDQUFDLENBQUUsS0FBSyxlQUFlLEdBQUcsWUFBWTtBQUloRSxRQUFNLENBQUMsb0JBQW9CLHFCQUFxQixJQUFJO0FBQUEsSUFDbEQsc0JBQXNCLElBQUk7QUFBQSxFQUM1QjtBQUVBLFFBQU0sUUFBUSxjQUFjLE1BQU0sT0FBTztBQUN6QyxRQUFNLFlBQVksY0FBYyxNQUFNLFdBQVc7QUFFakQsT0FBSyxRQUFRLG1CQUFtQixDQUFDLE1BQU07QUFFckMsMEJBQXNCLHNCQUFzQixDQUFDLENBQUM7QUFBQSxFQUNoRCxDQUFDO0FBRUQsT0FBSyxRQUFRLGlCQUFpQixDQUFDLE1BQU07QUFDbkMsMEJBQXNCLHNCQUFzQixDQUFDLENBQUM7QUFBQSxFQUNoRCxDQUFDO0FBRUQsTUFBSTtBQUNGLFdBQ0U7QUFBQSxNQUFDO0FBQUE7QUFBQSxRQUNDLE9BQU87QUFBQSxRQUNQLEdBQUcsQ0FBQyxNQUFNO0FBRVIsZ0JBQU0sVUFBVSxLQUFLLGlCQUFpQjtBQUV0QyxjQUFJLFFBQVMsR0FBRSxvQkFBb0IsWUFBWSxPQUFPO0FBQUEsUUFDeEQ7QUFBQSxRQUVBLGdCQUFnQjtBQUFBLFFBQ2hCO0FBQUEsUUFFQSw4QkFBQyxXQUFNLE9BQWM7QUFBQTtBQUFBLElBQ3ZCO0FBR0osU0FDRTtBQUFBLElBQUM7QUFBQTtBQUFBLE1BQ0MsS0FBSztBQUFBLE1BQ0wsV0FBVyxNQUFNO0FBQ2YsYUFBSyxTQUFTLEdBQUcsQ0FBQztBQUFBLE1BQ3BCO0FBQUEsTUFDQSxnQkFBZ0I7QUFBQSxNQUVoQiw4QkFBQyxXQUFNLE9BQWM7QUFBQTtBQUFBLEVBQ3ZCO0FBRUo7QUFFQSxJQUFNLE9BQU8sTUFBTTtBQUNqQixRQUFNLE9BQU8sVUFBVSxZQUFZO0FBQ25DLFFBQU0sUUFBUSxjQUFjLE1BQU0sT0FBTztBQUV6QyxTQUNFO0FBQUEsSUFBQztBQUFBO0FBQUEsTUFDQyxPQUFNO0FBQUEsTUFDTixTQUFTLFFBQVE7QUFBQSxNQUNqQixTQUFTLE1BQU0sQ0FBQ0MsV0FBVUEsT0FBTSxTQUFTLENBQUM7QUFBQSxNQUUxQyw4QkFBQyxPQUFJLE1BQU0sT0FBUSxXQUFDLFNBQVMsb0JBQUMsWUFBUyxNQUFZLEdBQUc7QUFBQTtBQUFBLEVBQ3hEO0FBRUo7QUFFQSxJQUFPLGVBQVE7OztBQzNFUixJQUFNLGNBQWM7QUFBQSxFQUN6QixrQkFBa0I7QUFBQSxFQUNsQixLQUFLO0FBQUEsRUFDTCxvQkFBb0I7QUFBQSxFQUNwQixtQkFBbUI7QUFDckI7OztBQ0hPLElBQU0sY0FBYyxNQUFNO0FBQy9CLFNBQU8sS0FBSztBQUFBLElBQ1Y7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLEVBQ0YsQ0FBQztBQUNIO0FBRU8sSUFBTSxpQkFBaUIsQ0FBQ0MsY0FBcUI7QUFDbEQsTUFBSUEsY0FBYSxhQUFhQSxjQUFhLGNBQVc7QUFDcEQsV0FBTztBQUFBLEVBQ1QsV0FBV0EsV0FBVSxTQUFTLFNBQVMsR0FBRztBQUN4QyxXQUFPO0FBQUEsRUFDVDtBQUVBLFNBQU9BO0FBQ1Q7OztBQ2pCQSxPQUFPLG9CQUFvQjtBQUMzQixPQUFPLGtCQUFrQjtBQUN6QixPQUFPQyxjQUFhOzs7QUNEYixJQUFNLFlBQVksQ0FDdkIsb0JBQTJDLENBQUMsTUFDaEM7QUFDWixTQUFPLGtCQUFrQixLQUFLLENBQUMsT0FBTztBQUNwQyxRQUFJLEdBQUcsUUFBUSxHQUFHO0FBQ2hCLGFBQU87QUFBQSxJQUNUO0FBRUEsVUFBTSxPQUFPLEdBQUcsb0JBQW9CO0FBRXBDLFFBQUksQ0FBQyxhQUFhLFdBQVcsU0FBUyxPQUFPLEVBQUUsU0FBUyxJQUFJLEdBQUc7QUFDN0QsYUFBTztBQUFBLElBQ1Q7QUFFQSxXQUFPO0FBQUEsRUFDVCxDQUFDO0FBQ0g7OztBQ2pCQSxPQUFPLFlBQVk7QUFDbkIsT0FBT0MsV0FBVTtBQUVWLElBQU0sbUJBQW1CLENBQUM7QUFBQSxFQUMvQjtBQUNGLE1BRU07QUFDSixRQUFNLENBQUMsZUFBZSxnQkFBZ0IsSUFBSTtBQUFBLElBQ3hDLENBQUM7QUFBQSxFQUNIO0FBRUEsUUFBTSxTQUFTLE9BQU8sWUFBWTtBQUNsQyxRQUFNLGdCQUFnQixjQUFjLFFBQVEsZUFBZTtBQUMzRCxRQUFNLGNBQWMsY0FBYyxRQUFRLGFBQWE7QUFFdkQsUUFBTSx5QkFBeUIsQ0FBQyxPQUFlO0FBQzdDLHFCQUFpQixDQUFDLFNBQVM7QUFDekIsYUFBTyxLQUFLLE9BQU8sQ0FBQyxNQUFNLEVBQUUsT0FBTyxNQUFNLEVBQUU7QUFBQSxJQUM3QyxDQUFDO0FBQUEsRUFDSDtBQUVBLFNBQU8sUUFBUSxZQUFZLENBQUMsU0FBUyxJQUFJLGFBQWE7QUFDcEQsVUFBTSxXQUFXLE9BQU8sWUFBWTtBQUNwQyxVQUFNLFFBQVEsU0FBUyxpQkFBaUIsRUFBRTtBQUMxQyxRQUFJLENBQUMsTUFBTztBQUVaLHFCQUFpQixDQUFDLFNBQVM7QUFDekIsVUFBSSxVQUFVO0FBRVosZUFBTyxLQUFLLElBQUksQ0FBQyxTQUFVLEtBQUssT0FBTyxLQUFLLFFBQVEsSUFBSztBQUFBLE1BQzNEO0FBR0EsYUFBTyxDQUFDLE9BQU8sR0FBRyxJQUFJO0FBQUEsSUFDeEIsQ0FBQztBQUVELFFBQUksc0JBQXNCLE1BQU0sbUJBQW1CLE1BQU0sSUFBSTtBQUMzRCxNQUFBQSxNQUFLLFlBQVlBLE1BQUssa0JBQWtCLEtBQVEsTUFBTTtBQUNwRCwrQkFBdUIsRUFBRTtBQUN6QixlQUFPQSxNQUFLO0FBQUEsTUFDZCxDQUFDO0FBQUEsSUFDSDtBQUFBLEVBQ0YsQ0FBQztBQUVELFNBQU8sUUFBUSxZQUFZLENBQUMsU0FBUyxJQUFJLFdBQVc7QUFDbEQsUUFBSSx1QkFBdUIsU0FBUyxXQUFXLE9BQU8sYUFBYTtBQUNqRTtBQUVGLDJCQUF1QixFQUFFO0FBQUEsRUFDM0IsQ0FBQztBQUVELFNBQU8sRUFBRSxlQUFlLGFBQWEsY0FBYztBQUNyRDs7O0FDcERBLE9BQU8sYUFBYTtBQUVwQixPQUFPQyxZQUFXO0FBSWxCLElBQU0sYUFBYSxDQUFDLFlBQThCO0FBQ2hELFFBQU0sT0FBTyxvQkFBSSxJQUE0QjtBQUU3QyxhQUFXLEtBQUssU0FBUztBQUN2QixVQUFNLE9BQU8sRUFBRSxTQUFTLEtBQUs7QUFDN0IsVUFBTSxPQUFPLEVBQUUsU0FBUyxLQUFLO0FBQzdCLFVBQU0sTUFBTSxHQUFHLElBQUksS0FBSyxJQUFJO0FBRzVCLFFBQUksQ0FBQyxLQUFLLElBQUksR0FBRyxHQUFHO0FBQ2xCLFdBQUssSUFBSSxLQUFLLENBQUM7QUFBQSxJQUNqQjtBQUFBLEVBQ0Y7QUFFQSxTQUFPLE1BQU0sS0FBSyxLQUFLLE9BQU8sQ0FBQztBQUNqQztBQUVBLElBQU0sa0JBQWtCLENBQUMsRUFBRSxPQUFPLE1BQWtDO0FBQ2xFLFFBQU0sT0FBTyxjQUFjLFFBQVEsTUFBTTtBQUN6QyxRQUFNLE9BQU8sY0FBYyxRQUFRLGFBQWE7QUFFaEQsUUFBTSxRQUFRLFdBQVcsT0FBTyxnQkFBZ0IsS0FBSyxFQUFFO0FBRXZELFFBQU0sU0FBUyxjQUFjLEVBQUUsTUFBTSxNQUFNLENBQUMsTUFBTTtBQUNsRCxRQUFNLFNBQVMsY0FBYyxRQUFRLFFBQVE7QUFFN0MsUUFBTSxDQUFDLEtBQUssSUFBSSxZQUFZLENBQUM7QUFFN0IsUUFBTSxFQUFFLFlBQVksTUFBTSxJQUFJLG1CQUFtQjtBQUFBLElBQy9DO0FBQUEsSUFDQSxPQUFPO0FBQUEsSUFDUCxhQUFhLENBQUMsTUFBTTtBQUNsQixjQUFRLElBQUksRUFBRSxFQUFFLENBQUM7QUFDakIsYUFBTyxXQUFXLENBQUM7QUFBQSxJQUNyQjtBQUFBLElBQ0EsYUFBYTtBQUFBLElBRWIsU0FBUztBQUFBLEVBQ1gsQ0FBQztBQUVELFNBQ0UscUJBQUMsU0FBSSxhQUFhQyxLQUFJLFlBQVksVUFDaEM7QUFBQSx5QkFBQyxTQUFJLFNBQVMsUUFBUSxRQUNwQjtBQUFBLDBCQUFDLFdBQU0sT0FBTyxNQUFNO0FBQUEsTUFDcEIscUJBQUMsU0FBSSxTQUFTLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsU0FBUyxRQUFRLFFBQy9DO0FBQUEsNEJBQUMsV0FBTSxPQUFNLFVBQUk7QUFBQSxRQUNqQjtBQUFBLFVBQUM7QUFBQTtBQUFBLFlBQ0MsT0FBTztBQUFBLFlBQ1AsV0FBV0MsT0FBTSxjQUFjO0FBQUEsWUFDL0IsZUFBZTtBQUFBO0FBQUEsUUFDakI7QUFBQSxTQUNGO0FBQUEsT0FDRjtBQUFBLElBRUEscUJBQUMsU0FDQztBQUFBO0FBQUEsUUFBQztBQUFBO0FBQUEsVUFDQyxVQUFVLFNBQVMsUUFBUTtBQUFBLFVBQzNCLFNBQVMsQ0FBQyxDQUFDO0FBQUEsVUFDWCxXQUFXO0FBQUEsVUFDWCxNQUFNLFNBQVMsU0FBWTtBQUFBO0FBQUEsTUFDN0I7QUFBQSxNQUNBO0FBQUEsUUFBQ0QsS0FBSTtBQUFBLFFBQUo7QUFBQSxVQUNDO0FBQUEsVUFDQSxTQUFPO0FBQUEsVUFDUCxHQUFHLENBQUMsTUFBTTtBQUNSLGtCQUFNLENBQUM7QUFBQSxVQUNUO0FBQUE7QUFBQSxNQUNGO0FBQUEsT0FDRjtBQUFBLEtBQ0Y7QUFFSjtBQUVBLElBQU0sY0FBYyxNQUFNO0FBQ3hCLFFBQU0sS0FBSyxRQUFRLFlBQVk7QUFFL0IsUUFBTSxRQUFRLGNBQWMsSUFBSSxPQUFPO0FBRXZDLFFBQU0sQ0FBQyxjQUFjLGVBQWUsSUFBSTtBQUFBLElBQ3RDLFdBQVcsTUFBTSxJQUFJLEVBQUUsT0FBTztBQUFBLEVBQ2hDO0FBRUEsUUFBTSxJQUFJLEVBQUUsUUFBUSxtQkFBbUIsQ0FBQyxNQUFNO0FBQzVDLG9CQUFnQixXQUFXLEVBQUUsT0FBTyxDQUFDO0FBQUEsRUFDdkMsQ0FBQztBQXVCRCxTQUNFLG9CQUFDLFNBQUksYUFBYUEsS0FBSSxZQUFZLFVBQ2hDLDhCQUFDLE9BQUksTUFBTSxjQUNSLFdBQUMsV0FBVztBQUNYLFdBQU8sb0JBQUMsbUJBQWdCLFFBQWdCO0FBQUEsRUFDMUMsR0FDRixHQUNGO0FBRUo7QUFFQSxJQUFPLHNCQUFROzs7QUMzSGYsT0FBT0UsWUFBVztBQUlsQixJQUFNLHVCQUF1QixDQUFDLEVBQUUsS0FBSyxNQUFxQztBQUN4RSxRQUFNLFVBQVUsY0FBYyxNQUFNLFNBQVM7QUFDN0MsUUFBTSxlQUFlLGNBQWMsTUFBTSxjQUFjO0FBQ3ZELFFBQU0sVUFBVSxjQUFjLE1BQU0sU0FBUztBQUM3QyxRQUFNLE9BQU8sY0FBYyxNQUFNLE1BQU07QUFDdkMsUUFBTSxVQUFVLGNBQWMsTUFBTSxTQUFTO0FBRTdDLFFBQU0sV0FBVyxlQUFlLENBQUMsU0FBUyxZQUFZLEdBQUcsQ0FBQyxHQUFHLE1BQU0sS0FBSyxDQUFDO0FBRXpFLFFBQU0sY0FBYyxRQUFRLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQztBQUN6QyxRQUFNLGVBQWUsUUFBUSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsQ0FBQztBQUVoRCxTQUNFO0FBQUEsSUFBQztBQUFBO0FBQUEsTUFDQyxTQUFTLFFBQVE7QUFBQSxNQUNqQixPQUFNO0FBQUEsTUFDTixTQUFPO0FBQUEsTUFDUCxhQUFhQyxLQUFJLFlBQVk7QUFBQSxNQUU3QjtBQUFBLDZCQUFDLFNBQUksU0FBUyxRQUFRLFFBQ3BCO0FBQUE7QUFBQSxZQUFDO0FBQUE7QUFBQSxjQUNDLFNBQVMsU0FBUyxDQUFDLE1BQU07QUFDdkIsdUJBQU8sQ0FBQyxDQUFDO0FBQUEsY0FDWCxDQUFDO0FBQUEsY0FDRCxLQUFLO0FBQUEsY0FDTCxjQUFhO0FBQUEsY0FDYixNQUFNO0FBQUEsY0FDTixlQUFlO0FBQUEsY0FDZixjQUFjO0FBQUE7QUFBQSxVQUNoQjtBQUFBLFVBRUE7QUFBQSxZQUFDO0FBQUE7QUFBQSxjQUNDLGFBQWFBLEtBQUksWUFBWTtBQUFBLGNBQzdCLFFBQVFBLEtBQUksTUFBTTtBQUFBLGNBQ2xCLFNBQU87QUFBQSxjQUVQO0FBQUEscUNBQUMsU0FBSSxTQUFTLFFBQVEsT0FDcEI7QUFBQTtBQUFBLG9CQUFDO0FBQUE7QUFBQSxzQkFDQyxTQUFPO0FBQUEsc0JBQ1AsU0FBUyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztBQUFBLHNCQUMzQixPQUFPO0FBQUEsc0JBQ1AsT0FBTTtBQUFBLHNCQUNOLE1BQUk7QUFBQSxzQkFDSixXQUFXQyxPQUFNLGNBQWM7QUFBQSxzQkFDL0IsWUFBWTtBQUFBLHNCQUNaLFFBQVE7QUFBQSxzQkFDUixlQUFlO0FBQUEsc0JBQ2YsT0FBTztBQUFBLHNCQUNQLFFBQVFELEtBQUksTUFBTTtBQUFBO0FBQUEsa0JBQ3BCO0FBQUEsa0JBRUE7QUFBQSxvQkFBQztBQUFBO0FBQUEsc0JBQ0MsVUFBUztBQUFBLHNCQUNULE9BQU07QUFBQSxzQkFDTixXQUFXLE1BQU07QUFDZiw2QkFBSyxRQUFRO0FBQUEsc0JBQ2Y7QUFBQTtBQUFBLGtCQUNGO0FBQUEsbUJBQ0Y7QUFBQSxnQkFFQTtBQUFBLGtCQUFDO0FBQUE7QUFBQSxvQkFDQyxPQUFPLEtBQUs7QUFBQSxvQkFDWixTQUFTLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0FBQUEsb0JBQ3hCLE1BQUk7QUFBQSxvQkFDSixXQUFXQyxPQUFNLGNBQWM7QUFBQSxvQkFDL0IsWUFBWTtBQUFBLG9CQUNaLGVBQWU7QUFBQSxvQkFDZixRQUFRRCxLQUFJLE1BQU07QUFBQSxvQkFDbEIsUUFBUTtBQUFBLG9CQUNSLE9BQU87QUFBQTtBQUFBLGdCQUNUO0FBQUE7QUFBQTtBQUFBLFVBQ0Y7QUFBQSxXQUNGO0FBQUEsUUFFQSxvQkFBQyxTQUFJLFNBQVMsYUFBYSxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsR0FBRyxTQUFTLFFBQVEsUUFDaEUsOEJBQUMsT0FBSSxNQUFNLGNBQ1IsV0FBQyxXQUFXO0FBQ1gsaUJBQ0Usb0JBQUMsWUFBTyxTQUFPLE1BQUMsV0FBVyxNQUFNLEtBQUssT0FBTyxPQUFPLEVBQUUsR0FDcEQsOEJBQUMsV0FBTSxPQUFPLE9BQU8sT0FBTyxRQUFRQSxLQUFJLE1BQU0sUUFBUSxTQUFPLE1BQUMsR0FDaEU7QUFBQSxRQUVKLEdBQ0YsR0FDRjtBQUFBO0FBQUE7QUFBQSxFQUNGO0FBRUo7QUFFQSxJQUFPLCtCQUFROzs7QUN6RmYsSUFBTSxtQkFBbUIsQ0FBQztBQUFBLEVBQ3hCO0FBQ0YsTUFFTTtBQUNKLFNBQ0Usb0JBQUMsU0FBSSxhQUFhRSxLQUFJLFlBQVksVUFDaEMsOEJBQUNBLEtBQUksZ0JBQUosRUFBbUIsa0JBQWtCLEtBQUssa0JBQWtCLEtBQzNELDhCQUFDQSxLQUFJLFVBQUosRUFDQywrQkFBQyxTQUFJLGFBQWFBLEtBQUksWUFBWSxVQUNoQztBQUFBLHdCQUFDLE9BQUksTUFBTSxlQUNSLFdBQUMsU0FBUyxvQkFBQyxnQ0FBcUIsTUFBWSxHQUMvQztBQUFBLElBRUE7QUFBQSxNQUFDO0FBQUE7QUFBQSxRQUNDLFNBQU87QUFBQSxRQUNQLFFBQVFBLEtBQUksTUFBTTtBQUFBLFFBQ2xCLFFBQVFBLEtBQUksTUFBTTtBQUFBLFFBQ2xCLFNBQU87QUFBQSxRQUNQLFNBQVMsY0FBYyxDQUFDLE1BQU0sRUFBRSxXQUFXLENBQUM7QUFBQSxRQUU1Qyw4QkFBQyxXQUFNLE9BQU0sc0JBQXFCO0FBQUE7QUFBQSxJQUNwQztBQUFBLEtBQ0YsR0FDRixHQUNGLEdBQ0Y7QUFFSjtBQUVBLElBQU0saUJBQWlCLE1BQU07QUFDM0IsU0FBTyxvQkFBQyx1QkFBWTtBQUN0QjtBQUVBLElBQU0sVUFBVSxNQUFNO0FBQ3BCLE1BQUk7QUFDSixNQUFJO0FBRUosUUFBTSxFQUFFLGNBQWMsSUFBSSxpQkFBaUIsRUFBRSxvQkFBb0IsTUFBTSxDQUFDO0FBRXhFLFNBQ0UscUJBQUMsU0FBSSxhQUFhQSxLQUFJLFlBQVksVUFBVSxlQUFlLEtBQ3pEO0FBQUE7QUFBQSxNQUFDQSxLQUFJO0FBQUEsTUFBSjtBQUFBLFFBQ0MsR0FBRyxDQUFDLE1BQU07QUFDUixxQkFBVztBQUFBLFFBQ2I7QUFBQSxRQUNBO0FBQUE7QUFBQSxJQUNGO0FBQUEsSUFDQTtBQUFBLE1BQUNBLEtBQUk7QUFBQSxNQUFKO0FBQUEsUUFDQyxnQkFBZ0JBLEtBQUksb0JBQW9CO0FBQUEsUUFDeEMsR0FBRyxDQUFDLE1BQU07QUFDUixrQkFBUTtBQUNSLGNBQUksU0FBVSxVQUFTLFVBQVUsQ0FBQztBQUFBLFFBQ3BDO0FBQUEsUUFFQTtBQUFBO0FBQUEsWUFBQ0EsS0FBSTtBQUFBLFlBQUo7QUFBQSxjQUNDLE1BQUs7QUFBQSxjQUNMLE9BQU07QUFBQSxjQUNOLFVBQVM7QUFBQSxjQUNULGdCQUFnQixjQUFjLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQztBQUFBLGNBRWpELE9BQU8sb0JBQUMsb0JBQWlCLGVBQThCO0FBQUE7QUFBQSxVQUN6RDtBQUFBLFVBQ0E7QUFBQSxZQUFDQSxLQUFJO0FBQUEsWUFBSjtBQUFBLGNBQ0MsTUFBSztBQUFBLGNBQ0wsVUFBUztBQUFBLGNBQ1QsT0FBTTtBQUFBLGNBRU4sT0FBTyxvQkFBQyxrQkFBZTtBQUFBO0FBQUEsVUFDekI7QUFBQTtBQUFBO0FBQUEsSUFDRjtBQUFBLEtBQ0Y7QUFFSjtBQUVBLElBQU0sc0JBQXNCLE1BQU07QUFDaEMsU0FDRSxvQkFBQyxhQUFRLGNBQWMsS0FDckIsOEJBQUMsV0FBUSxHQUNYO0FBRUo7QUFFQSxJQUFPLDhCQUFROzs7QUxoRmYsSUFBTSxjQUFjO0FBRXBCLElBQU0sWUFBWSxDQUFDLFdBQTZCO0FBQzlDLFNBQU8sS0FBSyxPQUFPLE9BQU8sVUFBVSxLQUFLLEdBQUc7QUFDOUM7QUFFQSxJQUFNLFlBQVksQ0FBQyxXQUE2QjtBQUM5QyxTQUFPLE9BQU8sZ0JBQWdCO0FBQ2hDO0FBRUEsSUFBTSxxQkFBcUIsQ0FDekIsVUFDQSxLQUNBLE9BQ0c7QUFDSCxRQUFNLGdCQUFnQixVQUFVLFFBQVE7QUFFeEMsTUFBSSxLQUFLLEdBQUc7QUFDVixhQUFTLFlBQVksZ0JBQWdCLEtBQUssR0FBRztBQUFBLEVBQy9DLFdBQVcsZ0JBQWdCLE9BQU8sZ0JBQWdCLEtBQUs7QUFDckQsYUFBUyxZQUFZLGdCQUFnQixLQUFLLEdBQUc7QUFBQSxFQUMvQztBQUNGO0FBRUEsSUFBTSxnQkFBZ0IsTUFBTTtBQUMxQixRQUFNLFlBQVksZUFBZSxZQUFZO0FBQzdDLFFBQU0sY0FBYyxjQUFjLFdBQVcsY0FBYztBQUMzRCxRQUFNLFlBQVksY0FBYyxXQUFXLFlBQVk7QUFDdkQsUUFBTSxVQUFVLGNBQWMsV0FBVyxTQUFTO0FBRWxELFFBQU0sV0FBVztBQUFBLElBQ2YsQ0FBQyxhQUFhLFdBQVcsT0FBTztBQUFBLElBQ2hDLENBQUMsdUJBQXVCLG9CQUFvQixxQkFBcUI7QUFDL0QsVUFBSSxxQkFBcUIsUUFBUSxxQkFBcUIsUUFBVztBQUMvRCxlQUFPO0FBQUEsTUFDVDtBQUVBLFVBQUksdUJBQXVCLE9BQU87QUFDaEMsZUFBTztBQUFBLE1BQ1Q7QUFFQSxhQUFPO0FBQUEsSUFDVDtBQUFBLEVBQ0Y7QUFFQSxRQUFNLGNBQWM7QUFBQSxJQUNsQixDQUFDLGFBQWEsV0FBVyxPQUFPO0FBQUEsSUFDaEMsQ0FBQyxRQUFRLE9BQU9DLGFBQVk7QUFDMUIsVUFBSSxDQUFDQSxTQUFTLFFBQU87QUFDckIsVUFBSSxDQUFDLE1BQU8sUUFBTztBQUNuQixhQUFPLFNBQVMsd0JBQXdCO0FBQUEsSUFDMUM7QUFBQSxFQUNGO0FBRUEsU0FDRTtBQUFBLElBQUM7QUFBQTtBQUFBLE1BQ0M7QUFBQSxNQUNBLE9BQU8sWUFBWSxDQUFDLE1BQU8sSUFBSSxjQUFjLEVBQUc7QUFBQSxNQUNoRDtBQUFBO0FBQUEsRUFDRjtBQUVKO0FBRUEsSUFBTSxjQUFjLE1BQU07QUFDeEIsUUFBTSxVQUFVLGFBQWEsWUFBWTtBQUV6QyxRQUFNLFNBQVMsY0FBYyxTQUFTLFFBQVE7QUFDOUMsUUFBTSxVQUFVLGNBQWMsU0FBUyxTQUFTO0FBQ2hELFFBQU0sZUFBZSxjQUFjLFNBQVMsY0FBYztBQUMxRCxRQUFNLFFBQVEsY0FBYyxTQUFTLE9BQU87QUFDNUMsUUFBTSxPQUFPLGNBQWMsU0FBUyxNQUFNO0FBRTFDLFFBQU0sQ0FBQyxjQUFjLGVBQWUsSUFBSTtBQUFBLElBQ3RDLEtBQUssSUFBSSxFQUFFLGFBQWEsS0FBSztBQUFBLEVBQy9CO0FBRUEsUUFBTSxDQUFDLFFBQVEsU0FBUyxJQUFJO0FBQUEsSUFDMUIsVUFBVSxPQUFPLElBQUksRUFBRSx1QkFBdUIsQ0FBQztBQUFBLEVBQ2pEO0FBRUEsT0FBSyxJQUFJLEVBQUUsUUFBUSxvQkFBb0IsTUFBTTtBQUMzQyxvQkFBZ0IsS0FBSyxJQUFJLEdBQUcsYUFBYSxLQUFLLENBQUM7QUFBQSxFQUNqRCxDQUFDO0FBRUQsU0FBTyxJQUFJLEVBQUUsUUFBUSw4QkFBOEIsQ0FBQyxNQUFNO0FBQ3hELGNBQVUsVUFBVSxFQUFFLHVCQUF1QixDQUFDLENBQUM7QUFBQSxFQUNqRCxDQUFDO0FBRUQsUUFBTSxXQUFXO0FBQUEsSUFDZixDQUFDLFNBQVMsY0FBYyxPQUFPLFlBQVk7QUFBQSxJQUMzQyxDQUFDQyxVQUFTQyxlQUFjQyxRQUFPQyxrQkFBaUI7QUFDOUMsVUFBSUQsV0FBVSxhQUFhLE1BQU0sWUFBWTtBQUMzQyxlQUFPO0FBQUEsTUFDVDtBQUVBLFVBQ0VGLGFBQVksYUFBYSxRQUFRLFFBQ2pDQyxrQkFBaUIsYUFBYSxhQUFhLE1BQzNDO0FBQ0EsWUFBSUUsaUJBQWdCLEdBQUc7QUFDckIsaUJBQU87QUFBQSxRQUNULFdBQVdBLGlCQUFnQixJQUFJO0FBQzdCLGlCQUFPO0FBQUEsUUFDVCxXQUFXQSxpQkFBZ0IsSUFBSTtBQUM3QixpQkFBTztBQUFBLFFBQ1Q7QUFFQSxlQUFPO0FBQUEsTUFDVDtBQUVBLFVBQ0VILGFBQVksYUFBYSxRQUFRLFNBQ2pDQyxrQkFBaUIsYUFBYSxhQUFhLE1BQzNDO0FBQ0EsZUFBTztBQUFBLE1BQ1Q7QUFFQSxVQUNFQSxrQkFBaUIsYUFBYSxhQUFhLFdBQzNDRCxhQUFZLGFBQWEsUUFBUSxTQUNqQztBQUNBLGVBQU87QUFBQSxNQUNUO0FBRUEsYUFBTztBQUFBLElBQ1Q7QUFBQSxFQUNGO0FBRUEsUUFBTSxjQUFjO0FBQUEsSUFDbEIsQ0FBQyxTQUFTLGNBQWMsT0FBTyxNQUFNO0FBQUEsSUFDckMsQ0FBQ0EsVUFBU0MsZUFBY0MsUUFBT0UsWUFBVztBQUN4QyxVQUFJRixXQUFVLGFBQWEsTUFBTSxZQUFZO0FBQzNDLGVBQU87QUFBQSxNQUNUO0FBRUEsVUFDRUYsYUFBWSxhQUFhLFFBQVEsUUFDakNDLGtCQUFpQixhQUFhLGFBQWEsTUFDM0M7QUFDQSxlQUFPRyxVQUFTLGlDQUFpQztBQUFBLE1BQ25EO0FBRUEsVUFDRUosYUFBWSxhQUFhLFFBQVEsU0FDakNDLGtCQUFpQixhQUFhLGFBQWEsTUFDM0M7QUFDQSxlQUFPRyxVQUNILHdDQUNBO0FBQUEsTUFDTjtBQUVBLFVBQUlILGtCQUFpQixhQUFhLGFBQWEsU0FBUztBQUN0RCxlQUFPO0FBQUEsTUFDVDtBQUVBLGFBQU87QUFBQSxJQUNUO0FBQUEsRUFDRjtBQUVBLFNBQ0UscUJBQUMsU0FBSSxTQUFTLFFBQVEsT0FBTyxhQUkzQjtBQUFBLHdCQUFDLFdBQU0sVUFBb0I7QUFBQSxJQUMzQixvQkFBQyxXQUFNLFVBQVUscUJBQXFCLFNBQVMsUUFBUTtBQUFBLEtBQ3pEO0FBRUo7QUFFQSxJQUFNLFlBQVksTUFBTTtBQUN0QixRQUFNLEtBQUtJLFNBQVEsWUFBWTtBQUUvQixRQUFNLG9CQUFvQixjQUFjLElBQUksbUJBQW1CO0FBQy9ELFFBQU0saUJBQWlCLGNBQWMsSUFBSSxnQkFBZ0I7QUFFekQsUUFBTSxDQUFDLGFBQWEsY0FBYyxJQUFJO0FBQUEsSUFDcEMsVUFBVSxlQUFlLElBQUksQ0FBQztBQUFBLEVBQ2hDO0FBRUEsUUFBTSxDQUFDLFdBQVcsWUFBWSxJQUFJO0FBQUEsSUFDaEMsVUFBVSxrQkFBa0IsSUFBSSxDQUFDO0FBQUEsRUFDbkM7QUFDQSxRQUFNLENBQUMsZUFBZSxnQkFBZ0IsSUFBSTtBQUFBLElBQ3hDLFVBQVUsZUFBZSxJQUFJLENBQUM7QUFBQSxFQUNoQztBQUNBLFFBQU0sQ0FBQyxrQkFBa0IsbUJBQW1CLElBQUk7QUFBQSxJQUM5QyxVQUFVLGtCQUFrQixJQUFJLENBQUM7QUFBQSxFQUNuQztBQUVBLFFBQU0sQ0FBQyxjQUFjLGVBQWUsSUFBSTtBQUFBLElBQ3RDLGVBQWUsSUFBSSxFQUFFO0FBQUEsRUFDdkI7QUFFQSxRQUFNLENBQUMsWUFBWSxhQUFhLElBQUksWUFBWSxrQkFBa0IsSUFBSSxFQUFFLElBQUk7QUFDNUUsUUFBTSxDQUFDLFlBQVksYUFBYSxJQUFJO0FBQUEsSUFDbEMsa0JBQWtCLElBQUksRUFBRTtBQUFBLEVBQzFCO0FBRUEsUUFBTSxjQUFjO0FBQUEsSUFDbEIsQ0FBQyxlQUFlLFlBQVk7QUFBQSxJQUM1QixDQUFDLEdBQUdDLGtCQUFpQjtBQUNuQixVQUFJLEtBQUssS0FBS0Esa0JBQWlCLE1BQU07QUFDbkMsZUFBTztBQUFBLE1BQ1QsV0FBVyxLQUFLLElBQUk7QUFDbEIsZUFBTztBQUFBLE1BQ1QsV0FBVyxLQUFLLElBQUk7QUFDbEIsZUFBTztBQUFBLE1BQ1Q7QUFFQSxhQUFPO0FBQUEsSUFDVDtBQUFBLEVBQ0Y7QUFFQSxRQUFNLFlBQVk7QUFBQSxJQUNoQixDQUFDLGtCQUFrQixZQUFZLFVBQVU7QUFBQSxJQUN6QyxDQUFDLEdBQUdDLGdCQUFlO0FBQ2pCLFVBQUlBLGdCQUFlLE1BQU07QUFDdkIsZUFBTztBQUFBLE1BQ1QsV0FBVyxLQUFLLEdBQUc7QUFDakIsZUFBTztBQUFBLE1BQ1QsV0FBVyxLQUFLLElBQUk7QUFDbEIsZUFBTztBQUFBLE1BQ1QsV0FBVyxLQUFLLElBQUk7QUFDbEIsZUFBTztBQUFBLE1BQ1Q7QUFFQSxhQUFPO0FBQUEsSUFDVDtBQUFBLEVBQ0Y7QUFHQSxpQkFBZSxJQUFJLEVBQUUsUUFBUSxrQkFBa0IsQ0FBQyxNQUFNO0FBQ3BELHFCQUFpQixVQUFVLENBQUMsQ0FBQztBQUFBLEVBQy9CLENBQUM7QUFFRCxvQkFBa0IsSUFBSSxFQUFFLFFBQVEsa0JBQWtCLENBQUMsTUFBTTtBQUN2RCx3QkFBb0IsVUFBVSxDQUFDLENBQUM7QUFBQSxFQUNsQyxDQUFDO0FBR0QsaUJBQWUsSUFBSSxFQUFFLFFBQVEsZ0JBQWdCLENBQUMsTUFBTTtBQUNsRCxvQkFBZ0IsRUFBRSxJQUFJO0FBQUEsRUFDeEIsQ0FBQztBQUVELG9CQUFrQixJQUFJLEVBQUUsUUFBUSxnQkFBZ0IsQ0FBQyxNQUFNO0FBQ3JELGtCQUFjLEVBQUUsSUFBSTtBQUFBLEVBQ3RCLENBQUM7QUFHRCxvQkFBa0IsSUFBSSxFQUFFLFFBQVEsaUJBQWlCLENBQUMsTUFBTTtBQUN0RCxrQkFBYyxFQUFFLEtBQUs7QUFBQSxFQUN2QixDQUFDO0FBR0QsaUJBQWUsSUFBSSxFQUFFLFFBQVEsZ0JBQWdCLENBQUMsTUFBTTtBQUNsRCxtQkFBZSxVQUFVLENBQUMsQ0FBQztBQUFBLEVBQzdCLENBQUM7QUFFRCxvQkFBa0IsSUFBSSxFQUFFLFFBQVEsZ0JBQWdCLENBQUMsTUFBTTtBQUNyRCxpQkFBYSxVQUFVLENBQUMsQ0FBQztBQUFBLEVBQzNCLENBQUM7QUFFRCxLQUFHLFFBQVEsU0FBUyxDQUFDLE1BQU07QUFDekIsbUJBQWUsVUFBVSxFQUFFLG9CQUFvQixDQUFDLENBQUM7QUFDakQsaUJBQWEsVUFBVSxFQUFFLHVCQUF1QixDQUFDLENBQUM7QUFBQSxFQUNwRCxDQUFDO0FBRUQsU0FDRSxxQkFBQyxTQUFJLFNBQVMsUUFBUSxRQUNwQjtBQUFBO0FBQUEsTUFBQztBQUFBO0FBQUEsUUFDQyxTQUFTLFFBQVE7QUFBQSxRQUNqQixHQUFHLENBQUMsTUFBTTtBQUNSLGdCQUFNLFVBQVVDLEtBQUksc0JBQXNCO0FBQUEsWUFDeENBLEtBQUksMkJBQTJCO0FBQUEsVUFDakM7QUFFQSxrQkFBUSxRQUFRLFVBQVUsQ0FBQyxJQUFJLElBQUksT0FBTztBQUN4QyxrQkFBTSxXQUFXLGVBQWUsSUFBSTtBQUNwQywrQkFBbUIsVUFBVSxJQUFJLEVBQUU7QUFBQSxVQUNyQyxDQUFDO0FBRUQsWUFBRSxlQUFlLE9BQU87QUFBQSxRQUMxQjtBQUFBLFFBQ0EsYUFBYSxZQUFZLENBQUMsTUFBTTtBQUM5QixpQkFBTyxLQUFLO0FBQUEsUUFDZCxDQUFDO0FBQUEsUUFFRDtBQUFBO0FBQUEsWUFBQztBQUFBO0FBQUEsY0FDQyxPQUFPLGNBQWMsQ0FBQyxNQUFNLEVBQUUsU0FBUyxJQUFJLEdBQUc7QUFBQSxjQUM5QyxTQUFTLGFBQWEsQ0FBQyxNQUFNLE1BQU0sS0FBSztBQUFBO0FBQUEsVUFDMUM7QUFBQSxVQUNBLG9CQUFDLFdBQU0sVUFBVSxhQUFhO0FBQUE7QUFBQTtBQUFBLElBQ2hDO0FBQUEsSUFDQTtBQUFBLE1BQUM7QUFBQTtBQUFBLFFBQ0MsU0FBUyxRQUFRO0FBQUEsUUFDakIsU0FBUyxXQUFXLENBQUMsTUFBTTtBQUN6QixjQUNFLE1BQU1ILFNBQVEsVUFBVSxhQUN4QixNQUFNQSxTQUFRLFVBQVUsT0FDeEI7QUFDQSxtQkFBTztBQUFBLFVBQ1Q7QUFFQSxpQkFBTztBQUFBLFFBQ1QsQ0FBQztBQUFBLFFBRUQ7QUFBQSw4QkFBQ0csS0FBSSxXQUFKLEVBQWMsYUFBYUEsS0FBSSxZQUFZLFVBQVU7QUFBQSxVQUN0RDtBQUFBLFlBQUM7QUFBQTtBQUFBLGNBQ0MsYUFBYSxVQUFVLENBQUMsTUFBTTtBQUM1Qix1QkFBTyxLQUFLO0FBQUEsY0FDZCxDQUFDO0FBQUEsY0FDRCxTQUFTLFFBQVE7QUFBQSxjQUNqQixHQUFHLENBQUMsTUFBTTtBQUNSLHNCQUFNLFVBQVVBLEtBQUksc0JBQXNCO0FBQUEsa0JBQ3hDQSxLQUFJLDJCQUEyQjtBQUFBLGdCQUNqQztBQUVBLHdCQUFRLFFBQVEsVUFBVSxDQUFDLElBQUksSUFBSSxPQUFPO0FBQ3hDLHdCQUFNLFdBQVcsa0JBQWtCLElBQUk7QUFDdkMscUNBQW1CLFVBQVUsSUFBSSxFQUFFO0FBQUEsZ0JBQ3JDLENBQUM7QUFFRCxrQkFBRSxlQUFlLE9BQU87QUFBQSxjQUMxQjtBQUFBLGNBRUE7QUFBQTtBQUFBLGtCQUFDO0FBQUE7QUFBQSxvQkFDQyxPQUFPLGlCQUFpQixDQUFDLE1BQU0sRUFBRSxTQUFTLElBQUksR0FBRztBQUFBLG9CQUNqRCxTQUFTLFdBQVcsQ0FBQyxNQUFNLE1BQU0sS0FBSztBQUFBO0FBQUEsZ0JBQ3hDO0FBQUEsZ0JBQ0Esb0JBQUMsV0FBTSxVQUFVLFdBQVc7QUFBQTtBQUFBO0FBQUEsVUFDOUI7QUFBQTtBQUFBO0FBQUEsSUFDRjtBQUFBLEtBQ0Y7QUFFSjtBQUVBLElBQU0sb0JBQW9CLENBQUMsRUFBRSxTQUFTLE1BQXVDO0FBQzNFLFFBQU0sRUFBRSxlQUFlLFlBQVksSUFBSSxpQkFBaUI7QUFBQSxJQUN0RCxvQkFBb0I7QUFBQSxFQUN0QixDQUFDO0FBRUQsUUFBTSxtQkFBbUIsY0FBYyxDQUFDLE1BQU07QUFDNUMsV0FBTyxFQUFFLFNBQVM7QUFBQSxFQUNwQixDQUFDO0FBRUQsUUFBTSxXQUFXO0FBQUEsSUFDZixDQUFDLGtCQUFrQixRQUFRO0FBQUEsSUFDM0IsQ0FBQ0MsbUJBQWtCQyxjQUFhO0FBQzlCLFVBQUlBLGNBQWEsS0FBTSxRQUFPO0FBQzlCLGFBQU9ELHNCQUFxQixPQUFPLGNBQWM7QUFBQSxJQUNuRDtBQUFBLEVBQ0Y7QUFFQSxTQUNFLG9CQUFDLFNBQUksU0FBUyxRQUFRLFFBS3BCO0FBQUEsSUFBQztBQUFBO0FBQUEsTUFDQyxVQUFVO0FBQUEsUUFBWSxDQUFDLE1BQ3JCLE1BQU0sT0FBTywrQkFBK0I7QUFBQSxNQUM5QztBQUFBLE1BQ0EsT0FBTztBQUFBO0FBQUEsRUFDVCxHQUNGO0FBRUo7QUFFQSxJQUFNLGVBQWUsTUFBTTtBQUN6QixRQUFNLENBQUMsVUFBVSxXQUFXLElBQUksWUFBWSxLQUFLO0FBQ2pELFNBQ0U7QUFBQSxJQUFDO0FBQUE7QUFBQSxNQUNDLE9BQU07QUFBQSxNQUNOLFFBQVE7QUFBQSxNQUNSLGdCQUFnQixNQUFNO0FBQ3BCLG9CQUFZLENBQUMsTUFBTSxDQUFDLENBQUM7QUFBQSxNQUN2QjtBQUFBLE1BRUE7QUFBQSw2QkFBQyxTQUFJLFNBQVMsUUFBUSxRQUNwQjtBQUFBLDhCQUFDLHFCQUFrQixVQUFvQjtBQUFBLFVBQ3ZDLG9CQUFDRCxLQUFJLFdBQUosRUFBYyxhQUFhQSxLQUFJLFlBQVksVUFBVTtBQUFBLFVBQ3RELG9CQUFDLGFBQVU7QUFBQSxVQUNYLG9CQUFDQSxLQUFJLFdBQUosRUFBYyxhQUFhQSxLQUFJLFlBQVksVUFBVTtBQUFBLFVBQ3RELG9CQUFDLGVBQVk7QUFBQSxVQUNiLG9CQUFDQSxLQUFJLFdBQUosRUFBYyxhQUFhQSxLQUFJLFlBQVksVUFBVTtBQUFBLFVBQ3RELG9CQUFDLGlCQUFjO0FBQUEsV0FDakI7QUFBQSxRQUVBLG9CQUFDLCtCQUFvQjtBQUFBO0FBQUE7QUFBQSxFQUN2QjtBQUVKO0FBRUEsSUFBTyx1QkFBUTs7O0FNblpSLElBQU0sMkJBQTJCLGNBR3JDLEVBQUUsWUFBWSxRQUFXLFNBQVMsT0FBVSxDQUFDOzs7QW5Da0JoRCxJQUFNLHNCQUFzQixRQUFRO0FBRXBDLElBQU0sWUFBWSxNQUFNO0FBQ3RCLE1BQUk7QUFDRixVQUFNLENBQUMsSUFBSSxPQUFPLElBQUlHLE9BQUssa0JBQWtCLGlCQUFpQjtBQUM5RCxRQUFJLENBQUMsR0FBSSxRQUFPO0FBRWhCLFVBQU0sT0FBTyxJQUFJLFlBQVksRUFBRSxPQUFPLE9BQU87QUFDN0MsVUFBTSxRQUFRLEtBQUssTUFBTSx1QkFBdUI7QUFDaEQsV0FBTyxRQUFRLE1BQU0sQ0FBQyxJQUFJO0FBQUEsRUFDNUIsUUFBUTtBQUNOLFdBQU87QUFBQSxFQUNUO0FBQ0Y7QUFFQSxJQUFNLGVBQWUsTUFBTTtBQUN6QixRQUFNLENBQUMsY0FBYyxlQUFlLElBQUksWUFBWSxFQUFFO0FBRXRELHdCQUFzQixDQUFDLFVBQVU7QUFDL0Isb0JBQWdCLEtBQUs7QUFBQSxFQUN2QixDQUFDO0FBRUQsU0FDRSxxQkFBQyxhQUNDO0FBQUE7QUFBQSxNQUFDO0FBQUE7QUFBQSxRQUNDLE9BQU07QUFBQSxRQUNOLE9BQU07QUFBQSxRQUNOLGNBQWM7QUFBQSxRQUNkLGVBQWU7QUFBQSxRQUVmO0FBQUEsVUFBQztBQUFBO0FBQUEsWUFDQyxPQUFNO0FBQUEsWUFDTixTQUFPO0FBQUEsWUFDUCxTQUFPO0FBQUEsWUFDUCxVQUFTO0FBQUEsWUFDVCxXQUFXLE1BQU07QUFDZixrQ0FBb0IsTUFBTTtBQUFBLFlBQzVCO0FBQUEsWUFDQSxHQUFHLENBQUMsTUFBTTtBQUNSLG9CQUFNLFVBQVVDLEtBQUksYUFBYSxJQUFJO0FBRXJDLHNCQUFRLFdBQVcsQ0FBQztBQUVwQixzQkFBUSxRQUFRLFlBQVksTUFBTTtBQUNoQyxvQ0FBb0IsTUFBTTtBQUFBLGNBQzVCLENBQUM7QUFFRCxnQkFBRSxlQUFlLE9BQU87QUFBQSxZQUMxQjtBQUFBO0FBQUEsUUFDRjtBQUFBO0FBQUEsSUFDRjtBQUFBLElBRUE7QUFBQSxNQUFDO0FBQUE7QUFBQSxRQUNDLEtBQUs7QUFBQSxRQUNMLE1BQU07QUFBQSxRQUNOLGNBQWM7QUFBQSxRQUNkLGVBQWU7QUFBQSxRQUNmLGNBQWE7QUFBQTtBQUFBLElBQ2Y7QUFBQSxLQUNGO0FBRUo7QUFFQSxJQUFNLHdCQUF3QixDQUFDO0FBQUEsRUFDN0I7QUFBQSxFQUNBO0FBQ0YsTUFHTTtBQUNKLFNBQ0UscUJBQUMsU0FBSSxhQUFhQSxLQUFJLFlBQVksVUFBVSxTQUFTLFFBQVEsUUFDM0Q7QUFBQTtBQUFBLE1BQUNBLEtBQUk7QUFBQSxNQUFKO0FBQUEsUUFDQyxhQUFhQSxLQUFJLFlBQVk7QUFBQSxRQUM3QixTQUFPO0FBQUEsUUFDUCxPQUFPO0FBQUEsUUFDUCxVQUFVO0FBQUEsUUFDVixVQUFVO0FBQUEsUUFDVixVQUFRO0FBQUE7QUFBQSxJQUNWO0FBQUEsSUFDQSxvQkFBQyxXQUFNLFVBQW9CO0FBQUEsS0FDN0I7QUFFSjtBQUVBLElBQU0sZUFBZSxNQUFNO0FBQ3pCLFFBQU0sS0FDSkQsT0FBSyxPQUFPLHFCQUFxQixLQUNqQ0EsT0FBSyxPQUFPLHFCQUFxQixLQUNqQztBQUVGLFFBQU0sYUFBYSxpQkFBaUIsTUFBTTtBQUUxQyxRQUFNLGdCQUFnQixXQUFXLENBQUMsTUFBTTtBQUN0QyxVQUFNLENBQUMsTUFBTSxNQUFNLElBQUksRUFBRSxNQUFNLEdBQUc7QUFDbEMsV0FBTyxFQUFFLE1BQU0sUUFBUSxJQUFJLFFBQVEsVUFBVSxHQUFHO0FBQUEsRUFDbEQsQ0FBQztBQUVELFFBQU0sYUFBYSxXQUFXLElBQUksS0FBTSxNQUFNO0FBQzVDLFVBQU0sTUFBTUEsT0FBSyxTQUFTLGNBQWM7QUFDeEMsVUFBTSxZQUFZLElBQUksT0FBTyxRQUFRO0FBRXJDLFFBQUksQ0FBQyxVQUFXLFFBQU87QUFHdkIsVUFBTSxjQUNKLFdBQVcsT0FBTyxDQUFDLEVBQUUsWUFBWSxJQUFJLFdBQVcsTUFBTSxDQUFDO0FBQ3pELFdBQU87QUFBQSxFQUNULENBQUM7QUFFRCxRQUFNLFNBQVMsVUFBVTtBQUN6QixRQUFNLFNBQVMsV0FBVyxRQUFRLEtBQU8sV0FBVztBQUVwRCxRQUFNLFdBQVcsWUFBWTtBQUM3QixRQUFNLGNBQWMsa0JBQWtCO0FBRXRDLFNBQ0U7QUFBQSxJQUFDO0FBQUE7QUFBQSxNQUNDLGFBQWFDLEtBQUksWUFBWTtBQUFBLE1BQzdCLFNBQVM7QUFBQSxNQUNULE9BQU07QUFBQSxNQUVOO0FBQUE7QUFBQSxVQUFDO0FBQUE7QUFBQSxZQUNDLGFBQWFBLEtBQUksWUFBWTtBQUFBLFlBQzdCLFNBQVM7QUFBQSxZQUNULFNBQU87QUFBQSxZQUVQO0FBQUEsbUNBQUMsU0FBSSxTQUFTLFFBQVEsUUFBUSxTQUFPLE1BQUMsT0FBTSw2QkFDMUM7QUFBQSxvQ0FBQyxnQkFBYTtBQUFBLGdCQUVkO0FBQUEsa0JBQUM7QUFBQTtBQUFBLG9CQUNDLGFBQWFBLEtBQUksWUFBWTtBQUFBLG9CQUM3QixRQUFRQSxLQUFJLE1BQU07QUFBQSxvQkFDbEIsU0FBUyxRQUFRO0FBQUEsb0JBRWpCO0FBQUEsMkNBQUMsU0FBSSxTQUFTLFFBQVEsUUFDcEI7QUFBQSw0Q0FBQyxXQUFNLFVBQVMscUJBQW9CLE9BQU0sZ0JBQWU7QUFBQSx3QkFDekQsb0JBQUMsV0FBTSxPQUFPLElBQUksT0FBTSw0QkFBMkI7QUFBQSx5QkFDckQ7QUFBQSxzQkFDQSxxQkFBQyxTQUFJLFNBQVMsUUFBUSxRQUNwQjtBQUFBLDRDQUFDLFdBQU0sVUFBUyx3QkFBdUIsT0FBTSxtQkFBa0I7QUFBQSx3QkFDL0Qsb0JBQUMsV0FBTSxPQUFPLFFBQVEsT0FBTSw0QkFBMkI7QUFBQSx5QkFDekQ7QUFBQSxzQkFFQSxxQkFBQyxTQUFJLFNBQVMsUUFBUSxRQUNwQjtBQUFBLDRDQUFDLFdBQU0sVUFBUyxzQkFBcUIsT0FBTSxjQUFhO0FBQUEsd0JBQ3hELG9CQUFDLFdBQU0sT0FBTyxRQUFRLE9BQU0sNEJBQTJCO0FBQUEseUJBQ3pEO0FBQUE7QUFBQTtBQUFBLGdCQUNGO0FBQUEsaUJBQ0Y7QUFBQSxjQUVBLHFCQUFDLFNBQUksU0FBUyxxQkFBcUIsU0FBTyxNQUN4QztBQUFBLG9DQUFDLFNBQUksT0FBTSw2QkFBNEIsU0FBTyxNQUFDLFNBQU8sTUFDcEQ7QUFBQSxrQkFBQztBQUFBO0FBQUEsb0JBQ0MsUUFBUUEsS0FBSSxNQUFNO0FBQUEsb0JBQ2xCLFFBQVFBLEtBQUksTUFBTTtBQUFBLG9CQUNsQixhQUFhQSxLQUFJLFlBQVk7QUFBQSxvQkFDN0IsU0FBTztBQUFBLG9CQUVQO0FBQUEsMkNBQUMsU0FBSSxhQUFhQSxLQUFJLFlBQVksVUFDaEM7QUFBQTtBQUFBLDBCQUFDO0FBQUE7QUFBQSw0QkFDQyxPQUFPLGNBQWMsQ0FBQyxNQUFNLEVBQUUsSUFBSTtBQUFBLDRCQUNsQyxPQUFNO0FBQUE7QUFBQSx3QkFDUjtBQUFBLHdCQUVBLG9CQUFDQSxLQUFJLFdBQUosRUFBYztBQUFBLHdCQUVmO0FBQUEsMEJBQUM7QUFBQTtBQUFBLDRCQUNDLE9BQU8sY0FBYyxDQUFDLE1BQU0sRUFBRSxNQUFNO0FBQUEsNEJBQ3BDLE9BQU07QUFBQTtBQUFBLHdCQUNSO0FBQUEseUJBQ0Y7QUFBQSxzQkFFQSxvQkFBQyxXQUFNLE9BQU8sWUFBWSxPQUFNLG9CQUFtQjtBQUFBO0FBQUE7QUFBQSxnQkFDckQsR0FDRjtBQUFBLGdCQUNBLG9CQUFDLFNBQUksT0FBTSxnQkFDVCw4QkFBQ0EsS0FBSSxVQUFKLEVBQWEsY0FBYyxPQUFPLEdBQ3JDO0FBQUEsZ0JBRUEscUJBQUMsU0FBSSxPQUFNLGdCQUFlLFNBQVMsUUFBUSxPQUN6QztBQUFBO0FBQUEsb0JBQUM7QUFBQTtBQUFBLHNCQUNDLFVBQVM7QUFBQSxzQkFDVCxVQUFVLFNBQVMsQ0FBQyxNQUFNLEVBQUUsa0JBQWtCO0FBQUE7QUFBQSxrQkFDaEQ7QUFBQSxrQkFFQTtBQUFBLG9CQUFDO0FBQUE7QUFBQSxzQkFDQyxVQUFTO0FBQUEsc0JBQ1QsVUFBVSxZQUFZLENBQUMsTUFBTSxFQUFFLHFCQUFxQjtBQUFBO0FBQUEsa0JBQ3REO0FBQUEsbUJBQ0Y7QUFBQSxpQkFDRjtBQUFBO0FBQUE7QUFBQSxRQUNGO0FBQUEsUUFFQSxvQkFBQyxTQUFJLE9BQU0sZ0JBQWUsY0FBYyxLQUN0Qyw4QkFBQyxTQUFJLFFBQVFBLEtBQUksTUFBTSxRQUFRLFNBQU8sTUFBQyxTQUFPLE1BQzVDLDhCQUFDLHVCQUFZLFNBQVEsV0FBVSxHQUNqQyxHQUNGO0FBQUE7QUFBQTtBQUFBLEVBQ0Y7QUFFSjtBQUVBLElBQU0sV0FBVyxNQUFNO0FBQ3JCLFNBQ0Usb0JBQUMsU0FBSSxPQUFNLGdCQUNULDhCQUFDLHVCQUFZLFNBQVMsWUFBWSxHQUNwQztBQUVKO0FBRUEsSUFBTSxtQkFBbUIsTUFBTTtBQUM3QixNQUFJO0FBQ0osTUFBSTtBQUVKLFNBQ0Usb0JBQUMsYUFDQywrQkFBQyxTQUFJLGFBQWFBLEtBQUksWUFBWSxVQUNoQztBQUFBO0FBQUEsTUFBQ0EsS0FBSTtBQUFBLE1BQUo7QUFBQSxRQUNDLEdBQUcsQ0FBQyxNQUFNO0FBQ1IscUJBQVc7QUFBQSxRQUNiO0FBQUEsUUFDQTtBQUFBO0FBQUEsSUFDRjtBQUFBLElBQ0E7QUFBQSxNQUFDQSxLQUFJO0FBQUEsTUFBSjtBQUFBLFFBQ0MsZ0JBQWdCQSxLQUFJLG9CQUFvQjtBQUFBLFFBQ3hDLEdBQUcsQ0FBQyxNQUFNO0FBQ1Isa0JBQVE7QUFDUixjQUFJLFNBQVUsVUFBUyxVQUFVLENBQUM7QUFBQSxRQUNwQztBQUFBLFFBRUE7QUFBQTtBQUFBLFlBQUNBLEtBQUk7QUFBQSxZQUFKO0FBQUEsY0FDQyxNQUFLO0FBQUEsY0FDTCxPQUFNO0FBQUEsY0FFTixPQUFPLG9CQUFDLGdCQUFhO0FBQUE7QUFBQSxVQUN2QjtBQUFBLFVBQ0E7QUFBQSxZQUFDQSxLQUFJO0FBQUEsWUFBSjtBQUFBLGNBQ0MsTUFBSztBQUFBLGNBQ0wsT0FBTTtBQUFBLGNBRU4sT0FBTyxvQkFBQyxZQUFTO0FBQUE7QUFBQSxVQUNuQjtBQUFBO0FBQUE7QUFBQSxJQUNGO0FBQUEsS0FDRixHQUNGO0FBRUo7QUFFQSxJQUFNLGtCQUFrQixNQUFNO0FBQzVCLFFBQU0sZUFBZSxzQkFBc0I7QUFDM0MsU0FDRSxxQkFBQyxnQkFDQztBQUFBLHlCQUFDLFNBQUksU0FBUyxRQUFRLFFBQ3BCO0FBQUEsMEJBQUMsV0FBTSxPQUFNLGFBQVk7QUFBQSxNQUN6QjtBQUFBLFFBQUM7QUFBQTtBQUFBLFVBQ0MsVUFBVTtBQUFBLFlBQWEsQ0FBQyxZQUN0QixVQUFVLGFBQWE7QUFBQSxVQUN6QjtBQUFBO0FBQUEsTUFDRjtBQUFBLE9BQ0Y7QUFBQSxJQUVBLG9CQUFDLG9CQUFpQjtBQUFBLEtBQ3BCO0FBRUo7QUFFQSxJQUFNLFVBQVUsTUFBTTtBQUNwQixRQUFNLGFBQWEsaUJBQWlCLGNBQWM7QUFFbEQsU0FDRSxxQkFBQyxnQkFBVyxRQUFRQSxLQUFJLE1BQU0sUUFDNUI7QUFBQSx5QkFBQyxTQUFJLFNBQVMsUUFBUSxRQUNwQjtBQUFBLDBCQUFDLFdBQU0sVUFBUyxrQkFBaUI7QUFBQSxNQUNqQyxvQkFBQyxXQUFNLE9BQU8sWUFBWTtBQUFBLE9BQzVCO0FBQUEsSUFDQSxvQkFBQyxhQUNDLDhCQUFDQSxLQUFJLFVBQUosRUFBYSxHQUNoQjtBQUFBLEtBQ0Y7QUFFSjtBQUVlLFNBQVIsSUFBcUI7QUFBQSxFQUMxQjtBQUFBLEVBQ0E7QUFBQSxFQUNBLFVBQUFDO0FBQUEsRUFDQSxhQUFBQztBQUNGLEdBS0c7QUFDRCxRQUFNLEVBQUUsS0FBSyxNQUFNLE1BQU0sSUFBSUMsT0FBTTtBQUduQyxRQUFNLENBQUMsU0FBUyxVQUFVLElBQUksWUFBWSxLQUFLO0FBRS9DLFFBQU0sRUFBRSxZQUFZLGlCQUFpQixJQUFJLHlCQUF5QixJQUFJO0FBRXRFLFVBQVEsR0FBRyxNQUFNO0FBQ2YsZUFBVyxJQUFJO0FBQUEsRUFDakIsQ0FBQztBQUVELFNBQ0U7QUFBQSxJQUFDO0FBQUE7QUFBQSxNQUNDO0FBQUEsTUFDQSxNQUFNLFlBQVk7QUFBQSxNQUNsQixPQUFNO0FBQUEsTUFDTjtBQUFBLE1BQ0EsYUFBYUEsT0FBTSxZQUFZO0FBQUEsTUFDL0IsT0FBT0EsT0FBTSxNQUFNO0FBQUEsTUFDbkIsUUFBUSxNQUFNLE9BQU87QUFBQSxNQUNyQixhQUFhO0FBQUEsTUFFYiw4QkFBQ0gsS0FBSSxTQUFKLEVBbUJDLDhCQUFDLFNBQ0MsK0JBQUMsZUFBVSxTQUFRLGFBQVksU0FBTyxNQUNwQztBQUFBLDRCQUFDLFNBQUksT0FBTSxTQUNULDhCQUFDLHNCQUFXLFlBQXdCLE9BQWMsR0FDcEQ7QUFBQSxRQUVBLG9CQUFDLFNBQUksT0FBTSxVQUNULDhCQUFDLG1CQUFnQixHQUNuQjtBQUFBLFFBRUEscUJBQUMsU0FBSSxPQUFNLE9BQU0sU0FBUyxRQUFRLE9BQ2hDO0FBQUEsOEJBQUMsZ0JBQUs7QUFBQSxVQUVOLHFCQUFDLFNBQUksU0FBUyxRQUFRLE9BQ3BCO0FBQUE7QUFBQSxjQUFDO0FBQUE7QUFBQSxnQkFDQyxPQUFNO0FBQUEsZ0JBQ04sV0FBVyxZQUFZO0FBQ3JCLHNCQUFJO0FBQ0YsMEJBQU0sVUFBVSxzQ0FBc0M7QUFDdEQsb0JBQUFFLGFBQVksWUFBWSxDQUFDO0FBQUEsa0JBQzNCLFNBQVMsT0FBTztBQUNkLDZCQUFTLEtBQUs7QUFBQSxrQkFDaEI7QUFBQSxnQkFDRjtBQUFBLGdCQUNBLGFBQVk7QUFBQSxnQkFFWiw4QkFBQyxXQUFNLE9BQU9ELFVBQVMsQ0FBQyxNQUFNLGVBQWUsQ0FBQyxDQUFDLEdBQUc7QUFBQTtBQUFBLFlBQ3BEO0FBQUEsWUFFQTtBQUFBLGNBQUM7QUFBQTtBQUFBLGdCQUNDLFVBQVM7QUFBQSxnQkFDVCxPQUFNO0FBQUEsZ0JBQ04sV0FBVyxNQUFNO0FBQ2Ysc0NBQW9CLE1BQU07QUFBQSxnQkFDNUI7QUFBQSxnQkFDQSxHQUFHLENBQUMsTUFBTTtBQUNSLHdCQUFNLFVBQVVELEtBQUksYUFBYSxJQUFJO0FBRXJDLDBCQUFRLFdBQVcsQ0FBQztBQUVwQiwwQkFBUSxRQUFRLFlBQVksTUFBTTtBQUNoQyx3Q0FBb0IsTUFBTTtBQUFBLGtCQUM1QixDQUFDO0FBRUQsb0JBQUUsZUFBZSxPQUFPO0FBQUEsZ0JBQzFCO0FBQUEsZ0JBQ0EsYUFBWTtBQUFBO0FBQUEsWUFDZDtBQUFBLFlBQ0E7QUFBQSxjQUFDO0FBQUE7QUFBQSxnQkFDQyxVQUFTO0FBQUEsZ0JBQ1QsT0FBTTtBQUFBLGdCQUNOLFdBQVcsTUFBTTtBQUNmO0FBQUEsb0JBQ0U7QUFBQTtBQUFBLGtCQUNGO0FBQUEsZ0JBQ0Y7QUFBQSxnQkFDQSxhQUFZO0FBQUE7QUFBQSxZQUNkO0FBQUEsWUFDQTtBQUFBLGNBQUM7QUFBQTtBQUFBLGdCQUNDLFVBQVM7QUFBQSxnQkFDVCxPQUFNO0FBQUEsZ0JBQ04sV0FBVyxNQUFNO0FBQ2Ysd0JBQU0sV0FBVyxzQkFBc0I7QUFFdkMsc0JBQUksQ0FBQyxVQUFVO0FBQ2IsNkJBQVMsYUFBYTtBQUN0QjtBQUFBLGtCQUNGO0FBRUEsdUJBQUssQ0FBQyxVQUFVLFdBQVcsVUFBVSxNQUFNLFFBQVEsQ0FBQztBQUFBLGdCQUN0RDtBQUFBLGdCQUNBLGFBQVk7QUFBQTtBQUFBLFlBQ2Q7QUFBQSxhQUdGO0FBQUEsVUFFQSxvQkFBQyxXQUFRO0FBQUEsVUFFVCxvQkFBQyx3QkFBYTtBQUFBLFVBRWQ7QUFBQSxZQUFDO0FBQUE7QUFBQSxjQUNDLFVBQVM7QUFBQSxjQUNULE9BQU07QUFBQSxjQUNOLFdBQVcsTUFBTTtBQUNmLG1DQUFtQixJQUFJO0FBQUEsY0FDekI7QUFBQTtBQUFBLFVBQ0Y7QUFBQSxXQUNGO0FBQUEsU0FDRixHQUNGLEdBQ0Y7QUFBQTtBQUFBLEVBQ0Y7QUFFSjs7O0FvQ2pjQSxPQUFPSSxlQUFjO0FBQ3JCLE9BQU9DLFVBQVM7OztBQ0poQixJQUFBQyxtQkFBQSxXQUFBQyxZQUFBQyxLQUFBLHNDQUFBQztBQUlBLHdDQUFDLFNBQVMsRUFBRSxXQUFXLHFCQUFxQixDQUFDO0FBQ3RDLElBQU0sMkJBQU4sZUFBdUNELE1BQUFFLFNBQVEsUUFDcERILGFBQUEsQ0FBQyxTQUFTLE1BQU0sSUFDaEIsYUFBQyxTQUFTLE1BQU0sSUFDaEJELG9CQUFBLENBQUMsU0FBUyxNQUFNLElBSDRCRSxLQUFlO0FBQUEsRUFPM0QsWUFBWTtBQUFBLElBQ1Y7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxFQUNGLEdBTUc7QUFDRCxVQUFNO0FBbEJVLGdCQUFPLGtCQUFQQyxRQUFBLFNBQU8sS0FBUCxrQkFBQUEsUUFBQTtBQUNBLGdCQUFPLGtCQUFQQSxRQUFBLFVBQU8sS0FBUCxrQkFBQUEsUUFBQTtBQUNBLHVCQUFjLGtCQUFkQSxRQUFBLFVBQWMsS0FBZCxrQkFBQUEsUUFBQTtBQUVsQixTQUFRLFlBQVI7QUFnQkUsU0FBSyxPQUFPO0FBQ1osU0FBSyxjQUFjO0FBQ25CLFNBQUssT0FBTztBQUNaLFNBQUssWUFBWTtBQUFBLEVBQ25CO0FBQUEsRUFFQSxXQUFXO0FBQ1QsU0FBSyxZQUFZLElBQUk7QUFBQSxFQUN2QjtBQUNGO0FBOUJPQSxTQUFBLGlCQUFBRDtBQUNhLGtCQUFBQyxRQUFBLFdBQWxCRixZQURXO0FBRU8sa0JBQUFFLFFBQUEsV0FBbEIsV0FGVztBQUdPLGtCQUFBQSxRQUFBLGtCQUFsQkgsbUJBSFc7QUFBQSwyQkFBTixrQkFBQUcsUUFBQSwrQkFEUCxzQ0FDYTtBQUFOLGtCQUFBQSxRQUFBLEdBQU07OztBQ0hOLElBQU0sMEJBQTBCLGNBR3BDLEVBQUUsWUFBWSxRQUFXLFNBQVMsT0FBVSxDQUFDOzs7QUZtQmhELElBQU0scUJBQXFCO0FBRTNCLElBQU0sYUFBTixjQUF5QkUsS0FBSSxTQUFTO0FBS3RDO0FBRUEsSUFBTSxpQkFBaUIsQ0FBQyxVQUFvQixVQUE0QjtBQUN0RSxRQUFNLGFBQWEsTUFBTSxZQUFZO0FBRXJDLFNBQU8sU0FBUyxPQUFPLENBQUMsUUFBUTtBQUM5QixVQUFNLE9BQU87QUFHYixXQUFPLEtBQUssU0FBUyxVQUFVO0FBQUEsRUFDakMsQ0FBQztBQUNIO0FBRUEsSUFBTSxxQkFBcUIsQ0FDekIsV0FDQSxZQUNHO0FBQ0gsWUFBVSxXQUFXO0FBRXJCLFVBQVEsUUFBUSxDQUFDLE1BQU07QUFDckIsVUFBTSxPQUFPLElBQUkseUJBQXlCO0FBQUEsTUFDeEMsYUFBYSxFQUFFLGNBQWM7QUFBQSxNQUM3QixNQUFNLEVBQUUsU0FBUztBQUFBLE1BQ2pCLFVBQVUsTUFBTSxFQUFFLE9BQU87QUFBQSxNQUN6QixNQUFNLEVBQUUsZ0JBQWdCO0FBQUEsSUFDMUIsQ0FBQztBQUVELGNBQVUsT0FBTyxJQUFJO0FBQUEsRUFDdkIsQ0FBQztBQUNIO0FBRUEsSUFBTSx5QkFBeUIsQ0FDN0IsV0FDQSxZQUNHO0FBQ0gsWUFBVSxXQUFXO0FBRXJCLFVBQVEsUUFBUSxDQUFDLE1BQU07QUFDckIsVUFBTSxPQUFPLElBQUkseUJBQXlCO0FBQUEsTUFDeEMsYUFBYTtBQUFBLE1BQ2IsTUFBTTtBQUFBLE1BQ04sVUFBVSxNQUFNO0FBQ2Qsc0JBQWMsQ0FBQztBQUFBLE1BQ2pCO0FBQUEsTUFDQSxNQUFNO0FBQUEsSUFDUixDQUFDO0FBRUQsY0FBVSxPQUFPLElBQUk7QUFBQSxFQUN2QixDQUFDO0FBQ0g7QUFFQSxJQUFNLG9CQUFvQixDQUFDQyxVQUF5QjtBQUNsRCxTQUFPQSxNQUNKLFNBQVMsRUFDVCxLQUFLLENBQUMsR0FBRyxNQUFNLEVBQUUsU0FBUyxFQUFFLGNBQWMsRUFBRSxTQUFTLENBQUMsQ0FBQztBQUM1RDtBQUVBLElBQU0sYUFBYSxDQUFDO0FBQUEsRUFDbEI7QUFBQSxFQUNBO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFBQSxFQUVBLE1BQUFBO0FBQ0YsTUFNTTtBQUNKLFFBQU0sWUFBWSxJQUFJQyxLQUFJLFVBQVU7QUFDcEMsUUFBTSxRQUFRLElBQUlGLEtBQUksZ0JBQWdCLEVBQUUsT0FBTyxVQUFVLENBQUM7QUFDMUQsUUFBTSxXQUFXLGVBQWU7QUFFaEMscUJBQW1CLFdBQVcsa0JBQWtCQyxLQUFJLENBQUM7QUFFckQsUUFBTSxlQUFlLFlBQVk7QUFDL0IsVUFBTSxlQUFlLE1BQU0sa0JBQTRDO0FBQ3ZFLFVBQU0sWUFBWSxJQUFJO0FBRXRCLGlCQUFhLFNBQVM7QUFBQSxFQUN4QjtBQUVBLFNBQ0U7QUFBQSxJQUFDO0FBQUE7QUFBQSxNQUNDLGFBQWFELEtBQUksWUFBWTtBQUFBLE1BQzdCLFFBQVFBLEtBQUksTUFBTTtBQUFBLE1BQ2xCLFNBQU87QUFBQSxNQUNQLFNBQU87QUFBQSxNQUVQO0FBQUEsNEJBQUNBLEtBQUksZ0JBQUosRUFBbUIsa0JBQWtCLEtBQUssd0JBQXNCLE1BQy9EO0FBQUEsVUFBQ0EsS0FBSTtBQUFBLFVBQUo7QUFBQSxZQUNDLFNBQU87QUFBQSxZQUNQLEdBQUcsQ0FBQyxNQUFNO0FBQ1IsMEJBQVksQ0FBQztBQUFBLFlBQ2Y7QUFBQSxZQUNBLFlBQVksTUFBTTtBQUNoQiwyQkFBYTtBQUFBLFlBQ2Y7QUFBQSxZQUNBLFdBQVc7QUFBQSxZQUNYLFdBQVc7QUFBQSxZQUNYO0FBQUEsWUFDQSxTQUNFO0FBQUEsY0FBQ0EsS0FBSTtBQUFBLGNBQUo7QUFBQSxnQkFDQyxTQUFTLENBQUMsR0FBRyxNQUFNO0FBQ2pCLHdCQUFNLFdBQVc7QUFFakIsd0JBQU0sVUFBVSxJQUFJQSxLQUFJLElBQUk7QUFBQSxvQkFDMUIsU0FBUyxRQUFRO0FBQUEsa0JBQ25CLENBQUM7QUFFRCx3QkFBTSxXQUFXLElBQUlBLEtBQUksSUFBSTtBQUFBLG9CQUMzQixTQUFTLFFBQVE7QUFBQSxvQkFDakIsYUFBYUEsS0FBSSxZQUFZO0FBQUEsb0JBQzdCLFFBQVFBLEtBQUksTUFBTTtBQUFBLGtCQUNwQixDQUFDO0FBRUQsd0JBQU0sWUFBWSxJQUFJQSxLQUFJLE1BQU07QUFBQSxvQkFDOUIsUUFBUTtBQUFBLGtCQUNWLENBQUM7QUFDRCx3QkFBTSxZQUFZLElBQUlBLEtBQUksTUFBTTtBQUFBLG9CQUM5QixRQUFRO0FBQUEsb0JBQ1IsTUFBTTtBQUFBLG9CQUNOLGVBQWU7QUFBQSxrQkFDakIsQ0FBQztBQUNELHdCQUFNLFFBQVEsSUFBSUEsS0FBSSxNQUFNO0FBQUEsb0JBQzFCLFdBQVc7QUFBQSxrQkFDYixDQUFDO0FBRUQsMkJBQVMsYUFBYTtBQUN0QiwyQkFBUyxhQUFhO0FBQ3RCLDJCQUFTLFNBQVM7QUFDbEIsMkJBQVMsV0FBVztBQUVwQiwyQkFBUyxPQUFPLFNBQVM7QUFDekIsMkJBQVMsT0FBTyxTQUFTO0FBRXpCLDBCQUFRLE9BQU8sS0FBSztBQUNwQiwwQkFBUSxPQUFPLFFBQVE7QUFFdkIsMkJBQVMsVUFBVSxPQUFPO0FBQUEsZ0JBQzVCO0FBQUEsZ0JBQ0EsUUFBUSxDQUFDLEdBQUcsTUFBTTtBQUNoQix3QkFBTSxXQUFXO0FBRWpCLHdCQUFNLFlBQVksU0FBUztBQUMzQix3QkFBTSxZQUFZLFNBQVM7QUFDM0Isd0JBQU0sUUFBUSxTQUFTO0FBQ3ZCLHdCQUFNLE9BQU8sU0FBUyxTQUFtQztBQUV6RCx3QkFBTSxPQUFPLEtBQUs7QUFFbEIsc0JBQUksTUFBTTtBQUNSLHdCQUFJLGNBQWMsRUFBRSxLQUFLLENBQUMsR0FBRztBQUMzQiw0QkFBTSxjQUFjLElBQUk7QUFBQSxvQkFDMUIsT0FBTztBQUNMLDRCQUFNLG1CQUFtQixJQUFJO0FBQUEsb0JBQy9CO0FBQUEsa0JBQ0YsT0FBTztBQUNMLDBCQUFNLFlBQVksS0FBSztBQUFBLGtCQUN6QjtBQUVBLDZCQUFXLFNBQVMsS0FBSyxJQUFJO0FBRTdCLHNCQUFJLEtBQUssTUFBTTtBQUNiLCtCQUFXLFNBQVMsS0FBSyxJQUFJO0FBQUEsa0JBQy9CLE9BQU87QUFDTCw4QkFBVSxZQUFZLEtBQUs7QUFBQSxrQkFDN0I7QUFBQSxnQkFDRjtBQUFBO0FBQUEsWUFDRjtBQUFBO0FBQUEsUUFFSixHQUNGO0FBQUEsUUFFQTtBQUFBLFVBQUNBLEtBQUk7QUFBQSxVQUFKO0FBQUEsWUFDQyxRQUFRQSxLQUFJLE1BQU07QUFBQSxZQUNsQixpQkFBaUIsQ0FBQyxNQUFNO0FBQ3RCLG9CQUFNLE9BQU8sRUFBRSxTQUFTO0FBRXhCLGtCQUFJLEtBQUssV0FBVyxHQUFHLEdBQUc7QUFFeEIsc0JBQU0sQ0FBQyxHQUFHLEdBQUcsSUFBSSxJQUFJLEtBQUssTUFBTSxHQUFHO0FBQ25DLHNCQUFNLFFBQVEsS0FBSyxLQUFLLEdBQUc7QUFFM0Isb0JBQUksTUFBTSxRQUFRO0FBQ2hCO0FBQUEsb0JBQ0U7QUFBQSxvQkFDQSxlQUFlLFVBQVUsS0FBSztBQUFBLGtCQUNoQztBQUFBLGdCQUNGLE9BQU87QUFDTCx5Q0FBdUIsV0FBVyxRQUFRO0FBQUEsZ0JBQzVDO0FBQUEsY0FDRixPQUFPO0FBRUwsb0JBQUksS0FBSyxRQUFRO0FBQ2Ysd0JBQU0sVUFBVUMsTUFBSyxZQUFZLEVBQUUsU0FBUyxDQUFDO0FBQzdDLHFDQUFtQixXQUFXLE9BQU87QUFBQSxnQkFDdkMsT0FBTztBQUNMLHFDQUFtQixXQUFXLGtCQUFrQkEsS0FBSSxDQUFDO0FBQUEsZ0JBQ3ZEO0FBQUEsY0FDRjtBQUFBLFlBQ0Y7QUFBQSxZQUNBLFlBQVksTUFBTTtBQUNoQiwyQkFBYTtBQUFBLFlBQ2Y7QUFBQSxZQUNBLGNBQWMsTUFBTTtBQUNsQiwwQkFBWSxLQUFLO0FBQUEsWUFDbkI7QUFBQSxZQUNBLEdBQUcsQ0FBQyxNQUFNO0FBQ1Isb0JBQU0sZ0JBQWdCRCxLQUFJLG1CQUFtQixJQUFJO0FBRWpELDRCQUFjLFFBQVEsZUFBZSxDQUFDLEdBQUcsV0FBVztBQUNsRCxvQkFBSSxXQUFXLElBQUksVUFBVSxXQUFXLElBQUksVUFBVTtBQUNwRCx5QkFBTztBQUFBLGdCQUNUO0FBRUEsc0JBQU0sUUFBUSxNQUFNLGFBQWE7QUFDakMsb0JBQUksV0FBVztBQUVmLG9CQUFJLFVBQVUsSUFBSSxVQUFVLFFBQVEsR0FBRztBQUNyQyw2QkFBVyxRQUFRO0FBQUEsZ0JBQ3JCLFdBQ0UsVUFBVSxJQUFJLFlBQ2QsUUFBUSxVQUFVLFlBQVksSUFBSSxHQUNsQztBQUNBLDZCQUFXLFFBQVE7QUFBQSxnQkFDckI7QUFFQSxzQkFBTSxZQUFZLFVBQVUsSUFBSTtBQUVoQyx5QkFBUyxJQUFJLEdBQUcsVUFBVSxVQUFVLE1BQU0sSUFBSTtBQUM5Qyx1QkFBTztBQUFBLGNBQ1QsQ0FBQztBQUVELGdCQUFFLGVBQWUsYUFBYTtBQUU5Qiw2QkFBZSxDQUFDO0FBQUEsWUFDbEI7QUFBQTtBQUFBLFFBQ0Y7QUFBQTtBQUFBO0FBQUEsRUFDRjtBQUVKO0FBRUEsSUFBTSxtQkFBbUIsQ0FBQyxFQUFFLFdBQVcsTUFBbUM7QUFDeEUsUUFBTSxFQUFFLE9BQU8sSUFBSUcsT0FBTTtBQUN6QixRQUFNRixRQUFPLG1CQUFtQixFQUFFLFNBQVMsWUFBWSxDQUFDO0FBRXhELFFBQU0sRUFBRSxTQUFTLFdBQVcsSUFBSSx3QkFBd0IsSUFBSTtBQUU1RCxRQUFNLFdBQVdHLFVBQVMsWUFBWTtBQUN0QyxRQUFNLGlCQUFpQixjQUFjLFVBQVUsZ0JBQWdCO0FBRS9ELFFBQU0sQ0FBQyxhQUFhLGNBQWMsSUFBSSxZQUVwQyxNQUFTO0FBQ1gsUUFBTSxDQUFDLFVBQVUsV0FBVyxJQUFJO0FBQUEsSUFDOUI7QUFBQSxFQUNGO0FBQ0EsUUFBTSxDQUFDLGdCQUFnQixpQkFBaUIsSUFBSSxZQUUxQyxNQUFTO0FBRVgsUUFBTSxDQUFDLGFBQWEsY0FBYyxJQUFJLFlBQVksS0FBSztBQUV2RCxRQUFNLFlBQVk7QUFBQSxJQUNoQixDQUFDLFNBQVUsY0FBYztBQUFBLElBQ3pCLENBQUNDLFVBQVNDLG9CQUFtQjtBQUMzQixhQUNFLG9CQUFvQkEsaUJBQWdCLFVBQVUsS0FBS0QsYUFBWTtBQUFBLElBRW5FO0FBQUEsRUFDRjtBQUVBLFFBQU0sY0FBYyxPQUFPLGNBQXVCO0FBQ2hELG1CQUFlLEtBQUs7QUFFcEIsVUFBTSxRQUFRLE1BQU07QUFDbEIsbUJBQWEsS0FBSztBQUNsQixrQkFBWSxJQUFJLEdBQUcsU0FBUyxFQUFFO0FBQUEsSUFDaEM7QUFFQSxRQUFJLFdBQVc7QUFDYixZQUFNO0FBQUEsSUFDUixPQUFPO0FBQ0wsWUFBTSxJQUFJLFFBQVEsQ0FBQyxRQUFRO0FBQ3pCLG1CQUFXLE1BQU07QUFDZixnQkFBTTtBQUNOLGNBQUksSUFBSTtBQUFBLFFBQ1YsR0FBRyxxQkFBcUIsR0FBRztBQUFBLE1BQzdCLENBQUM7QUFBQSxJQUNIO0FBQUEsRUFDRjtBQUVBLFNBQ0U7QUFBQSxJQUFDO0FBQUE7QUFBQSxNQUNDLFNBQVM7QUFBQSxNQUNULE1BQU0sWUFBWTtBQUFBLE1BQ2xCLE9BQU07QUFBQSxNQUNOLFdBQVc7QUFBQSxNQUNYO0FBQUEsTUFDQSxRQUFRO0FBQUEsTUFDUixhQUFhRixPQUFNLFlBQVk7QUFBQSxNQUMvQixhQUFhO0FBQUEsTUFDYixTQUFTQSxPQUFNLFFBQVE7QUFBQSxNQUN2QixpQkFBaUIsQ0FBQyxRQUFRO0FBQ3hCLGNBQU1FLFdBQVUsSUFBSSxXQUFXO0FBRS9CLFlBQUlBLFVBQVM7QUFDWCxzQkFBWSxJQUFJLEdBQUcsV0FBVztBQUM5QixVQUFBSixNQUFLLE9BQU87QUFBQSxRQUNkO0FBRUEsWUFBSUksVUFBUztBQUNYLHlCQUFlQSxRQUFPO0FBQUEsUUFDeEI7QUFBQSxNQUNGO0FBQUEsTUFDQSxHQUFHLENBQUMsTUFBTTtBQUNSLGNBQU0sZUFBZUwsS0FBSSxhQUFhLElBQUk7QUFFMUMscUJBQWEsV0FBVyxDQUFDO0FBRXpCLHFCQUFhLFFBQVEsWUFBWSxDQUFDLFVBQVUsVUFBVSxHQUFHLE1BQU07QUFDN0QsY0FBSSxLQUFLLEdBQ1AsS0FBSztBQUNQLGdCQUFNLFNBQVMsZUFDWixJQUFJLEdBQ0gsc0JBQXNCLGVBQWUsSUFBSSxHQUFJLEdBQUcsQ0FBQztBQUVyRCxjQUFJLE1BQU0sUUFBUSxNQUFNLEtBQUssT0FBTyxDQUFDLEdBQUc7QUFDdEMsaUJBQUssT0FBTyxDQUFDO0FBQ2IsaUJBQUssT0FBTyxDQUFDO0FBQUEsVUFDZjtBQUVBLGdCQUFNLFdBQVcsQ0FBQyxXQUFtQztBQUNuRCxnQkFBSSxDQUFDLE9BQVEsUUFBTztBQUNwQixrQkFBTSxRQUFRLE9BQU8sZUFBZTtBQUNwQyxtQkFDRSxNQUFNLE1BQU0sS0FDWixNQUFNLE1BQU0sS0FDWixNQUFNLE1BQU0sSUFBSSxNQUFNLFNBQ3RCLE1BQU0sTUFBTSxJQUFJLE1BQU07QUFBQSxVQUUxQjtBQUVBLGNBQUksQ0FBQyxTQUFTLFlBQVksSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLFNBQVMsSUFBSSxDQUFDLEdBQUc7QUFDN0Qsd0JBQVksS0FBSztBQUFBLFVBQ25CO0FBQUEsUUFDRixDQUFDO0FBRUQsVUFBRSxlQUFlLFlBQVk7QUFDN0IsMEJBQWtCLENBQUM7QUFBQSxNQUNyQjtBQUFBLE1BRUE7QUFBQSxRQUFDQSxLQUFJO0FBQUEsUUFBSjtBQUFBLFVBQ0M7QUFBQSxVQUNBLGlCQUFpQkEsS0FBSSx1QkFBdUI7QUFBQSxVQUM1QztBQUFBLFVBQ0EsY0FBYztBQUFBLFVBQ2QsZUFBZTtBQUFBLFVBRWY7QUFBQSxZQUFDO0FBQUE7QUFBQSxjQUNDLE9BQU8sWUFBWSxDQUFDLE1BQU8sSUFBSSxlQUFlLGlCQUFrQjtBQUFBLGNBQ2hFLFFBQVFBLEtBQUksTUFBTTtBQUFBLGNBRWxCO0FBQUEsZ0JBQUM7QUFBQTtBQUFBLGtCQUNDO0FBQUEsa0JBQ0E7QUFBQSxrQkFDQTtBQUFBLGtCQUNBO0FBQUEsa0JBQ0EsTUFBTUM7QUFBQTtBQUFBLGNBQ1I7QUFBQTtBQUFBLFVBQ0Y7QUFBQTtBQUFBLE1BQ0Y7QUFBQTtBQUFBLEVBQ0Y7QUFFSjtBQUVBLElBQU8sMkJBQVE7OztBR3RaZixPQUFPLG1CQUFtQjtBQU0xQixJQUFNLFlBQVksQ0FBQztBQUFBLEVBQ2pCO0FBQUEsRUFDQTtBQUFBLEVBQ0E7QUFDRixNQUlNO0FBQ0osU0FDRTtBQUFBLElBQUNNLEtBQUk7QUFBQSxJQUFKO0FBQUEsTUFDQyxZQUFZLE1BQU07QUFDaEIsa0JBQVU7QUFBQSxNQUNaO0FBQUEsTUFFQSwrQkFBQyxTQUNDO0FBQUEsNEJBQUMsV0FBTSxVQUFvQixXQUFXLEtBQUs7QUFBQSxRQUMzQyxvQkFBQyxXQUFNLE9BQWMsU0FBUyxPQUFPO0FBQUEsU0FDdkM7QUFBQTtBQUFBLEVBQ0Y7QUFFSjtBQUVBLElBQU0sb0JBQW9CLENBQUMsRUFBRSxXQUFXLE1BQW1DO0FBQ3pFLFFBQU0sRUFBRSxRQUFRLE1BQU0sT0FBTyxJQUFJLElBQUlDLE9BQU07QUFDM0MsUUFBTSxFQUFFLFlBQVksUUFBUSxJQUFJLHlCQUF5QixJQUFJO0FBQzdELFFBQU0sQ0FBQyxlQUFlLGdCQUFnQixJQUFJLFlBQTJCLElBQUk7QUFFekUsUUFBTSxXQUFXLGNBQWMsWUFBWTtBQUUzQyxRQUFNLGlCQUFpQixjQUFjLFVBQVUsZ0JBQWdCO0FBRS9ELFFBQU0sbUJBQW1CLGVBQWUsQ0FBQyxjQUFlLEdBQUcsQ0FBQyxNQUFNO0FBQ2hFLFdBQU8sb0JBQW9CLEdBQUcsVUFBVTtBQUFBLEVBQzFDLENBQUM7QUFFRCxRQUFNLFVBQVUsTUFBTSxhQUFhLEtBQUs7QUFFeEMsUUFBTSxZQUFZLE9BQU8sWUFBb0I7QUFDM0MsVUFBTSxVQUFVLE9BQU87QUFDdkIsWUFBUTtBQUFBLEVBQ1Y7QUFFQSxTQUNFO0FBQUEsSUFBQztBQUFBO0FBQUEsTUFDQztBQUFBLE1BQ0E7QUFBQSxNQUNBLE1BQU0sWUFBWTtBQUFBLE1BQ2xCLE9BQU07QUFBQSxNQUNOLEdBQUcsQ0FBQyxNQUFNO0FBQ1IsY0FBTSxnQkFBZ0JELEtBQUksbUJBQW1CLElBQUk7QUFFakQsc0JBQWMsUUFBUSxnQkFBZ0IsQ0FBQyxHQUFHLFdBQVc7QUFDbkQsY0FBSSxXQUFXLElBQUksWUFBWTtBQUM3QixtQkFBTztBQUFBLFVBQ1Q7QUFFQSxrQkFBUTtBQUNSLGlCQUFPO0FBQUEsUUFDVCxDQUFDO0FBRUQsVUFBRSxlQUFlLGFBQWE7QUFBQSxNQUNoQztBQUFBLE1BQ0EsYUFBYUMsT0FBTSxZQUFZO0FBQUEsTUFDL0IsUUFBUSxTQUFTLE9BQU8sUUFBUTtBQUFBLE1BQ2hDLFNBQVM7QUFBQSxRQUFpQixDQUFDLE1BQ3pCLElBQUlBLE9BQU0sUUFBUSxZQUFZQSxPQUFNLFFBQVE7QUFBQSxNQUM5QztBQUFBLE1BQ0EsYUFBYTtBQUFBLE1BRWIsOEJBQUMsU0FBSSxTQUFPLE1BQUMsU0FBTyxNQUFDLFNBQVMsa0JBQzVCO0FBQUEsUUFBQztBQUFBO0FBQUEsVUFDQyxhQUFhRCxLQUFJLFlBQVk7QUFBQSxVQUM3QixRQUFRQSxLQUFJLE1BQU07QUFBQSxVQUNsQixRQUFRQSxLQUFJLE1BQU07QUFBQSxVQUNsQixTQUFTLFFBQVE7QUFBQSxVQUVqQjtBQUFBO0FBQUEsY0FBQ0EsS0FBSTtBQUFBLGNBQUo7QUFBQSxnQkFDQyxPQUFNO0FBQUEsZ0JBQ04sUUFBUUEsS0FBSSxNQUFNO0FBQUEsZ0JBQ2xCLFFBQVFBLEtBQUksTUFBTTtBQUFBLGdCQUNsQixTQUFPO0FBQUEsZ0JBQ1AsU0FBTztBQUFBLGdCQUNQLGVBQWU7QUFBQSxnQkFDZixZQUFZO0FBQUEsZ0JBQ1osdUJBQXVCO0FBQUEsZ0JBQ3ZCLHVCQUF1QjtBQUFBLGdCQUN2QixrQkFBa0IsQ0FBQyxJQUFJLGFBQWE7QUFFbEMsMkJBQVMsU0FBUztBQUFBLGdCQUNwQjtBQUFBLGdCQUNBLDJCQUEyQixDQUFDLE1BQU07QUFDaEMsd0JBQU0sV0FBVyxFQUFFLHNCQUFzQixJQUFJLENBQUM7QUFFOUMsc0JBQUksQ0FBQyxVQUFVO0FBQ2IsMkJBQU8saUJBQWlCLElBQUk7QUFBQSxrQkFDOUI7QUFFQSx3QkFBTSxRQUFRLFNBQVMsVUFBVSxHQUFHLGVBQWU7QUFFbkQsc0JBQUksQ0FBQyxPQUFPO0FBQ1YsMkJBQU8saUJBQWlCLElBQUk7QUFBQSxrQkFDOUI7QUFFQSx3QkFBTSxPQUFRLE1BQW9CLFVBQVU7QUFFNUMsbUNBQWlCLElBQUk7QUFBQSxnQkFDdkI7QUFBQSxnQkFDQSxHQUFHLENBQUMsTUFBTTtBQUNSLHdCQUFNLFFBQ0o7QUFBQSxvQkFBQztBQUFBO0FBQUEsc0JBQ0MsVUFBUztBQUFBLHNCQUNULFdBQVcsTUFBTTtBQUNmLGtDQUFVLHVCQUF1QjtBQUFBLHNCQUNuQztBQUFBLHNCQUNBLE9BQU07QUFBQTtBQUFBLGtCQUNSO0FBSUYsb0JBQUUsT0FBTyxLQUFLO0FBQ2Qsb0JBQUU7QUFBQSxvQkFDQTtBQUFBLHNCQUFDO0FBQUE7QUFBQSx3QkFDQyxVQUFTO0FBQUEsd0JBQ1QsV0FBVyxNQUFNO0FBQ2Ysb0NBQVUsdUJBQXVCO0FBQUEsd0JBQ25DO0FBQUEsd0JBQ0EsT0FBTTtBQUFBO0FBQUEsb0JBQ1I7QUFBQSxrQkFDRjtBQUNBLG9CQUFFO0FBQUEsb0JBQ0E7QUFBQSxzQkFBQztBQUFBO0FBQUEsd0JBQ0MsVUFBUztBQUFBLHdCQUNULFdBQVcsTUFBTTtBQUNmLG9DQUFVLG1CQUFtQjtBQUFBLHdCQUMvQjtBQUFBLHdCQUNBLE9BQU07QUFBQTtBQUFBLG9CQUNSO0FBQUEsa0JBQ0Y7QUFDQSxvQkFBRTtBQUFBLG9CQUNBO0FBQUEsc0JBQUM7QUFBQTtBQUFBLHdCQUNDLFVBQVM7QUFBQSx3QkFDVCxXQUFXLE1BQU07QUFDZixvQ0FBVSxxQkFBcUI7QUFBQSx3QkFDakM7QUFBQSx3QkFDQSxPQUFNO0FBQUE7QUFBQSxvQkFDUjtBQUFBLGtCQUNGO0FBQ0Esb0JBQUU7QUFBQSxvQkFDQTtBQUFBLHNCQUFDO0FBQUE7QUFBQSx3QkFDQyxVQUFTO0FBQUEsd0JBQ1QsV0FBVyxNQUFNO0FBQ2Ysb0NBQVUsb0JBQW9CO0FBQUEsd0JBQ2hDO0FBQUEsd0JBQ0EsT0FBTTtBQUFBO0FBQUEsb0JBQ1I7QUFBQSxrQkFDRjtBQUNBLG9CQUFFO0FBQUEsb0JBQ0E7QUFBQSxzQkFBQztBQUFBO0FBQUEsd0JBQ0MsVUFBUztBQUFBLHdCQUNULFdBQVcsTUFBTTtBQUNmLG9DQUFVLGtCQUFrQjtBQUFBLHdCQUM5QjtBQUFBLHdCQUNBLE9BQU07QUFBQTtBQUFBLG9CQUNSO0FBQUEsa0JBQ0Y7QUFFQSxvQkFBRSxXQUFXO0FBR2Isb0JBQUUsYUFBYSxLQUFLO0FBQUEsZ0JBQ3RCO0FBQUE7QUFBQSxZQUNGO0FBQUEsWUFFQTtBQUFBLGNBQUM7QUFBQTtBQUFBLGdCQUNDLE9BQU8sY0FBYyxDQUFDLE1BQU0sS0FBSyxFQUFFO0FBQUEsZ0JBQ25DLE9BQU07QUFBQTtBQUFBLFlBQ1I7QUFBQTtBQUFBO0FBQUEsTUFDRixHQUNGO0FBQUE7QUFBQSxFQUNGO0FBRUo7QUFFQSxJQUFPLDRCQUFROzs7QUMvTGYsT0FBT0UsZUFBYztBQU9yQixJQUFNLGNBQWM7QUFFcEIsSUFBTSxxQkFBcUIsQ0FBQyxFQUFFLFdBQVcsTUFBbUM7QUFDMUUsUUFBTSxFQUFFLEtBQUssTUFBTSxJQUFJQyxPQUFNO0FBQzdCLFFBQU0sRUFBRSxjQUFjLElBQUksaUJBQWlCLEVBQUUsb0JBQW9CLEtBQUssQ0FBQztBQUV2RSxRQUFNLFdBQVdDLFVBQVMsWUFBWTtBQUV0QyxRQUFNLGlCQUFpQixjQUFjLFVBQVUsZ0JBQWdCO0FBRS9ELFFBQU0sWUFBWTtBQUFBLElBQ2hCLENBQUMsZ0JBQWdCLGFBQWE7QUFBQSxJQUM5QixDQUFDLEdBQUdDLG1CQUFrQjtBQUNwQixhQUFPLG9CQUFvQixHQUFHLFVBQVUsS0FBS0EsZUFBYyxTQUFTO0FBQUEsSUFDdEU7QUFBQSxFQUNGO0FBRUEsU0FDRTtBQUFBLElBQUM7QUFBQTtBQUFBLE1BQ0MsU0FBUztBQUFBLE1BQ1QsTUFBTSxZQUFZO0FBQUEsTUFDbEIsT0FBTTtBQUFBLE1BQ047QUFBQSxNQUNBLGFBQWFGLE9BQU0sWUFBWTtBQUFBLE1BQy9CLFFBQVEsTUFBTTtBQUFBLE1BQ2QsYUFBYTtBQUFBLE1BRWI7QUFBQSxRQUFDO0FBQUE7QUFBQSxVQUNDLGFBQWFHLEtBQUksWUFBWTtBQUFBLFVBQzdCLFNBQVMsUUFBUTtBQUFBLFVBQ2pCLGNBQWM7QUFBQSxVQUVkLDhCQUFDLE9BQUksTUFBTSxlQUNSLFdBQUMsU0FBUyxvQkFBQyxnQ0FBcUIsTUFBWSxHQUMvQztBQUFBO0FBQUEsTUFDRjtBQUFBO0FBQUEsRUFDRjtBQUVKO0FBRUEsSUFBTyw2QkFBUTs7O0FDaERmLE9BQU9DLFVBQVM7QUFDaEIsT0FBT0MsWUFBVTtBQUdWLElBQU0sOEJBQThCLE1BQU07QUFDL0MsTUFBSSxPQUFPQSxPQUFLLGdCQUFnQjtBQUFBLElBQzlCQSxPQUFLLG1CQUFtQjtBQUFBLElBQ3hCO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxFQUNGLENBQUM7QUFFRCxNQUFJLE9BQU9ELEtBQUksS0FBSyxhQUFhLElBQUk7QUFFckMsTUFBSTtBQUNGLFFBQUksS0FBSyxhQUFhLElBQUksR0FBRztBQUMzQixXQUFLLE9BQU8sSUFBSTtBQUNoQixZQUFNLGdEQUFnRDtBQUFBLElBQ3hELE9BQU87QUFDTCxZQUFNLDBDQUEwQztBQUFBLElBQ2xEO0FBQUEsRUFDRixTQUFTLEdBQUc7QUFDVixVQUFNLHdCQUF5QixFQUEwQixPQUFPLEVBQUU7QUFBQSxFQUNwRTtBQUNGOzs7QUNiQSxJQUFNLENBQUMscUJBQXFCLHNCQUFzQixJQUFJLFlBQVksS0FBSztBQUN2RSxJQUFNLENBQUMsdUJBQXVCLHdCQUF3QixJQUFJLFlBQVksS0FBSztBQUMzRSxJQUFNLENBQUMsVUFBVSxXQUFXLElBQUksWUFBWSxZQUFZLENBQUM7QUFFekQsWUFBSSxNQUFNO0FBQUEsRUFDUixLQUFLO0FBQUEsRUFDTCxPQUFPO0FBQUEsRUFDUCxnQkFBZ0IsQ0FBQyxTQUFTLFFBQVE7QUFDaEMsUUFBSSxZQUFZLFlBQVksa0JBQWtCO0FBQzVDLDZCQUF1QixJQUFJO0FBQzNCLFVBQUksZUFBZTtBQUNuQjtBQUFBLElBQ0YsV0FBVyxZQUFZLG9CQUFvQjtBQUN6QyxrQkFBWSxZQUFZLENBQUM7QUFDekIsVUFBSSxrQkFBa0I7QUFDdEI7QUFBQSxJQUNGO0FBRUEsUUFBSSxpQkFBaUI7QUFBQSxFQUN2QjtBQUFBLEVBQ0EsT0FBTztBQUNMLGdDQUE0QjtBQUU1QixnQkFBSSxhQUFhLEVBQUUsSUFBSSxDQUFDLFNBQVMsTUFBTTtBQUNyQyxhQUNFO0FBQUEsUUFBQztBQUFBO0FBQUEsVUFDQyxPQUFPO0FBQUEsWUFDTCxTQUFTO0FBQUEsWUFDVCxZQUFZO0FBQUEsVUFDZDtBQUFBLFVBRUMsZ0JBQ0M7QUFBQSxZQUFDO0FBQUE7QUFBQSxjQUNDLE9BQU87QUFBQSxnQkFDTCxTQUFTO0FBQUEsZ0JBQ1QsWUFBWTtBQUFBLGNBQ2Q7QUFBQSxjQUVDLGdCQUFNO0FBQ0wsdUJBQ0UsaUNBQ0U7QUFBQTtBQUFBLG9CQUFDO0FBQUE7QUFBQSxzQkFDQyxZQUFZO0FBQUEsc0JBQ1osT0FBTztBQUFBLHNCQUNQO0FBQUEsc0JBQ0E7QUFBQTtBQUFBLGtCQUNGO0FBQUEsa0JBQ0Esb0JBQUMsNEJBQWlCLFlBQVksU0FBUztBQUFBLGtCQUN2QyxvQkFBQyw2QkFBa0IsWUFBWSxTQUFTO0FBQUEsa0JBQ3hDLG9CQUFDLDhCQUFtQixZQUFZLFNBQVM7QUFBQSxtQkFDM0M7QUFBQSxjQUVKO0FBQUE7QUFBQSxVQUNGO0FBQUE7QUFBQSxNQUVKO0FBQUEsSUFFSixDQUFDO0FBQUEsRUFDSDtBQUNGLENBQUM7IiwKICAibmFtZXMiOiBbIm1vZCIsICJwYXRjaCIsICJBcHBzIiwgIkh5cHJsYW5kIiwgIk1wcmlzIiwgIk5vdGlmZCIsICJUcmF5IiwgIkdPYmplY3QiLCAiR09iamVjdCIsICJHTGliIiwgInNuYWtlaWZ5IiwgInNuYWtlaWZ5IiwgIkdPYmplY3QiLCAic2V0IiwgIkdPYmplY3QiLCAia2V5IiwgIm9iamVjdCIsICJHT2JqZWN0IiwgIm1vZCIsICJHT2JqZWN0IiwgInJlbW92ZSIsICJBc3RhbCIsICJHdGsiLCAiQXN0YWxJTyIsICJBc3RhbElPIiwgImludGVydmFsIiwgInRpbWVvdXQiLCAic2V0IiwgIkdMaWIiLCAiTXByaXMiLCAiR2lvIiwgIkdPYmplY3QiLCAiR0xpYiIsICJHT2JqZWN0IiwgIkdPYmplY3QiLCAiR09iamVjdCIsICJHTGliIiwgIl9hIiwgIkdPYmplY3QiLCAiR2lvIiwgIkdMaWIiLCAiYXBwcyIsICJhcHBzIiwgIkdpbyIsICJHdGsiLCAicCIsICJHaW8iLCAiR0xpYiIsICJHTGliIiwgIkdpbyIsICJwaXhtYXBGaWxlcyIsICJHdGsiLCAiQXN0YWwiLCAiR3RrIiwgIkdpbyIsICJHT2JqZWN0IiwgIkd0ayIsICJHaW8iLCAiY3NzIiwgIkdPYmplY3QiLCAiaW5kZXgiLCAiR3RrIiwgIkFzdGFsIiwgIkd0ayIsICJHdGsiLCAiYWRqdXN0bWVudCIsICJsaW1pdCIsICJ2YWx1ZSIsICJHdGsiLCAicGxheWJhY2tTdGF0dXMiLCAiTXByaXMiLCAibGVuZ3RoIiwgInBvc2l0aW9uIiwgImFkanVzdG1lbnQiLCAiTXByaXMiLCAiR2lvIiwgIkdMaWIiLCAiR2lvIiwgIkdMaWIiLCAiR1RvcCIsICJHTGliIiwgIkh5cHJsYW5kIiwgIl9hIiwgIl9pbml0IiwgIkdPYmplY3QiLCAiaXNGb2N1c2VkIiwgImhhc01vcmVDbGllbnRzIiwgImNsaWVudHMiLCAiSHlwcmxhbmQiLCAiaW5kZXgiLCAiaXRlbXMiLCAia2V5Ym9hcmQiLCAiQXN0YWxXcCIsICJHTGliIiwgIlBhbmdvIiwgIkd0ayIsICJQYW5nbyIsICJQYW5nbyIsICJHdGsiLCAiUGFuZ28iLCAiR3RrIiwgImFkYXB0ZXIiLCAicHJpbWFyeSIsICJjb25uZWN0aXZpdHkiLCAic3RhdGUiLCAid2lmaVN0cmVuZ3RoIiwgImhhc1ZwbiIsICJBc3RhbFdwIiwgInNwZWFrZXJNdXRlZCIsICJtaWNyb011dGVkIiwgIkd0ayIsICJoYXNOb3RpZmljYXRpb25zIiwgImlzT3BlbmVkIiwgIkdMaWIiLCAiR3RrIiwgImtleWJvYXJkIiwgInNldEtleWJvYXJkIiwgIkFzdGFsIiwgIkh5cHJsYW5kIiwgIkdpbyIsICJfZGVza3RvcEljb25fZGVjIiwgIl90ZXh0X2RlYyIsICJfYSIsICJfaW5pdCIsICJHT2JqZWN0IiwgIkd0ayIsICJhcHBzIiwgIkdpbyIsICJBc3RhbCIsICJIeXBybGFuZCIsICJ2aXNpYmxlIiwgImZvY3VzZWRNb25pdG9yIiwgIkd0ayIsICJBc3RhbCIsICJIeXBybGFuZCIsICJBc3RhbCIsICJIeXBybGFuZCIsICJub3RpZmljYXRpb25zIiwgIkd0ayIsICJHaW8iLCAiR0xpYiJdCn0K

EOF

LD_PRELOAD="/usr/lib/libgtk4-layer-shell.so" /usr/bin/gjs -m $file $@